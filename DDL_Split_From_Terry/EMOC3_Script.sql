--<ScriptOptions statementTerminator=";"/>

CREATE TABLESPACE "EMOCMAIN"
	BLOCKSIZE 8192
	LOGGING
	DEFAULT STORAGE (
	INITIAL 65536
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0)
	SEGMENT SPACE MANAGEMENT AUTO;

CREATE SCHEMA AUTHORIZATION "EMOC3";

CREATE SEQUENCE "EMOC3"."MICROSOFTSEQDTPROPERTIES"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 999999999999999999999999999
	START WITH 1;

CREATE SEQUENCE "EMOC3"."REMARKS_SEQ"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 7;

CREATE SEQUENCE "EMOC3"."REPORTSCRITERIA_SEQ"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 1395;

CREATE SEQUENCE "EMOC3"."REPORTS_SEQ"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 861;

CREATE SEQUENCE "EMOC3"."SCHEDULEDEVIATIONS_SEQ"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 75;

CREATE SEQUENCE "EMOC3"."SEQ_AIRCRAFT"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 9925;

CREATE SEQUENCE "EMOC3"."SEQ_AIRCRAFTEXTRACTTRX"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 999999999999999999999999999
	START WITH 4529;

CREATE SEQUENCE "EMOC3"."SEQ_AIRCRAFTMDS"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 3384;

CREATE SEQUENCE "EMOC3"."SEQ_AREAS"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 127;

CREATE SEQUENCE "EMOC3"."SEQ_ARMAMENT"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 839;

CREATE SEQUENCE "EMOC3"."SEQ_ASSIGNMENTS"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 39;

CREATE SEQUENCE "EMOC3"."SEQ_BASEMAPS"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 101;

CREATE SEQUENCE "EMOC3"."SEQ_BRIEFAIRCRAFTSTATUS"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 58472;

CREATE SEQUENCE "EMOC3"."SEQ_BRIEFDEVIATIONS"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 559;

CREATE SEQUENCE "EMOC3"."SEQ_BRIEFFLYINGSCHEDULE"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 8618;

CREATE SEQUENCE "EMOC3"."SEQ_BRIEFFLYINGSTATUS"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 442;

CREATE SEQUENCE "EMOC3"."SEQ_BRIEFHANGARQUEEN"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 3034;

CREATE SEQUENCE "EMOC3"."SEQ_BRIEFMICAPS"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 66640;

CREATE SEQUENCE "EMOC3"."SEQ_BRIEFNEXTWEEKSPLAN"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 23020;

CREATE SEQUENCE "EMOC3"."SEQ_BRIEFPOTHANGARQUEEN"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 895;

CREATE SEQUENCE "EMOC3"."SEQ_BRIEFSCHEDULEOVERVIEW"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 2210;

CREATE SEQUENCE "EMOC3"."SEQ_BRIEFWINGSTATUS"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 1923;

CREATE SEQUENCE "EMOC3"."SEQ_CAUSECODES"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 7039;

CREATE SEQUENCE "EMOC3"."SEQ_CAUSECODETRX"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 999999999999999999999999999
	START WITH 8652;

CREATE SEQUENCE "EMOC3"."SEQ_CHECKLIST"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 787;

CREATE SEQUENCE "EMOC3"."SEQ_COLORRULES"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 1104;

CREATE SEQUENCE "EMOC3"."SEQ_COLORS"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 7864;

CREATE SEQUENCE "EMOC3"."SEQ_COMBATSCLRULES"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 748;

CREATE SEQUENCE "EMOC3"."SEQ_COMBATSCLS"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 554;

CREATE SEQUENCE "EMOC3"."SEQ_CONDITIONCODES"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 2882;

CREATE SEQUENCE "EMOC3"."SEQ_CONDITIONSTATUS"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 952;

CREATE SEQUENCE "EMOC3"."SEQ_CREWCHIEFS"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 1867;

CREATE SEQUENCE "EMOC3"."SEQ_CUSTOMDATA"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 1000000000000000000000000000
	START WITH 169;

CREATE SEQUENCE "EMOC3"."SEQ_CUSTOMDATALISTITEM"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 1000000000000000000000000000
	START WITH 129;

CREATE SEQUENCE "EMOC3"."SEQ_DEVIATIONABORT"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 2099;

CREATE SEQUENCE "EMOC3"."SEQ_DEVIATIONCODES"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 1414;

CREATE SEQUENCE "EMOC3"."SEQ_DEVIATIONCODETRX"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 999999999999999999999999999
	START WITH 1577;

CREATE SEQUENCE "EMOC3"."SEQ_DEVIATIONCORRECTION"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 632;

CREATE SEQUENCE "EMOC3"."SEQ_DEVIATIONDELETE"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 1133;

CREATE SEQUENCE "EMOC3"."SEQ_DEVIATIONSTARTSTOP"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 9524;

CREATE SEQUENCE "EMOC3"."SEQ_EMOCAPPCONFIGURATION"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 3;

CREATE SEQUENCE "EMOC3"."SEQ_EMOCCONFIG"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 999999999999999999999999999
	START WITH 142;

CREATE SEQUENCE "EMOC3"."SEQ_EMOCHELP"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 999999999999999999999999999
	START WITH 0;

CREATE SEQUENCE "EMOC3"."SEQ_EQUIPLOCATIONUPDATE"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 999999999999999999999999999
	START WITH 6762;

CREATE SEQUENCE "EMOC3"."SEQ_FIELDNAMES"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 1;

CREATE SEQUENCE "EMOC3"."SEQ_FIRESYMBOLS"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 247;

CREATE SEQUENCE "EMOC3"."SEQ_FLIGHTS"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 1421;

CREATE SEQUENCE "EMOC3"."SEQ_FUELS"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 991;

CREATE SEQUENCE "EMOC3"."SEQ_GAINLOSSSTATUSUPDATE"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 999999999999999999999999999
	START WITH 956;

CREATE SEQUENCE "EMOC3"."SEQ_GEOLOCCODETRX"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 999999999999999999999999999
	START WITH 211702;

CREATE SEQUENCE "EMOC3"."SEQ_HANGARQUEEN"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 702;

CREATE SEQUENCE "EMOC3"."SEQ_ICONTROL"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 9999999999
	START WITH 200;

CREATE SEQUENCE "EMOC3"."SEQ_IMDSCDBELCUNITOPTION"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 999999999999999999999999999
	START WITH 0;

CREATE SEQUENCE "EMOC3"."SEQ_IMDSCDBINTERFACEOPTION"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 999999999999999999999999999
	START WITH 0;

CREATE SEQUENCE "EMOC3"."SEQ_IMDSLOGINS"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 999999999999999999999999999
	START WITH 717;

CREATE SEQUENCE "EMOC3"."SEQ_INTERFACECONTROL"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 119;

CREATE SEQUENCE "EMOC3"."SEQ_INTERFACEITEMS"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 119;

CREATE SEQUENCE "EMOC3"."SEQ_INTERFACELOG"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 38763;

CREATE SEQUENCE "EMOC3"."SEQ_INVENTORYSTATUSUPDATE"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 999999999999999999999999999
	START WITH 736;

CREATE SEQUENCE "EMOC3"."SEQ_JOAPS"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 1936;

CREATE SEQUENCE "EMOC3"."SEQ_LANDINGCODES"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 971;

CREATE SEQUENCE "EMOC3"."SEQ_LINKS"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 9999999999
	START WITH 146;

CREATE SEQUENCE "EMOC3"."SEQ_LOCATIONCODETRX"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 999999999999999999999999999
	START WITH 165408;

CREATE SEQUENCE "EMOC3"."SEQ_LOCATIONS"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 107221;

CREATE SEQUENCE "EMOC3"."SEQ_MAINTENANCEEVENT"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 999999999999999999999999999
	START WITH 153;

CREATE SEQUENCE "EMOC3"."SEQ_MAJCOMS"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 169;

CREATE SEQUENCE "EMOC3"."SEQ_MAJORCOMMANDCODETRX"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 999999999999999999999999999
	START WITH 5995;

CREATE SEQUENCE "EMOC3"."SEQ_MDSEQUIPMENTTRX"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 999999999999999999999999999
	START WITH 541;

CREATE SEQUENCE "EMOC3"."SEQ_MESSAGES"
	INCREMENT BY 1
	MINVALUE 2
	MAXVALUE 9999999999
	START WITH 415;

CREATE SEQUENCE "EMOC3"."SEQ_MICAPTRX"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 999999999999999999999999999
	START WITH 37630;

CREATE SEQUENCE "EMOC3"."SEQ_MISSIONS"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 109;

CREATE SEQUENCE "EMOC3"."SEQ_MOCADMIN"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 999999999999999999999999999
	START WITH 893;

CREATE SEQUENCE "EMOC3"."SEQ_MOCS"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 999999999999999999999999999
	START WITH 147;

CREATE SEQUENCE "EMOC3"."SEQ_MOCUSERS"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 999999999999999999999999999
	START WITH 2679;

CREATE SEQUENCE "EMOC3"."SEQ_OELTRANSACTIONID"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 6223;

CREATE SEQUENCE "EMOC3"."SEQ_OEUTRANSACTIONID"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 645;

CREATE SEQUENCE "EMOC3"."SEQ_OPEREVENTDELETE"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 1881;

CREATE SEQUENCE "EMOC3"."SEQ_OPEREVENTLOAD"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 28714;

CREATE SEQUENCE "EMOC3"."SEQ_OPEREVENTREPLACEMENT"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 8648;

CREATE SEQUENCE "EMOC3"."SEQ_OPEREVENTUPDATE"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 1493;

CREATE SEQUENCE "EMOC3"."SEQ_ORDNANCE"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 392;

CREATE SEQUENCE "EMOC3"."SEQ_ORGANIZATIONS"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 9999999999
	START WITH 1283;

CREATE SEQUENCE "EMOC3"."SEQ_ORGANIZATIONTRX"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 999999999999999999999999999
	START WITH 1271;

CREATE SEQUENCE "EMOC3"."SEQ_PERMISSIONS"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 7050;

CREATE SEQUENCE "EMOC3"."SEQ_PILOTS"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 3992;

CREATE SEQUENCE "EMOC3"."SEQ_POSSESSIONS"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 6309;

CREATE SEQUENCE "EMOC3"."SEQ_RANGES"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 116;

CREATE SEQUENCE "EMOC3"."SEQ_RANKS"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 3185;

CREATE SEQUENCE "EMOC3"."SEQ_REMARKS"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 9999999999
	START WITH 14482;

CREATE SEQUENCE "EMOC3"."SEQ_SCHEDULE"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 9999999999
	START WITH 45806;

CREATE SEQUENCE "EMOC3"."SEQ_SCHEDULECSV"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 100;

CREATE SEQUENCE "EMOC3"."SEQ_SCHEDULEDEVIATIONS"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 9999999999
	START WITH 9872;

CREATE SEQUENCE "EMOC3"."SEQ_SCHEDULESTATUS"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 9999999999
	START WITH 28295;

CREATE SEQUENCE "EMOC3"."SEQ_SEMEDX"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 995;

CREATE SEQUENCE "EMOC3"."SEQ_SQUADRONS"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 814;

CREATE SEQUENCE "EMOC3"."SEQ_STATIONLOCS"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 7653;

CREATE SEQUENCE "EMOC3"."SEQ_STATUSCODE"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 2114;

CREATE SEQUENCE "EMOC3"."SEQ_STATUSCORRECTION"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 999999999999999999999999999
	START WITH 1871;

CREATE SEQUENCE "EMOC3"."SEQ_STATUSIMAGES"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 999999999999999999999999999
	START WITH 7888;

CREATE SEQUENCE "EMOC3"."SEQ_STATUSRULE"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 6670;

CREATE SEQUENCE "EMOC3"."SEQ_STATUSUPDATE"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 999999999999999999999999999
	START WITH 69938;

CREATE SEQUENCE "EMOC3"."SEQ_STATUSUPDATETRX"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 999999999999999999999999999
	START WITH 38010;

CREATE SEQUENCE "EMOC3"."SEQ_SYMBOLS"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 632;

CREATE SEQUENCE "EMOC3"."SEQ_TBMCSINTERFACELOG"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 999999999999999999999999999
	START WITH 16435;

CREATE SEQUENCE "EMOC3"."SEQ_TRANSACTIONLOG"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 1;

CREATE SEQUENCE "EMOC3"."SEQ_USERALERT"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999999999999999999999
	START WITH 20088;

CREATE SEQUENCE "EMOC3"."SEQ_USERIMAGES"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 1;

CREATE SEQUENCE "EMOC3"."SEQ_USERLINKS"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 9999999999
	START WITH 114;

CREATE SEQUENCE "EMOC3"."SEQ_USERS"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 9999999999
	START WITH 2531;

CREATE SEQUENCE "EMOC3"."SEQ_UTILCODES"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 6166;

CREATE SEQUENCE "EMOC3"."SEQ_UTILIZATIONCODETRX"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 999999999999999999999999999
	START WITH 67275;

CREATE SEQUENCE "EMOC3"."SEQ_UVRCHANGETRX"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 999999999999999999999999999
	START WITH 139;

CREATE SEQUENCE "EMOC3"."SEQ_WEAPONSCLASS"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 148;

CREATE SEQUENCE "EMOC3"."SEQ_WEAPONTYPES"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 378;

CREATE SEQUENCE "EMOC3"."SEQ_WHENDISCCODES"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 150;

CREATE SEQUENCE "EMOC3"."SEQ_WHENDISCCODETRX"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 999999999999999999999999999
	START WITH 3957;

CREATE SEQUENCE "EMOC3"."SEQ_WINGS"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 227;

CREATE SEQUENCE "EMOC3"."SEQ_WORKCENTERS"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 17078;

CREATE SEQUENCE "EMOC3"."SEQ_WORKCENTERTRX"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 999999999999999999999999999
	START WITH 14779;

CREATE SEQUENCE "EMOC3"."SEQ_WORKUNITCODETRX"
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 999999999999999999999999999
	START WITH 1544517;

CREATE SEQUENCE "EMOC3"."SEQ_WUCS"
	INCREMENT BY 1
	MINVALUE 729484
	MAXVALUE 999999999999999999999999999
	START WITH 729895;

CREATE SEQUENCE "EMOC3"."SEQ_WX"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 9999999999
	START WITH 1427;

CREATE SEQUENCE "EMOC3"."SMSTESTBLOBID_SEQ"
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 999999999999
	START WITH 21
	CYCLE;

CREATE TABLE "EMOC3"."ACFTMDSTYPES" (
		"ACFTMDSTYPECD" VARCHAR2(6) NOT NULL,
		"ACFTMDSTYPENM" VARCHAR2(50),
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 10485760
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."AIRCRAFT" (
		"AIRCRAFTID" NUMBER NOT NULL,
		"TAILNUMBER" VARCHAR2(10) NOT NULL,
		"SHORTTAILNUMBER" VARCHAR2(10) NOT NULL,
		"SERIALNUMBER" VARCHAR2(50),
		"AIRCRAFTYEAR" VARCHAR2(4),
		"MISEQUIPID" VARCHAR2(10),
		"SQUADRONID" NUMBER NOT NULL,
		"CREWCHIEFID" NUMBER,
		"LASTFLOWNTIME" DATE,
		"FUELSTATUSTIME" DATE,
		"FUELSTATUSID" NUMBER DEFAULT NULL,
		"LOCATIONID" NUMBER(10 , 0),
		"PHASEDATE" DATE,
		"ETIC" VARCHAR2(9),
		"FCF" NUMBER(1 , 0) DEFAULT 0,
		"OCF" NUMBER(1 , 0) DEFAULT 0,
		"QVI" NUMBER(1 , 0) DEFAULT 0,
		"FIRSTOFFICIAL" VARCHAR2(50),
		"SECONDOFFICIAL" VARCHAR2(50),
		"STATUSCODEID" NUMBER DEFAULT NULL,
		"STATUSCODETIME" DATE,
		"POSSESSIONID" NUMBER,
		"PRIORITY" NUMBER(1 , 0),
		"CONDITIONCODEID" NUMBER DEFAULT NULL,
		"FLIGHTID" NUMBER,
		"CONDITIONCODETIME" DATE,
		"ARM_DEARM" NUMBER(1 , 0) DEFAULT 0,
		"MULTICONFIGID" CHAR(4),
		"STATUSNARRATIVE" VARCHAR2(180),
		"LOCALOPTION" CHAR(8),
		"ASSIGNMENTCMD" CHAR(3),
		"ASSIGNMENTSTATUS" CHAR(2),
		"REPORTDESIG" CHAR(3),
		"RELATEDMDS" CHAR(7),
		"COMMANDCODE" CHAR(3),
		"HANGERQUEENSTATUS" NUMBER(10 , 0),
		"AIRCRAFTMDSID" NUMBER(10 , 0) DEFAULT NULL  NOT NULL,
		"CREWCHIEFLASTUPDATED" DATE,
		"SERIALNUMBERLASTUPDATED" DATE,
		"IMPOUNDSLASTUPDATED" DATE,
		"HQSTATUSLASTUPDATED" DATE,
		"TESTSTATUSLASTUPDATED" DATE,
		"PHASEDATELASTUPDATED" DATE,
		"POSSESSIONCODELASTUPDATED" DATE,
		"ETICLASTUPDATED" DATE,
		"PRIORITYLASTUPDATED" DATE,
		"COMBATSCLID" NUMBER(10 , 0),
		"CHAFF" NUMBER(10 , 0),
		"FLARE" NUMBER(10 , 0),
		"HOTGUNS" NUMBER(10 , 0) DEFAULT 0,
		"WEAPONSSTATUSTIME" DATE,
		"SQPRESELECT" CHAR(2),
		"STATUSCODELASTUPDATED" DATE,
		"LOCATIONLASTUPDATED" DATE,
		"FUELSTATUSLASTUPDATED" DATE,
		"LOCALCONFIGID" CHAR(4),
		"FUELREQUESTEDTIME" DATE,
		"FUELDELIVERYTIME" DATE,
		"PHASEUNITS" NUMBER(10 , 1),
		"AIRCRAFTWUCID" NUMBER(20 , 0),
		"WEAPONSSTATUSLASTUPDATED" DATE,
		"CONDITIONCODELASTUPDATED" DATE,
		"ACFT_CONFIG_ID" CHAR(2),
		"CAMSINIT" DATE,
		"REMARKSID" NUMBER(10 , 0),
		"FUELLOAD" VARCHAR2(10),
		"POSSDATETIME" DATE,
		"ASSIGNSTATDATETIME" DATE,
		"ASSIGNCOMDATETIME" DATE,
		"AIRCONFIGDATETIME" DATE,
		"REPDESIGNDATETIME" DATE,
		"ETICDATETIME" DATE,
		"ASSIGNSTATUSLASTUPDATED" DATE,
		"ASSIGNCOMMANDLASTUPDATED" DATE,
		"SQUADRONLASTUPDATED" DATE,
		"MDSLASTUPDATED" DATE,
		"REPDESIGNLASTUPDATED" DATE,
		"REMARKSLASTUPDATED" DATE,
		"STALOCCODEID" NUMBER(10 , 0),
		"FIRESYMBOLID" NUMBER(10 , 0),
		"AIRCONFIGIDLASTUPDATED" DATE,
		"WUCLASTUPDATED" DATE,
		"TMEFLOWNSINCEPHASEDATE" NUMBER(10 , 1),
		"STATUSSTARTDATE" VARCHAR2(5),
		"STATUSSTARTTIME" VARCHAR2(4),
		"OPENSTATUSEVENTJCN" VARCHAR2(12),
		"STATUSWUCLCN" VARCHAR2(15),
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL,
		"COUNTRYCODE" VARCHAR2(2) DEFAULT 'US'' ' NOT NULL,
		"OWNINGWORKCENTER" VARCHAR2(4),
		"HOMEENTERPRISELOCATIONCODE" VARCHAR2(4),
		"CURRENTENTERPRISELOCATIONCODE" VARCHAR2(4),
		"UNITID" VARCHAR2(1),
		"MISSIONDESIGNSERIES" VARCHAR2(15),
		"MISSIONDESIGNSERIESBLOCK" VARCHAR2(3),
		"LOCATIONCODE" VARCHAR2(10),
		"GEOLOCCODE" VARCHAR2(4),
		"GAINLOSSACTIONCODE" VARCHAR2(2),
		"CHANGEDATE" VARCHAR2(7),
		"CHANGETIME" VARCHAR2(4),
		"GAINLOSSTRANSFEROPTION" VARCHAR2(10),
		"TRANSFERTYPE" VARCHAR2(1),
		"OCCURANCEDATE" VARCHAR2(7),
		"OCCURANCETIME" VARCHAR2(4)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 2097152
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."AIRCRAFTCUSTOMDATA" (
		"AIRCRAFTID" NUMBER(10 , 0) NOT NULL,
		"CUSTOMDATAID" NUMBER(10 , 0) NOT NULL,
		"DATAVALUE" VARCHAR2(50),
		"LASTUPDATED" DATE DEFAULT SYSDATE,
		"LASTUPDATEBY" NUMBER(10 , 0) DEFAULT 0
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."AIRCRAFTENGINEDATA" (
		"ENGINEDATAID" NUMBER(10 , 0) NOT NULL,
		"AIRCRAFTID" NUMBER(10 , 0) NOT NULL,
		"ENGINENUMBER" NUMBER(2 , 0) NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 196608
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."AIRCRAFTEXTRACTTRX" (
		"AIRCRAFTEXTRACTTRXID" NUMBER(20 , 0),
		"FROMENTERPRISELOCATIONCODE" VARCHAR2(4),
		"FROMUNITID" VARCHAR2(1),
		"EQUIPMENTID" VARCHAR2(5),
		"MISSIONDESIGNSERIES" VARCHAR2(15),
		"MISSIONDESIGNSERIESBLOCK" VARCHAR2(3),
		"AIRCRAFTSERIALNUMBER" VARCHAR2(10),
		"MAINTENANCESTATUSCODE" VARCHAR2(4),
		"CONDITIONSTATUSCODE" VARCHAR2(1),
		"STARTDATE" VARCHAR2(10),
		"STARTTIME" VARCHAR2(10),
		"WORKUNITCODE" VARCHAR2(32),
		"JOBCONTROLNUMBER" VARCHAR2(12),
		"ESTIMATEDTIMEINCOMMISSION" VARCHAR2(20),
		"STATUSNARRATIVE" VARCHAR2(40),
		"LOCATIONCODE" VARCHAR2(10),
		"EQUIPMENTORGANIZATIONFLIGHTID" VARCHAR2(4),
		"MAINTENANCEREPAIRPRIORITY" VARCHAR2(1),
		"ARMED" VARCHAR2(1),
		"MULTIPLECONFIGURATIONID" VARCHAR2(10),
		"LOCALOPTION" VARCHAR2(10),
		"ASSIGNMENTSTATUSCODE" VARCHAR2(2),
		"POSSESSIONID" VARCHAR2(2),
		"GEOLOCCODE" VARCHAR2(4),
		"OWNINGMAJCOM" VARCHAR2(3),
		"LASTFLYDATE" VARCHAR2(20),
		"DEDICATEDCREWCHIEF" VARCHAR2(50),
		"DATEPROCESSED" DATE DEFAULT SYSDATE,
		"OWNINGWORKCENTER" VARCHAR2(4)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."AIRCRAFTMDS" (
		"AIRCRAFTMDSID" NUMBER(10 , 0) NOT NULL,
		"AIRCRAFTMDS" VARCHAR2(11),
		"NUMBEROFSTATIONS" NUMBER(10 , 0),
		"NUMBEROFENGINES" NUMBER(10 , 0),
		"TIMEBETWEENPHASE" NUMBER(10 , 0),
		"DEFAULTAIRCRAFTTYPE" NUMBER(1 , 0),
		"BLOCKNUMBER" CHAR(3),
		"PHASEUNIT" NUMBER(1 , 0) DEFAULT 0,
		"CAMSINIT" VARCHAR2(10),
		"ACFTMDSTYPECD" VARCHAR2(6),
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 196608
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."AIRCRAFTSTATUSUPDATE" (
		"STATUSUPDATEID" NUMBER(10 , 0) NOT NULL,
		"UNITID" VARCHAR2(1),
		"EQUIPMENTID" VARCHAR2(5) NOT NULL,
		"MAINTENANCESTATUSCODE" VARCHAR2(4),
		"CONDITIONSTATUSCODE" VARCHAR2(1),
		"STATUSSTARTDATE" VARCHAR2(5),
		"STATUSSTARTTIME" VARCHAR2(4),
		"WORKUNITCODE" VARCHAR2(15),
		"OPENSTATUSEVENT" VARCHAR2(12),
		"ESTIMATEDTIMEINCOMMISSION" VARCHAR2(9),
		"PARTSPLUS" VARCHAR2(4),
		"STATUSNARRATIVE" VARCHAR2(40),
		"LOCATION" VARCHAR2(10),
		"CONFIGURATION" VARCHAR2(4),
		"PRIORITY" VARCHAR2(1),
		"ARM" VARCHAR2(1),
		"MULTIPLECONFIGID" VARCHAR2(4),
		"LOCALOPTION" VARCHAR2(8),
		"ENTERED" DATE DEFAULT SYSDATE,
		"LASTUPDATE" DATE DEFAULT SYSDATE,
		"ENTEREDBY" VARCHAR2(50),
		"UPDATEDBY" VARCHAR2(50),
		"AIRCRAFTID" NUMBER(10 , 0) NOT NULL,
		"INTERFACELOGID" NUMBER(10 , 0),
		"PREVCONDITIONCODEID" NUMBER(10 , 0),
		"PREVSTARTDATE" VARCHAR2(5),
		"PREVSTARTTIME" VARCHAR2(4),
		"PREVWUC" VARCHAR2(15),
		"PREVWUCID" NUMBER(10 , 0),
		"PREVOSE" VARCHAR2(12),
		"PREVETIC" VARCHAR2(9),
		"PREVPARTSPLUS" VARCHAR2(4),
		"PREVNARRATIVE" VARCHAR2(40),
		"PREVMAINTENANCESTATUS" VARCHAR2(4),
		"PREVCONDITIONSTATUS" VARCHAR2(1),
		"PREVLOCATION" VARCHAR2(10),
		"PREVPRIORITY" VARCHAR2(1),
		"PREVARM" VARCHAR2(1),
		"PREVMULTICONFIGID" VARCHAR2(4),
		"PREVLOCALOPTION" VARCHAR2(8),
		"PREVCONFIG" VARCHAR2(4),
		"PREVLOCATIONID" NUMBER(10 , 0),
		"LOCATIONID" NUMBER(10 , 0),
		"PREVMULTIFIGID" VARCHAR2(4),
		"PREVGEOLOCCODE" CHAR(4),
		"GEOLOCCODE" CHAR(4)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 9437184
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."AREAS" (
		"AREAID" NUMBER(10 , 0) NOT NULL,
		"AREA" VARCHAR2(50) NOT NULL,
		"AREADESCRIPTION" VARCHAR2(100),
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."ARMAMENT" (
		"STATION" NUMBER(10 , 0) NOT NULL,
		"ARMAMENTID" NUMBER(10 , 0) NOT NULL,
		"AIRCRAFTMDSID" NUMBER(10 , 0) NOT NULL,
		"ORDNANCEID" NUMBER(10 , 0) NOT NULL,
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."ASSIGNMENTCODES" (
		"ASSIGNMENTCODEID" NUMBER(10 , 0) NOT NULL,
		"ASSIGNMENTCODE" CHAR(2) NOT NULL,
		"ASSIGNMENTDESCRIPTION" VARCHAR2(50),
		"CAMSINIT" DATE,
		"DEFAULTASSIGNMENT" NUMBER(1 , 0) DEFAULT 0,
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."BASEMAPS" (
		"MAPID" NUMBER NOT NULL,
		"MAPOBJECT" BLOB NOT NULL,
		"MOCID" NUMBER NOT NULL,
		"MIMETYPE" VARCHAR2(50) NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."BRIEF_AIRCRAFT_STATUS" (
		"ACSTATBRIEFID" NUMBER NOT NULL,
		"BRIEFDATE" DATE NOT NULL,
		"ORDERBY" NUMBER,
		"TAILNUMBER" VARCHAR2(8),
		"POSSESSION" VARCHAR2(8),
		"LASTFLYDATE" DATE,
		"DAYSDOWN" VARCHAR2(10),
		"STATUS" VARCHAR2(8),
		"LOCATION" VARCHAR2(10),
		"WUC" VARCHAR2(15),
		"STATUSDATE" DATE,
		"ETIC" VARCHAR2(20),
		"TODAYSFLIGHTS" VARCHAR2(8),
		"TOMMORROWSFLIGHTS" VARCHAR2(8),
		"PRIMARYREMARK" VARCHAR2(180),
		"SECONDARYREMARK" VARCHAR2(4000),
		"MICAP" VARCHAR2(100),
		"JOAP" VARCHAR2(200),
		"REMARK" VARCHAR2(100),
		"SQUADRON" VARCHAR2(50),
		"AIRCRAFTMDS" VARCHAR2(20),
		"SQUADRONID" NUMBER,
		"MOCID" NUMBER
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 3145728
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."BRIEF_DEVIATIONS" (
		"DEVBRIEFID" NUMBER NOT NULL,
		"BRIEFDATE" DATE NOT NULL,
		"SQUADRON" VARCHAR2(50),
		"POSSESSION" VARCHAR2(2),
		"DEVIATION" VARCHAR2(8),
		"CAUSECODE" VARCHAR2(3),
		"TAILNUMBER" VARCHAR2(10),
		"LINENUMBER" VARCHAR2(8),
		"DEVIATIONCODE" VARCHAR2(8),
		"REMARKS" VARCHAR2(100),
		"SPARE" VARCHAR2(1),
		"RR" VARCHAR2(1),
		"CORRECTIVE" VARCHAR2(100),
		"SQUADRONID" NUMBER,
		"MOCID" NUMBER
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."BRIEF_FLYING_SCHEDULE" (
		"FLYSCHEDBRIEFID" NUMBER NOT NULL,
		"BRIEFDATE" DATE NOT NULL,
		"POSSESSION" VARCHAR2(8),
		"LINENUMBER" VARCHAR2(8),
		"TAILNUMBER" VARCHAR2(8),
		"STATUSCODE" VARCHAR2(50),
		"CREWREADY" DATE,
		"CREWSHOW" DATE,
		"TAXI" DATE,
		"SCHEDULEDTO" DATE,
		"ACTUALTO" DATE,
		"SCHEDULEDLAND" DATE,
		"ACTUALLAND" DATE,
		"JOAPCODE" VARCHAR2(10),
		"FUEL" DATE,
		"LANDINGSTATUSCODE" VARCHAR2(8),
		"GROUNDDEVIATION" VARCHAR2(8),
		"AIRDEVIATION" VARCHAR2(8),
		"CAUSECODE" VARCHAR2(8),
		"REMARKS" VARCHAR2(50),
		"CALLSIGN" VARCHAR2(25),
		"ORDERBY" NUMBER,
		"SQUADRON" VARCHAR2(50),
		"SQUADRONID" NUMBER,
		"MOCID" NUMBER
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 327680
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."BRIEF_FLYING_STATUS" (
		"FLYINGSTATUSBRIEFID" NUMBER NOT NULL,
		"BRIEFDATE" DATE NOT NULL,
		"ORDERBY" NUMBER,
		"UNIT" VARCHAR2(50),
		"SQUADRON" VARCHAR2(50),
		"SCHEDULED" VARCHAR2(100),
		"TOTALSORTIES" VARCHAR2(5),
		"CX" VARCHAR2(5),
		"GA" VARCHAR2(5),
		"AD" VARCHAR2(5),
		"F" VARCHAR2(5),
		"SP" VARCHAR2(5),
		"TAKEOFF" DATE,
		"LAND" DATE,
		"UNAVAILABLEAC" VARCHAR2(50),
		"FIRSTTAKEOFF" DATE,
		"LASTLAND" DATE,
		"SQUADRONID" NUMBER,
		"MOCID" NUMBER
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."BRIEF_HANGAR_QUEEN" (
		"HQBRIEFID" NUMBER NOT NULL,
		"SHOW" VARCHAR2(5) NOT NULL,
		"AIRCRAFTMDS" VARCHAR2(11) NOT NULL,
		"TAILNUMBER" VARCHAR2(10) NOT NULL,
		"SQUADRON" VARCHAR2(50) NOT NULL,
		"LASTFLYDATE" DATE,
		"PROJECTED" DATE,
		"HQDATE" DATE,
		"STATUS" VARCHAR2(8),
		"ETIC" VARCHAR2(9),
		"ESTIMATEDFLYDATE" DATE,
		"REMARKS" VARCHAR2(4000),
		"BRIEFDATE" DATE NOT NULL,
		"DAYSDOWN" VARCHAR2(5),
		"SQUADRONID" NUMBER,
		"MOCID" NUMBER
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."BRIEF_MICAPS" (
		"MICAPBRIEFID" NUMBER NOT NULL,
		"BRIEFDATE" DATE NOT NULL,
		"SQUADRON" VARCHAR2(50),
		"TAILNUMBER" VARCHAR2(10),
		"NOUN" VARCHAR2(50),
		"BULLET" VARCHAR2(50),
		"DOCUMENTNUMBER" VARCHAR2(50),
		"STATUS" VARCHAR2(8),
		"STATUSDATE" DATE,
		"IND" VARCHAR2(8),
		"SQUADRONID" NUMBER,
		"MOCID" NUMBER,
		"USERCOMMENT" NVARCHAR2(500)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 589824
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."BRIEF_NEXT_WEEKS_PLAN" (
		"NXTWKSPLANBRIEFID" NUMBER NOT NULL,
		"BRIEFDATE" DATE NOT NULL,
		"WEEKSTART" DATE,
		"WEEKEND" DATE,
		"SQUADRON" VARCHAR2(50),
		"WING" VARCHAR2(50),
		"MONDAY" VARCHAR2(100),
		"TUESDAY" VARCHAR2(100),
		"WEDNESDAY" VARCHAR2(100),
		"THURSDAY" VARCHAR2(100),
		"FRIDAY" VARCHAR2(100),
		"SATURDAY" VARCHAR2(100),
		"SUNDAY" VARCHAR2(100),
		"SQUADRONID" NUMBER,
		"MOCID" NUMBER
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 2097152
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."BRIEF_POT_HANGAR_QUEEN" (
		"POTHQBRIEFID" NUMBER NOT NULL,
		"SHOW" VARCHAR2(5) NOT NULL,
		"AIRCRAFTMDS" VARCHAR2(11) NOT NULL,
		"TAILNUMBER" VARCHAR2(10) NOT NULL,
		"SQUADRON" VARCHAR2(50) NOT NULL,
		"LASTFLYDATE" DATE,
		"PROJECTED" DATE,
		"HQDATE" DATE,
		"STATUS" VARCHAR2(8),
		"ETIC" VARCHAR2(9),
		"ESTIMATEDFLYDATE" DATE,
		"REMARKS" VARCHAR2(4000),
		"BRIEFDATE" DATE NOT NULL,
		"DAYSDOWN" VARCHAR2(5),
		"SQUADRONID" NUMBER,
		"MOCID" NUMBER
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."BRIEF_SCHEDULE_OVERVIEW" (
		"SCHEDOVERBRIEFID" NUMBER NOT NULL,
		"BRIEFDATE" DATE NOT NULL,
		"SQUADRON" VARCHAR2(50),
		"POSSESSION" VARCHAR2(8),
		"LINENUMBER" VARCHAR2(10),
		"TAILNUMBER" VARCHAR2(8),
		"SCHTO" DATE,
		"ACTTO" DATE,
		"LANDSTATUS" VARCHAR2(10),
		"DEVCODE" VARCHAR2(10),
		"EFFECTIVE" VARCHAR2(10),
		"SPARE" VARCHAR2(5),
		"REMARKS" VARCHAR2(4000),
		"CORRECTIVE" VARCHAR2(100),
		"SQUADRONID" NUMBER,
		"AIRCRAFTMDS" VARCHAR2(11),
		"MOCID" NUMBER
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 196608
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."BRIEF_WING_STATUS" (
		"WINGSTATUSBRIEFID" NUMBER NOT NULL,
		"BRIEFDATE" DATE NOT NULL,
		"POSSESSION" VARCHAR2(10),
		"AUTHORIZED" NUMBER,
		"ASSIGNED" NUMBER,
		"CUMPERCENT" NUMBER,
		"CMDSTDPERCENT" NUMBER,
		"FMC" NUMBER,
		"NM" NUMBER,
		"NS" NUMBER,
		"NB" NUMBER,
		"PM" NUMBER,
		"PS" NUMBER,
		"PB" NUMBER,
		"MC" NUMBER,
		"NONPOSS" NUMBER,
		"NONCOMPOSS" NUMBER,
		"COMPOSS" NUMBER,
		"TX" NUMBER,
		"SQUADRON" VARCHAR2(50),
		"WING" VARCHAR2(50),
		"SQUADRONID" NUMBER,
		"MOCID" NUMBER
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."CAUSECODES" (
		"CAUSECODEID" NUMBER(10 , 0) NOT NULL,
		"CAUSECODE" VARCHAR2(3) NOT NULL,
		"DESCRIPTION" VARCHAR2(50),
		"DEFAULTCAUSECODE" NUMBER(1 , 0) DEFAULT NULL,
		"CAMSINIT" DATE,
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL,
		"CAUSECODETYPE" VARCHAR2(1) DEFAULT 'O'
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 458752
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."CAUSECODETRX" (
		"CAUSECODETRXID" NUMBER(20 , 0) NOT NULL,
		"HOMEENTERPRISELOCATIONCODE" VARCHAR2(4),
		"CURRENTENTERPRISELOCATIONCODE" VARCHAR2(4),
		"UNITID" VARCHAR2(1),
		"CAUSECODE" VARCHAR2(3),
		"CAUSECODENARRATIVE" VARCHAR2(50),
		"CAUSECODETYPEINDICATOR" VARCHAR2(1),
		"HOSTUNITDATEANDTIME" VARCHAR2(25),
		"TRANSACTIONORDINALDATE" VARCHAR2(25),
		"RECORDDATETIME" DATE DEFAULT SYSDATE,
		"APPLICATIONNOTE" NVARCHAR2(2000),
		"DATEPROCESSED" DATE DEFAULT SYSDATE,
		"DEFERCODETYPEINDICATOR" VARCHAR2(1),
		"TRANSACTIONTYPE" VARCHAR2(50)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 196608
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."CHANGENOTIFICATION" (
		"CHANGEID" DATE NOT NULL,
		"CACHEDTABLENAME" VARCHAR2(50) NOT NULL,
		"MOCID" NUMBER NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 262144
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."CHECKLIST" (
		"CHECKLISTID" NUMBER NOT NULL,
		"CHECKLIST" BLOB NOT NULL,
		"CHECKLISTTITLE" VARCHAR2(150) NOT NULL,
		"DATEUPLOADED" DATE DEFAULT 'SYSDATE ' NOT NULL,
		"MOCID" NUMBER NOT NULL,
		"MIMETYPE" VARCHAR2(100)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."COLORRULES" (
		"COLORID" NUMBER(10 , 0) NOT NULL,
		"COLORRULESID" NUMBER(10 , 0) NOT NULL,
		"COLORRANK" NUMBER(2 , 0) NOT NULL,
		"CODETYPE" VARCHAR2(25),
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."COLORS" (
		"COLORID" NUMBER(10 , 0) NOT NULL,
		"COLORNAME" VARCHAR2(50) NOT NULL,
		"COLORVALUE" CHAR(7) NOT NULL,
		"FONTCOLOR" CHAR(7) DEFAULT 'B',
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 327680
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."COMBATSCLRULES" (
		"SCLRULESID" NUMBER(10 , 0),
		"AIRCRAFTMDSID" NUMBER(10 , 0),
		"COMBATSCLID" NUMBER(10 , 0),
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."COMBATSCLS" (
		"COMBATSCL" VARCHAR2(50) NOT NULL,
		"COMBATSCLID" NUMBER(10 , 0) NOT NULL,
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."CONDITIONCODES" (
		"CONDCODEID" NUMBER(10 , 0) NOT NULL,
		"CONDITIONCODE" CHAR(5) NOT NULL,
		"CONDITIONDESCRIPTION" VARCHAR2(100),
		"DEFAULTCONDITIONCODE" NUMBER(1 , 0) DEFAULT 0  NOT NULL,
		"CONDSTATID" NUMBER(10 , 0),
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 262144
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."CONDITIONSTATUS" (
		"CONDSTATID" NUMBER(10 , 0) NOT NULL,
		"CONDITIONSTATUS" VARCHAR2(50) NOT NULL,
		"CONDITIONLEVEL" NUMBER(10 , 0),
		"FLYABLE" NUMBER(10 , 0) NOT NULL,
		"COLORID" NUMBER(10 , 0),
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."COUNTRYCODES" (
		"COUNTRYCODE" VARCHAR2(2) NOT NULL,
		"COUNTRYNAME" VARCHAR2(50) NOT NULL,
		"DEFAULTCOUNTRY" NUMBER DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."CREWCHIEFS" (
		"CREWCHIEFID" NUMBER(10 , 0) NOT NULL,
		"CREWCHIEF" VARCHAR2(50) NOT NULL,
		"PICTURE" VARCHAR2(4000),
		"DEFAULTCREWCHIEF" NUMBER(1 , 0) DEFAULT 0  NOT NULL,
		"RANKID" NUMBER(10 , 0) NOT NULL,
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."CUSTOMDATA" (
		"CUSTOMDATAID" NUMBER(10 , 0) NOT NULL,
		"CUSTOMDATALABEL" VARCHAR2(20) NOT NULL,
		"CUSTOMDATADESCRIPTION" VARCHAR2(50),
		"CUSTOMDATATYPE" VARCHAR2(10) DEFAULT 'String'' ' NOT NULL,
		"CUSTOMDATAWIDTH" NUMBER(4 , 0) DEFAULT 20,
		"BGCOLORVALUE" VARCHAR2(7) DEFAULT '#FFFFFF',
		"FONTCOLOR" CHAR(1) DEFAULT 'B',
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."CUSTOMDATALISTITEM" (
		"CUSTOMDATAITEMID" NUMBER(10 , 0) NOT NULL,
		"CUSTOMDATAID" NUMBER(10 , 0) NOT NULL,
		"CUSTOMDATAITEMVALUE" NVARCHAR2(50)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."CUSTOMDATAMDS" (
		"CUSTOMDATAID" NUMBER(10 , 0) NOT NULL,
		"AIRCRAFTMDSID" NUMBER(10 , 0) NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."DEVIATIONABORTTRX" (
		"DEVIATIONABORTTRXID" NUMBER NOT NULL,
		"HOMEENTERPRISELOCATIONCODE" VARCHAR2(4),
		"CURRENTENTERPRISELOCATIONCODE" VARCHAR2(4),
		"UNITID" VARCHAR2(1),
		"SORTIEDATE" VARCHAR2(7),
		"EQUIPMENTID" VARCHAR2(5),
		"SORTIENUMBER" VARCHAR2(3),
		"SORTIEMODIFIER" VARCHAR2(2),
		"MAINTENANCEEVENTID" VARCHAR2(10),
		"SCHEDULINGBLOCKNUMBER" VARCHAR2(3),
		"DEVIATIONCODE" VARCHAR2(10),
		"DEVIATIONCAUSECODE" VARCHAR2(3),
		"CHARGEABLEINDICATOR" VARCHAR2(1),
		"STARTDATE" VARCHAR2(7),
		"STARTTIME" VARCHAR2(4),
		"STOPDATE" VARCHAR2(7),
		"STOPTIME" VARCHAR2(4),
		"DEVIATIONREMARKS" VARCHAR2(4000),
		"DATEPROCESSED" DATE
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."DEVIATIONCODES" (
		"DEVIATIONCODEID" NUMBER(10 , 0) NOT NULL,
		"DEVIATIONCODE" VARCHAR2(50) NOT NULL,
		"DEVIATIONDESCRIPTION" VARCHAR2(100),
		"DEFAULTDEVIATIONCODE" NUMBER(1 , 0) DEFAULT 0  NOT NULL,
		"COLORID" NUMBER(10 , 0),
		"CAMSINIT" DATE,
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."DEVIATIONCODETRX" (
		"DEVIATIONCODETRXID" NUMBER(20 , 0) NOT NULL,
		"HOMEENTERPRISELOCATIONCODE" VARCHAR2(4),
		"UNITID" VARCHAR2(1),
		"DEVIATIONCODE" VARCHAR2(50),
		"DEVIATIONCODENARRATIVE" VARCHAR2(100),
		"RECORDDATETIME" DATE DEFAULT SYSDATE,
		"DATEPROCESSED" DATE DEFAULT SYSDATE,
		"APPLICATIONNOTE" NVARCHAR2(200)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."DEVIATIONCORRECTIONTRX" (
		"DEVIATIONCORRECTTRXID" NUMBER NOT NULL,
		"HOMEENTERPRISELOCATIONCODE" VARCHAR2(4),
		"CURRENTENTERPRISELOCATIONCODE" VARCHAR2(4),
		"UNITID" VARCHAR2(1),
		"SORTIEDATE" VARCHAR2(7),
		"SCHEDULINGBLOCKNUMBER" VARCHAR2(3),
		"EQUIPMENTID" VARCHAR2(5),
		"SORTIENUMBER" VARCHAR2(3),
		"SORTIEMODIFIER" VARCHAR2(2),
		"MAINTENANCEEVENTID" VARCHAR2(10),
		"DEVIATIONCODE" VARCHAR2(10),
		"DEVIATIONCAUSECODE" VARCHAR2(3),
		"NEWDEVIATIONCAUSECODE" VARCHAR2(3),
		"CHARGEABLEINDICATOR" VARCHAR2(1),
		"STARTDATE" VARCHAR2(7),
		"STARTTIME" VARCHAR2(4),
		"STOPDATE" VARCHAR2(7),
		"STOPTIME" VARCHAR2(4),
		"DEVIATIONREMARKS" VARCHAR2(4000),
		"DATEPROCESSED" DATE
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."DEVIATIONDELETETRX" (
		"DEVIATIONDELETETRXID" NUMBER NOT NULL,
		"HOMEENTERPRISELOCATIONCODE" VARCHAR2(4),
		"CURRENTENTERPRISELOCATIONCODE" VARCHAR2(4),
		"UNITID" VARCHAR2(1),
		"SORTIEDATE" VARCHAR2(7),
		"SCHEDULINGBLOCKNUMBER" VARCHAR2(3),
		"EQUIPMENTID" VARCHAR2(5),
		"SORTIENUMBER" VARCHAR2(3),
		"SORTIEMODIFIER" VARCHAR2(2),
		"MAINTENANCEEVENTID" VARCHAR2(10),
		"DEVIATIONCODE" VARCHAR2(10),
		"DEVIATIONCAUSECODE" VARCHAR2(3),
		"CHARGEABLEINDICATOR" VARCHAR2(1),
		"DATEPROCESSED" DATE
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."DEVIATIONSTARTSTOPTRX" (
		"DEVIATIONSTARTSTOPTRXID" NUMBER NOT NULL,
		"HOMEENTERPRISELOCATIONCODE" VARCHAR2(4),
		"CURRENTENTERPRISELOCATIONCODE" VARCHAR2(4),
		"UNITID" VARCHAR2(1),
		"SORTIEDATE" VARCHAR2(7),
		"EQUIPMENTID" VARCHAR2(5),
		"SORTIENUMBER" VARCHAR2(3),
		"SORTIEMODIFIER" VARCHAR2(2),
		"MAINTENANCEEVENTID" VARCHAR2(10),
		"SCHEDULINGBLOCKNUMBER" VARCHAR2(3),
		"DEVIATIONCODE" VARCHAR2(10),
		"DEVIATIONCAUSECODE" VARCHAR2(3),
		"CHARGEABLEINDICATOR" VARCHAR2(1),
		"STARTDATE" VARCHAR2(7),
		"STARTTIME" VARCHAR2(4),
		"STOPDATE" VARCHAR2(7),
		"STOPTIME" VARCHAR2(4),
		"DEVIATIONREMARKS" VARCHAR2(4000),
		"DATEPROCESSED" DATE
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."EMOCAPPCONFIGURATION" (
		"CONFIGID" NUMBER NOT NULL,
		"ORADATASOURCE" VARCHAR2(50),
		"ORAMAINUSERID" VARCHAR2(25),
		"ORAMAINPASSWORD" VARCHAR2(75),
		"ORAAUXUSERID" VARCHAR2(25),
		"ORAAUXPASSWORD" VARCHAR2(75),
		"SQLSERVERINSTANCE" VARCHAR2(25),
		"SQLSERVERHOST" VARCHAR2(25),
		"SQLSERVERUSERID" VARCHAR2(25),
		"SQLSERVERPASSWORD" VARCHAR2(200),
		"IMDSCDBTOEMOCIHOST" VARCHAR2(25),
		"IMDSCDBTOEMOCIQUEMAN" VARCHAR2(25),
		"IMDSCDBTOEMOCIQUENAME" VARCHAR2(25),
		"IMDSCDBTOEMOCICHANNEL" VARCHAR2(25),
		"IMDSCDBTOEMOCIPORT" NUMBER,
		"EMOCTOIMDSCDBIHOST" VARCHAR2(25),
		"EMOCTOIMDSCDBIQUEMAN" VARCHAR2(25),
		"EMOCTOIMDSCDBIQUENAME" VARCHAR2(25),
		"EMOCTOIMDSCDBICHANNEL" VARCHAR2(25),
		"EMOCTOIMDSCDBIPORT" NUMBER,
		"EMOCTOTBMCSULIHOST" VARCHAR2(25),
		"EMOCTOTBMCSULIQUEMAN" VARCHAR2(25),
		"EMOCTOTBMCSULIQUENAME" VARCHAR2(25),
		"EMOCTOTBMCSULICHANNEL" VARCHAR2(25),
		"EMOCTOTBMCSULIPORT" NUMBER,
		"LASTUPDATEDBY" VARCHAR2(50),
		"LASTUPDATEDDATE" DATE
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."EMOCCONFIG" (
		"EMOCCONFIGID" NUMBER(10 , 0) NOT NULL,
		"TIMEZONEFACTOR" CHAR(1),
		"TIMEZONEHOURS" NUMBER(2 , 0) DEFAULT 0,
		"VERSION" VARCHAR2(10),
		"BASENAME" VARCHAR2(50),
		"TBMCSEMAIL" VARCHAR2(100),
		"TBMCSTIMER" NUMBER(3 , 0) DEFAULT 3,
		"ETICTIMER" NUMBER(4 , 0) DEFAULT 15,
		"ARCHIVEDOM" NUMBER(2 , 0) DEFAULT 1,
		"ARCHIVEPURGEMO" NUMBER(2 , 0) DEFAULT 25,
		"GMTFACTOR" CHAR(1),
		"GMTHOURS" NUMBER(2 , 0) DEFAULT 0,
		"SCHEDULEDOW" NUMBER(1 , 0) DEFAULT 5,
		"SCHEDULETIME" CHAR(4) DEFAULT '1500',
		"LASTUPDATED" DATE DEFAULT SYSDATE,
		"LASTUPDATEDBY" NUMBER(10 , 0) DEFAULT 0,
		"SCHEDULEPATH" VARCHAR2(255),
		"TEMPLATEPATH" VARCHAR2(255),
		"ARCHIVEPATH" VARCHAR2(255),
		"EMOCHTML1" CLOB,
		"SMTPSERVER" VARCHAR2(50),
		"HEADERCOLOR" CHAR(7) DEFAULT '#0166B4',
		"DOCSPATH" VARCHAR2(255) DEFAULT 'c:\\program files\\emoc\\docs',
		"PROXYURL" VARCHAR2(500),
		"PROXYUSERID" VARCHAR2(50),
		"PROXYPASSWORD" VARCHAR2(500),
		"PROXYENABLED" NUMBER(1 , 0) DEFAULT 0,
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 524288
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."EMOCHELP" (
		"HELPID" NUMBER(10 , 0) NOT NULL,
		"PARENTID" NUMBER(10 , 0),
		"TOPIC" VARCHAR2(100) NOT NULL,
		"HELPHTML" CLOB,
		"NODE" NUMBER(4 , 0) DEFAULT 0
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."ENGINERUNLOG" (
		"ENGINELOGID" NUMBER(10 , 0) NOT NULL,
		"MOCCONTROLLER" VARCHAR2(50) NOT NULL,
		"RUNPERSON" VARCHAR2(50) NOT NULL,
		"EMPLOYEENUMBER" VARCHAR2(50) NOT NULL,
		"RUNDATE" DATE NOT NULL,
		"QUALCHECKED" NUMBER(1 , 0) DEFAULT 0,
		"STANDBYFIRETRUCK" NUMBER(1 , 0) DEFAULT 0,
		"REASON" VARCHAR2(50),
		"IDLESTART" VARCHAR2(5),
		"IDLESTOP" VARCHAR2(5),
		"MILSTART" VARCHAR2(5),
		"MILSTOP" VARCHAR2(5),
		"ABSTART" VARCHAR2(5),
		"ABSTOP" VARCHAR2(5),
		"MISUPDATED" NUMBER(1 , 0) DEFAULT 0,
		"SPAPPROVAL" NUMBER(10 , 0),
		"TOWERRUNCLEARANCE" NUMBER(1 , 0) DEFAULT 0,
		"ENGINEDATAID" NUMBER(10 , 0) NOT NULL,
		"LASTUPDATE" DATE DEFAULT SYSDATE,
		"LASTUPDATEBY" NUMBER(10 , 0),
		"AIRCRAFTID" NUMBER(10 , 0) NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."EQUIPMENTLOCATIONUPDATETRX" (
		"EQUIPMENTLOCATIONUPDATETRXID" NUMBER(20 , 0),
		"HOMEENTERPRISELOCATIONCODE" VARCHAR2(4),
		"CURRENTENTERPRISELOCATIONCODE" VARCHAR2(4),
		"UNITID" VARCHAR2(1),
		"EQUIPMENTID" VARCHAR2(5),
		"LOCATIONCODE" VARCHAR2(10),
		"HOSTUNITDATEANDTIME" VARCHAR2(25),
		"TRANSACTIONORDINALDATE" VARCHAR2(25),
		"RECORDDATETIME" DATE DEFAULT SYSDATE,
		"APPLICATIONNOTE" NVARCHAR2(2000),
		"DATEPROCESSED" DATE
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."EVENTLOG" (
		"LOGID" NUMBER(10 , 0),
		"DATETIMEENTERED" DATE,
		"EVENTTYPE" VARCHAR2(50),
		"EVENTNARRATIVE" VARCHAR2(500),
		"SHORTTAILNUMBER" VARCHAR2(10),
		"USERID" NUMBER(10 , 0),
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."EXPORT000021" (
		"PROCESS_ORDER" NUMBER,
		"DUPLICATE" NUMBER,
		"DUMP_FILEID" NUMBER,
		"DUMP_POSITION" NUMBER,
		"DUMP_LENGTH" NUMBER,
		"DUMP_ALLOCATION" NUMBER,
		"COMPLETED_ROWS" NUMBER,
		"ERROR_COUNT" NUMBER,
		"ELAPSED_TIME" NUMBER,
		"OBJECT_TYPE_PATH" VARCHAR2(200),
		"OBJECT_PATH_SEQNO" NUMBER,
		"OBJECT_TYPE" VARCHAR2(30),
		"IN_PROGRESS" CHAR(1),
		"OBJECT_NAME" VARCHAR2(500),
		"OBJECT_LONG_NAME" VARCHAR2(4000),
		"OBJECT_SCHEMA" VARCHAR2(30),
		"ORIGINAL_OBJECT_SCHEMA" VARCHAR2(30),
		"PARTITION_NAME" VARCHAR2(30),
		"SUBPARTITION_NAME" VARCHAR2(30),
		"FLAGS" NUMBER,
		"PROPERTY" NUMBER,
		"COMPLETION_TIME" DATE,
		"OBJECT_TABLESPACE" VARCHAR2(30),
		"SIZE_ESTIMATE" NUMBER,
		"OBJECT_ROW" NUMBER,
		"PROCESSING_STATE" CHAR(1),
		"PROCESSING_STATUS" CHAR(1),
		"BASE_PROCESS_ORDER" NUMBER,
		"BASE_OBJECT_TYPE" VARCHAR2(30),
		"BASE_OBJECT_NAME" VARCHAR2(30),
		"BASE_OBJECT_SCHEMA" VARCHAR2(30),
		"ANCESTOR_PROCESS_ORDER" NUMBER,
		"DOMAIN_PROCESS_ORDER" NUMBER,
		"PARALLELIZATION" NUMBER,
		"UNLOAD_METHOD" NUMBER,
		"GRANULES" NUMBER,
		"SCN" NUMBER,
		"GRANTOR" VARCHAR2(30),
		"XML_CLOB" CLOB,
		"NAME" VARCHAR2(30),
		"VALUE_T" VARCHAR2(4000),
		"VALUE_N" NUMBER,
		"IS_DEFAULT" NUMBER,
		"FILE_TYPE" NUMBER,
		"USER_DIRECTORY" VARCHAR2(4000),
		"USER_FILE_NAME" VARCHAR2(4000),
		"FILE_NAME" VARCHAR2(4000),
		"EXTEND_SIZE" NUMBER,
		"FILE_MAX_SIZE" NUMBER,
		"PROCESS_NAME" VARCHAR2(30),
		"LAST_UPDATE" DATE,
		"WORK_ITEM" VARCHAR2(30),
		"OBJECT_NUMBER" NUMBER,
		"COMPLETED_BYTES" NUMBER,
		"TOTAL_BYTES" NUMBER,
		"METADATA_IO" NUMBER,
		"DATA_IO" NUMBER,
		"CUMULATIVE_TIME" NUMBER,
		"PACKET_NUMBER" NUMBER,
		"OLD_VALUE" VARCHAR2(4000),
		"SEED" NUMBER,
		"LAST_FILE" NUMBER,
		"USER_NAME" VARCHAR2(30),
		"OPERATION" VARCHAR2(30),
		"JOB_MODE" VARCHAR2(30),
		"CONTROL_QUEUE" VARCHAR2(30),
		"STATUS_QUEUE" VARCHAR2(30),
		"REMOTE_LINK" VARCHAR2(4000),
		"VERSION" NUMBER,
		"DB_VERSION" VARCHAR2(30),
		"TIMEZONE" VARCHAR2(64),
		"STATE" VARCHAR2(30),
		"PHASE" NUMBER,
		"GUID" RAW(16),
		"START_TIME" DATE,
		"BLOCK_SIZE" NUMBER,
		"METADATA_BUFFER_SIZE" NUMBER,
		"DATA_BUFFER_SIZE" NUMBER,
		"DEGREE" NUMBER,
		"PLATFORM" VARCHAR2(101),
		"ABORT_STEP" NUMBER,
		"INSTANCE" VARCHAR2(60)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."FIELDNAMES" (
		"FIELDNAMESID" NUMBER(10 , 0) NOT NULL,
		"TABLENAME" VARCHAR2(50),
		"KEYFIELD" VARCHAR2(50),
		"SHOW" NUMBER(10 , 0) NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."FILEMON" (
		"NAME" NVARCHAR2(50),
		"DATERAN" DATE
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."FIRESYMBOLS" (
		"FIRESYMBOLID" NUMBER(10 , 0) NOT NULL,
		"FIRESYMBOL" CHAR(3) NOT NULL,
		"RANKING" NUMBER(10 , 0) NOT NULL,
		"DEFAULTVAL" NUMBER(1 , 0) DEFAULT 0,
		"DESCRIPTION" VARCHAR2(50),
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."FLIGHTS" (
		"FLIGHTID" NUMBER(10 , 0) NOT NULL,
		"SQUADRONID" NUMBER(10 , 0) NOT NULL,
		"FLIGHTNAME" VARCHAR2(50) NOT NULL,
		"WORKCENTERID" NUMBER(10 , 0),
		"LASTUPDATE" DATE DEFAULT sysdate,
		"LASTUPDATEBY" NUMBER(10 , 0) DEFAULT 0
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."FUEL" (
		"FUELSTATUSID" NUMBER(10 , 0) NOT NULL,
		"COLORID" NUMBER(10 , 0) NOT NULL,
		"FUELSTATUS" VARCHAR2(50) NOT NULL,
		"FUELDESCRIPTION" VARCHAR2(100),
		"LANDING" NUMBER(1 , 0) DEFAULT 0  NOT NULL,
		"DEFAULTFUEL" NUMBER(1 , 0) DEFAULT 0  NOT NULL,
		"ALLOWSORTIEUPDATE" NUMBER(1 , 0) DEFAULT 0,
		"FUELSTATUSLABEL" VARCHAR2(8) DEFAULT '0',
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."GAINLOSSSTATUSUPDATETRX" (
		"GAINLOSSSTATUSUPDATETRXID" NUMBER(20 , 0) NOT NULL,
		"CURRENTENTERPRISELOCATIONCODE" VARCHAR2(4),
		"UNITID" VARCHAR2(1),
		"EQUIPMENTID" VARCHAR2(5),
		"MAINTENANCESTATUSCODE" VARCHAR2(4),
		"CONDITIONSTATUSCODE" VARCHAR2(1),
		"OCCURANCEDATE" VARCHAR2(5),
		"OCCURANCETIME" VARCHAR2(4),
		"GAINLOSSACTIONCODE" VARCHAR2(2),
		"INSTALLATIONCODE" VARCHAR2(4),
		"MAJORCOMMANDABBREVIATION" VARCHAR2(3),
		"GAINLOSSTRANSFEROPTION" VARCHAR2(10),
		"TRANSFERTYPE" VARCHAR2(1),
		"EVENTID" VARCHAR2(15),
		"WORKCENTEREVENT" VARCHAR2(15),
		"WORKUNITCODE" VARCHAR2(32),
		"REQUESTAPPROVEDCONFIGURATION" VARCHAR2(10),
		"REQUESTACTUALCONFIGURATION" VARCHAR2(10),
		"HOSTUNITDATEANDTIME" VARCHAR2(25),
		"TRANSACTIONORDINALDATE" VARCHAR2(25),
		"RECORDDATETIME" DATE DEFAULT SYSDATE,
		"APPLICATIONNOTE" NVARCHAR2(2000),
		"DATEPROCESSED" DATE,
		"HOMEENTERPRISELOCATIONCODE" VARCHAR2(4)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."GENERATIONFLOW" (
		"GENERATIONFLOWNAME" VARCHAR2(50) NOT NULL,
		"GENERATIONFLOWSTARTTIME" DATE NOT NULL,
		"GENERATIONFLOWITEMOFFSET" NUMBER(10 , 0) NOT NULL,
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."GENERATIONFLOWITEMS" (
		"ITEMNUMBER" NUMBER(10 , 0) NOT NULL,
		"ITEM" VARCHAR2(50) NOT NULL,
		"GENERATIONFLOWNAME" VARCHAR2(50) NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."GENERATIONFLOWPROGRESS" (
		"GENERATIONFLOWNAME" VARCHAR2(50) NOT NULL,
		"STEPNUMBER" NUMBER(10 , 0) NOT NULL,
		"ITEMNUMBER" NUMBER(10 , 0) NOT NULL,
		"STARTED" DATE,
		"COMPLETED" DATE
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."GENERATIONFLOWSTEPS" (
		"STEPNUMBER" NUMBER(10 , 0) NOT NULL,
		"STEPNAME" VARCHAR2(50) NOT NULL,
		"STEPLENGTH" NUMBER(10 , 0) NOT NULL,
		"GENERATIONFLOWNAME" VARCHAR2(50) NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."GEOLOCCODETRX" (
		"GEOLOCCODETRXID" NUMBER(20 , 0) NOT NULL,
		"FROMENTERPRISELOCATIONCODE" VARCHAR2(4),
		"FROMUNITID" VARCHAR2(1),
		"GEOLOCCODE" VARCHAR2(4),
		"GEOLOCCODENARRATIVE" VARCHAR2(50),
		"STARTDATE" VARCHAR2(20),
		"STOPDATE" VARCHAR2(20),
		"TRANSACTIONCODE" VARCHAR2(1),
		"DATEPROCESSED" DATE DEFAULT SYSDATE
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 2097152
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."GLOBALCHANGENOTIFICATION" (
		"CHANGEID" DATE NOT NULL,
		"CACHEDTABLENAME" VARCHAR2(50) NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."GRADECODES" (
		"GRADECODE" VARCHAR2(3),
		"RANKDESCRIPTION" VARCHAR2(100) NOT NULL,
		"RANKCODE" VARCHAR2(10) NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."HANGER_QUEEN_CODE" (
		"HQCODEID" NUMBER(10 , 0) NOT NULL,
		"HQCODE" CHAR(3) NOT NULL,
		"HQDESCRIPTION" VARCHAR2(50),
		"HQLEVEL" NUMBER(2 , 0) DEFAULT 0,
		"HQDEFAULT" NUMBER(1 , 0) DEFAULT 0,
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."HISTORY" (
		"HISTORYID" NUMBER(10 , 0) NOT NULL,
		"EVENTDATE" DATE NOT NULL,
		"ELEMENTVALUE" VARCHAR2(4000),
		"USERID" NUMBER(10 , 0) NOT NULL,
		"AIRCRAFTID" NUMBER(10 , 0) NOT NULL,
		"ELEMENT" VARCHAR2(50),
		"TRANSACTIONID" NUMBER(10 , 0)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 196608
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."HOTSPOTS" (
		"FIELDNAME" VARCHAR2(50) NOT NULL,
		"LOCATIONID" NUMBER(10 , 0) NOT NULL,
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."IMDSCDBELCUNITOPTION" (
		"IMDSCDBELCUNITOPTIONID" NUMBER(10 , 0) NOT NULL,
		"IMDSCDBINTERFACEOPTIONID" NUMBER(10 , 0) NOT NULL,
		"ENTERPRISELOCATIONCODE" VARCHAR2(4) NOT NULL,
		"UNITID" VARCHAR2(1) NOT NULL,
		"OPTIONENABLED" NUMBER(1 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."IMDSCDBINTERFACEOPTION" (
		"IMDSCDBINTERFACEOPTIONID" NUMBER(10 , 0) NOT NULL,
		"OPTIONNAME" VARCHAR2(50) NOT NULL,
		"OPTIONENABLED" NUMBER(1 , 0) DEFAULT 0  NOT NULL,
		"OPTIONDESCRIPTION" VARCHAR2(100),
		"INTERFACEDIRECTION" VARCHAR2(1) DEFAULT 'O'' ' NOT NULL,
		"LASTUPDATE" DATE DEFAULT SYSDATE,
		"LASTUPDATEBY" VARCHAR2(50),
		"OPTIONSHORTNAME" VARCHAR2(5)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."IMDSLOGINS" (
		"IMDSLOGINID" NUMBER(10 , 0) NOT NULL,
		"USERID" NUMBER(10 , 0) NOT NULL,
		"IMDSLOGIN" VARCHAR2(256) NOT NULL,
		"IMDSPASSWORD" VARCHAR2(256) NOT NULL,
		"IMDSACCOUNT" VARCHAR2(20),
		"IMDSPROJECTID" VARCHAR2(20),
		"WINGID" NUMBER(10 , 0),
		"IMDSTERMINALID" VARCHAR2(50)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."INTERFACECONTROL" (
		"INTERFACECONTROLID" NUMBER(10 , 0) NOT NULL,
		"INTERFACENAME" VARCHAR2(50) NOT NULL,
		"INTERFACEENABLED" NUMBER(1 , 0) DEFAULT 0,
		"LASTUPDATE" DATE DEFAULT SYSDATE,
		"LASTUPDATEBY" NUMBER(10 , 0),
		"CURRENTSTATUS" VARCHAR2(20) DEFAULT 'DISABLED',
		"INTERFACEUSERID" VARCHAR2(50),
		"INTERFACEPASSWORD" VARCHAR2(500) DEFAULT NULL,
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."INTERFACEHISTORY" (
		"STATUSCHANGETIME" DATE NOT NULL,
		"STATUSCHANGEBY" NUMBER(10 , 0) NOT NULL,
		"CURRENTSTATUS" VARCHAR2(20) NOT NULL,
		"INTERFACECONTROLID" NUMBER(10 , 0) NOT NULL,
		"CURRENTENABLED" NUMBER(1 , 0) NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."INTERFACEITEMS" (
		"INTERFACEITEMID" NUMBER(10 , 0) NOT NULL,
		"INTERFACECONTROLID" NUMBER(10 , 0) DEFAULT 0  NOT NULL,
		"ITEMNAME" VARCHAR2(50),
		"ITEMENABLED" NUMBER(1 , 0) DEFAULT 0,
		"LASTUPDATE" DATE DEFAULT SYSDATE,
		"LASTUPDATEDBY" NUMBER(10 , 0) DEFAULT 0,
		"TRIC" CHAR(3),
		"ITEMDESCRIPTION" VARCHAR2(100),
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."INTERFACEITEMSHISTORY" (
		"STATUSCHANGETIME" DATE DEFAULT 'sysdate ' NOT NULL,
		"STATUSCHANGEBY" NUMBER(10 , 0) DEFAULT 0  NOT NULL,
		"CURRENTSTATUS" VARCHAR2(10),
		"INTERFACECONTROLID" NUMBER(10 , 0) NOT NULL,
		"PREENABLED" NUMBER(10 , 0) DEFAULT 0,
		"INTERFACEITEMID" NUMBER(10 , 0) NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."INTERFACELOG" (
		"INTERFACELOGID" NUMBER(10 , 0) NOT NULL,
		"INTERFACECONTROLID" NUMBER(10 , 0) DEFAULT 0  NOT NULL,
		"TRANSACTIONTYPE" CHAR(3),
		"TIMEOFINSERT" DATE DEFAULT sysdate,
		"EXPIRATION" DATE,
		"CAMSVALIDATED" NUMBER(1 , 0) DEFAULT 0,
		"CANCELFLAG" NUMBER(1 , 0) DEFAULT 0,
		"USERID" NUMBER(10 , 0),
		"AIRCRAFTID" NUMBER(10 , 0),
		"XMLIN" CLOB,
		"XMLOUT" CLOB,
		"PARSED" NUMBER(1 , 0) DEFAULT 0,
		"SQUADRONID" NUMBER(10 , 1),
		"REJECTED" NUMBER(1 , 0) DEFAULT 0,
		"CORRECTED" NUMBER(1 , 0),
		"CORRECTIVEACTION" VARCHAR2(500),
		"UPDATEOBJECT" VARCHAR2(500),
		"ALERTMSG" VARCHAR2(4000),
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 83886080
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."INTERFACEREJECTLIST" (
		"REJECTID" NUMBER(10 , 1) NOT NULL,
		"INTERFACEITEMID" NUMBER(10 , 1),
		"FIELDNAME" VARCHAR2(100),
		"CONSTRAINTS" VARCHAR2(500),
		"REJECTCODE" VARCHAR2(10),
		"NARRATIVE" VARCHAR2(500)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."INVENTORYSTATUSUPDATETRX" (
		"INVENTORYSTATUSUPDATETRXID" NUMBER(10 , 0) NOT NULL,
		"TRANSACTIONORDINALDATE" VARCHAR2(20),
		"CURRENTENTERPRISELOCATIONCODE" VARCHAR2(4),
		"UNITID" VARCHAR2(1),
		"EQUIPMENTID" VARCHAR2(5),
		"GAINLOSSACTIONCODE" VARCHAR2(2),
		"CHANGEDATE" VARCHAR2(5),
		"CHANGETIME" VARCHAR2(4),
		"POSSESSIONID" VARCHAR2(2),
		"ASSIGNMENTSTATUSCODE" VARCHAR2(2),
		"ASSIGNMENTCOMMANDABBR" VARCHAR2(3),
		"AIRCRAFTCONFIGID" VARCHAR2(10),
		"TRAINERREPORTINGDESIGNATOR" VARCHAR2(10),
		"MISSIONDESIGNSERIES" VARCHAR2(15),
		"MAJORCOMMANDABBR" VARCHAR2(3),
		"HOSTUNITDATEANDTIME" VARCHAR2(20),
		"RECORDDATETIME" DATE DEFAULT SYSDATE,
		"APPLICATIONNOTE" NVARCHAR2(2000),
		"DATEPROCESSED" DATE,
		"HOMEENTERPRISELOCATIONCODE" VARCHAR2(4)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."JOAP" (
		"JOAPID" NUMBER(10 , 0) NOT NULL,
		"JOAPCODE" VARCHAR2(50) NOT NULL,
		"JOAPDESCRIPTION" VARCHAR2(100),
		"LANDING" NUMBER(1 , 0) DEFAULT 0  NOT NULL,
		"REDCAPSTATUS" NUMBER(1 , 0) DEFAULT 0  NOT NULL,
		"DEFAULTJOAP" NUMBER(1 , 0) DEFAULT 0  NOT NULL,
		"COLORRULESID" NUMBER(10 , 0) NOT NULL,
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 196608
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."JOAPDATA" (
		"JOAPDATAID" NUMBER(10 , 0) NOT NULL,
		"JOAPID" NUMBER(10 , 0) NOT NULL,
		"ENGINEDATAID" NUMBER(10 , 0) NOT NULL,
		"MOCCONTROLLER" VARCHAR2(50) NOT NULL,
		"SAMPLEDATE" DATE NOT NULL,
		"REASON" VARCHAR2(50),
		"HOURSREQUIRED" NUMBER(10 , 1),
		"HOURSREMAINING" NUMBER(10 , 0),
		"NOTIFIEDBY" VARCHAR2(50),
		"EXPEDITERNOTIFIED" NUMBER(1 , 0) DEFAULT 0,
		"JOAPLASTUPDATED" DATE,
		"SCHEDULEID" NUMBER(10 , 0),
		"DATECLEARED" DATE DEFAULT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."LANDINGCODES" (
		"LANDINGCODEID" NUMBER(10 , 0) NOT NULL,
		"LANDINGCODE" VARCHAR2(10) NOT NULL,
		"LANDINGCODEDESCRIPTION" VARCHAR2(50),
		"WRITEUPNEEDED" NUMBER(1 , 0) DEFAULT 0  NOT NULL,
		"MOCID" null
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."LINKS" (
		"LINKID" NUMBER(10 , 0) NOT NULL,
		"LINKURL" VARCHAR2(100) NOT NULL,
		"LINKDESCRIPTION" VARCHAR2(255),
		"ENTEREDBY" NUMBER(10 , 0),
		"ENTEREDON" DATE DEFAULT sysdate,
		"LASTUPDATED" DATE DEFAULT sysdate,
		"LINKORDER" NUMBER(10 , 0) DEFAULT 0,
		"LINKTITLE" VARCHAR2(25) NOT NULL,
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."LOCATIONCODETRX" (
		"LOCATIONCODETRXID" NUMBER(20 , 0) NOT NULL,
		"HOMEENTERPRISELOCATIONCODE" VARCHAR2(4),
		"CURRENTENTERPRISELOCATIONCODE" VARCHAR2(4),
		"LOCATIONCODE" VARCHAR2(10),
		"LOCATIONRESTRICTIONCODE" VARCHAR2(2),
		"ALLOWABLEQUANTITY" VARCHAR2(4),
		"HOSTUNITDATEANDTIME" VARCHAR2(25),
		"TRANSACTIONORDINALDATE" VARCHAR2(25),
		"RECORDDATETIME" DATE DEFAULT SYSDATE,
		"APPLICATIONNOTE" NVARCHAR2(2000),
		"DATEPROCESSED" DATE,
		"TRANSACTIONTYPE" VARCHAR2(50),
		"NEWLOCATIONCODE" VARCHAR2(10)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 2097152
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."LOCATIONS" (
		"LOCATIONID" NUMBER(10 , 0) NOT NULL,
		"LOCATIONCODE" VARCHAR2(10) NOT NULL,
		"LOCATIONNAME" VARCHAR2(50),
		"MAXIMUMOCCUPANCY" NUMBER(4 , 0) DEFAULT 9999  NOT NULL,
		"DEFAULTLOCATION" NUMBER(1 , 0) DEFAULT 0  NOT NULL,
		"CAMSINIT" DATE,
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL,
		"ELC" VARCHAR2(4),
		"LOCATIONRESTRICTIONCODE" VARCHAR2(2),
		"LASTUPDATE" DATE DEFAULT SYSDATE
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 5242880
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."MAINTENANCEEVENTS" (
		"MAINTENANCEEVENTID" NUMBER(10 , 0) NOT NULL,
		"UNIT" CHAR(1) NOT NULL,
		"EVENTID" VARCHAR2(9),
		"PWC" VARCHAR2(5) NOT NULL,
		"EQUIPID" VARCHAR2(5) NOT NULL,
		"CP" NUMBER(10 , 0),
		"WUCLCN" VARCHAR2(15) NOT NULL,
		"WD" VARCHAR2(1),
		"PRIORITY" CHAR(2),
		"SYMBOL" CHAR(1),
		"TSSCH" VARCHAR2(9) NOT NULL,
		"JOBDUR" VARCHAR2(4),
		"DISCREPANCY" VARCHAR2(180),
		"WCENARRATIVE" VARCHAR2(180),
		"EMPID" VARCHAR2(18),
		"ENTRY781" CHAR(1),
		"DEFER" CHAR(3),
		"WCESYMBOL" CHAR(1),
		"JOBFOLLOW" CHAR(1),
		"PARTSREQUIRED" CHAR(1),
		"AIRCRAFTID" NUMBER(10 , 0),
		"ENTERED" DATE DEFAULT SYSDATE,
		"INTERFACELOGID" NUMBER(10 , 0),
		"WORKCENTEREVENTID" VARCHAR2(9),
		"WORKCENTEREVENT" CHAR(3),
		"LASTUPDATE" DATE
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."MAJCOMS" (
		"MAJCOMID" NUMBER(10 , 0),
		"MAJCOM" CHAR(3),
		"MAJCOMNARRATIVE" VARCHAR2(50),
		"CAMSINIT" DATE,
		"COMCODE" CHAR(2),
		"COMID" CHAR(3),
		"LASTUPDATE" DATE DEFAULT SYSDATE,
		"LASTUPDATEBY" NUMBER(10 , 0) DEFAULT 0,
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."MAJORCOMMANDCODETRX" (
		"MAJORCOMMANDCODETRXID" NUMBER(20 , 0) NOT NULL,
		"FROMENTERPRISELOCATIONCODE" VARCHAR2(4),
		"FROMUNITID" VARCHAR2(1),
		"MAJORCOMMANDCODE" VARCHAR2(3),
		"MAJORCOMMANDCODENARRATIVE" VARCHAR2(50),
		"RECORDDATETIME" DATE DEFAULT SYSDATE,
		"TRANSACTIONCODE" VARCHAR2(1),
		"DATEPROCESSED" DATE DEFAULT SYSDATE,
		"MAJORCOMMANDABBREV" VARCHAR2(3)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."MDSEQUIPMENTTRX" (
		"MDSEQUIPTRXID" NUMBER(10 , 0),
		"HOMEENTERPRISELOCATIONCODE" VARCHAR2(4),
		"CURRENTENTERPRISELOCATIONCODE" VARCHAR2(4),
		"UNITID" VARCHAR2(1),
		"EQUIPMENTID" VARCHAR2(5),
		"SERIALNUMBER" VARCHAR2(10),
		"STANDARDREPORTINGDESIGNATOR" VARCHAR2(3),
		"AFI21103SELECTIONINDICATOR" VARCHAR2(1),
		"POSSESSIONID" VARCHAR2(2),
		"ASSIGNMENTSTATUSCODE" VARCHAR2(2),
		"ASSIGNMENTCOMMANDABBREVIATION" VARCHAR2(3),
		"AIRCRAFTCONFIGURATIONID" VARCHAR2(10),
		"PROGRAMELEMENTCODE" VARCHAR2(8),
		"MAINTENANCETYPEINTERVAL" VARCHAR2(1),
		"OPERATINGTIME" VARCHAR2(10),
		"PREVIOUSOPERATINGTIME" VARCHAR2(10),
		"TOTALSORTIES" VARCHAR2(10),
		"TOTALLANDINGS" VARCHAR2(10),
		"FULLSTOPLANDINGS" VARCHAR2(10),
		"CREATEAUTOHISTORYEH" VARCHAR2(1),
		"ITEMMANUFACTURER" VARCHAR2(50),
		"EQUIPMENTACCEPTANCEDATE" VARCHAR2(20),
		"TYPEOFREPAIR" VARCHAR2(1),
		"REPAIRFREQUENCY" VARCHAR2(10),
		"REPAIRTYPEINTERVAL" VARCHAR2(10),
		"LASTOVERHAULDATE" VARCHAR2(7),
		"LASTOVERHAULTIME" VARCHAR2(4),
		"PRIMEREMOTETERMINALID" VARCHAR2(10),
		"SECONDARYREMOTETERMINALID" VARCHAR2(10),
		"LOCALOPTION" VARCHAR2(10),
		"OWNINGWORKCENTER" VARCHAR2(4),
		"SUPPORTGENERALREPORTABLE" VARCHAR2(1),
		"SUPPLYFACTOR" VARCHAR2(10),
		"TRANSACTIONORDINALDATE" VARCHAR2(20),
		"HOSTUNITDATEANDTIME" VARCHAR2(20),
		"RECORDDATETIME" DATE DEFAULT SYSDATE,
		"APPLICATIONNOTE" NVARCHAR2(2000),
		"DATEPROCESSED" DATE,
		"TRANSACTIONTYPE" VARCHAR2(50),
		"EQUIPMENTDESIGNATOR" VARCHAR2(15),
		"PRODUCTIONBLOCKNUMBER" VARCHAR2(3)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."MESSAGES" (
		"MESSAGEID" NUMBER(10 , 0) NOT NULL,
		"MESSAGETYPE" VARCHAR2(3),
		"MESSAGETITLE" VARCHAR2(100) NOT NULL,
		"MESSAGE" VARCHAR2(255),
		"LASTUPDATE" DATE DEFAULT SYSDATE,
		"LASTUPDATEBY" NUMBER(10 , 0) DEFAULT 0,
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."MICAP" (
		"MICAPID" NUMBER(20 , 0) NOT NULL,
		"DOCUMENTNUMBER" VARCHAR2(50) NOT NULL,
		"CAMSINIT" DATE,
		"AIRCRAFTID" NUMBER(10 , 0),
		"ENTERPRISELOCATIONCODE" VARCHAR2(4),
		"UNITID" VARCHAR2(1),
		"EQUIPMENTID" VARCHAR2(5),
		"JOBCONTROLNUMBER" VARCHAR2(15),
		"NOMENCLATURE" VARCHAR2(50),
		"ESTIMATEDDELIVERYDATE" VARCHAR2(7),
		"ISSUEDATE" VARCHAR2(7),
		"URGENCYJUSTIFICATIONCODE" VARCHAR2(2),
		"WORKUNITCODE" VARCHAR2(32),
		"USERCOMMENT" NVARCHAR2(500),
		"DELETEDFLAG" NUMBER(1 , 0) DEFAULT 0,
		"DELETEDDATE" DATE,
		"LASTUPDATED" DATE DEFAULT sysdate
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."MICAPTRX" (
		"MICAPTRXID" NUMBER(20 , 0) NOT NULL,
		"FROMENTERPRISELOCATIONCODE" VARCHAR2(4),
		"FROMUNITID" VARCHAR2(1),
		"EQUIPMENTID" VARCHAR2(5),
		"JOBCONTROLNUMBER" VARCHAR2(20),
		"DOCUMENTNUMBER" VARCHAR2(20),
		"NOMENCLATURE" VARCHAR2(50),
		"ESTIMATEDDELIVERYDATE" VARCHAR2(7),
		"ISSUEDATE" VARCHAR2(7),
		"URGENCYJUSTIFICATIONCODE" VARCHAR2(2),
		"WORKUNITCODE" VARCHAR2(32),
		"DATEPROCESSED" DATE,
		"TRANSACTIONCODE" VARCHAR2(1)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 196608
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."MICROSOFTDTPROPERTIES" (
		"ID" NUMBER NOT NULL,
		"OBJECTID" NUMBER,
		"PROPERTY" VARCHAR2(64) NOT NULL,
		"VALUE" VARCHAR2(255),
		"LVALUE" VARCHAR2(10),
		"VERSION" NUMBER DEFAULT (0)  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."MISSIONS" (
		"MISSIONID" NUMBER(10 , 0) NOT NULL,
		"MISSION" VARCHAR2(50) NOT NULL,
		"MISSIONDESCRIPTION" VARCHAR2(100),
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."MOC" (
		"MOCID" NUMBER(10 , 0) NOT NULL,
		"MOCTITLE" VARCHAR2(255) NOT NULL,
		"LASTUPDATED" DATE DEFAULT sysdate,
		"ISACTIVE" NUMBER(1 , 0) DEFAULT 1
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."MOCADMINS" (
		"MOCADMINID" NUMBER(10 , 0) NOT NULL,
		"MOCID" NUMBER(10 , 0) NOT NULL,
		"USERID" NUMBER(10 , 0) NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."MOCSTATUSICONS" (
		"MOCID" NUMBER NOT NULL,
		"STATUSIMAGEID" NUMBER(10 , 0) NOT NULL,
		"MISSIONDESIGNSERIES" VARCHAR2(15) NOT NULL,
		"STATUSCODE" VARCHAR2(50) NOT NULL,
		"ICON_TYPE" VARCHAR2(1) NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 3145728
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."MOCUSERS" (
		"MOCUSERID" NUMBER(10 , 0) NOT NULL,
		"MOCID" NUMBER(10 , 0) NOT NULL,
		"USERID" NUMBER(10 , 0) NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."OLDPASSWORDS" (
		"USERID" NUMBER(10 , 0),
		"USERPASSWORD" VARCHAR2(100),
		"CHGDATE" DATE
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."OPERATIONALEVENTDELETETRX" (
		"OPERATIONALEVENTDELETETRXID" NUMBER NOT NULL,
		"HOMEENTERPRISELOCATIONCODE" VARCHAR2(4),
		"CURRENTENTERPRISELOCATIONCODE" VARCHAR2(4),
		"UNITID" VARCHAR2(1),
		"EQUIPMENTID" VARCHAR2(5),
		"SORTIEDATE" VARCHAR2(7),
		"SORTIENUMBER" VARCHAR2(3),
		"DATEPROCESSED" DATE
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."OPERATIONALEVENTLOADTRX" (
		"OPERATIONALEVENTLOADTRXID" NUMBER NOT NULL,
		"OELTRANSACTIONID" NUMBER,
		"HOMEENTERPRISELOCATIONCODE" VARCHAR2(4),
		"CURRENTENTERPRISELOCATIONCODE" VARCHAR2(4),
		"UNITID" VARCHAR2(1),
		"SORTIEDATE" VARCHAR2(7),
		"DURATIONEXCEEDS24HOURS" VARCHAR2(1),
		"OPERATIONALEVENTTYPEEVENT" VARCHAR2(3),
		"ASSIGNTOONESCHEDULEINGBLOCK" VARCHAR2(1),
		"ESTIMATEDFUELLOAD" VARCHAR2(10),
		"EQUIPMENTID" VARCHAR2(5),
		"SORTIENUMBER" VARCHAR2(3),
		"STARTTIME" VARCHAR2(4),
		"STOPTIME" VARCHAR2(4),
		"MISSIONNUMBER" VARCHAR2(10),
		"DEVIATIONCAUSECODE" VARCHAR2(3),
		"CHARGEABLEINDICATOR" VARCHAR2(1),
		"DATEPROCESSED" DATE,
		"SCHEDULINGBLOCKNUMBER" VARCHAR2(5)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."OPERATIONALEVENTREPLACEMENTTRX" (
		"OPERATEVENTREPLACEMENTTRXID" NUMBER,
		"HOMEENTERPRISELOCATIONCODE" VARCHAR2(4),
		"CURRENTENTERPRISELOCATIONCODE" VARCHAR2(4),
		"UNITID" VARCHAR2(1),
		"SORTIEDATE" VARCHAR2(7),
		"SORTIENUMBER" VARCHAR2(3),
		"UNDOREPLACEMENT" VARCHAR2(1),
		"EQUIPMENTID" VARCHAR2(5),
		"DEVIATIONCODE" VARCHAR2(10),
		"DEVIATIONCAUSECODE" VARCHAR2(3),
		"CHARGEABLEINDICATOR" VARCHAR2(1),
		"NEWEQUIPMENTID" VARCHAR2(5),
		"MAINTENANCEEVENTID" VARCHAR2(10),
		"DEVIATIONREMARKS" VARCHAR2(4000),
		"DATEPROCESSED" DATE
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."OPERATIONALEVENTUPDATETRX" (
		"OPERATIONALEVENTUPDATETRXID" NUMBER NOT NULL,
		"OEUTRANSACTIONID" NUMBER,
		"HOMEENTERPRISELOCATIONCODE" VARCHAR2(4),
		"CURRENTENTERPRISELOCATIONCODE" VARCHAR2(4),
		"UNITID" VARCHAR2(1),
		"SORTIEDATE" VARCHAR2(7),
		"SCHEDULINGBLOCKNUMBER" VARCHAR2(3),
		"EQUIPMENTID" VARCHAR2(5),
		"SORTIENUMBER" VARCHAR2(3),
		"STARTDATE" VARCHAR2(7),
		"STARTTIME" VARCHAR2(4),
		"STOPDATE" VARCHAR2(7),
		"STOPTIME" VARCHAR2(4),
		"FUELLOAD" VARCHAR2(10),
		"MISSIONNUMBER" VARCHAR2(10),
		"OPERATIONALEVENTTYPEEVENT" VARCHAR2(1),
		"DATEPROCESSED" DATE
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."ORDNANCE" (
		"ORDNANCEID" NUMBER(10 , 0) NOT NULL,
		"WEAPONSTYPEID" NUMBER(10 , 0) NOT NULL,
		"ORDNANCE" VARCHAR2(50) NOT NULL,
		"CONFIGURATION" VARCHAR2(50),
		"MOCID" NUMBER(10 , 0) DEFAULT 0
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."ORGANIZATIONS" (
		"UNIT_ID" CHAR(1) NOT NULL,
		"STATION_LOCATION_CODE" VARCHAR2(4),
		"CAMSINIT" DATE,
		"LASTUPDATE" DATE DEFAULT SYSDATE,
		"LASTUPDATEBY" NUMBER(10 , 0) DEFAULT 0,
		"ORGNAME" VARCHAR2(50),
		"ORGANIZATIONSID" NUMBER(10 , 0) NOT NULL,
		"ORGID" VARCHAR2(5),
		"WINGID" NUMBER(10 , 0),
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL,
		"ORGANIZATIONNUMBER" VARCHAR2(10),
		"ORGANIZATIONKIND" VARCHAR2(10),
		"ORGANIZATIONTYPE" VARCHAR2(2),
		"AFI21103ORGANIZATIONNUMBER" VARCHAR2(10),
		"AFI21103ORGANIZATIONKIND" VARCHAR2(10),
		"AFI21103ORGANIZATIONTYPE" VARCHAR2(2),
		"DETACHMENTNUMBER" VARCHAR2(2),
		"OVERSEASINDICATOR" VARCHAR2(1) DEFAULT 'N',
		"CELASTREPORTINGDATE" VARCHAR2(5)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."ORGANIZATIONTRX" (
		"ORGANIZATIONLOADTRXID" NUMBER(20 , 0) NOT NULL,
		"CURRENTENTERPRISELOCATIONCODE" VARCHAR2(4),
		"UNITID" VARCHAR2(1),
		"ORGANIZATIONID" VARCHAR2(10),
		"ORGANIZATIONNUMBER" VARCHAR2(10),
		"ORGANIZATIONKIND" VARCHAR2(10),
		"ORGANIZATIONTYPE" VARCHAR2(2),
		"NOMENCLATURE" VARCHAR2(50),
		"INSTALLTIONCODE" VARCHAR2(10),
		"AFI21103ORGANIZATIONNUMBER" VARCHAR2(10),
		"AFI21103ORGANIZATIONKIND" VARCHAR2(10),
		"AFI21103ORGANIZATIONTYPE" VARCHAR2(2),
		"DETACHMENTNUMBER" VARCHAR2(2),
		"OVERSEASINDICATOR" VARCHAR2(1),
		"CELASTREPORTINGDATE" VARCHAR2(5),
		"HOSTUNITDATEANDTIME" VARCHAR2(25),
		"TRANSACTIONORDINALDATE" VARCHAR2(25),
		"RECORDDATETIME" DATE DEFAULT SYSDATE,
		"APPLICATIONNOTE" NVARCHAR2(2000),
		"DATEPROCESSED" DATE,
		"HOMEENTERPRISELOCATIONCODE" VARCHAR2(4),
		"TRANSACTIONTYPE" VARCHAR2(50),
		"NEWORGANIZATIONID" VARCHAR2(10),
		"NEWORGANIZATIONNUMBER" VARCHAR2(10),
		"NEWORGANIZATIONKIND" VARCHAR2(10),
		"NEWORGANIZATIONTYPE" VARCHAR2(2)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."PERMISSIONS" (
		"PERMISSIONID" NUMBER(10 , 0) NOT NULL,
		"SQUADRONID" NUMBER(10 , 0) NOT NULL,
		"USERID" NUMBER(10 , 0) NOT NULL,
		"EMOCROLE" NUMBER(1 , 0) DEFAULT 0
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 196608
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."PILOT" (
		"PILOTID" NUMBER(10 , 0) NOT NULL,
		"PILOTNAME" VARCHAR2(50) NOT NULL,
		"RANKID" NUMBER(10 , 0) NOT NULL,
		"SQUADRONID" NUMBER(10 , 0) NOT NULL,
		"PILOTFIRSTNAME" VARCHAR2(50),
		"PILOTMIDINIT" CHAR(1),
		"PILOTLASTNAME" VARCHAR2(50),
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."POSSESSIONS" (
		"POSSESSIONID" NUMBER(10 , 0) NOT NULL,
		"POSSESSIONCODE" CHAR(2) NOT NULL,
		"POSSESSIONDESCRIPTION" VARCHAR2(50),
		"DEFAULTPOSSESSION" NUMBER(10 , 0) NOT NULL,
		"CAMSINIT" DATE,
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 393216
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."RANGES" (
		"RANGEID" NUMBER(10 , 0) NOT NULL,
		"RANGE" VARCHAR2(50) NOT NULL,
		"RANGEDESCRIPTION" VARCHAR2(100),
		"MOCID" NUMBER(10 , 0) DEFAULT 0
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."RANKS" (
		"RANKID" NUMBER(10 , 0) NOT NULL,
		"RANKCODE" VARCHAR2(10) NOT NULL,
		"RANKDESCRIPTION" VARCHAR2(100),
		"DEFAULTRANK" NUMBER(10 , 0) NOT NULL,
		"GRADECODE" VARCHAR2(3),
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."REMARKS" (
		"REMARKSID" NUMBER(10 , 0) NOT NULL,
		"REMARKS" VARCHAR2(4000) NOT NULL,
		"REMARKSDATE" DATE DEFAULT SYSDATE
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 655360
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."REPORTCOLUMNS" (
		"COLUMNNUMBER" NUMBER(10 , 0) NOT NULL,
		"COLUMNNAME" VARCHAR2(50) NOT NULL,
		"REPORTID" NUMBER(10 , 0)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."REPORTCRITERIA" (
		"CRITERIAID" NUMBER NOT NULL,
		"REPORTID" NUMBER NOT NULL,
		"REPORTNAME" VARCHAR2(100) NOT NULL,
		"REPORTVIEW" VARCHAR2(50) NOT NULL,
		"FIELDS" VARCHAR2(4000) NOT NULL,
		"QUERYTYPE" VARCHAR2(10) NOT NULL,
		"NFFIELDNAME" VARCHAR2(50),
		"COLUMNHEADER" VARCHAR2(50),
		"CRITERIAFIELD1" VARCHAR2(50),
		"CRITERIAFIELD2" VARCHAR2(50),
		"CRITERIAFIELD3" VARCHAR2(50),
		"CRITERIAFIELD4" VARCHAR2(50),
		"CRITERIAFIELD5" VARCHAR2(50),
		"CRITERIAFIELD6" VARCHAR2(50),
		"COMPARISONOPERATOR1" VARCHAR2(10),
		"COMPARISONOPERATOR2" VARCHAR2(10),
		"COMPARISONOPERATOR3" VARCHAR2(10),
		"COMPARISONOPERATOR4" VARCHAR2(10),
		"COMPARISONOPERATOR5" VARCHAR2(10),
		"COMPARISONOPERATOR6" VARCHAR2(10),
		"CRITERIATEXT1" VARCHAR2(50),
		"CRITERIATEXT2" VARCHAR2(50),
		"CRITERIATEXT3" VARCHAR2(50),
		"CRITERIATEXT4" VARCHAR2(50),
		"CRITERIATEXT5" VARCHAR2(50),
		"CRITERIATEXT6" VARCHAR2(50),
		"ANDOR2" VARCHAR2(5),
		"ANDOR3" VARCHAR2(5),
		"ANDOR4" VARCHAR2(5),
		"ANDOR5" VARCHAR2(5),
		"ANDOR6" VARCHAR2(5),
		"RIGHTPAREN2" VARCHAR2(3),
		"RIGHTPAREN3" VARCHAR2(3),
		"RIGHTPAREN4" VARCHAR2(3),
		"RIGHTPAREN5" VARCHAR2(3),
		"RIGHTPAREN6" VARCHAR2(3),
		"LEFTPAREN1" VARCHAR2(3),
		"LEFTPAREN2" VARCHAR2(3),
		"LEFTPAREN3" VARCHAR2(3),
		"LEFTPAREN4" VARCHAR2(3),
		"LEFTPAREN5" VARCHAR2(3),
		"SORTBY" VARCHAR2(4000),
		"GROUPBY" VARCHAR2(4000),
		"DESCENDING" VARCHAR2(3),
		"MOCID" NUMBER
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."REPORTPARAMETERS" (
		"PARAMETERNUMBER" NUMBER(10 , 0) NOT NULL,
		"PARAMETERNAME" VARCHAR2(100) NOT NULL,
		"PARAMETERTYPE" NUMBER(10 , 0) NOT NULL,
		"PARAMETERLABEL" VARCHAR2(50),
		"REPORTID" NUMBER(10 , 0)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."REPORTS" (
		"REPORTNAME" VARCHAR2(50) NOT NULL,
		"SQLSTATEMENT" VARCHAR2(4000) NOT NULL,
		"LIMITBYSQUADRON" NUMBER(10 , 0) NOT NULL,
		"REPORTID" NUMBER(10 , 0) NOT NULL,
		"REPORTSOURCE" VARCHAR2(100),
		"REPORTLASTUPDATED" DATE,
		"REPORTLASTUPDATER" NUMBER(10 , 0),
		"USERID" NUMBER(10 , 0),
		"PUBLICREPORT" CHAR(1),
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 262144
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."SCHEDULE" (
		"SCHEDULEID" NUMBER(10 , 0) NOT NULL,
		"GO" NUMBER(10 , 0),
		"SCHEDULEDTAKEOFF" DATE,
		"SCHEDULEDLANDING" DATE,
		"ACTUALTAKEOFF" DATE,
		"ACTUALLANDING" DATE,
		"SPARE" NUMBER(10 , 0) NOT NULL,
		"ADJTAKEOFF" DATE,
		"ADJLANDING" DATE,
		"AREAARRIVETIME" DATE,
		"AREALEAVETIME" DATE,
		"LANDINGCODEID" NUMBER(10 , 0),
		"RANGEID" NUMBER(10 , 0),
		"DEVIATIONCODEID" NUMBER(10 , 0),
		"CAUSECODEID" NUMBER(10 , 0),
		"WXCODEID" NUMBER(10 , 0) DEFAULT 0,
		"MISSIONID" NUMBER(10 , 0),
		"AREAID" NUMBER(10 , 0),
		"AIRCRAFTID" NUMBER(10 , 0),
		"PILOTID" NUMBER(10 , 0),
		"SORTIENUM" NUMBER(3 , 0),
		"SORTIEMOD" NUMBER(2 , 0),
		"SORTIEDATE" CHAR(7),
		"BLOCKNUMBER" NUMBER(3 , 0),
		"PUBLISHED_FLAG" NUMBER(1 , 0),
		"SCHEDDAY" DATE,
		"CALLSIGN" VARCHAR2(50),
		"TRANSIENT" NUMBER(1 , 0),
		"DURATIONSCHEDULED" NUMBER(3 , 1),
		"DURATIONACTUAL" NUMBER(3 , 1),
		"CONFIGCODE" VARCHAR2(50),
		"SCHEDULEREMARKS" NUMBER(10 , 0),
		"MAINTREMARKS" NUMBER(10 , 0),
		"SORTIE_JOAP" CHAR(1),
		"SORTIE_SEMEDX" CHAR(1),
		"SQUADRONID" NUMBER(10 , 0),
		"UTILCODEID" NUMBER(10 , 0),
		"CAMSINIT" DATE,
		"SCHEDULESOURCE" VARCHAR2(3),
		"INTERFACELOGID" NUMBER(10 , 0),
		"TYPE_EVENT" CHAR(1),
		"SWAPPEDLINE" NUMBER(10 , 0)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 2097152
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."SCHEDULEDEVIATIONS" (
		"SCHEDULEDEVIATIONID" NUMBER(10 , 0) NOT NULL,
		"SCHEDULEID" NUMBER(10 , 0),
		"DEVIATIONCODEID" NUMBER(10 , 0),
		"CAUSECODEID" NUMBER(10 , 0),
		"NEWCAUSECODE" NUMBER(10 , 0),
		"SORTIENUM" NUMBER(10 , 0),
		"SORTIEDATE" CHAR(7),
		"SORTIEMOD" CHAR(3),
		"ACTIONOPTIONS" CHAR(1),
		"CHARGEABLE" NUMBER(1 , 0),
		"STARTDATETIME" DATE,
		"STOPDATETIME" DATE,
		"MAINTENANCEEVENTID" CHAR(10),
		"DEVIATIONSREMARKS" NUMBER(10 , 0),
		"INTERFACELOGID" NUMBER(10 , 0)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 262144
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."SCHEDULESCSV" (
		"SCHEDULECSVID" NUMBER NOT NULL,
		"SCHEDULE" BLOB NOT NULL,
		"SCHEDULENAME" VARCHAR2(50) NOT NULL,
		"DATEUPLOADED" DATE NOT NULL,
		"MOCID" NUMBER NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."SCHEDULESTATUS" (
		"SCHEDULESTATUSID" NUMBER(10 , 0),
		"SCHEDULEID" NUMBER(10 , 0),
		"STATUSCODEID" NUMBER(10 , 0),
		"STATUSTIME" DATE,
		"STATUSTYPE" NUMBER(1 , 0),
		"USERID" NUMBER(10 , 0),
		"FUELSTATUSID" NUMBER(10 , 0)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 262144
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."SEMEDX" (
		"SEMEDXID" NUMBER(10 , 0) NOT NULL,
		"SEMEDX" CHAR(1) NOT NULL,
		"DEFAULTVAL" NUMBER(1 , 0) DEFAULT 0,
		"COLORRULESID" NUMBER(10 , 0) NOT NULL,
		"SEMEDXDESCRIPTION" VARCHAR2(100),
		"MOCID" NUMBER(10 , 0) DEFAULT 0
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."SEMEDXDATA" (
		"SEMDATAID" NUMBER(10 , 0) NOT NULL,
		"ENGINEDATAID" NUMBER(10 , 0) NOT NULL,
		"SEMEDXID" NUMBER(10 , 0) NOT NULL,
		"MOCCONTROLLER" VARCHAR2(50) NOT NULL,
		"SAMPLEDATE" DATE NOT NULL,
		"REASON" VARCHAR2(50),
		"HOURSREQUIRED" NUMBER(10 , 1),
		"HOURSREMAINING" NUMBER(10 , 0),
		"NOTIFIEDBY" VARCHAR2(50),
		"EXPEDITERNOTIFIED" NUMBER(1 , 0) DEFAULT 0,
		"SEMEDXLASTUPDATED" DATE,
		"SCHEDULEID" NUMBER(10 , 0),
		"DATECLEARED" DATE DEFAULT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."SHOPDISPATCH" (
		"SHOPDISPATCHID" NUMBER(10 , 0) NOT NULL,
		"AIRCRAFTID" NUMBER(10 , 0) NOT NULL,
		"REQUESTER" VARCHAR2(50),
		"WORKCENTERID" NUMBER(10 , 0),
		"PERSONCONTACTED" VARCHAR2(50),
		"PERSONDISPATCHED" VARCHAR2(50),
		"REQUESTDATE" DATE,
		"DISCREPANCY" VARCHAR2(50),
		"COMPLETIONDATE" DATE,
		"ETICSHOWTIME" DATE,
		"ENTEREDBY" VARCHAR2(50),
		"SQDISPATCHEDTOID" NUMBER(10 , 0),
		"LASTUPDATE" DATE DEFAULT SYSDATE,
		"LASTUPDATEBY" NUMBER(10 , 0) DEFAULT 0,
		"ENTERED" DATE
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."SMSTESTBLOB" (
		"ID" NUMBER NOT NULL,
		"PHOTO" BLOB,
		"AUTHOR" VARCHAR2(100),
		"DESCRIPTION" VARCHAR2(500)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."SQUADRONS" (
		"SQUADRONID" NUMBER(10 , 0) NOT NULL,
		"SQUADRONNAME" VARCHAR2(50) NOT NULL,
		"SHORTNAME" VARCHAR2(50) NOT NULL,
		"WINGID" NUMBER(10 , 0) NOT NULL,
		"COLORID" NUMBER(10 , 0) NOT NULL,
		"SLC" CHAR(4),
		"ORGANIZATION_ID" VARCHAR2(5),
		"CAMSINIT" DATE,
		"ORGANIZATIONSID" NUMBER(10 , 0),
		"MOCID" NUMBER(10 , 0) DEFAULT 0,
		"TIMEOFFSETFROMMOC" NUMBER(2 , 0) DEFAULT 0
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."SQUADRON_SORT_ORDER" (
		"SQSORTORDERID" NUMBER(10 , 0) NOT NULL,
		"USERID" NUMBER(10 , 0),
		"SQUADRONID" NUMBER(10 , 0),
		"SORTORDER" NUMBER(10 , 0)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."STATIONLOCCODES" (
		"STALOCCODEID" NUMBER(10 , 0) NOT NULL,
		"STATIONLOC" VARCHAR2(4) NOT NULL,
		"STALOCNARRATIVE" VARCHAR2(50),
		"CAMSINIT" DATE,
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL,
		"STARTDATE" DATE DEFAULT SYSDATE,
		"STOPDATE" DATE
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 458752
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."STATUSCODE" (
		"STATUSCODEID" NUMBER(10 , 0) NOT NULL,
		"STATUSCODE" VARCHAR2(50) NOT NULL,
		"ORDERNUMBER" NUMBER(10 , 0) DEFAULT 0  NOT NULL,
		"ICONNAME" VARCHAR2(50) NOT NULL,
		"DEFAULTSTATUSCODE" NUMBER(10 , 0) DEFAULT 0  NOT NULL,
		"LASTFLOWN" NUMBER(10 , 0) DEFAULT 0  NOT NULL,
		"FLYING" NUMBER(10 , 0) DEFAULT 0  NOT NULL,
		"TAKEOFF" NUMBER(10 , 0) DEFAULT 0  NOT NULL,
		"STATUSCODELABEL" VARCHAR2(8),
		"ALLOWSORTIEUPDATE" NUMBER(1 , 0) DEFAULT 0,
		"ISREQUIRED" NUMBER(1 , 0) DEFAULT 0  NOT NULL,
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."STATUSCORRECTIONTRX" (
		"STATUSCORRECTIONID" NUMBER(20 , 0) NOT NULL,
		"CURRENTENTERPRISELOCATIONCODE" VARCHAR2(4),
		"UNITID" VARCHAR2(1),
		"EQUIPMENTID" VARCHAR2(5),
		"MAINTENANCESTATUSCODE" VARCHAR2(4),
		"CONDITIONSTATUSCODE" VARCHAR2(1),
		"STARTDATE" VARCHAR2(7),
		"STARTTIME" VARCHAR2(4),
		"STOPDATE" VARCHAR2(5),
		"STOPTIME" VARCHAR2(4),
		"WORKUNITCODE" VARCHAR2(32),
		"GEOLOCCODE" VARCHAR2(4),
		"TRANSACTIONORDINALDATE" VARCHAR2(20),
		"HOSTUNITDATEANDTIME" VARCHAR2(20),
		"RECORDDATETIME" DATE DEFAULT SYSDATE,
		"APPLICATIONNOTE" NVARCHAR2(2000),
		"DATEPROCESSED" DATE,
		"HOMEENTERPRISELOCATIONCODE" VARCHAR2(4),
		"UTCSTARTDATEANDTIME" DATE
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."STATUSIMAGE" (
		"STATUSIMAGEID" NUMBER NOT NULL,
		"IMAGE_DATA" BLOB NOT NULL,
		"ICON_TYPE" VARCHAR2(1) DEFAULT 'B',
		"IMAGE_NAME" VARCHAR2(50) NOT NULL,
		"CONTENTTYPE" VARCHAR2(50),
		"STATUSCODE" VARCHAR2(50),
		"NOTE" VARCHAR2(50),
		"EXTENSION" VARCHAR2(4) DEFAULT '.gif',
		"DATEUPLOADED" DATE,
		"UPLOADEDBY" NUMBER
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 524288
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."STATUSTRANSITIONRULE" (
		"STATRULEID" NUMBER(10 , 0) NOT NULL,
		"STATUSCODEID" NUMBER(10 , 0) NOT NULL,
		"TRANSITION2ID" NUMBER(10 , 0) NOT NULL,
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 196608
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."STATUSUPDATETRX" (
		"STATUSUPDATETRXID" NUMBER(20 , 0) NOT NULL,
		"CURRENTENTERPRISELOCATIONCODE" VARCHAR2(4),
		"UNITID" VARCHAR2(1),
		"EQUIPMENTID" VARCHAR2(5),
		"MAINTENANCESTATUSCODE" VARCHAR2(4),
		"CONDITIONSTATUSCODE" VARCHAR2(1),
		"STARTDATE" VARCHAR2(7),
		"STARTTIME" VARCHAR2(4),
		"WORKUNITCODE" VARCHAR2(32),
		"EVENTID" VARCHAR2(15),
		"WORKCENTEREVENT" VARCHAR2(15),
		"ESTIMATEDTIMEINCOMMISSION" VARCHAR2(25),
		"PARTSPLUS" VARCHAR2(9),
		"GEOLOCCODE" VARCHAR2(4),
		"STATUSNARRATIVE" VARCHAR2(40),
		"LOCATIONCODE" VARCHAR2(10),
		"EQUIPMENTORGANIZATIONFLIGHTID" VARCHAR2(10),
		"MAINTENANCEREPAIRPRIORITY" VARCHAR2(10),
		"ARMED" VARCHAR2(1),
		"MULTIPLECONFIGURATIONID" VARCHAR2(10),
		"LOCALOPTION" VARCHAR2(10),
		"RECEIVEMAINTENANCELIMITREPORT" VARCHAR2(10),
		"HOSTUNITDATEANDTIME" VARCHAR2(25),
		"TRANSACTIONORDINALDATE" VARCHAR2(25),
		"RECORDDATETIME" DATE DEFAULT SYSDATE,
		"APPLICATIONNOTE" NVARCHAR2(2000),
		"DATEPROCESSED" DATE,
		"HOMEENTERPRISELOCATIONCODE" VARCHAR2(4),
		"UTCSTARTDATEANDTIME" DATE
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."SUPPLYINQUIRY" (
		"EQUIPID" VARCHAR2(5),
		"DOCUMENTNUM" VARCHAR2(14),
		"WORKCENTER" VARCHAR2(5),
		"STAT" VARCHAR2(2),
		"EDD" VARCHAR2(4),
		"WUC" VARCHAR2(5),
		"QTY" VARCHAR2(5),
		"EVENTNUM" VARCHAR2(13),
		"LOC" VARCHAR2(3),
		"NARRATIVE" VARCHAR2(50),
		"UNITID" CHAR(1),
		"ELC" VARCHAR2(4),
		"AIRCRAFTID" NUMBER(10 , 0)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."SYMBOLS" (
		"SYMBOLID" NUMBER(10 , 0) NOT NULL,
		"CONDCODEID" NUMBER(10 , 0) NOT NULL,
		"SYMBOL" VARCHAR2(50) NOT NULL,
		"SYMBOLDESCRIPTION" VARCHAR2(100),
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."TBMCSINTERFACELOG" (
		"INTERFACELOGID" NUMBER(10 , 0) NOT NULL,
		"TBMCSRESPONSERECV" DATE,
		"MESSAGEID" VARCHAR2(255),
		"CAMSVALIDATED" NUMBER(1 , 0) DEFAULT 0,
		"USERID" NUMBER(10 , 0),
		"TBMCSMSGSENT" DATE,
		"TBMCSRESPONSE" VARCHAR2(255),
		"UPDATEMETHOD" VARCHAR2(100),
		"MESSAGEBODY" CLOB,
		"UPDATEOBJECT" VARCHAR2(100),
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 40894464
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."USERALERT" (
		"ALERTID" NUMBER(20 , 0) NOT NULL,
		"USERID" NUMBER(10 , 0),
		"SENTBY" NUMBER(10 , 0),
		"RECEIVED" DATE DEFAULT sysdate,
		"ACKNOWLEDGED" DATE DEFAULT NULL,
		"ALERTMSG" VARCHAR2(4000),
		"PRIORITY" NUMBER(1 , 0) DEFAULT 0
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 327680
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."USERIMAGES" (
		"IMAGEID" NUMBER NOT NULL,
		"IMAGE" BLOB,
		"USERID" NUMBER NOT NULL,
		"DATEUPLOADED" DATE NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."USERLINKS" (
		"LINKID" NUMBER(10 , 0) NOT NULL,
		"LINKURL" VARCHAR2(100) NOT NULL,
		"LINKDESCRIPTION" VARCHAR2(255),
		"ENTEREDBY" NUMBER(10 , 0),
		"ENTEREDON" DATE DEFAULT sysdate,
		"LASTUPDATED" DATE DEFAULT sysdate,
		"LINKORDER" NUMBER(2 , 0) DEFAULT 0,
		"LINKTITLE" VARCHAR2(25) NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."USERS" (
		"USERID" NUMBER(10 , 0) NOT NULL,
		"USERNAME" VARCHAR2(25) NOT NULL,
		"USERPASSWORD" VARCHAR2(100),
		"FULLNAME" VARCHAR2(50),
		"IPADDRESS" VARCHAR2(50),
		"ISONLINE" NUMBER(1 , 0) DEFAULT 0  NOT NULL,
		"BADATTEMPTS" NUMBER(1 , 0) DEFAULT 0  NOT NULL,
		"AIRCRAFTSORTORDER1" VARCHAR2(50),
		"DATEPREFERENCE" NUMBER(1 , 0) DEFAULT 0,
		"TIMEPREFERENCE" NUMBER(1 , 0) DEFAULT 0,
		"USERSTATUS" VARCHAR2(10) DEFAULT 'New',
		"AIRCRAFTSORTORDER2" VARCHAR2(50),
		"AIRCRAFTSORTORDER3" VARCHAR2(50),
		"EMAIL" VARCHAR2(100),
		"EMOCADMIN" NUMBER(1 , 0) DEFAULT 0,
		"LASTLOGIN" DATE DEFAULT SYSDATE,
		"AIRCRAFTPERROW" NUMBER(2 , 0) DEFAULT 7,
		"REFRESHPREF" NUMBER(6 , 0) DEFAULT 10000,
		"USERHOMEHTML" CLOB,
		"VIEWABLESQUADRONS" VARCHAR2(200),
		"PORTALUSERID" VARCHAR2(255),
		"PORTALPASSWORD" VARCHAR2(255) DEFAULT '1D077A3FED700DB292F76BCEB2B839F9',
		"DEFAULTMOC" VARCHAR2(10),
		"BACKGROUNDCOLOR" VARCHAR2(7 CHAR) DEFAULT '#000000',
		"FONTCOLOR" VARCHAR2(7 CHAR) DEFAULT '#FFFFFF',
		"LINKCOLOR" VARCHAR2(7 CHAR) DEFAULT '#FF0000',
		"RANKCODE" VARCHAR2(10) DEFAULT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 524288
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."UTILIZATIONCODES" (
		"UTILCODEID" NUMBER(10 , 0) NOT NULL,
		"UTILIZATIONCODE" CHAR(4) NOT NULL,
		"AUCNARRATIVE" VARCHAR2(20),
		"PROGRAMELEMENTCODE" VARCHAR2(8),
		"CAMSINIT" DATE,
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL,
		"MISSIONDESIGNSERIES" VARCHAR2(11),
		"LASTUPDATE" DATE DEFAULT SYSDATE
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 524288
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."UTILIZATIONCODETRX" (
		"UTILIZATIONCODETRXID" NUMBER(20 , 0) NOT NULL,
		"FROMENTERPRISELOCATIONCODE" VARCHAR2(4),
		"FROMUNITID" VARCHAR2(1),
		"AIRCRAFTUTILIZATIONCODE" VARCHAR2(4),
		"AUCNARRATIVE" VARCHAR2(20),
		"MISSIONDESIGNSERIES" VARCHAR2(9),
		"PROGRAMELEMENTCODE" VARCHAR2(8),
		"DATEPROCESSED" DATE DEFAULT SYSDATE,
		"APPLICATIONNOTE" NVARCHAR2(1000)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 720896
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."UVRCHANGETRX" (
		"UVRCHANGETRXID" NUMBER(20 , 0) NOT NULL,
		"HOMEENTERPRISELOCATIONCODE" VARCHAR2(4),
		"CURRENTENTERPRISELOCATIONCODE" VARCHAR2(4),
		"UNITID" VARCHAR2(1),
		"TIMEZONEFACTOR" VARCHAR2(1),
		"TIMEZONEHOURS" VARCHAR2(2),
		"GMTFACTOR" VARCHAR2(1),
		"GMTHOURS" VARCHAR2(2),
		"HOSTTIMEZONEFACTOR" VARCHAR2(1),
		"HOSTTIMEZONEHOURS" VARCHAR2(2),
		"HOSTUNITDATEANDTIME" VARCHAR2(25),
		"TRANSACTIONORDINALDATE" VARCHAR2(25),
		"RECORDDATETIME" DATE DEFAULT SYSDATE,
		"APPLICATIONNOTE" NVARCHAR2(2000),
		"DATEPROCESSED" DATE,
		"REMOTEPRINTINDICATOR" VARCHAR2(1)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."WEAPONSCLASS" (
		"WEAPONSCLASSID" NUMBER(10 , 0) NOT NULL,
		"WEAPONSCLASS" CHAR(1) NOT NULL,
		"DEFAULTVAL" NUMBER(10 , 0),
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."WEAPONSINFO" (
		"WEAPONSID" NUMBER(10 , 0) NOT NULL,
		"COMBATSCLID" NUMBER(10 , 0) NOT NULL,
		"CHAFF" NUMBER(10 , 0) DEFAULT 0,
		"FLARE" NUMBER(10 , 0) DEFAULT 0,
		"HOTGUNS" NUMBER(1 , 0) DEFAULT 0,
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."WEAPONSLOAD" (
		"LOADID" NUMBER(10 , 0) NOT NULL,
		"STATION" NUMBER(10 , 0) NOT NULL,
		"ORDNANCEID" NUMBER(10 , 0),
		"WEAPONSNUMBER" NUMBER(10 , 0) NOT NULL,
		"AIRCRAFTID" NUMBER(10 , 0),
		"WEAPONSCLASSID" NUMBER(10 , 0),
		"FIRESYMBOLID" NUMBER(10 , 0)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."WEAPONTYPES" (
		"WEAPONSTYPEID" NUMBER(10 , 0) NOT NULL,
		"WEAPONTYPE" VARCHAR2(50) NOT NULL,
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."WEBSERVERS" (
		"SERVERID" NUMBER NOT NULL,
		"SERVERNAME" VARCHAR2(50) NOT NULL,
		"SERVERURL" VARCHAR2(125) NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."WHENDISCOVEREDCODES" (
		"WHENDISCOVEREDID" NUMBER(10 , 0) NOT NULL,
		"WDC" CHAR(1) NOT NULL,
		"WDCNARRATIVE" VARCHAR2(50) NOT NULL,
		"CAMSINIT" DATE,
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL,
		"STARTDATE" DATE DEFAULT SYSDATE,
		"STOPDATE" DATE,
		"LASTUPDATE" DATE DEFAULT SYSDATE
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."WHENDISCOVEREDCODETRX" (
		"WHENDISCOVEREDCODETRXID" NUMBER(20 , 0) NOT NULL,
		"FROMENTERPRISELOCATIONCODE" VARCHAR2(4),
		"FROMUNITID" VARCHAR2(1),
		"WHENDISCOVEREDCODE" VARCHAR2(1),
		"WHENDISCOVEREDCODENARRATIVE" VARCHAR2(50),
		"STARTDATE" VARCHAR2(20),
		"STOPDATE" VARCHAR2(20),
		"DATEPROCESSED" DATE DEFAULT SYSDATE,
		"TRANSACTIONCODE" VARCHAR2(1)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."WINGS" (
		"WINGID" NUMBER(10 , 0) NOT NULL,
		"WINGNAME" VARCHAR2(50) NOT NULL,
		"UNITID" CHAR(1),
		"COMMANDCODE" CHAR(3),
		"ELC" CHAR(4),
		"LASTUPDATE" DATE DEFAULT SYSDATE,
		"LASTUPDATEBY" NUMBER(10 , 0) DEFAULT 0,
		"DEFAULTWING" NUMBER(1 , 0) DEFAULT 0,
		"SCHEDULEDOW" NUMBER(1 , 0) DEFAULT 5,
		"SCHEDULETIME" CHAR(4) DEFAULT '1500',
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL,
		"TIMEZONEFACTOR" VARCHAR2(1) DEFAULT NULL,
		"TIMEZONEHOURS" VARCHAR2(2) DEFAULT NULL,
		"GMTFACTOR" VARCHAR2(1) DEFAULT NULL,
		"GMTHOURS" VARCHAR2(2) DEFAULT NULL,
		"REMOTEPRINTINDICATOR" VARCHAR2(1),
		"IMDSINTERFACEON" NUMBER(1 , 0) DEFAULT 0
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."WORKCENTERS" (
		"WORKCENTERID" NUMBER(10 , 0) NOT NULL,
		"WORKCENTERNAME" VARCHAR2(50),
		"PORGID" VARCHAR2(10),
		"CAMSINIT" DATE,
		"WORKCENTERCODE" VARCHAR2(5) NOT NULL,
		"UNIT_ID" CHAR(1),
		"LASTUPDATE" DATE DEFAULT SYSDATE,
		"LASTUPDATEBY" NUMBER(10 , 0) DEFAULT 0,
		"WINGID" NUMBER(10 , 0),
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 917504
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."WORKCENTERTRX" (
		"WORKCENTERTRXID" NUMBER(20 , 0) NOT NULL,
		"ENTERPRISELOCATIONCODE" VARCHAR2(4),
		"UNITID" VARCHAR2(1),
		"WORKCENTER" VARCHAR2(4),
		"NEWWORKCENTER" VARCHAR2(4),
		"WORKCENTERNARRATIVE" VARCHAR2(50),
		"ORGANIZATIONID" VARCHAR2(10),
		"HOSTUNITDATEANDTIME" VARCHAR2(25),
		"TRANSACTIONORDINALDATE" VARCHAR2(25),
		"RECORDDATETIME" DATE DEFAULT SYSDATE,
		"APPLICATIONNOTE" NVARCHAR2(2000),
		"DATEPROCESSED" DATE,
		"TRANSACTIONTYPE" VARCHAR2(50)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 393216
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."WORKUNITCODETRX" (
		"WORKUNITCODETRXID" NUMBER(20 , 0) NOT NULL,
		"FROMENTERPRISELOCATIONCODE" VARCHAR2(4),
		"FROMUNITID" VARCHAR2(1),
		"WORKUNITCODE" VARCHAR2(32),
		"WORKUNITCODENARRATIVE" VARCHAR2(50),
		"STARTDATE" VARCHAR2(20),
		"STOPDATE" VARCHAR2(20),
		"MISSIONDESIGNSERIES" VARCHAR2(11),
		"BLOCKNUMBERTYPE" VARCHAR2(3),
		"NEWWORKUNITCODE" VARCHAR2(32),
		"DATEPROCESSED" DATE DEFAULT SYSDATE,
		"TRANSACTIONCODE" VARCHAR2(1)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 10485760
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."WRITEUPS" (
		"WRITEUPID" NUMBER(10 , 0) NOT NULL,
		"WRITEUPTIME" DATE NOT NULL,
		"JCN" VARCHAR2(50),
		"CORRECTED" NUMBER(10 , 0) NOT NULL,
		"CORRECTEDTIME" DATE,
		"PACER" NUMBER(10 , 0) NOT NULL,
		"ETIC" CHAR(9),
		"AIRCRAFTID" NUMBER(10 , 0),
		"SYMBOLID" NUMBER(10 , 0),
		"WUCID" NUMBER(20 , 0),
		"DISCREPANCY" VARCHAR2(4000),
		"CORRECTIVEACTION" VARCHAR2(4000),
		"CAMSINIT" DATE
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 524288
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."WUC" (
		"WUCID" NUMBER(20 , 0) NOT NULL,
		"WUCCODE" VARCHAR2(32) NOT NULL,
		"WUCDESCRIPTION" VARCHAR2(50),
		"WUCSTARTDATE" DATE DEFAULT SYSDATE,
		"WUCSTOPDATE" DATE,
		"CAMSINIT" DATE,
		"LASTUPDATE" DATE DEFAULT SYSDATE,
		"LASTUPDATEBY" NUMBER(10 , 0) DEFAULT 0,
		"MISSIONDESIGNSERIES" VARCHAR2(15),
		"BLOCKNUMBER" VARCHAR2(3) DEFAULT '000',
		"NEWWUC" VARCHAR2(32)
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 46137344
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE TABLE "EMOC3"."WX" (
		"WXCODEID" NUMBER(10 , 0) NOT NULL,
		"WEATHERDESCRIPTION" VARCHAR2(100),
		"DEFAULTWEATHERCODE" NUMBER(1 , 0) DEFAULT 0  NOT NULL,
		"WEATHERCODE" VARCHAR2(10) NOT NULL,
		"MOCID" NUMBER(10 , 0) DEFAULT 0  NOT NULL
	)
	PCTUSED 0
	LOGGING
	NOCOMPRESS
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT)
	TABLESPACE "EMOCMAIN";

CREATE INDEX "EMOC3"."IDX_ACRFTENGINEDATA_AIRCRAFTID"
	ON "EMOC3"."AIRCRAFTENGINEDATA"
	("AIRCRAFTID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 196608
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_AIRCRAFTMDS_MOCID"
	ON "EMOC3"."AIRCRAFTMDS"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_AIRCRAFT_AIRCRAFTMDSID"
	ON "EMOC3"."AIRCRAFT"
	("AIRCRAFTMDSID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_AIRCRAFT_AIRCRAFTWUCID"
	ON "EMOC3"."AIRCRAFT"
	("AIRCRAFTWUCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_AIRCRAFT_CODITIONCODEID"
	ON "EMOC3"."AIRCRAFT"
	("CONDITIONCODEID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_AIRCRAFT_COMBATSCLID"
	ON "EMOC3"."AIRCRAFT"
	("COMBATSCLID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_AIRCRAFT_CREWCHIEFID"
	ON "EMOC3"."AIRCRAFT"
	("CREWCHIEFID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_AIRCRAFT_FIRESYMBOLID"
	ON "EMOC3"."AIRCRAFT"
	("FIRESYMBOLID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_AIRCRAFT_FLIGHTID"
	ON "EMOC3"."AIRCRAFT"
	("FLIGHTID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_AIRCRAFT_FUELSTATUSID"
	ON "EMOC3"."AIRCRAFT"
	("FUELSTATUSID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_AIRCRAFT_HANGERQUEENSTATUS"
	ON "EMOC3"."AIRCRAFT"
	("HANGERQUEENSTATUS"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_AIRCRAFT_MOCID"
	ON "EMOC3"."AIRCRAFT"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_AIRCRAFT_POSSESSIONID"
	ON "EMOC3"."AIRCRAFT"
	("POSSESSIONID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_AIRCRAFT_REMARKSID"
	ON "EMOC3"."AIRCRAFT"
	("REMARKSID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_AIRCRAFT_SHORTTAIL"
	ON "EMOC3"."AIRCRAFT"
	("SHORTTAILNUMBER"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_AIRCRAFT_SQUADRONID"
	ON "EMOC3"."AIRCRAFT"
	("SQUADRONID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_AIRCRAFT_STATUSCODEID"
	ON "EMOC3"."AIRCRAFT"
	("STATUSCODEID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_AREAS_MOCID"
	ON "EMOC3"."AREAS"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_ARMAMENT_AIRCRAFTMDSID"
	ON "EMOC3"."ARMAMENT"
	("AIRCRAFTMDSID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_ARMAMENT_MOCID"
	ON "EMOC3"."ARMAMENT"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_ARMAMENT_ORDNANCEID"
	ON "EMOC3"."ARMAMENT"
	("ORDNANCEID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_ASSIGNMENTCODES_MOCID"
	ON "EMOC3"."ASSIGNMENTCODES"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_CAUSECODES_CAUSECODE"
	ON "EMOC3"."CAUSECODES"
	("CAUSECODE"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 196608
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_CAUSECODES_MOCID"
	ON "EMOC3"."CAUSECODES"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 196608
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_COLORRULES_COLORID"
	ON "EMOC3"."COLORRULES"
	("COLORID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_COLORRULES_MOCID"
	ON "EMOC3"."COLORRULES"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_COMBATSCLRULES_ACFTMDSID"
	ON "EMOC3"."COMBATSCLRULES"
	("AIRCRAFTMDSID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_COMBATSCLRULES_COMBATSCLID"
	ON "EMOC3"."COMBATSCLRULES"
	("COMBATSCLID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_COMBATSCLRULES_MOCID"
	ON "EMOC3"."COMBATSCLRULES"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_COMBATSCLS_MOCID"
	ON "EMOC3"."COMBATSCLS"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_CONDITIONCODES_MOCID"
	ON "EMOC3"."CONDITIONCODES"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_CONDITIONSTATUS_COLORID"
	ON "EMOC3"."CONDITIONSTATUS"
	("COLORID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_CONDITIONSTATUS_MOCID"
	ON "EMOC3"."CONDITIONSTATUS"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_CREWCHIEFS_MOCID"
	ON "EMOC3"."CREWCHIEFS"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_CREWCHIEFS_RANKID"
	ON "EMOC3"."CREWCHIEFS"
	("RANKID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_CUSTOMDATA_MOCID"
	ON "EMOC3"."CUSTOMDATA"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_DEVIATIONCODES_COLORID"
	ON "EMOC3"."DEVIATIONCODES"
	("COLORID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_DEVIATIONCODES_MOCID"
	ON "EMOC3"."DEVIATIONCODES"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_EMOCCONFIG_LASTUPDATEBY"
	ON "EMOC3"."EMOCCONFIG"
	("LASTUPDATEDBY"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_EMOCCONFIG_MOCID"
	ON "EMOC3"."EMOCCONFIG"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_ENGINERUNLOG_AIRCRAFTID"
	ON "EMOC3"."ENGINERUNLOG"
	("AIRCRAFTID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_ENGINERUNLOG_ENGINEDATAID"
	ON "EMOC3"."ENGINERUNLOG"
	("ENGINEDATAID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_ENGINERUNLOG_LASTUPDATEBY"
	ON "EMOC3"."ENGINERUNLOG"
	("LASTUPDATEBY"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_EVENTLOG_MOCID"
	ON "EMOC3"."EVENTLOG"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_EVENTLOG_USERID"
	ON "EMOC3"."EVENTLOG"
	("USERID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_FIRESYMBOLS_MOCID"
	ON "EMOC3"."FIRESYMBOLS"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_FLIGHTS_SQUADRONID"
	ON "EMOC3"."FLIGHTS"
	("SQUADRONID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_FLIGHTS_WORKCENTERID"
	ON "EMOC3"."FLIGHTS"
	("WORKCENTERID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_FUEL_COLORID"
	ON "EMOC3"."FUEL"
	("COLORID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_FUEL_MOCID"
	ON "EMOC3"."FUEL"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_GENERATIONFLOW_MOCID"
	ON "EMOC3"."GENERATIONFLOW"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_HANGER_QUEEN_CODE_MOCID"
	ON "EMOC3"."HANGER_QUEEN_CODE"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_HISTORY_AIRCRAFTID"
	ON "EMOC3"."HISTORY"
	("AIRCRAFTID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_HISTORY_USERID"
	ON "EMOC3"."HISTORY"
	("USERID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_HOTSPOTS_LOCATIONID"
	ON "EMOC3"."HOTSPOTS"
	("LOCATIONID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_HOTSPOTS_MOCID"
	ON "EMOC3"."HOTSPOTS"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_IFACEITEMS_IFACECONTROLID"
	ON "EMOC3"."INTERFACEITEMS"
	("INTERFACECONTROLID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_IFACELOG_AIRCRAFTID"
	ON "EMOC3"."INTERFACELOG"
	("AIRCRAFTID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 720896
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_IFACELOG_IFACECONTROLID"
	ON "EMOC3"."INTERFACELOG"
	("INTERFACECONTROLID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 655360
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_IFACELOG_MOCID"
	ON "EMOC3"."INTERFACELOG"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 720896
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_IFACELOG_USERID"
	ON "EMOC3"."INTERFACELOG"
	("USERID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 720896
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_IMDSLOGINS_USERID"
	ON "EMOC3"."IMDSLOGINS"
	("USERID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_IMDSLOGINS_WINGFID"
	ON "EMOC3"."IMDSLOGINS"
	("WINGID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_INTERFACEITEMS_MOCID"
	ON "EMOC3"."INTERFACEITEMS"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_JOAPDATA_ENGINEDATAID"
	ON "EMOC3"."JOAPDATA"
	("ENGINEDATAID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_JOAPDATA_JOAPID"
	ON "EMOC3"."JOAPDATA"
	("JOAPID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_JOAPDATA_SCHEDULEID"
	ON "EMOC3"."JOAPDATA"
	("SCHEDULEID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_JOAP_MOCID"
	ON "EMOC3"."JOAP"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_LANDINGCODES_MOCID"
	ON "EMOC3"."LANDINGCODES"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_LOCATIONS_MOCID"
	ON "EMOC3"."LOCATIONS"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 2097152
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_MESSAGES_MOCID"
	ON "EMOC3"."MESSAGES"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_MISSIONS_MOCID"
	ON "EMOC3"."MISSIONS"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_MOCADMINS_MOCID"
	ON "EMOC3"."MOCADMINS"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_MOCADMINS_USERID"
	ON "EMOC3"."MOCADMINS"
	("USERID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_OLDPASSWORDS_USERID"
	ON "EMOC3"."OLDPASSWORDS"
	("USERID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_ORDNANCE_MOCID"
	ON "EMOC3"."ORDNANCE"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_ORDNANCE_WEAPONSTYPEID"
	ON "EMOC3"."ORDNANCE"
	("WEAPONSTYPEID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_ORGANIZATIONS_MOCID"
	ON "EMOC3"."ORGANIZATIONS"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_PERMISSIONS_SQUADRONID"
	ON "EMOC3"."PERMISSIONS"
	("SQUADRONID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 196608
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_PERMISSIONS_USERID"
	ON "EMOC3"."PERMISSIONS"
	("USERID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 196608
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_PILOT_MOCID"
	ON "EMOC3"."PILOT"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_PILOT_RANKID"
	ON "EMOC3"."PILOT"
	("RANKID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_PILOT_SQUADRONID"
	ON "EMOC3"."PILOT"
	("SQUADRONID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_POSSESSIONS_MOCID"
	ON "EMOC3"."POSSESSIONS"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_RANGES_MOCID"
	ON "EMOC3"."RANGES"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_RANKS_MOCID"
	ON "EMOC3"."RANKS"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_REPORTCOLUMNS_REPORTID"
	ON "EMOC3"."REPORTCOLUMNS"
	("REPORTID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_REPORTCRITERIA_REPORTID"
	ON "EMOC3"."REPORTCRITERIA"
	("REPORTID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_REPORTPARAMETERS_REPORTID"
	ON "EMOC3"."REPORTPARAMETERS"
	("REPORTID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_REPORTS_MOCID"
	ON "EMOC3"."REPORTS"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_REPORTS_USERID"
	ON "EMOC3"."REPORTS"
	("USERID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_SCHDEVIATIONS_IFACELOGID"
	ON "EMOC3"."SCHEDULEDEVIATIONS"
	("INTERFACELOGID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_SCHEDULESTATUS_SCHEDULEID"
	ON "EMOC3"."SCHEDULESTATUS"
	("SCHEDULEID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 196608
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_SCHEDULE_AIRCRAFTID"
	ON "EMOC3"."SCHEDULE"
	("AIRCRAFTID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 262144
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_SCHEDULE_AREASID"
	ON "EMOC3"."SCHEDULE"
	("AREAID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_SCHEDULE_CAUSECODEID"
	ON "EMOC3"."SCHEDULE"
	("CAUSECODEID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_SCHEDULE_DEVIATIONCODEID"
	ON "EMOC3"."SCHEDULE"
	("DEVIATIONCODEID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 262144
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_SCHEDULE_LANDINGCODEID"
	ON "EMOC3"."SCHEDULE"
	("LANDINGCODEID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_SCHEDULE_MAINTREMARKS"
	ON "EMOC3"."SCHEDULE"
	("MAINTREMARKS"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_SCHEDULE_MISSIONID"
	ON "EMOC3"."SCHEDULE"
	("MISSIONID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_SCHEDULE_PILOTID"
	ON "EMOC3"."SCHEDULE"
	("PILOTID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_SCHEDULE_RANGEID"
	ON "EMOC3"."SCHEDULE"
	("RANGEID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_SCHEDULE_SCHEDULEREMARKS"
	ON "EMOC3"."SCHEDULE"
	("SCHEDULEREMARKS"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_SCHEDULE_SORTIEDATE"
	ON "EMOC3"."SCHEDULE"
	("SORTIEDATE"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 327680
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_SCHEDULE_SQUADRONID"
	ON "EMOC3"."SCHEDULE"
	("SQUADRONID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 262144
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_SCHEDULE_UTILCODEID"
	ON "EMOC3"."SCHEDULE"
	("UTILCODEID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_SCHEDULE_WXCODEID"
	ON "EMOC3"."SCHEDULE"
	("WXCODEID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 262144
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_SEMEDXDATA_ENGINEDATAID"
	ON "EMOC3"."SEMEDXDATA"
	("ENGINEDATAID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_SEMEDXDATA_SCHEDULEID"
	ON "EMOC3"."SEMEDXDATA"
	("SCHEDULEID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_SEMEDXDATA_SEMEDXID"
	ON "EMOC3"."SEMEDXDATA"
	("SEMEDXID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_SEMEDX_MOCID"
	ON "EMOC3"."SEMEDX"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_SHOPDISPATCH_AIRCRAFTID"
	ON "EMOC3"."SHOPDISPATCH"
	("AIRCRAFTID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_SQSORTORDER_SQUADRONID"
	ON "EMOC3"."SQUADRON_SORT_ORDER"
	("SQUADRONID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_SQUADRONS_COLORID"
	ON "EMOC3"."SQUADRONS"
	("COLORID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_SQUADRONS_MOCID"
	ON "EMOC3"."SQUADRONS"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_SQUADRONS_WINGID"
	ON "EMOC3"."SQUADRONS"
	("WINGID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_STATIONLOCCODES_MOCID"
	ON "EMOC3"."STATIONLOCCODES"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 196608
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_STATUSCODE_MOCID"
	ON "EMOC3"."STATUSCODE"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_STATUSCODE_ORDNUM"
	ON "EMOC3"."STATUSCODE"
	("ORDERNUMBER"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_SYMBOLS_CONDCODEID"
	ON "EMOC3"."SYMBOLS"
	("CONDCODEID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_SYMBOLS_MOCIDID"
	ON "EMOC3"."SYMBOLS"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_USERALERT_USERID"
	ON "EMOC3"."USERALERT"
	("USERID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_USERID"
	ON "EMOC3"."USERIMAGES"
	("USERID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_WEAPONSCLASS_MOCID"
	ON "EMOC3"."WEAPONSCLASS"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_WEAPONSINFO_COMBATSCLID"
	ON "EMOC3"."WEAPONSINFO"
	("COMBATSCLID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_WEAPONSINFO_MOCID"
	ON "EMOC3"."WEAPONSINFO"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_WEAPONSLOAD_AIRCRAFTEID"
	ON "EMOC3"."WEAPONSLOAD"
	("AIRCRAFTID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_WEAPONSLOAD_FIRESYMBOLID"
	ON "EMOC3"."WEAPONSLOAD"
	("FIRESYMBOLID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_WEAPONSLOAD_ORDANCEID"
	ON "EMOC3"."WEAPONSLOAD"
	("ORDNANCEID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_WEAPONSLOAD_WEAPONCLASSID"
	ON "EMOC3"."WEAPONSLOAD"
	("WEAPONSCLASSID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_WEAPONTYPES_MOCID"
	ON "EMOC3"."WEAPONTYPES"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_WHENDISCOVEREDCODES_MOCID"
	ON "EMOC3"."WHENDISCOVEREDCODES"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_WINGS_MOCID"
	ON "EMOC3"."WINGS"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_WINGS_WINGNAME"
	ON "EMOC3"."WINGS"
	("WINGNAME"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_WORKCENTERS_MOCID"
	ON "EMOC3"."WORKCENTERS"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 262144
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_WRITEUPS_AIRCRAFTID"
	ON "EMOC3"."WRITEUPS"
	("AIRCRAFTID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 196608
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_WRITEUPS_SYMBOLID"
	ON "EMOC3"."WRITEUPS"
	("SYMBOLID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_WRITEUPS_WUCID"
	ON "EMOC3"."WRITEUPS"
	("WUCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IDX_WX_MOCID"
	ON "EMOC3"."WX"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IX_AUCMDS"
	ON "EMOC3"."UTILIZATIONCODES"
	("MISSIONDESIGNSERIES"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 196608
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IX_AUC_UTILIZATIONCODE"
	ON "EMOC3"."UTILIZATIONCODES"
	("UTILIZATIONCODE"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 196608
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IX_GEOLOCCODETRX_DATEPROCESSED"
	ON "EMOC3"."GEOLOCCODETRX"
	("DATEPROCESSED"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 655360
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IX_GEOLOCCODETRX_GEOLOCCODE"
	ON "EMOC3"."GEOLOCCODETRX"
	("GEOLOCCODE"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 655360
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IX_MDSBLKWUC"
	ON "EMOC3"."WUC"
	("MISSIONDESIGNSERIES"		ASC,
	  "BLOCKNUMBER"		ASC,
	  "WUCCODE"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 18874368
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."IX_WUC_WUCCODE"
	ON "EMOC3"."WUC"
	("WUCCODE"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 11534336
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."MOC_MOCID_N"
	ON "EMOC3"."CHECKLIST"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."SYS_MTABLE_00000D44B_IND_1"
	ON "EMOC3"."EXPORT000021"
	("OBJECT_SCHEMA"		ASC,
	  "OBJECT_NAME"		ASC,
	  "OBJECT_TYPE"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE INDEX "EMOC3"."UK_MOCSTATUSICONS_IDX" ON "EMOC3"."MOCSTATUSICONS" ("ICON_TYPE","MISSIONDESIGNSERIES","MOCID","STATUSCODE");

CREATE UNIQUE INDEX "EMOC3"."MICROSOFT_PK_DTPROPERTIES"
	ON "EMOC3"."MICROSOFTDTPROPERTIES"
	("ID"		ASC,
	  "PROPERTY"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_ACFTMDSTYPES"
	ON "EMOC3"."ACFTMDSTYPES"
	("MOCID"		ASC,
	  "ACFTMDSTYPECD"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 7340032
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_AIRCRAFT"
	ON "EMOC3"."AIRCRAFT"
	("AIRCRAFTID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_AIRCRAFTCUSTOMDATA"
	ON "EMOC3"."AIRCRAFTCUSTOMDATA"
	("AIRCRAFTID"		ASC,
	  "CUSTOMDATAID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_AIRCRAFTENGINEDATA"
	ON "EMOC3"."AIRCRAFTENGINEDATA"
	("ENGINEDATAID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 196608
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_AIRCRAFTMDS"
	ON "EMOC3"."AIRCRAFTMDS"
	("AIRCRAFTMDSID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_AIRCRAFTSTATUSUPDATE"
	ON "EMOC3"."AIRCRAFTSTATUSUPDATE"
	("STATUSUPDATEID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 2097152
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_AREAS"
	ON "EMOC3"."AREAS"
	("AREAID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_ARMAMENT"
	ON "EMOC3"."ARMAMENT"
	("ARMAMENTID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_BASEMAPS_MAPID"
	ON "EMOC3"."BASEMAPS"
	("MAPID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_CAUSECODES"
	ON "EMOC3"."CAUSECODES"
	("CAUSECODEID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 196608
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_CAUSECODETRX"
	ON "EMOC3"."CAUSECODETRX"
	("CAUSECODETRXID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_CHECKLIST"
	ON "EMOC3"."CHECKLIST"
	("CHECKLISTID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_COLORRULES"
	ON "EMOC3"."COLORRULES"
	("COLORRULESID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_COLORS"
	ON "EMOC3"."COLORS"
	("COLORID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_COMBATSCLS"
	ON "EMOC3"."COMBATSCLS"
	("COMBATSCLID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_CONDITIONCODES"
	ON "EMOC3"."CONDITIONCODES"
	("CONDCODEID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_CONDITIONSTATUS"
	ON "EMOC3"."CONDITIONSTATUS"
	("CONDSTATID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_CONFIG_ID"
	ON "EMOC3"."EMOCAPPCONFIGURATION"
	("CONFIGID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_COUNTRYCODES_COUNTRYCODE"
	ON "EMOC3"."COUNTRYCODES"
	("COUNTRYCODE"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_CREWCHIEFS"
	ON "EMOC3"."CREWCHIEFS"
	("CREWCHIEFID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_CUSTOMDATA"
	ON "EMOC3"."CUSTOMDATA"
	("CUSTOMDATAID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_CUSTOMDATALISTITEM"
	ON "EMOC3"."CUSTOMDATALISTITEM"
	("CUSTOMDATAITEMID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_CUSTOMDATAMDS"
	ON "EMOC3"."CUSTOMDATAMDS"
	("CUSTOMDATAID"		ASC,
	  "AIRCRAFTMDSID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_DEVIATIONCODES"
	ON "EMOC3"."DEVIATIONCODES"
	("DEVIATIONCODEID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_DEVIATIONCODETRX"
	ON "EMOC3"."DEVIATIONCODETRX"
	("DEVIATIONCODETRXID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_EMOCCONFIG"
	ON "EMOC3"."EMOCCONFIG"
	("EMOCCONFIGID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_EMOCHELP"
	ON "EMOC3"."EMOCHELP"
	("HELPID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_ENGINERUNLOG"
	ON "EMOC3"."ENGINERUNLOG"
	("ENGINELOGID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_FIELDNAMES"
	ON "EMOC3"."FIELDNAMES"
	("FIELDNAMESID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_FIRESYMBOLS"
	ON "EMOC3"."FIRESYMBOLS"
	("FIRESYMBOLID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_FLIGHTS"
	ON "EMOC3"."FLIGHTS"
	("FLIGHTID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_FUEL"
	ON "EMOC3"."FUEL"
	("FUELSTATUSID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_GAINLOSSSTATUSUPDATETRX"
	ON "EMOC3"."GAINLOSSSTATUSUPDATETRX"
	("GAINLOSSSTATUSUPDATETRXID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_GENERATIONFLOW"
	ON "EMOC3"."GENERATIONFLOW"
	("GENERATIONFLOWNAME"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_GENERATIONFLOWITEMS"
	ON "EMOC3"."GENERATIONFLOWITEMS"
	("ITEMNUMBER"		ASC,
	  "GENERATIONFLOWNAME"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_GENERATIONFLOWPROGRESS"
	ON "EMOC3"."GENERATIONFLOWPROGRESS"
	("GENERATIONFLOWNAME"		ASC,
	  "STEPNUMBER"		ASC,
	  "ITEMNUMBER"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_GENERATIONFLOWSTEPS"
	ON "EMOC3"."GENERATIONFLOWSTEPS"
	("STEPNUMBER"		ASC,
	  "GENERATIONFLOWNAME"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_GEOLOCCODETRX"
	ON "EMOC3"."GEOLOCCODETRX"
	("GEOLOCCODETRXID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 524288
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_HANGERQUEEN"
	ON "EMOC3"."HANGER_QUEEN_CODE"
	("HQCODEID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_HISTORY"
	ON "EMOC3"."HISTORY"
	("HISTORYID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_HOTSPOTS"
	ON "EMOC3"."HOTSPOTS"
	("FIELDNAME"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_IMAGEID"
	ON "EMOC3"."USERIMAGES"
	("IMAGEID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_IMDSCDBELCUNITOPTION"
	ON "EMOC3"."IMDSCDBELCUNITOPTION"
	("IMDSCDBELCUNITOPTIONID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_IMDSCDBINTERFACEOPTION"
	ON "EMOC3"."IMDSCDBINTERFACEOPTION"
	("IMDSCDBINTERFACEOPTIONID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_IMDSLOGINS"
	ON "EMOC3"."IMDSLOGINS"
	("IMDSLOGINID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_INTERFACECONTROL"
	ON "EMOC3"."INTERFACECONTROL"
	("INTERFACECONTROLID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_INTERFACEITEMS"
	ON "EMOC3"."INTERFACEITEMS"
	("INTERFACEITEMID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_INTERFACELOG"
	ON "EMOC3"."INTERFACELOG"
	("INTERFACELOGID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 720896
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_INTERFACEREJECTLIST"
	ON "EMOC3"."INTERFACEREJECTLIST"
	("REJECTID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_INVENTORYSTATUSUPDATE"
	ON "EMOC3"."INVENTORYSTATUSUPDATETRX"
	("INVENTORYSTATUSUPDATETRXID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_JOAP"
	ON "EMOC3"."JOAP"
	("JOAPID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_JOAPDATA"
	ON "EMOC3"."JOAPDATA"
	("JOAPDATAID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_LANDINGCODES"
	ON "EMOC3"."LANDINGCODES"
	("LANDINGCODEID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_LOACTIONCODETRX"
	ON "EMOC3"."LOCATIONCODETRX"
	("LOCATIONCODETRXID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 327680
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_LOCATIONS"
	ON "EMOC3"."LOCATIONS"
	("LOCATIONID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 2097152
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_MAJORCOMMANDCODETRX"
	ON "EMOC3"."MAJORCOMMANDCODETRX"
	("MAJORCOMMANDCODETRXID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_MESSAGES"
	ON "EMOC3"."MESSAGES"
	("MESSAGEID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_MICAP"
	ON "EMOC3"."MICAP"
	("MICAPID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_MICAPTRXID"
	ON "EMOC3"."MICAPTRX"
	("MICAPTRXID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_MISSIONS"
	ON "EMOC3"."MISSIONS"
	("MISSIONID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_MOC"
	ON "EMOC3"."MOC"
	("MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_MOCADMIN"
	ON "EMOC3"."MOCADMINS"
	("MOCADMINID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_MOCSTATUSICONS"
	ON "EMOC3"."MOCSTATUSICONS"
	("MOCID"		ASC,
	  "STATUSCODE"		ASC,
	  "MISSIONDESIGNSERIES"		ASC,
	  "ICON_TYPE"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 3145728
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_MOCUSERS"
	ON "EMOC3"."MOCUSERS"
	("MOCUSERID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_ORDNANCE"
	ON "EMOC3"."ORDNANCE"
	("ORDNANCEID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_ORGANIZATIONLOADTRX"
	ON "EMOC3"."ORGANIZATIONTRX"
	("ORGANIZATIONLOADTRXID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_ORGANIZATIONS"
	ON "EMOC3"."ORGANIZATIONS"
	("ORGANIZATIONSID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_PERMISSIONS"
	ON "EMOC3"."PERMISSIONS"
	("PERMISSIONID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 196608
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_PILOT"
	ON "EMOC3"."PILOT"
	("PILOTID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_POSSESSIONS"
	ON "EMOC3"."POSSESSIONS"
	("POSSESSIONID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_RANGES"
	ON "EMOC3"."RANGES"
	("RANGEID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_RANKS"
	ON "EMOC3"."RANKS"
	("RANKID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_REMARKS"
	ON "EMOC3"."REMARKS"
	("REMARKSID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 262144
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_REPORTCRITERIA"
	ON "EMOC3"."REPORTCRITERIA"
	("CRITERIAID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_REPORTID"
	ON "EMOC3"."REPORTS"
	("REPORTID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_SCHEDULE"
	ON "EMOC3"."SCHEDULE"
	("SCHEDULEID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 262144
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_SEMEDX"
	ON "EMOC3"."SEMEDX"
	("SEMEDXID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_SEMEDXDATA"
	ON "EMOC3"."SEMEDXDATA"
	("SEMDATAID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_SERVERS_ID"
	ON "EMOC3"."WEBSERVERS"
	("SERVERID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_SHOPDISPATCH"
	ON "EMOC3"."SHOPDISPATCH"
	("SHOPDISPATCHID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_SMSTESTBLOB_ID"
	ON "EMOC3"."SMSTESTBLOB"
	("ID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_SQUADRONS"
	ON "EMOC3"."SQUADRONS"
	("SQUADRONID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_SQUADRON_SORT_ORDER"
	ON "EMOC3"."SQUADRON_SORT_ORDER"
	("SQSORTORDERID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_STALOCCODEID"
	ON "EMOC3"."STATIONLOCCODES"
	("STALOCCODEID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 196608
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_STATUSCODE"
	ON "EMOC3"."STATUSCODE"
	("STATUSCODEID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_STATUSCORRECTION"
	ON "EMOC3"."STATUSCORRECTIONTRX"
	("STATUSCORRECTIONID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_STATUSIMAGES"
	ON "EMOC3"."STATUSIMAGE"
	("STATUSIMAGEID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_STATUSTRANSITIONRULE"
	ON "EMOC3"."STATUSTRANSITIONRULE"
	("STATRULEID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_STATUSUPDATETRX"
	ON "EMOC3"."STATUSUPDATETRX"
	("STATUSUPDATETRXID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_SYMBOLS"
	ON "EMOC3"."SYMBOLS"
	("SYMBOLID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_TBMCSINTERFACELOG"
	ON "EMOC3"."TBMCSINTERFACELOG"
	("INTERFACELOGID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 262144
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_USERALERT"
	ON "EMOC3"."USERALERT"
	("ALERTID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_USERS"
	ON "EMOC3"."USERS"
	("USERID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_UTILCODEID"
	ON "EMOC3"."UTILIZATIONCODES"
	("UTILCODEID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_UTILIZATIONCODETRX"
	ON "EMOC3"."UTILIZATIONCODETRX"
	("UTILIZATIONCODETRXID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 196608
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_UVRCHANGETRX"
	ON "EMOC3"."UVRCHANGETRX"
	("UVRCHANGETRXID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_WEAPONSCLASS"
	ON "EMOC3"."WEAPONSCLASS"
	("WEAPONSCLASSID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_WEAPONSLOAD"
	ON "EMOC3"."WEAPONSLOAD"
	("LOADID"		ASC,
	  "STATION"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_WEAPONTYPES"
	ON "EMOC3"."WEAPONTYPES"
	("WEAPONSTYPEID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_WHENDISCOVEREDCODETRX"
	ON "EMOC3"."WHENDISCOVEREDCODETRX"
	("WHENDISCOVEREDCODETRXID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_WINGS"
	ON "EMOC3"."WINGS"
	("WINGID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_WORKCENTERTRX"
	ON "EMOC3"."WORKCENTERTRX"
	("WORKCENTERTRXID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_WORKUNITCODETRX"
	ON "EMOC3"."WORKUNITCODETRX"
	("WORKUNITCODETRXID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 2097152
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_WRITEUPS"
	ON "EMOC3"."WRITEUPS"
	("WRITEUPID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 196608
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_WUC"
	ON "EMOC3"."WUC"
	("WUCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 9437184
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."PK_WX"
	ON "EMOC3"."WX"
	("WXCODEID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."SYS_C008061"
	ON "EMOC3"."EMOCHELP"
	("TOPIC"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."UK_CN_MOCID_CACHEDTABLENAME"
	ON "EMOC3"."CHANGENOTIFICATION"
	("CACHEDTABLENAME"		ASC,
	  "MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 262144
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."UK_COLOR_AND_MOCID"
	ON "EMOC3"."COLORS"
	("COLORNAME"		ASC,
	  "COLORVALUE"		ASC,
	  "MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 262144
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."UK_CUSTOMLABLE_MOC"
	ON "EMOC3"."CUSTOMDATA"
	("CUSTOMDATALABEL"		ASC,
	  "MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."UK_GCN_CACHEDTABLENAME"
	ON "EMOC3"."GLOBALCHANGENOTIFICATION"
	("CACHEDTABLENAME"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."UK_IMDSCDBELCUNITOPTION"
	ON "EMOC3"."IMDSCDBELCUNITOPTION"
	("IMDSCDBINTERFACEOPTIONID"		ASC,
	  "ENTERPRISELOCATIONCODE"		ASC,
	  "UNITID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."UK_MOCID_CHECKLISTTITLE"
	ON "EMOC3"."CHECKLIST"
	("CHECKLISTTITLE"		ASC,
	  "MOCID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."UK_MOCUSERS"
	ON "EMOC3"."MOCUSERS"
	("MOCID"		ASC,
	  "USERID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 131072
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."UK_SERVERNAME"
	ON "EMOC3"."WEBSERVERS"
	("SERVERNAME"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."UK_SERVERURL"
	ON "EMOC3"."WEBSERVERS"
	("SERVERURL"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."UK_WINGS_ELCUNITID"
	ON "EMOC3"."WINGS"
	("ELC"		ASC,
	  "UNITID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."WEAPONSINFO_PK11061992374968"
	ON "EMOC3"."WEAPONSINFO"
	("WEAPONSID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."WHENDISCOVERE_PK11061906353349"
	ON "EMOC3"."WHENDISCOVEREDCODES"
	("WHENDISCOVEREDID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 65536
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

CREATE UNIQUE INDEX "EMOC3"."WORKCENTERS_PK11061901575234"
	ON "EMOC3"."WORKCENTERS"
	("WORKCENTERID"		ASC)
	INITRANS 2
	LOGGING
	TABLESPACE "EMOCMAIN"
	STORAGE (
	INITIAL 262144
	NEXT 1048576
	MINEXTENTS 1
	MAXEXTENTS 2147483645
	PCTINCREASE 0
	BUFFER_POOL DEFAULT);

ALTER TABLE "EMOC3"."ACFTMDSTYPES" ADD CONSTRAINT "PK_ACFTMDSTYPES" PRIMARY KEY
	("MOCID",
	 "ACFTMDSTYPECD") USING INDEX "EMOC3"."PK_ACFTMDSTYPES";

ALTER TABLE "EMOC3"."ACFTMDSTYPES" ADD CONSTRAINT "SYS_C0010987" CHECK ("ACFTMDSTYPECD" IS NOT NULL);

ALTER TABLE "EMOC3"."ACFTMDSTYPES" ADD CONSTRAINT "SYS_C0010988" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."AIRCRAFT" ADD CONSTRAINT "PK_AIRCRAFT" PRIMARY KEY
	("AIRCRAFTID") USING INDEX "EMOC3"."PK_AIRCRAFT";

ALTER TABLE "EMOC3"."AIRCRAFT" ADD CONSTRAINT "SYS_C0010990" CHECK ("TAILNUMBER" IS NOT NULL);

ALTER TABLE "EMOC3"."AIRCRAFT" ADD CONSTRAINT "SYS_C0010991" CHECK ("SHORTTAILNUMBER" IS NOT NULL);

ALTER TABLE "EMOC3"."AIRCRAFT" ADD CONSTRAINT "SYS_C0010992" CHECK ("SQUADRONID" IS NOT NULL);

ALTER TABLE "EMOC3"."AIRCRAFT" ADD CONSTRAINT "SYS_C0010993" CHECK ("AIRCRAFTMDSID" IS NOT NULL);

ALTER TABLE "EMOC3"."AIRCRAFT" ADD CONSTRAINT "SYS_C0010994" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."AIRCRAFT" ADD CONSTRAINT "SYS_C0010995" CHECK ("COUNTRYCODE" IS NOT NULL);

ALTER TABLE "EMOC3"."AIRCRAFTCUSTOMDATA" ADD CONSTRAINT "PK_AIRCRAFTCUSTOMDATA" PRIMARY KEY
	("AIRCRAFTID",
	 "CUSTOMDATAID") USING INDEX "EMOC3"."PK_AIRCRAFTCUSTOMDATA";

ALTER TABLE "EMOC3"."AIRCRAFTCUSTOMDATA" ADD CONSTRAINT "SYS_C0010997" CHECK ("AIRCRAFTID" IS NOT NULL);

ALTER TABLE "EMOC3"."AIRCRAFTCUSTOMDATA" ADD CONSTRAINT "SYS_C0010998" CHECK ("CUSTOMDATAID" IS NOT NULL);

ALTER TABLE "EMOC3"."AIRCRAFTENGINEDATA" ADD CONSTRAINT "PK_AIRCRAFTENGINEDATA" PRIMARY KEY
	("ENGINEDATAID") USING INDEX "EMOC3"."PK_AIRCRAFTENGINEDATA";

ALTER TABLE "EMOC3"."AIRCRAFTENGINEDATA" ADD CONSTRAINT "SYS_C0011000" CHECK ("ENGINEDATAID" IS NOT NULL);

ALTER TABLE "EMOC3"."AIRCRAFTENGINEDATA" ADD CONSTRAINT "SYS_C0011001" CHECK ("AIRCRAFTID" IS NOT NULL);

ALTER TABLE "EMOC3"."AIRCRAFTENGINEDATA" ADD CONSTRAINT "SYS_C0011002" CHECK ("ENGINENUMBER" IS NOT NULL);

ALTER TABLE "EMOC3"."AIRCRAFTMDS" ADD CONSTRAINT "PK_AIRCRAFTMDS" PRIMARY KEY
	("AIRCRAFTMDSID") USING INDEX "EMOC3"."PK_AIRCRAFTMDS";

ALTER TABLE "EMOC3"."AIRCRAFTMDS" ADD CONSTRAINT "SYS_C0011004" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."AIRCRAFTSTATUSUPDATE" ADD CONSTRAINT "SYS_C0011006" CHECK ("STATUSUPDATEID" IS NOT NULL);

ALTER TABLE "EMOC3"."AIRCRAFTSTATUSUPDATE" ADD CONSTRAINT "SYS_C0011007" CHECK ("EQUIPMENTID" IS NOT NULL);

ALTER TABLE "EMOC3"."AIRCRAFTSTATUSUPDATE" ADD CONSTRAINT "SYS_C0011008" CHECK ("AIRCRAFTID" IS NOT NULL);

ALTER TABLE "EMOC3"."AREAS" ADD CONSTRAINT "PK_AREAS" PRIMARY KEY
	("AREAID") USING INDEX "EMOC3"."PK_AREAS";

ALTER TABLE "EMOC3"."AREAS" ADD CONSTRAINT "SYS_C0011009" CHECK ("AREAID" IS NOT NULL);

ALTER TABLE "EMOC3"."AREAS" ADD CONSTRAINT "SYS_C0011010" CHECK ("AREA" IS NOT NULL);

ALTER TABLE "EMOC3"."AREAS" ADD CONSTRAINT "SYS_C0011011" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."ARMAMENT" ADD CONSTRAINT "PK_ARMAMENT" PRIMARY KEY
	("ARMAMENTID") USING INDEX "EMOC3"."PK_ARMAMENT";

ALTER TABLE "EMOC3"."ARMAMENT" ADD CONSTRAINT "SYS_C0011013" CHECK ("STATION" IS NOT NULL);

ALTER TABLE "EMOC3"."ARMAMENT" ADD CONSTRAINT "SYS_C0011014" CHECK ("ARMAMENTID" IS NOT NULL);

ALTER TABLE "EMOC3"."ARMAMENT" ADD CONSTRAINT "SYS_C0011015" CHECK ("AIRCRAFTMDSID" IS NOT NULL);

ALTER TABLE "EMOC3"."ARMAMENT" ADD CONSTRAINT "SYS_C0011016" CHECK ("ORDNANCEID" IS NOT NULL);

ALTER TABLE "EMOC3"."ARMAMENT" ADD CONSTRAINT "SYS_C0011017" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."ASSIGNMENTCODES" ADD CONSTRAINT "SYS_C0011019" CHECK ("ASSIGNMENTCODEID" IS NOT NULL);

ALTER TABLE "EMOC3"."ASSIGNMENTCODES" ADD CONSTRAINT "SYS_C0011020" CHECK ("ASSIGNMENTCODE" IS NOT NULL);

ALTER TABLE "EMOC3"."ASSIGNMENTCODES" ADD CONSTRAINT "SYS_C0011021" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."BASEMAPS" ADD CONSTRAINT "PK_BASEMAPS_MAPID" PRIMARY KEY
	("MAPID") USING INDEX "EMOC3"."PK_BASEMAPS_MAPID";

ALTER TABLE "EMOC3"."BASEMAPS" ADD CONSTRAINT "SYS_C0011022" CHECK ("MAPID" IS NOT NULL);

ALTER TABLE "EMOC3"."BASEMAPS" ADD CONSTRAINT "SYS_C0011023" CHECK ("MAPOBJECT" IS NOT NULL);

ALTER TABLE "EMOC3"."BASEMAPS" ADD CONSTRAINT "SYS_C0011024" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."BASEMAPS" ADD CONSTRAINT "SYS_C0011025" CHECK ("MIMETYPE" IS NOT NULL);

ALTER TABLE "EMOC3"."BRIEF_AIRCRAFT_STATUS" ADD CONSTRAINT "SYS_C0011027" CHECK ("ACSTATBRIEFID" IS NOT NULL);

ALTER TABLE "EMOC3"."BRIEF_AIRCRAFT_STATUS" ADD CONSTRAINT "SYS_C0011028" CHECK ("BRIEFDATE" IS NOT NULL);

ALTER TABLE "EMOC3"."BRIEF_DEVIATIONS" ADD CONSTRAINT "SYS_C0011029" CHECK ("DEVBRIEFID" IS NOT NULL);

ALTER TABLE "EMOC3"."BRIEF_DEVIATIONS" ADD CONSTRAINT "SYS_C0011030" CHECK ("BRIEFDATE" IS NOT NULL);

ALTER TABLE "EMOC3"."BRIEF_FLYING_SCHEDULE" ADD CONSTRAINT "SYS_C0011031" CHECK ("FLYSCHEDBRIEFID" IS NOT NULL);

ALTER TABLE "EMOC3"."BRIEF_FLYING_SCHEDULE" ADD CONSTRAINT "SYS_C0011032" CHECK ("BRIEFDATE" IS NOT NULL);

ALTER TABLE "EMOC3"."BRIEF_FLYING_STATUS" ADD CONSTRAINT "SYS_C0011033" CHECK ("FLYINGSTATUSBRIEFID" IS NOT NULL);

ALTER TABLE "EMOC3"."BRIEF_FLYING_STATUS" ADD CONSTRAINT "SYS_C0011034" CHECK ("BRIEFDATE" IS NOT NULL);

ALTER TABLE "EMOC3"."BRIEF_HANGAR_QUEEN" ADD CONSTRAINT "SYS_C0011035" CHECK ("HQBRIEFID" IS NOT NULL);

ALTER TABLE "EMOC3"."BRIEF_HANGAR_QUEEN" ADD CONSTRAINT "SYS_C0011036" CHECK ("SHOW" IS NOT NULL);

ALTER TABLE "EMOC3"."BRIEF_HANGAR_QUEEN" ADD CONSTRAINT "SYS_C0011037" CHECK ("AIRCRAFTMDS" IS NOT NULL);

ALTER TABLE "EMOC3"."BRIEF_HANGAR_QUEEN" ADD CONSTRAINT "SYS_C0011038" CHECK ("TAILNUMBER" IS NOT NULL);

ALTER TABLE "EMOC3"."BRIEF_HANGAR_QUEEN" ADD CONSTRAINT "SYS_C0011039" CHECK ("SQUADRON" IS NOT NULL);

ALTER TABLE "EMOC3"."BRIEF_HANGAR_QUEEN" ADD CONSTRAINT "SYS_C0011040" CHECK ("BRIEFDATE" IS NOT NULL);

ALTER TABLE "EMOC3"."BRIEF_MICAPS" ADD CONSTRAINT "SYS_C0011041" CHECK ("MICAPBRIEFID" IS NOT NULL);

ALTER TABLE "EMOC3"."BRIEF_MICAPS" ADD CONSTRAINT "SYS_C0011042" CHECK ("BRIEFDATE" IS NOT NULL);

ALTER TABLE "EMOC3"."BRIEF_NEXT_WEEKS_PLAN" ADD CONSTRAINT "SYS_C0011043" CHECK ("NXTWKSPLANBRIEFID" IS NOT NULL);

ALTER TABLE "EMOC3"."BRIEF_NEXT_WEEKS_PLAN" ADD CONSTRAINT "SYS_C0011044" CHECK ("BRIEFDATE" IS NOT NULL);

ALTER TABLE "EMOC3"."BRIEF_POT_HANGAR_QUEEN" ADD CONSTRAINT "SYS_C0011045" CHECK ("POTHQBRIEFID" IS NOT NULL);

ALTER TABLE "EMOC3"."BRIEF_POT_HANGAR_QUEEN" ADD CONSTRAINT "SYS_C0011046" CHECK ("SHOW" IS NOT NULL);

ALTER TABLE "EMOC3"."BRIEF_POT_HANGAR_QUEEN" ADD CONSTRAINT "SYS_C0011047" CHECK ("AIRCRAFTMDS" IS NOT NULL);

ALTER TABLE "EMOC3"."BRIEF_POT_HANGAR_QUEEN" ADD CONSTRAINT "SYS_C0011048" CHECK ("TAILNUMBER" IS NOT NULL);

ALTER TABLE "EMOC3"."BRIEF_POT_HANGAR_QUEEN" ADD CONSTRAINT "SYS_C0011049" CHECK ("SQUADRON" IS NOT NULL);

ALTER TABLE "EMOC3"."BRIEF_POT_HANGAR_QUEEN" ADD CONSTRAINT "SYS_C0011050" CHECK ("BRIEFDATE" IS NOT NULL);

ALTER TABLE "EMOC3"."BRIEF_SCHEDULE_OVERVIEW" ADD CONSTRAINT "SYS_C0011051" CHECK ("SCHEDOVERBRIEFID" IS NOT NULL);

ALTER TABLE "EMOC3"."BRIEF_SCHEDULE_OVERVIEW" ADD CONSTRAINT "SYS_C0011052" CHECK ("BRIEFDATE" IS NOT NULL);

ALTER TABLE "EMOC3"."BRIEF_WING_STATUS" ADD CONSTRAINT "SYS_C0011053" CHECK ("WINGSTATUSBRIEFID" IS NOT NULL);

ALTER TABLE "EMOC3"."BRIEF_WING_STATUS" ADD CONSTRAINT "SYS_C0011054" CHECK ("BRIEFDATE" IS NOT NULL);

ALTER TABLE "EMOC3"."CAUSECODES" ADD CONSTRAINT "PK_CAUSECODES" PRIMARY KEY
	("CAUSECODEID") USING INDEX "EMOC3"."PK_CAUSECODES";

ALTER TABLE "EMOC3"."CAUSECODES" ADD CONSTRAINT "SYS_C0011055" CHECK ("CAUSECODEID" IS NOT NULL);

ALTER TABLE "EMOC3"."CAUSECODES" ADD CONSTRAINT "SYS_C0011056" CHECK ("CAUSECODE" IS NOT NULL);

ALTER TABLE "EMOC3"."CAUSECODES" ADD CONSTRAINT "SYS_C0011057" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."CAUSECODETRX" ADD CONSTRAINT "PK_CAUSECODETRX" PRIMARY KEY
	("CAUSECODETRXID") USING INDEX "EMOC3"."PK_CAUSECODETRX";

ALTER TABLE "EMOC3"."CHANGENOTIFICATION" ADD CONSTRAINT "SYS_C0011060" CHECK ("CHANGEID" IS NOT NULL);

ALTER TABLE "EMOC3"."CHANGENOTIFICATION" ADD CONSTRAINT "SYS_C0011061" CHECK ("CACHEDTABLENAME" IS NOT NULL);

ALTER TABLE "EMOC3"."CHANGENOTIFICATION" ADD CONSTRAINT "SYS_C0011062" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."CHECKLIST" ADD CONSTRAINT "PK_CHECKLIST" PRIMARY KEY
	("CHECKLISTID") USING INDEX "EMOC3"."PK_CHECKLIST";

ALTER TABLE "EMOC3"."CHECKLIST" ADD CONSTRAINT "SYS_C0011063" CHECK ("CHECKLISTID" IS NOT NULL);

ALTER TABLE "EMOC3"."CHECKLIST" ADD CONSTRAINT "SYS_C0011064" CHECK ("CHECKLIST" IS NOT NULL);

ALTER TABLE "EMOC3"."CHECKLIST" ADD CONSTRAINT "SYS_C0011065" CHECK ("CHECKLISTTITLE" IS NOT NULL);

ALTER TABLE "EMOC3"."CHECKLIST" ADD CONSTRAINT "SYS_C0011066" CHECK ("DATEUPLOADED" IS NOT NULL);

ALTER TABLE "EMOC3"."CHECKLIST" ADD CONSTRAINT "SYS_C0011067" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."COLORRULES" ADD CONSTRAINT "PK_COLORRULES" PRIMARY KEY
	("COLORRULESID") USING INDEX "EMOC3"."PK_COLORRULES";

ALTER TABLE "EMOC3"."COLORRULES" ADD CONSTRAINT "SYS_C0011069" CHECK ("COLORID" IS NOT NULL);

ALTER TABLE "EMOC3"."COLORRULES" ADD CONSTRAINT "SYS_C0011070" CHECK ("COLORRULESID" IS NOT NULL);

ALTER TABLE "EMOC3"."COLORRULES" ADD CONSTRAINT "SYS_C0011071" CHECK ("COLORRANK" IS NOT NULL);

ALTER TABLE "EMOC3"."COLORRULES" ADD CONSTRAINT "SYS_C0011072" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."COLORS" ADD CONSTRAINT "PK_COLORS" PRIMARY KEY
	("COLORID") USING INDEX "EMOC3"."PK_COLORS";

ALTER TABLE "EMOC3"."COLORS" ADD CONSTRAINT "SYS_C0011074" CHECK ("COLORID" IS NOT NULL);

ALTER TABLE "EMOC3"."COLORS" ADD CONSTRAINT "SYS_C0011075" CHECK ("COLORNAME" IS NOT NULL);

ALTER TABLE "EMOC3"."COLORS" ADD CONSTRAINT "SYS_C0011076" CHECK ("COLORVALUE" IS NOT NULL);

ALTER TABLE "EMOC3"."COLORS" ADD CONSTRAINT "SYS_C0011077" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."COMBATSCLRULES" ADD CONSTRAINT "SYS_C0011079" CHECK ("SCLRULESID" IS NOT NULL);

ALTER TABLE "EMOC3"."COMBATSCLRULES" ADD CONSTRAINT "SYS_C0011080" CHECK ("AIRCRAFTMDSID" IS NOT NULL);

ALTER TABLE "EMOC3"."COMBATSCLRULES" ADD CONSTRAINT "SYS_C0011081" CHECK ("COMBATSCLID" IS NOT NULL);

ALTER TABLE "EMOC3"."COMBATSCLRULES" ADD CONSTRAINT "SYS_C0011082" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."COMBATSCLS" ADD CONSTRAINT "PK_COMBATSCLS" PRIMARY KEY
	("COMBATSCLID") USING INDEX "EMOC3"."PK_COMBATSCLS";

ALTER TABLE "EMOC3"."COMBATSCLS" ADD CONSTRAINT "SYS_C0011083" CHECK ("COMBATSCL" IS NOT NULL);

ALTER TABLE "EMOC3"."COMBATSCLS" ADD CONSTRAINT "SYS_C0011084" CHECK ("COMBATSCLID" IS NOT NULL);

ALTER TABLE "EMOC3"."COMBATSCLS" ADD CONSTRAINT "SYS_C0011085" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."CONDITIONCODES" ADD CONSTRAINT "PK_CONDITIONCODES" PRIMARY KEY
	("CONDCODEID") USING INDEX "EMOC3"."PK_CONDITIONCODES";

ALTER TABLE "EMOC3"."CONDITIONCODES" ADD CONSTRAINT "SYS_C0011087" CHECK ("CONDCODEID" IS NOT NULL);

ALTER TABLE "EMOC3"."CONDITIONCODES" ADD CONSTRAINT "SYS_C0011088" CHECK ("CONDITIONCODE" IS NOT NULL);

ALTER TABLE "EMOC3"."CONDITIONCODES" ADD CONSTRAINT "SYS_C0011089" CHECK ("DEFAULTCONDITIONCODE" IS NOT NULL);

ALTER TABLE "EMOC3"."CONDITIONCODES" ADD CONSTRAINT "SYS_C0011090" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."CONDITIONSTATUS" ADD CONSTRAINT "PK_CONDITIONSTATUS" PRIMARY KEY
	("CONDSTATID") USING INDEX "EMOC3"."PK_CONDITIONSTATUS";

ALTER TABLE "EMOC3"."CONDITIONSTATUS" ADD CONSTRAINT "SYS_C0011092" CHECK ("CONDSTATID" IS NOT NULL);

ALTER TABLE "EMOC3"."CONDITIONSTATUS" ADD CONSTRAINT "SYS_C0011093" CHECK ("CONDITIONSTATUS" IS NOT NULL);

ALTER TABLE "EMOC3"."CONDITIONSTATUS" ADD CONSTRAINT "SYS_C0011094" CHECK ("FLYABLE" IS NOT NULL);

ALTER TABLE "EMOC3"."CONDITIONSTATUS" ADD CONSTRAINT "SYS_C0011095" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."COUNTRYCODES" ADD CONSTRAINT "PK_COUNTRYCODES_COUNTRYCODE" PRIMARY KEY
	("COUNTRYCODE") USING INDEX "EMOC3"."PK_COUNTRYCODES_COUNTRYCODE";

ALTER TABLE "EMOC3"."COUNTRYCODES" ADD CONSTRAINT "SYS_C0011097" CHECK ("COUNTRYCODE" IS NOT NULL);

ALTER TABLE "EMOC3"."COUNTRYCODES" ADD CONSTRAINT "SYS_C0011098" CHECK ("COUNTRYNAME" IS NOT NULL);

ALTER TABLE "EMOC3"."COUNTRYCODES" ADD CONSTRAINT "SYS_C0011099" CHECK ("DEFAULTCOUNTRY" IS NOT NULL);

ALTER TABLE "EMOC3"."CREWCHIEFS" ADD CONSTRAINT "PK_CREWCHIEFS" PRIMARY KEY
	("CREWCHIEFID") USING INDEX "EMOC3"."PK_CREWCHIEFS";

ALTER TABLE "EMOC3"."CREWCHIEFS" ADD CONSTRAINT "SYS_C0011101" CHECK ("CREWCHIEFID" IS NOT NULL);

ALTER TABLE "EMOC3"."CREWCHIEFS" ADD CONSTRAINT "SYS_C0011102" CHECK ("CREWCHIEF" IS NOT NULL);

ALTER TABLE "EMOC3"."CREWCHIEFS" ADD CONSTRAINT "SYS_C0011103" CHECK ("DEFAULTCREWCHIEF" IS NOT NULL);

ALTER TABLE "EMOC3"."CREWCHIEFS" ADD CONSTRAINT "SYS_C0011104" CHECK ("RANKID" IS NOT NULL);

ALTER TABLE "EMOC3"."CREWCHIEFS" ADD CONSTRAINT "SYS_C0011105" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."CUSTOMDATA" ADD CONSTRAINT "PK_CUSTOMDATA" PRIMARY KEY
	("CUSTOMDATAID") USING INDEX "EMOC3"."PK_CUSTOMDATA";

ALTER TABLE "EMOC3"."CUSTOMDATA" ADD CONSTRAINT "SYS_C0011107" CHECK ("CUSTOMDATAID" IS NOT NULL);

ALTER TABLE "EMOC3"."CUSTOMDATA" ADD CONSTRAINT "SYS_C0011108" CHECK ("CUSTOMDATALABEL" IS NOT NULL);

ALTER TABLE "EMOC3"."CUSTOMDATA" ADD CONSTRAINT "SYS_C0011109" CHECK ("CUSTOMDATATYPE" IS NOT NULL);

ALTER TABLE "EMOC3"."CUSTOMDATA" ADD CONSTRAINT "SYS_C0011110" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."CUSTOMDATALISTITEM" ADD CONSTRAINT "PK_CUSTOMDATALISTITEM" PRIMARY KEY
	("CUSTOMDATAITEMID") USING INDEX "EMOC3"."PK_CUSTOMDATALISTITEM";

ALTER TABLE "EMOC3"."CUSTOMDATALISTITEM" ADD CONSTRAINT "SYS_C0011112" CHECK ("CUSTOMDATAITEMID" IS NOT NULL);

ALTER TABLE "EMOC3"."CUSTOMDATALISTITEM" ADD CONSTRAINT "SYS_C0011113" CHECK ("CUSTOMDATAID" IS NOT NULL);

ALTER TABLE "EMOC3"."CUSTOMDATAMDS" ADD CONSTRAINT "PK_CUSTOMDATAMDS" PRIMARY KEY
	("CUSTOMDATAID",
	 "AIRCRAFTMDSID") USING INDEX "EMOC3"."PK_CUSTOMDATAMDS";

ALTER TABLE "EMOC3"."CUSTOMDATAMDS" ADD CONSTRAINT "SYS_C0011115" CHECK ("CUSTOMDATAID" IS NOT NULL);

ALTER TABLE "EMOC3"."CUSTOMDATAMDS" ADD CONSTRAINT "SYS_C0011116" CHECK ("AIRCRAFTMDSID" IS NOT NULL);

ALTER TABLE "EMOC3"."DEVIATIONABORTTRX" ADD CONSTRAINT "SYS_C0011118" CHECK ("DEVIATIONABORTTRXID" IS NOT NULL);

ALTER TABLE "EMOC3"."DEVIATIONCODES" ADD CONSTRAINT "PK_DEVIATIONCODES" PRIMARY KEY
	("DEVIATIONCODEID") USING INDEX "EMOC3"."PK_DEVIATIONCODES";

ALTER TABLE "EMOC3"."DEVIATIONCODES" ADD CONSTRAINT "SYS_C0011119" CHECK ("DEVIATIONCODEID" IS NOT NULL);

ALTER TABLE "EMOC3"."DEVIATIONCODES" ADD CONSTRAINT "SYS_C0011120" CHECK ("DEVIATIONCODE" IS NOT NULL);

ALTER TABLE "EMOC3"."DEVIATIONCODES" ADD CONSTRAINT "SYS_C0011121" CHECK ("DEFAULTDEVIATIONCODE" IS NOT NULL);

ALTER TABLE "EMOC3"."DEVIATIONCODES" ADD CONSTRAINT "SYS_C0011122" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."DEVIATIONCODETRX" ADD CONSTRAINT "PK_DEVIATIONCODETRX" PRIMARY KEY
	("DEVIATIONCODETRXID") USING INDEX "EMOC3"."PK_DEVIATIONCODETRX";

ALTER TABLE "EMOC3"."DEVIATIONCORRECTIONTRX" ADD CONSTRAINT "SYS_C0011125" CHECK ("DEVIATIONCORRECTTRXID" IS NOT NULL);

ALTER TABLE "EMOC3"."DEVIATIONDELETETRX" ADD CONSTRAINT "SYS_C0011126" CHECK ("DEVIATIONDELETETRXID" IS NOT NULL);

ALTER TABLE "EMOC3"."DEVIATIONSTARTSTOPTRX" ADD CONSTRAINT "SYS_C0011127" CHECK ("DEVIATIONSTARTSTOPTRXID" IS NOT NULL);

ALTER TABLE "EMOC3"."EMOCAPPCONFIGURATION" ADD CONSTRAINT "PK_CONFIG_ID" PRIMARY KEY
	("CONFIGID") USING INDEX "EMOC3"."PK_CONFIG_ID";

ALTER TABLE "EMOC3"."EMOCAPPCONFIGURATION" ADD CONSTRAINT "SYS_C0011128" CHECK ("CONFIGID" IS NOT NULL);

ALTER TABLE "EMOC3"."EMOCCONFIG" ADD CONSTRAINT "PK_EMOCCONFIG" PRIMARY KEY
	("EMOCCONFIGID") USING INDEX "EMOC3"."PK_EMOCCONFIG";

ALTER TABLE "EMOC3"."EMOCCONFIG" ADD CONSTRAINT "SYS_C0011130" CHECK ("EMOCCONFIGID" IS NOT NULL);

ALTER TABLE "EMOC3"."EMOCCONFIG" ADD CONSTRAINT "SYS_C0011131" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."EMOCHELP" ADD CONSTRAINT "PK_EMOCHELP" PRIMARY KEY
	("HELPID") USING INDEX "EMOC3"."PK_EMOCHELP";

ALTER TABLE "EMOC3"."EMOCHELP" ADD CONSTRAINT "SYS_C0011133" CHECK ("HELPID" IS NOT NULL);

ALTER TABLE "EMOC3"."EMOCHELP" ADD CONSTRAINT "SYS_C0011134" CHECK ("TOPIC" IS NOT NULL);

ALTER TABLE "EMOC3"."ENGINERUNLOG" ADD CONSTRAINT "PK_ENGINERUNLOG" PRIMARY KEY
	("ENGINELOGID") USING INDEX "EMOC3"."PK_ENGINERUNLOG";

ALTER TABLE "EMOC3"."ENGINERUNLOG" ADD CONSTRAINT "SYS_C0011136" CHECK ("ENGINELOGID" IS NOT NULL);

ALTER TABLE "EMOC3"."ENGINERUNLOG" ADD CONSTRAINT "SYS_C0011137" CHECK ("MOCCONTROLLER" IS NOT NULL);

ALTER TABLE "EMOC3"."ENGINERUNLOG" ADD CONSTRAINT "SYS_C0011138" CHECK ("RUNPERSON" IS NOT NULL);

ALTER TABLE "EMOC3"."ENGINERUNLOG" ADD CONSTRAINT "SYS_C0011139" CHECK ("EMPLOYEENUMBER" IS NOT NULL);

ALTER TABLE "EMOC3"."ENGINERUNLOG" ADD CONSTRAINT "SYS_C0011140" CHECK ("RUNDATE" IS NOT NULL);

ALTER TABLE "EMOC3"."ENGINERUNLOG" ADD CONSTRAINT "SYS_C0011141" CHECK ("ENGINEDATAID" IS NOT NULL);

ALTER TABLE "EMOC3"."ENGINERUNLOG" ADD CONSTRAINT "SYS_C0011142" CHECK ("AIRCRAFTID" IS NOT NULL);

ALTER TABLE "EMOC3"."EVENTLOG" ADD CONSTRAINT "SYS_C0011144" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."FIELDNAMES" ADD CONSTRAINT "PK_FIELDNAMES" PRIMARY KEY
	("FIELDNAMESID") USING INDEX "EMOC3"."PK_FIELDNAMES";

ALTER TABLE "EMOC3"."FIELDNAMES" ADD CONSTRAINT "SYS_C0011145" CHECK ("FIELDNAMESID" IS NOT NULL);

ALTER TABLE "EMOC3"."FIELDNAMES" ADD CONSTRAINT "SYS_C0011146" CHECK ("SHOW" IS NOT NULL);

ALTER TABLE "EMOC3"."FIRESYMBOLS" ADD CONSTRAINT "PK_FIRESYMBOLS" PRIMARY KEY
	("FIRESYMBOLID") USING INDEX "EMOC3"."PK_FIRESYMBOLS";

ALTER TABLE "EMOC3"."FIRESYMBOLS" ADD CONSTRAINT "SYS_C0011148" CHECK ("FIRESYMBOLID" IS NOT NULL);

ALTER TABLE "EMOC3"."FIRESYMBOLS" ADD CONSTRAINT "SYS_C0011149" CHECK ("FIRESYMBOL" IS NOT NULL);

ALTER TABLE "EMOC3"."FIRESYMBOLS" ADD CONSTRAINT "SYS_C0011150" CHECK ("RANKING" IS NOT NULL);

ALTER TABLE "EMOC3"."FIRESYMBOLS" ADD CONSTRAINT "SYS_C0011151" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."FLIGHTS" ADD CONSTRAINT "PK_FLIGHTS" PRIMARY KEY
	("FLIGHTID") USING INDEX "EMOC3"."PK_FLIGHTS";

ALTER TABLE "EMOC3"."FLIGHTS" ADD CONSTRAINT "SYS_C0011153" CHECK ("FLIGHTID" IS NOT NULL);

ALTER TABLE "EMOC3"."FLIGHTS" ADD CONSTRAINT "SYS_C0011154" CHECK ("SQUADRONID" IS NOT NULL);

ALTER TABLE "EMOC3"."FLIGHTS" ADD CONSTRAINT "SYS_C0011155" CHECK ("FLIGHTNAME" IS NOT NULL);

ALTER TABLE "EMOC3"."FUEL" ADD CONSTRAINT "PK_FUEL" PRIMARY KEY
	("FUELSTATUSID") USING INDEX "EMOC3"."PK_FUEL";

ALTER TABLE "EMOC3"."FUEL" ADD CONSTRAINT "SYS_C0011157" CHECK ("FUELSTATUSID" IS NOT NULL);

ALTER TABLE "EMOC3"."FUEL" ADD CONSTRAINT "SYS_C0011158" CHECK ("COLORID" IS NOT NULL);

ALTER TABLE "EMOC3"."FUEL" ADD CONSTRAINT "SYS_C0011159" CHECK ("FUELSTATUS" IS NOT NULL);

ALTER TABLE "EMOC3"."FUEL" ADD CONSTRAINT "SYS_C0011160" CHECK ("LANDING" IS NOT NULL);

ALTER TABLE "EMOC3"."FUEL" ADD CONSTRAINT "SYS_C0011161" CHECK ("DEFAULTFUEL" IS NOT NULL);

ALTER TABLE "EMOC3"."FUEL" ADD CONSTRAINT "SYS_C0011162" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."GAINLOSSSTATUSUPDATETRX" ADD CONSTRAINT "PK_GAINLOSSSTATUSUPDATETRX" PRIMARY KEY
	("GAINLOSSSTATUSUPDATETRXID") USING INDEX "EMOC3"."PK_GAINLOSSSTATUSUPDATETRX";

ALTER TABLE "EMOC3"."GENERATIONFLOW" ADD CONSTRAINT "PK_GENERATIONFLOW" PRIMARY KEY
	("GENERATIONFLOWNAME") USING INDEX "EMOC3"."PK_GENERATIONFLOW";

ALTER TABLE "EMOC3"."GENERATIONFLOW" ADD CONSTRAINT "SYS_C0011165" CHECK ("GENERATIONFLOWNAME" IS NOT NULL);

ALTER TABLE "EMOC3"."GENERATIONFLOW" ADD CONSTRAINT "SYS_C0011166" CHECK ("GENERATIONFLOWSTARTTIME" IS NOT NULL);

ALTER TABLE "EMOC3"."GENERATIONFLOW" ADD CONSTRAINT "SYS_C0011167" CHECK ("GENERATIONFLOWITEMOFFSET" IS NOT NULL);

ALTER TABLE "EMOC3"."GENERATIONFLOW" ADD CONSTRAINT "SYS_C0011168" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."GENERATIONFLOWITEMS" ADD CONSTRAINT "PK_GENERATIONFLOWITEMS" PRIMARY KEY
	("ITEMNUMBER",
	 "GENERATIONFLOWNAME") USING INDEX "EMOC3"."PK_GENERATIONFLOWITEMS";

ALTER TABLE "EMOC3"."GENERATIONFLOWITEMS" ADD CONSTRAINT "SYS_C0011170" CHECK ("ITEMNUMBER" IS NOT NULL);

ALTER TABLE "EMOC3"."GENERATIONFLOWITEMS" ADD CONSTRAINT "SYS_C0011171" CHECK ("ITEM" IS NOT NULL);

ALTER TABLE "EMOC3"."GENERATIONFLOWITEMS" ADD CONSTRAINT "SYS_C0011172" CHECK ("GENERATIONFLOWNAME" IS NOT NULL);

ALTER TABLE "EMOC3"."GENERATIONFLOWPROGRESS" ADD CONSTRAINT "PK_GENERATIONFLOWPROGRESS" PRIMARY KEY
	("GENERATIONFLOWNAME",
	 "STEPNUMBER",
	 "ITEMNUMBER") USING INDEX "EMOC3"."PK_GENERATIONFLOWPROGRESS";

ALTER TABLE "EMOC3"."GENERATIONFLOWPROGRESS" ADD CONSTRAINT "SYS_C0011174" CHECK ("GENERATIONFLOWNAME" IS NOT NULL);

ALTER TABLE "EMOC3"."GENERATIONFLOWPROGRESS" ADD CONSTRAINT "SYS_C0011175" CHECK ("STEPNUMBER" IS NOT NULL);

ALTER TABLE "EMOC3"."GENERATIONFLOWPROGRESS" ADD CONSTRAINT "SYS_C0011176" CHECK ("ITEMNUMBER" IS NOT NULL);

ALTER TABLE "EMOC3"."GENERATIONFLOWSTEPS" ADD CONSTRAINT "PK_GENERATIONFLOWSTEPS" PRIMARY KEY
	("STEPNUMBER",
	 "GENERATIONFLOWNAME") USING INDEX "EMOC3"."PK_GENERATIONFLOWSTEPS";

ALTER TABLE "EMOC3"."GENERATIONFLOWSTEPS" ADD CONSTRAINT "SYS_C0011178" CHECK ("STEPNUMBER" IS NOT NULL);

ALTER TABLE "EMOC3"."GENERATIONFLOWSTEPS" ADD CONSTRAINT "SYS_C0011179" CHECK ("STEPNAME" IS NOT NULL);

ALTER TABLE "EMOC3"."GENERATIONFLOWSTEPS" ADD CONSTRAINT "SYS_C0011180" CHECK ("STEPLENGTH" IS NOT NULL);

ALTER TABLE "EMOC3"."GENERATIONFLOWSTEPS" ADD CONSTRAINT "SYS_C0011181" CHECK ("GENERATIONFLOWNAME" IS NOT NULL);

ALTER TABLE "EMOC3"."GEOLOCCODETRX" ADD CONSTRAINT "PK_GEOLOCCODETRX" PRIMARY KEY
	("GEOLOCCODETRXID") USING INDEX "EMOC3"."PK_GEOLOCCODETRX";

ALTER TABLE "EMOC3"."GLOBALCHANGENOTIFICATION" ADD CONSTRAINT "SYS_C0011184" CHECK ("CHANGEID" IS NOT NULL);

ALTER TABLE "EMOC3"."GLOBALCHANGENOTIFICATION" ADD CONSTRAINT "SYS_C0011185" CHECK ("CACHEDTABLENAME" IS NOT NULL);

ALTER TABLE "EMOC3"."GRADECODES" ADD CONSTRAINT "SYS_C0011186" CHECK ("RANKDESCRIPTION" IS NOT NULL);

ALTER TABLE "EMOC3"."GRADECODES" ADD CONSTRAINT "SYS_C0011187" CHECK ("RANKCODE" IS NOT NULL);

ALTER TABLE "EMOC3"."HANGER_QUEEN_CODE" ADD CONSTRAINT "PK_HANGERQUEEN" PRIMARY KEY
	("HQCODEID") USING INDEX "EMOC3"."PK_HANGERQUEEN";

ALTER TABLE "EMOC3"."HANGER_QUEEN_CODE" ADD CONSTRAINT "SYS_C0011188" CHECK ("HQCODEID" IS NOT NULL);

ALTER TABLE "EMOC3"."HANGER_QUEEN_CODE" ADD CONSTRAINT "SYS_C0011189" CHECK ("HQCODE" IS NOT NULL);

ALTER TABLE "EMOC3"."HANGER_QUEEN_CODE" ADD CONSTRAINT "SYS_C0011190" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."HISTORY" ADD CONSTRAINT "PK_HISTORY" PRIMARY KEY
	("HISTORYID") USING INDEX "EMOC3"."PK_HISTORY";

ALTER TABLE "EMOC3"."HISTORY" ADD CONSTRAINT "SYS_C0011192" CHECK ("HISTORYID" IS NOT NULL);

ALTER TABLE "EMOC3"."HISTORY" ADD CONSTRAINT "SYS_C0011193" CHECK ("EVENTDATE" IS NOT NULL);

ALTER TABLE "EMOC3"."HISTORY" ADD CONSTRAINT "SYS_C0011194" CHECK ("USERID" IS NOT NULL);

ALTER TABLE "EMOC3"."HISTORY" ADD CONSTRAINT "SYS_C0011195" CHECK ("AIRCRAFTID" IS NOT NULL);

ALTER TABLE "EMOC3"."HOTSPOTS" ADD CONSTRAINT "PK_HOTSPOTS" PRIMARY KEY
	("FIELDNAME") USING INDEX "EMOC3"."PK_HOTSPOTS";

ALTER TABLE "EMOC3"."HOTSPOTS" ADD CONSTRAINT "SYS_C0011197" CHECK ("FIELDNAME" IS NOT NULL);

ALTER TABLE "EMOC3"."HOTSPOTS" ADD CONSTRAINT "SYS_C0011198" CHECK ("LOCATIONID" IS NOT NULL);

ALTER TABLE "EMOC3"."HOTSPOTS" ADD CONSTRAINT "SYS_C0011199" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."IMDSCDBELCUNITOPTION" ADD CONSTRAINT "PK_IMDSCDBELCUNITOPTION" PRIMARY KEY
	("IMDSCDBELCUNITOPTIONID") USING INDEX "EMOC3"."PK_IMDSCDBELCUNITOPTION";

ALTER TABLE "EMOC3"."IMDSCDBELCUNITOPTION" ADD CONSTRAINT "SYS_C0011201" CHECK ("IMDSCDBINTERFACEOPTIONID" IS NOT NULL);

ALTER TABLE "EMOC3"."IMDSCDBELCUNITOPTION" ADD CONSTRAINT "SYS_C0011202" CHECK ("ENTERPRISELOCATIONCODE" IS NOT NULL);

ALTER TABLE "EMOC3"."IMDSCDBELCUNITOPTION" ADD CONSTRAINT "SYS_C0011203" CHECK ("UNITID" IS NOT NULL);

ALTER TABLE "EMOC3"."IMDSCDBELCUNITOPTION" ADD CONSTRAINT "SYS_C0011204" CHECK ("OPTIONENABLED" IS NOT NULL);

ALTER TABLE "EMOC3"."IMDSCDBINTERFACEOPTION" ADD CONSTRAINT "PK_IMDSCDBINTERFACEOPTION" PRIMARY KEY
	("IMDSCDBINTERFACEOPTIONID") USING INDEX "EMOC3"."PK_IMDSCDBINTERFACEOPTION";

ALTER TABLE "EMOC3"."IMDSCDBINTERFACEOPTION" ADD CONSTRAINT "SYS_C0011206" CHECK ("IMDSCDBINTERFACEOPTIONID" IS NOT NULL);

ALTER TABLE "EMOC3"."IMDSCDBINTERFACEOPTION" ADD CONSTRAINT "SYS_C0011207" CHECK ("OPTIONNAME" IS NOT NULL);

ALTER TABLE "EMOC3"."IMDSCDBINTERFACEOPTION" ADD CONSTRAINT "SYS_C0011208" CHECK ("OPTIONENABLED" IS NOT NULL);

ALTER TABLE "EMOC3"."IMDSCDBINTERFACEOPTION" ADD CONSTRAINT "SYS_C0011209" CHECK ("INTERFACEDIRECTION" IS NOT NULL);

ALTER TABLE "EMOC3"."IMDSLOGINS" ADD CONSTRAINT "PK_IMDSLOGINS" PRIMARY KEY
	("IMDSLOGINID") USING INDEX "EMOC3"."PK_IMDSLOGINS";

ALTER TABLE "EMOC3"."IMDSLOGINS" ADD CONSTRAINT "SYS_C0011211" CHECK ("IMDSLOGINID" IS NOT NULL);

ALTER TABLE "EMOC3"."IMDSLOGINS" ADD CONSTRAINT "SYS_C0011212" CHECK ("USERID" IS NOT NULL);

ALTER TABLE "EMOC3"."IMDSLOGINS" ADD CONSTRAINT "SYS_C0011213" CHECK ("IMDSLOGIN" IS NOT NULL);

ALTER TABLE "EMOC3"."IMDSLOGINS" ADD CONSTRAINT "SYS_C0011214" CHECK ("IMDSPASSWORD" IS NOT NULL);

ALTER TABLE "EMOC3"."INTERFACECONTROL" ADD CONSTRAINT "PK_INTERFACECONTROL" PRIMARY KEY
	("INTERFACECONTROLID") USING INDEX "EMOC3"."PK_INTERFACECONTROL";

ALTER TABLE "EMOC3"."INTERFACECONTROL" ADD CONSTRAINT "SYS_C0011216" CHECK ("INTERFACECONTROLID" IS NOT NULL);

ALTER TABLE "EMOC3"."INTERFACECONTROL" ADD CONSTRAINT "SYS_C0011217" CHECK ("INTERFACENAME" IS NOT NULL);

ALTER TABLE "EMOC3"."INTERFACECONTROL" ADD CONSTRAINT "SYS_C0011218" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."INTERFACEHISTORY" ADD CONSTRAINT "SYS_C0011220" CHECK ("STATUSCHANGETIME" IS NOT NULL);

ALTER TABLE "EMOC3"."INTERFACEHISTORY" ADD CONSTRAINT "SYS_C0011221" CHECK ("STATUSCHANGEBY" IS NOT NULL);

ALTER TABLE "EMOC3"."INTERFACEHISTORY" ADD CONSTRAINT "SYS_C0011222" CHECK ("CURRENTSTATUS" IS NOT NULL);

ALTER TABLE "EMOC3"."INTERFACEHISTORY" ADD CONSTRAINT "SYS_C0011223" CHECK ("INTERFACECONTROLID" IS NOT NULL);

ALTER TABLE "EMOC3"."INTERFACEHISTORY" ADD CONSTRAINT "SYS_C0011224" CHECK ("CURRENTENABLED" IS NOT NULL);

ALTER TABLE "EMOC3"."INTERFACEITEMS" ADD CONSTRAINT "PK_INTERFACEITEMS" PRIMARY KEY
	("INTERFACEITEMID") USING INDEX "EMOC3"."PK_INTERFACEITEMS";

ALTER TABLE "EMOC3"."INTERFACEITEMS" ADD CONSTRAINT "SYS_C0011225" CHECK ("INTERFACEITEMID" IS NOT NULL);

ALTER TABLE "EMOC3"."INTERFACEITEMS" ADD CONSTRAINT "SYS_C0011226" CHECK ("INTERFACECONTROLID" IS NOT NULL);

ALTER TABLE "EMOC3"."INTERFACEITEMS" ADD CONSTRAINT "SYS_C0011227" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."INTERFACEITEMSHISTORY" ADD CONSTRAINT "SYS_C0011229" CHECK ("STATUSCHANGETIME" IS NOT NULL);

ALTER TABLE "EMOC3"."INTERFACEITEMSHISTORY" ADD CONSTRAINT "SYS_C0011230" CHECK ("STATUSCHANGEBY" IS NOT NULL);

ALTER TABLE "EMOC3"."INTERFACEITEMSHISTORY" ADD CONSTRAINT "SYS_C0011231" CHECK ("INTERFACECONTROLID" IS NOT NULL);

ALTER TABLE "EMOC3"."INTERFACEITEMSHISTORY" ADD CONSTRAINT "SYS_C0011232" CHECK ("INTERFACEITEMID" IS NOT NULL);

ALTER TABLE "EMOC3"."INTERFACELOG" ADD CONSTRAINT "PK_INTERFACELOG" PRIMARY KEY
	("INTERFACELOGID") USING INDEX "EMOC3"."PK_INTERFACELOG";

ALTER TABLE "EMOC3"."INTERFACELOG" ADD CONSTRAINT "SYS_C0011233" CHECK ("INTERFACELOGID" IS NOT NULL);

ALTER TABLE "EMOC3"."INTERFACELOG" ADD CONSTRAINT "SYS_C0011234" CHECK ("INTERFACECONTROLID" IS NOT NULL);

ALTER TABLE "EMOC3"."INTERFACELOG" ADD CONSTRAINT "SYS_C0011235" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."INTERFACEREJECTLIST" ADD CONSTRAINT "PK_INTERFACEREJECTLIST" PRIMARY KEY
	("REJECTID") USING INDEX "EMOC3"."PK_INTERFACEREJECTLIST";

ALTER TABLE "EMOC3"."INVENTORYSTATUSUPDATETRX" ADD CONSTRAINT "PK_INVENTORYSTATUSUPDATE" PRIMARY KEY
	("INVENTORYSTATUSUPDATETRXID") USING INDEX "EMOC3"."PK_INVENTORYSTATUSUPDATE";

ALTER TABLE "EMOC3"."JOAP" ADD CONSTRAINT "PK_JOAP" PRIMARY KEY
	("JOAPID") USING INDEX "EMOC3"."PK_JOAP";

ALTER TABLE "EMOC3"."JOAP" ADD CONSTRAINT "SYS_C0011239" CHECK ("JOAPID" IS NOT NULL);

ALTER TABLE "EMOC3"."JOAP" ADD CONSTRAINT "SYS_C0011240" CHECK ("JOAPCODE" IS NOT NULL);

ALTER TABLE "EMOC3"."JOAP" ADD CONSTRAINT "SYS_C0011241" CHECK ("LANDING" IS NOT NULL);

ALTER TABLE "EMOC3"."JOAP" ADD CONSTRAINT "SYS_C0011242" CHECK ("REDCAPSTATUS" IS NOT NULL);

ALTER TABLE "EMOC3"."JOAP" ADD CONSTRAINT "SYS_C0011243" CHECK ("DEFAULTJOAP" IS NOT NULL);

ALTER TABLE "EMOC3"."JOAP" ADD CONSTRAINT "SYS_C0011244" CHECK ("COLORRULESID" IS NOT NULL);

ALTER TABLE "EMOC3"."JOAP" ADD CONSTRAINT "SYS_C0011245" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."JOAPDATA" ADD CONSTRAINT "PK_JOAPDATA" PRIMARY KEY
	("JOAPDATAID") USING INDEX "EMOC3"."PK_JOAPDATA";

ALTER TABLE "EMOC3"."JOAPDATA" ADD CONSTRAINT "SYS_C0011247" CHECK ("JOAPDATAID" IS NOT NULL);

ALTER TABLE "EMOC3"."JOAPDATA" ADD CONSTRAINT "SYS_C0011248" CHECK ("JOAPID" IS NOT NULL);

ALTER TABLE "EMOC3"."JOAPDATA" ADD CONSTRAINT "SYS_C0011249" CHECK ("ENGINEDATAID" IS NOT NULL);

ALTER TABLE "EMOC3"."JOAPDATA" ADD CONSTRAINT "SYS_C0011250" CHECK ("MOCCONTROLLER" IS NOT NULL);

ALTER TABLE "EMOC3"."JOAPDATA" ADD CONSTRAINT "SYS_C0011251" CHECK ("SAMPLEDATE" IS NOT NULL);

ALTER TABLE "EMOC3"."LANDINGCODES" ADD CONSTRAINT "PK_LANDINGCODES" PRIMARY KEY
	("LANDINGCODEID") USING INDEX "EMOC3"."PK_LANDINGCODES";

ALTER TABLE "EMOC3"."LANDINGCODES" ADD CONSTRAINT "SYS_C0011253" CHECK ("LANDINGCODEID" IS NOT NULL);

ALTER TABLE "EMOC3"."LANDINGCODES" ADD CONSTRAINT "SYS_C0011254" CHECK ("LANDINGCODE" IS NOT NULL);

ALTER TABLE "EMOC3"."LANDINGCODES" ADD CONSTRAINT "SYS_C0011255" CHECK ("WRITEUPNEEDED" IS NOT NULL);

ALTER TABLE "EMOC3"."LANDINGCODES" ADD CONSTRAINT "SYS_C0011256" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."LINKS" ADD CONSTRAINT "SYS_C0011258" CHECK ("LINKID" IS NOT NULL);

ALTER TABLE "EMOC3"."LINKS" ADD CONSTRAINT "SYS_C0011259" CHECK ("LINKURL" IS NOT NULL);

ALTER TABLE "EMOC3"."LINKS" ADD CONSTRAINT "SYS_C0011260" CHECK ("LINKTITLE" IS NOT NULL);

ALTER TABLE "EMOC3"."LINKS" ADD CONSTRAINT "SYS_C0011261" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."LOCATIONCODETRX" ADD CONSTRAINT "PK_LOACTIONCODETRX" PRIMARY KEY
	("LOCATIONCODETRXID") USING INDEX "EMOC3"."PK_LOACTIONCODETRX";

ALTER TABLE "EMOC3"."LOCATIONS" ADD CONSTRAINT "PK_LOCATIONS" PRIMARY KEY
	("LOCATIONID") USING INDEX "EMOC3"."PK_LOCATIONS";

ALTER TABLE "EMOC3"."LOCATIONS" ADD CONSTRAINT "SYS_C0011263" CHECK ("LOCATIONID" IS NOT NULL);

ALTER TABLE "EMOC3"."LOCATIONS" ADD CONSTRAINT "SYS_C0011264" CHECK ("LOCATIONCODE" IS NOT NULL);

ALTER TABLE "EMOC3"."LOCATIONS" ADD CONSTRAINT "SYS_C0011265" CHECK ("MAXIMUMOCCUPANCY" IS NOT NULL);

ALTER TABLE "EMOC3"."LOCATIONS" ADD CONSTRAINT "SYS_C0011266" CHECK ("DEFAULTLOCATION" IS NOT NULL);

ALTER TABLE "EMOC3"."LOCATIONS" ADD CONSTRAINT "SYS_C0011267" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."MAINTENANCEEVENTS" ADD CONSTRAINT "SYS_C0011269" CHECK ("MAINTENANCEEVENTID" IS NOT NULL);

ALTER TABLE "EMOC3"."MAINTENANCEEVENTS" ADD CONSTRAINT "SYS_C0011270" CHECK ("UNIT" IS NOT NULL);

ALTER TABLE "EMOC3"."MAINTENANCEEVENTS" ADD CONSTRAINT "SYS_C0011271" CHECK ("PWC" IS NOT NULL);

ALTER TABLE "EMOC3"."MAINTENANCEEVENTS" ADD CONSTRAINT "SYS_C0011272" CHECK ("EQUIPID" IS NOT NULL);

ALTER TABLE "EMOC3"."MAINTENANCEEVENTS" ADD CONSTRAINT "SYS_C0011273" CHECK ("WUCLCN" IS NOT NULL);

ALTER TABLE "EMOC3"."MAINTENANCEEVENTS" ADD CONSTRAINT "SYS_C0011274" CHECK ("TSSCH" IS NOT NULL);

ALTER TABLE "EMOC3"."MAJCOMS" ADD CONSTRAINT "SYS_C0011275" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."MAJORCOMMANDCODETRX" ADD CONSTRAINT "PK_MAJORCOMMANDCODETRX" PRIMARY KEY
	("MAJORCOMMANDCODETRXID") USING INDEX "EMOC3"."PK_MAJORCOMMANDCODETRX";

ALTER TABLE "EMOC3"."MESSAGES" ADD CONSTRAINT "PK_MESSAGES" PRIMARY KEY
	("MESSAGEID") USING INDEX "EMOC3"."PK_MESSAGES";

ALTER TABLE "EMOC3"."MESSAGES" ADD CONSTRAINT "SYS_C0011277" CHECK ("MESSAGEID" IS NOT NULL);

ALTER TABLE "EMOC3"."MESSAGES" ADD CONSTRAINT "SYS_C0011278" CHECK ("MESSAGETITLE" IS NOT NULL);

ALTER TABLE "EMOC3"."MESSAGES" ADD CONSTRAINT "SYS_C0011279" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."MICAP" ADD CONSTRAINT "PK_MICAP" PRIMARY KEY
	("MICAPID") USING INDEX "EMOC3"."PK_MICAP";

ALTER TABLE "EMOC3"."MICAP" ADD CONSTRAINT "SYS_C0011281" CHECK ("MICAPID" IS NOT NULL);

ALTER TABLE "EMOC3"."MICAP" ADD CONSTRAINT "SYS_C0011282" CHECK ("DOCUMENTNUMBER" IS NOT NULL);

ALTER TABLE "EMOC3"."MICAPTRX" ADD CONSTRAINT "PK_MICAPTRXID" PRIMARY KEY
	("MICAPTRXID") USING INDEX "EMOC3"."PK_MICAPTRXID";

ALTER TABLE "EMOC3"."MICROSOFTDTPROPERTIES" ADD CONSTRAINT "MICROSOFT_NN_ID" CHECK ("ID" IS NOT NULL);

ALTER TABLE "EMOC3"."MICROSOFTDTPROPERTIES" ADD CONSTRAINT "MICROSOFT_NN_PROPERTY" CHECK ("PROPERTY" IS NOT NULL);

ALTER TABLE "EMOC3"."MICROSOFTDTPROPERTIES" ADD CONSTRAINT "MICROSOFT_NN_VERSION" CHECK ("VERSION" IS NOT NULL);

ALTER TABLE "EMOC3"."MICROSOFTDTPROPERTIES" ADD CONSTRAINT "MICROSOFT_PK_DTPROPERTIES" PRIMARY KEY
	("ID",
	 "PROPERTY") USING INDEX "EMOC3"."MICROSOFT_PK_DTPROPERTIES";

ALTER TABLE "EMOC3"."MISSIONS" ADD CONSTRAINT "PK_MISSIONS" PRIMARY KEY
	("MISSIONID") USING INDEX "EMOC3"."PK_MISSIONS";

ALTER TABLE "EMOC3"."MISSIONS" ADD CONSTRAINT "SYS_C0011289" CHECK ("MISSIONID" IS NOT NULL);

ALTER TABLE "EMOC3"."MISSIONS" ADD CONSTRAINT "SYS_C0011290" CHECK ("MISSION" IS NOT NULL);

ALTER TABLE "EMOC3"."MISSIONS" ADD CONSTRAINT "SYS_C0011291" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."MOC" ADD CONSTRAINT "PK_MOC" PRIMARY KEY
	("MOCID") USING INDEX "EMOC3"."PK_MOC";

ALTER TABLE "EMOC3"."MOC" ADD CONSTRAINT "SYS_C0011293" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."MOC" ADD CONSTRAINT "SYS_C0011294" CHECK ("MOCTITLE" IS NOT NULL);

ALTER TABLE "EMOC3"."MOC" ADD CONSTRAINT "SYS_C0011295" UNIQUE
	("MOCTITLE") USING INDEX "EMOC3"."SYS_C0011295";

ALTER TABLE "EMOC3"."MOCADMINS" ADD CONSTRAINT "PK_MOCADMIN" PRIMARY KEY
	("MOCADMINID") USING INDEX "EMOC3"."PK_MOCADMIN";

ALTER TABLE "EMOC3"."MOCADMINS" ADD CONSTRAINT "SYS_C0011297" CHECK ("MOCADMINID" IS NOT NULL);

ALTER TABLE "EMOC3"."MOCADMINS" ADD CONSTRAINT "SYS_C0011298" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."MOCADMINS" ADD CONSTRAINT "SYS_C0011299" CHECK ("USERID" IS NOT NULL);

ALTER TABLE "EMOC3"."MOCSTATUSICONS" ADD CONSTRAINT "PK_MOCSTATUSICONS" PRIMARY KEY
	("MOCID",
	 "STATUSCODE",
	 "MISSIONDESIGNSERIES",
	 "ICON_TYPE") USING INDEX "EMOC3"."PK_MOCSTATUSICONS";

ALTER TABLE "EMOC3"."MOCSTATUSICONS" ADD CONSTRAINT "SYS_C0011301" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."MOCSTATUSICONS" ADD CONSTRAINT "SYS_C0011302" CHECK ("STATUSIMAGEID" IS NOT NULL);

ALTER TABLE "EMOC3"."MOCSTATUSICONS" ADD CONSTRAINT "SYS_C0011303" CHECK ("MISSIONDESIGNSERIES" IS NOT NULL);

ALTER TABLE "EMOC3"."MOCSTATUSICONS" ADD CONSTRAINT "SYS_C0011304" CHECK ("STATUSCODE" IS NOT NULL);

ALTER TABLE "EMOC3"."MOCSTATUSICONS" ADD CONSTRAINT "SYS_C0011305" CHECK ("ICON_TYPE" IS NOT NULL);

ALTER TABLE "EMOC3"."MOCSTATUSICONS" ADD CONSTRAINT "UK_MOCSTATUSICONS" UNIQUE
	("ICON_TYPE",
	 "MISSIONDESIGNSERIES",
	 "MOCID",
	 "STATUSCODE") USING INDEX "EMOC3"."UK_MOCSTATUSICONS_IDX";

ALTER TABLE "EMOC3"."MOCUSERS" ADD CONSTRAINT "PK_MOCUSERS" PRIMARY KEY
	("MOCUSERID") USING INDEX "EMOC3"."PK_MOCUSERS";

ALTER TABLE "EMOC3"."MOCUSERS" ADD CONSTRAINT "SYS_C0011308" CHECK ("MOCUSERID" IS NOT NULL);

ALTER TABLE "EMOC3"."MOCUSERS" ADD CONSTRAINT "SYS_C0011309" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."MOCUSERS" ADD CONSTRAINT "SYS_C0011310" CHECK ("USERID" IS NOT NULL);

ALTER TABLE "EMOC3"."OPERATIONALEVENTDELETETRX" ADD CONSTRAINT "SYS_C0011312" CHECK ("OPERATIONALEVENTDELETETRXID" IS NOT NULL);

ALTER TABLE "EMOC3"."OPERATIONALEVENTLOADTRX" ADD CONSTRAINT "SYS_C0011313" CHECK ("OPERATIONALEVENTLOADTRXID" IS NOT NULL);

ALTER TABLE "EMOC3"."OPERATIONALEVENTUPDATETRX" ADD CONSTRAINT "SYS_C0011314" CHECK ("OPERATIONALEVENTUPDATETRXID" IS NOT NULL);

ALTER TABLE "EMOC3"."ORDNANCE" ADD CONSTRAINT "PK_ORDNANCE" PRIMARY KEY
	("ORDNANCEID") USING INDEX "EMOC3"."PK_ORDNANCE";

ALTER TABLE "EMOC3"."ORDNANCE" ADD CONSTRAINT "SYS_C0011315" CHECK ("ORDNANCEID" IS NOT NULL);

ALTER TABLE "EMOC3"."ORDNANCE" ADD CONSTRAINT "SYS_C0011316" CHECK ("WEAPONSTYPEID" IS NOT NULL);

ALTER TABLE "EMOC3"."ORDNANCE" ADD CONSTRAINT "SYS_C0011317" CHECK ("ORDNANCE" IS NOT NULL);

ALTER TABLE "EMOC3"."ORGANIZATIONS" ADD CONSTRAINT "PK_ORGANIZATIONS" PRIMARY KEY
	("ORGANIZATIONSID") USING INDEX "EMOC3"."PK_ORGANIZATIONS";

ALTER TABLE "EMOC3"."ORGANIZATIONS" ADD CONSTRAINT "SYS_C0011319" CHECK ("UNIT_ID" IS NOT NULL);

ALTER TABLE "EMOC3"."ORGANIZATIONS" ADD CONSTRAINT "SYS_C0011320" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."ORGANIZATIONTRX" ADD CONSTRAINT "PK_ORGANIZATIONLOADTRX" PRIMARY KEY
	("ORGANIZATIONLOADTRXID") USING INDEX "EMOC3"."PK_ORGANIZATIONLOADTRX";

ALTER TABLE "EMOC3"."PERMISSIONS" ADD CONSTRAINT "PK_PERMISSIONS" PRIMARY KEY
	("PERMISSIONID") USING INDEX "EMOC3"."PK_PERMISSIONS";

ALTER TABLE "EMOC3"."PERMISSIONS" ADD CONSTRAINT "SYS_C0011323" CHECK ("PERMISSIONID" IS NOT NULL);

ALTER TABLE "EMOC3"."PERMISSIONS" ADD CONSTRAINT "SYS_C0011324" CHECK ("SQUADRONID" IS NOT NULL);

ALTER TABLE "EMOC3"."PERMISSIONS" ADD CONSTRAINT "SYS_C0011325" CHECK ("USERID" IS NOT NULL);

ALTER TABLE "EMOC3"."PILOT" ADD CONSTRAINT "PK_PILOT" PRIMARY KEY
	("PILOTID") USING INDEX "EMOC3"."PK_PILOT";

ALTER TABLE "EMOC3"."PILOT" ADD CONSTRAINT "SYS_C0011327" CHECK ("PILOTID" IS NOT NULL);

ALTER TABLE "EMOC3"."PILOT" ADD CONSTRAINT "SYS_C0011328" CHECK ("PILOTNAME" IS NOT NULL);

ALTER TABLE "EMOC3"."PILOT" ADD CONSTRAINT "SYS_C0011329" CHECK ("RANKID" IS NOT NULL);

ALTER TABLE "EMOC3"."PILOT" ADD CONSTRAINT "SYS_C0011330" CHECK ("SQUADRONID" IS NOT NULL);

ALTER TABLE "EMOC3"."PILOT" ADD CONSTRAINT "SYS_C0011331" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."POSSESSIONS" ADD CONSTRAINT "PK_POSSESSIONS" PRIMARY KEY
	("POSSESSIONID") USING INDEX "EMOC3"."PK_POSSESSIONS";

ALTER TABLE "EMOC3"."POSSESSIONS" ADD CONSTRAINT "SYS_C0011333" CHECK ("POSSESSIONID" IS NOT NULL);

ALTER TABLE "EMOC3"."POSSESSIONS" ADD CONSTRAINT "SYS_C0011334" CHECK ("POSSESSIONCODE" IS NOT NULL);

ALTER TABLE "EMOC3"."POSSESSIONS" ADD CONSTRAINT "SYS_C0011335" CHECK ("DEFAULTPOSSESSION" IS NOT NULL);

ALTER TABLE "EMOC3"."POSSESSIONS" ADD CONSTRAINT "SYS_C0011336" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."RANGES" ADD CONSTRAINT "PK_RANGES" PRIMARY KEY
	("RANGEID") USING INDEX "EMOC3"."PK_RANGES";

ALTER TABLE "EMOC3"."RANGES" ADD CONSTRAINT "SYS_C0011338" CHECK ("RANGEID" IS NOT NULL);

ALTER TABLE "EMOC3"."RANGES" ADD CONSTRAINT "SYS_C0011339" CHECK ("RANGE" IS NOT NULL);

ALTER TABLE "EMOC3"."RANKS" ADD CONSTRAINT "PK_RANKS" PRIMARY KEY
	("RANKID") USING INDEX "EMOC3"."PK_RANKS";

ALTER TABLE "EMOC3"."RANKS" ADD CONSTRAINT "SYS_C0011341" CHECK ("RANKID" IS NOT NULL);

ALTER TABLE "EMOC3"."RANKS" ADD CONSTRAINT "SYS_C0011342" CHECK ("RANKCODE" IS NOT NULL);

ALTER TABLE "EMOC3"."RANKS" ADD CONSTRAINT "SYS_C0011343" CHECK ("DEFAULTRANK" IS NOT NULL);

ALTER TABLE "EMOC3"."RANKS" ADD CONSTRAINT "SYS_C0011344" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."REMARKS" ADD CONSTRAINT "PK_REMARKS" PRIMARY KEY
	("REMARKSID") USING INDEX "EMOC3"."PK_REMARKS";

ALTER TABLE "EMOC3"."REMARKS" ADD CONSTRAINT "SYS_C0011346" CHECK ("REMARKSID" IS NOT NULL);

ALTER TABLE "EMOC3"."REMARKS" ADD CONSTRAINT "SYS_C0011347" CHECK ("REMARKS" IS NOT NULL);

ALTER TABLE "EMOC3"."REPORTCOLUMNS" ADD CONSTRAINT "SYS_C0011349" CHECK ("COLUMNNUMBER" IS NOT NULL);

ALTER TABLE "EMOC3"."REPORTCOLUMNS" ADD CONSTRAINT "SYS_C0011350" CHECK ("COLUMNNAME" IS NOT NULL);

ALTER TABLE "EMOC3"."REPORTCRITERIA" ADD CONSTRAINT "PK_REPORTCRITERIA" PRIMARY KEY
	("CRITERIAID") USING INDEX "EMOC3"."PK_REPORTCRITERIA";

ALTER TABLE "EMOC3"."REPORTCRITERIA" ADD CONSTRAINT "SYS_C0011351" CHECK ("CRITERIAID" IS NOT NULL);

ALTER TABLE "EMOC3"."REPORTCRITERIA" ADD CONSTRAINT "SYS_C0011352" CHECK ("REPORTID" IS NOT NULL);

ALTER TABLE "EMOC3"."REPORTCRITERIA" ADD CONSTRAINT "SYS_C0011353" CHECK ("REPORTNAME" IS NOT NULL);

ALTER TABLE "EMOC3"."REPORTCRITERIA" ADD CONSTRAINT "SYS_C0011354" CHECK ("REPORTVIEW" IS NOT NULL);

ALTER TABLE "EMOC3"."REPORTCRITERIA" ADD CONSTRAINT "SYS_C0011355" CHECK ("FIELDS" IS NOT NULL);

ALTER TABLE "EMOC3"."REPORTCRITERIA" ADD CONSTRAINT "SYS_C0011356" CHECK ("QUERYTYPE" IS NOT NULL);

ALTER TABLE "EMOC3"."REPORTPARAMETERS" ADD CONSTRAINT "SYS_C0011358" CHECK ("PARAMETERNUMBER" IS NOT NULL);

ALTER TABLE "EMOC3"."REPORTPARAMETERS" ADD CONSTRAINT "SYS_C0011359" CHECK ("PARAMETERNAME" IS NOT NULL);

ALTER TABLE "EMOC3"."REPORTPARAMETERS" ADD CONSTRAINT "SYS_C0011360" CHECK ("PARAMETERTYPE" IS NOT NULL);

ALTER TABLE "EMOC3"."REPORTS" ADD CONSTRAINT "PK_REPORTID" PRIMARY KEY
	("REPORTID") USING INDEX "EMOC3"."PK_REPORTID";

ALTER TABLE "EMOC3"."REPORTS" ADD CONSTRAINT "SYS_C0011361" CHECK ("REPORTNAME" IS NOT NULL);

ALTER TABLE "EMOC3"."REPORTS" ADD CONSTRAINT "SYS_C0011362" CHECK ("SQLSTATEMENT" IS NOT NULL);

ALTER TABLE "EMOC3"."REPORTS" ADD CONSTRAINT "SYS_C0011363" CHECK ("LIMITBYSQUADRON" IS NOT NULL);

ALTER TABLE "EMOC3"."REPORTS" ADD CONSTRAINT "SYS_C0011364" CHECK ("REPORTID" IS NOT NULL);

ALTER TABLE "EMOC3"."REPORTS" ADD CONSTRAINT "SYS_C0011365" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."SCHEDULE" ADD CONSTRAINT "PK_SCHEDULE" PRIMARY KEY
	("SCHEDULEID") USING INDEX "EMOC3"."PK_SCHEDULE";

ALTER TABLE "EMOC3"."SCHEDULE" ADD CONSTRAINT "SYS_C0011367" CHECK ("SCHEDULEID" IS NOT NULL);

ALTER TABLE "EMOC3"."SCHEDULE" ADD CONSTRAINT "SYS_C0011368" CHECK ("SPARE" IS NOT NULL);

ALTER TABLE "EMOC3"."SCHEDULEDEVIATIONS" ADD CONSTRAINT "SYS_C0011370" CHECK ("SCHEDULEDEVIATIONID" IS NOT NULL);

ALTER TABLE "EMOC3"."SCHEDULESCSV" ADD CONSTRAINT "SYS_C0011371" CHECK ("SCHEDULECSVID" IS NOT NULL);

ALTER TABLE "EMOC3"."SCHEDULESCSV" ADD CONSTRAINT "SYS_C0011372" CHECK ("SCHEDULE" IS NOT NULL);

ALTER TABLE "EMOC3"."SCHEDULESCSV" ADD CONSTRAINT "SYS_C0011373" CHECK ("SCHEDULENAME" IS NOT NULL);

ALTER TABLE "EMOC3"."SCHEDULESCSV" ADD CONSTRAINT "SYS_C0011374" CHECK ("DATEUPLOADED" IS NOT NULL);

ALTER TABLE "EMOC3"."SCHEDULESCSV" ADD CONSTRAINT "SYS_C0011375" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."SEMEDX" ADD CONSTRAINT "PK_SEMEDX" PRIMARY KEY
	("SEMEDXID") USING INDEX "EMOC3"."PK_SEMEDX";

ALTER TABLE "EMOC3"."SEMEDX" ADD CONSTRAINT "SYS_C0011376" CHECK ("SEMEDXID" IS NOT NULL);

ALTER TABLE "EMOC3"."SEMEDX" ADD CONSTRAINT "SYS_C0011377" CHECK ("SEMEDX" IS NOT NULL);

ALTER TABLE "EMOC3"."SEMEDX" ADD CONSTRAINT "SYS_C0011378" CHECK ("COLORRULESID" IS NOT NULL);

ALTER TABLE "EMOC3"."SEMEDXDATA" ADD CONSTRAINT "PK_SEMEDXDATA" PRIMARY KEY
	("SEMDATAID") USING INDEX "EMOC3"."PK_SEMEDXDATA";

ALTER TABLE "EMOC3"."SEMEDXDATA" ADD CONSTRAINT "SYS_C0011380" CHECK ("SEMDATAID" IS NOT NULL);

ALTER TABLE "EMOC3"."SEMEDXDATA" ADD CONSTRAINT "SYS_C0011381" CHECK ("ENGINEDATAID" IS NOT NULL);

ALTER TABLE "EMOC3"."SEMEDXDATA" ADD CONSTRAINT "SYS_C0011382" CHECK ("SEMEDXID" IS NOT NULL);

ALTER TABLE "EMOC3"."SEMEDXDATA" ADD CONSTRAINT "SYS_C0011383" CHECK ("MOCCONTROLLER" IS NOT NULL);

ALTER TABLE "EMOC3"."SEMEDXDATA" ADD CONSTRAINT "SYS_C0011384" CHECK ("SAMPLEDATE" IS NOT NULL);

ALTER TABLE "EMOC3"."SHOPDISPATCH" ADD CONSTRAINT "PK_SHOPDISPATCH" PRIMARY KEY
	("SHOPDISPATCHID") USING INDEX "EMOC3"."PK_SHOPDISPATCH";

ALTER TABLE "EMOC3"."SHOPDISPATCH" ADD CONSTRAINT "SYS_C0011386" CHECK ("SHOPDISPATCHID" IS NOT NULL);

ALTER TABLE "EMOC3"."SHOPDISPATCH" ADD CONSTRAINT "SYS_C0011387" CHECK ("AIRCRAFTID" IS NOT NULL);

ALTER TABLE "EMOC3"."SMSTESTBLOB" ADD CONSTRAINT "PK_SMSTESTBLOB_ID" PRIMARY KEY
	("ID") USING INDEX "EMOC3"."PK_SMSTESTBLOB_ID";

ALTER TABLE "EMOC3"."SQUADRONS" ADD CONSTRAINT "PK_SQUADRONS" PRIMARY KEY
	("SQUADRONID") USING INDEX "EMOC3"."PK_SQUADRONS";

ALTER TABLE "EMOC3"."SQUADRONS" ADD CONSTRAINT "SYS_C0011390" CHECK ("SQUADRONID" IS NOT NULL);

ALTER TABLE "EMOC3"."SQUADRONS" ADD CONSTRAINT "SYS_C0011391" CHECK ("SQUADRONNAME" IS NOT NULL);

ALTER TABLE "EMOC3"."SQUADRONS" ADD CONSTRAINT "SYS_C0011392" CHECK ("SHORTNAME" IS NOT NULL);

ALTER TABLE "EMOC3"."SQUADRONS" ADD CONSTRAINT "SYS_C0011393" CHECK ("WINGID" IS NOT NULL);

ALTER TABLE "EMOC3"."SQUADRONS" ADD CONSTRAINT "SYS_C0011394" CHECK ("COLORID" IS NOT NULL);

ALTER TABLE "EMOC3"."SQUADRON_SORT_ORDER" ADD CONSTRAINT "PK_SQUADRON_SORT_ORDER" PRIMARY KEY
	("SQSORTORDERID") USING INDEX "EMOC3"."PK_SQUADRON_SORT_ORDER";

ALTER TABLE "EMOC3"."SQUADRON_SORT_ORDER" ADD CONSTRAINT "SYS_C0011396" CHECK ("SQSORTORDERID" IS NOT NULL);

ALTER TABLE "EMOC3"."STATIONLOCCODES" ADD CONSTRAINT "PK_STALOCCODEID" PRIMARY KEY
	("STALOCCODEID") USING INDEX "EMOC3"."PK_STALOCCODEID";

ALTER TABLE "EMOC3"."STATIONLOCCODES" ADD CONSTRAINT "SYS_C0011398" CHECK ("STALOCCODEID" IS NOT NULL);

ALTER TABLE "EMOC3"."STATIONLOCCODES" ADD CONSTRAINT "SYS_C0011399" CHECK ("STATIONLOC" IS NOT NULL);

ALTER TABLE "EMOC3"."STATIONLOCCODES" ADD CONSTRAINT "SYS_C0011400" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."STATUSCODE" ADD CONSTRAINT "PK_STATUSCODE" PRIMARY KEY
	("STATUSCODEID") USING INDEX "EMOC3"."PK_STATUSCODE";

ALTER TABLE "EMOC3"."STATUSCODE" ADD CONSTRAINT "SYS_C0011402" CHECK ("STATUSCODEID" IS NOT NULL);

ALTER TABLE "EMOC3"."STATUSCODE" ADD CONSTRAINT "SYS_C0011403" CHECK ("STATUSCODE" IS NOT NULL);

ALTER TABLE "EMOC3"."STATUSCODE" ADD CONSTRAINT "SYS_C0011404" CHECK ("ORDERNUMBER" IS NOT NULL);

ALTER TABLE "EMOC3"."STATUSCODE" ADD CONSTRAINT "SYS_C0011405" CHECK ("ICONNAME" IS NOT NULL);

ALTER TABLE "EMOC3"."STATUSCODE" ADD CONSTRAINT "SYS_C0011406" CHECK ("DEFAULTSTATUSCODE" IS NOT NULL);

ALTER TABLE "EMOC3"."STATUSCODE" ADD CONSTRAINT "SYS_C0011407" CHECK ("LASTFLOWN" IS NOT NULL);

ALTER TABLE "EMOC3"."STATUSCODE" ADD CONSTRAINT "SYS_C0011408" CHECK ("FLYING" IS NOT NULL);

ALTER TABLE "EMOC3"."STATUSCODE" ADD CONSTRAINT "SYS_C0011409" CHECK ("TAKEOFF" IS NOT NULL);

ALTER TABLE "EMOC3"."STATUSCODE" ADD CONSTRAINT "SYS_C0011410" CHECK ("ISREQUIRED" IS NOT NULL);

ALTER TABLE "EMOC3"."STATUSCODE" ADD CONSTRAINT "SYS_C0011411" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."STATUSCORRECTIONTRX" ADD CONSTRAINT "PK_STATUSCORRECTION" PRIMARY KEY
	("STATUSCORRECTIONID") USING INDEX "EMOC3"."PK_STATUSCORRECTION";

ALTER TABLE "EMOC3"."STATUSIMAGE" ADD CONSTRAINT "PK_STATUSIMAGES" PRIMARY KEY
	("STATUSIMAGEID") USING INDEX "EMOC3"."PK_STATUSIMAGES";

ALTER TABLE "EMOC3"."STATUSIMAGE" ADD CONSTRAINT "SYS_C0011414" CHECK ("IMAGE_DATA" IS NOT NULL);

ALTER TABLE "EMOC3"."STATUSIMAGE" ADD CONSTRAINT "SYS_C0011415" CHECK ("IMAGE_NAME" IS NOT NULL);

ALTER TABLE "EMOC3"."STATUSTRANSITIONRULE" ADD CONSTRAINT "PK_STATUSTRANSITIONRULE" PRIMARY KEY
	("STATRULEID") USING INDEX "EMOC3"."PK_STATUSTRANSITIONRULE";

ALTER TABLE "EMOC3"."STATUSTRANSITIONRULE" ADD CONSTRAINT "SYS_C0011417" CHECK ("STATRULEID" IS NOT NULL);

ALTER TABLE "EMOC3"."STATUSTRANSITIONRULE" ADD CONSTRAINT "SYS_C0011418" CHECK ("STATUSCODEID" IS NOT NULL);

ALTER TABLE "EMOC3"."STATUSTRANSITIONRULE" ADD CONSTRAINT "SYS_C0011419" CHECK ("TRANSITION2ID" IS NOT NULL);

ALTER TABLE "EMOC3"."STATUSTRANSITIONRULE" ADD CONSTRAINT "SYS_C0011420" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."STATUSUPDATETRX" ADD CONSTRAINT "PK_STATUSUPDATETRX" PRIMARY KEY
	("STATUSUPDATETRXID") USING INDEX "EMOC3"."PK_STATUSUPDATETRX";

ALTER TABLE "EMOC3"."SYMBOLS" ADD CONSTRAINT "PK_SYMBOLS" PRIMARY KEY
	("SYMBOLID") USING INDEX "EMOC3"."PK_SYMBOLS";

ALTER TABLE "EMOC3"."SYMBOLS" ADD CONSTRAINT "SYS_C0011423" CHECK ("SYMBOLID" IS NOT NULL);

ALTER TABLE "EMOC3"."SYMBOLS" ADD CONSTRAINT "SYS_C0011424" CHECK ("CONDCODEID" IS NOT NULL);

ALTER TABLE "EMOC3"."SYMBOLS" ADD CONSTRAINT "SYS_C0011425" CHECK ("SYMBOL" IS NOT NULL);

ALTER TABLE "EMOC3"."SYMBOLS" ADD CONSTRAINT "SYS_C0011426" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."TBMCSINTERFACELOG" ADD CONSTRAINT "PK_TBMCSINTERFACELOG" PRIMARY KEY
	("INTERFACELOGID") USING INDEX "EMOC3"."PK_TBMCSINTERFACELOG";

ALTER TABLE "EMOC3"."TBMCSINTERFACELOG" ADD CONSTRAINT "SYS_C0011428" CHECK ("INTERFACELOGID" IS NOT NULL);

ALTER TABLE "EMOC3"."TBMCSINTERFACELOG" ADD CONSTRAINT "SYS_C0011429" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."USERALERT" ADD CONSTRAINT "PK_USERALERT" PRIMARY KEY
	("ALERTID") USING INDEX "EMOC3"."PK_USERALERT";

ALTER TABLE "EMOC3"."USERALERT" ADD CONSTRAINT "SYS_C0011431" CHECK ("ALERTID" IS NOT NULL);

ALTER TABLE "EMOC3"."USERIMAGES" ADD CONSTRAINT "PK_IMAGEID" PRIMARY KEY
	("IMAGEID") USING INDEX "EMOC3"."PK_IMAGEID";

ALTER TABLE "EMOC3"."USERIMAGES" ADD CONSTRAINT "SYS_C0011433" CHECK ("IMAGEID" IS NOT NULL);

ALTER TABLE "EMOC3"."USERIMAGES" ADD CONSTRAINT "SYS_C0011434" CHECK ("USERID" IS NOT NULL);

ALTER TABLE "EMOC3"."USERIMAGES" ADD CONSTRAINT "SYS_C0011435" CHECK ("DATEUPLOADED" IS NOT NULL);

ALTER TABLE "EMOC3"."USERLINKS" ADD CONSTRAINT "SYS_C0011437" CHECK ("LINKID" IS NOT NULL);

ALTER TABLE "EMOC3"."USERLINKS" ADD CONSTRAINT "SYS_C0011438" CHECK ("LINKURL" IS NOT NULL);

ALTER TABLE "EMOC3"."USERLINKS" ADD CONSTRAINT "SYS_C0011439" CHECK ("LINKTITLE" IS NOT NULL);

ALTER TABLE "EMOC3"."USERS" ADD CONSTRAINT "PK_USERS" PRIMARY KEY
	("USERID") USING INDEX "EMOC3"."PK_USERS";

ALTER TABLE "EMOC3"."USERS" ADD CONSTRAINT "SYS_C0011440" CHECK ("USERID" IS NOT NULL);

ALTER TABLE "EMOC3"."USERS" ADD CONSTRAINT "SYS_C0011441" CHECK ("USERNAME" IS NOT NULL);

ALTER TABLE "EMOC3"."USERS" ADD CONSTRAINT "SYS_C0011442" CHECK ("ISONLINE" IS NOT NULL);

ALTER TABLE "EMOC3"."USERS" ADD CONSTRAINT "SYS_C0011443" CHECK ("BADATTEMPTS" IS NOT NULL);

ALTER TABLE "EMOC3"."UTILIZATIONCODES" ADD CONSTRAINT "PK_UTILCODEID" PRIMARY KEY
	("UTILCODEID") USING INDEX "EMOC3"."PK_UTILCODEID";

ALTER TABLE "EMOC3"."UTILIZATIONCODES" ADD CONSTRAINT "SYS_C0011445" CHECK ("UTILCODEID" IS NOT NULL);

ALTER TABLE "EMOC3"."UTILIZATIONCODES" ADD CONSTRAINT "SYS_C0011446" CHECK ("UTILIZATIONCODE" IS NOT NULL);

ALTER TABLE "EMOC3"."UTILIZATIONCODES" ADD CONSTRAINT "SYS_C0011447" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."UTILIZATIONCODETRX" ADD CONSTRAINT "PK_UTILIZATIONCODETRX" PRIMARY KEY
	("UTILIZATIONCODETRXID") USING INDEX "EMOC3"."PK_UTILIZATIONCODETRX";

ALTER TABLE "EMOC3"."UVRCHANGETRX" ADD CONSTRAINT "PK_UVRCHANGETRX" PRIMARY KEY
	("UVRCHANGETRXID") USING INDEX "EMOC3"."PK_UVRCHANGETRX";

ALTER TABLE "EMOC3"."WEAPONSCLASS" ADD CONSTRAINT "PK_WEAPONSCLASS" PRIMARY KEY
	("WEAPONSCLASSID") USING INDEX "EMOC3"."PK_WEAPONSCLASS";

ALTER TABLE "EMOC3"."WEAPONSCLASS" ADD CONSTRAINT "SYS_C0011451" CHECK ("WEAPONSCLASSID" IS NOT NULL);

ALTER TABLE "EMOC3"."WEAPONSCLASS" ADD CONSTRAINT "SYS_C0011452" CHECK ("WEAPONSCLASS" IS NOT NULL);

ALTER TABLE "EMOC3"."WEAPONSCLASS" ADD CONSTRAINT "SYS_C0011453" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."WEAPONSINFO" ADD CONSTRAINT "SYS_C0011455" CHECK ("WEAPONSID" IS NOT NULL);

ALTER TABLE "EMOC3"."WEAPONSINFO" ADD CONSTRAINT "SYS_C0011456" CHECK ("COMBATSCLID" IS NOT NULL);

ALTER TABLE "EMOC3"."WEAPONSINFO" ADD CONSTRAINT "SYS_C0011457" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."WEAPONSINFO" ADD CONSTRAINT "WEAPONSINFO_PK11061992374968" PRIMARY KEY
	("WEAPONSID") USING INDEX "EMOC3"."WEAPONSINFO_PK11061992374968";

ALTER TABLE "EMOC3"."WEAPONSLOAD" ADD CONSTRAINT "PK_WEAPONSLOAD" PRIMARY KEY
	("LOADID",
	 "STATION") USING INDEX "EMOC3"."PK_WEAPONSLOAD";

ALTER TABLE "EMOC3"."WEAPONSLOAD" ADD CONSTRAINT "SYS_C0011459" CHECK ("LOADID" IS NOT NULL);

ALTER TABLE "EMOC3"."WEAPONSLOAD" ADD CONSTRAINT "SYS_C0011460" CHECK ("STATION" IS NOT NULL);

ALTER TABLE "EMOC3"."WEAPONSLOAD" ADD CONSTRAINT "SYS_C0011461" CHECK ("WEAPONSNUMBER" IS NOT NULL);

ALTER TABLE "EMOC3"."WEAPONTYPES" ADD CONSTRAINT "PK_WEAPONTYPES" PRIMARY KEY
	("WEAPONSTYPEID") USING INDEX "EMOC3"."PK_WEAPONTYPES";

ALTER TABLE "EMOC3"."WEAPONTYPES" ADD CONSTRAINT "SYS_C0011463" CHECK ("WEAPONSTYPEID" IS NOT NULL);

ALTER TABLE "EMOC3"."WEAPONTYPES" ADD CONSTRAINT "SYS_C0011464" CHECK ("WEAPONTYPE" IS NOT NULL);

ALTER TABLE "EMOC3"."WEAPONTYPES" ADD CONSTRAINT "SYS_C0011465" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."WEBSERVERS" ADD CONSTRAINT "PK_SERVERS_ID" PRIMARY KEY
	("SERVERID") USING INDEX "EMOC3"."PK_SERVERS_ID";

ALTER TABLE "EMOC3"."WEBSERVERS" ADD CONSTRAINT "SYS_C0011467" CHECK ("SERVERID" IS NOT NULL);

ALTER TABLE "EMOC3"."WEBSERVERS" ADD CONSTRAINT "SYS_C0011468" CHECK ("SERVERNAME" IS NOT NULL);

ALTER TABLE "EMOC3"."WEBSERVERS" ADD CONSTRAINT "SYS_C0011469" CHECK ("SERVERURL" IS NOT NULL);

ALTER TABLE "EMOC3"."WEBSERVERS" ADD CONSTRAINT "UK_SERVERNAME" UNIQUE
	("SERVERNAME") USING INDEX "EMOC3"."UK_SERVERNAME";

ALTER TABLE "EMOC3"."WEBSERVERS" ADD CONSTRAINT "UK_SERVERURL" UNIQUE
	("SERVERURL") USING INDEX "EMOC3"."UK_SERVERURL";

ALTER TABLE "EMOC3"."WHENDISCOVEREDCODES" ADD CONSTRAINT "SYS_C0011473" CHECK ("WHENDISCOVEREDID" IS NOT NULL);

ALTER TABLE "EMOC3"."WHENDISCOVEREDCODES" ADD CONSTRAINT "SYS_C0011474" CHECK ("WDC" IS NOT NULL);

ALTER TABLE "EMOC3"."WHENDISCOVEREDCODES" ADD CONSTRAINT "SYS_C0011475" CHECK ("WDCNARRATIVE" IS NOT NULL);

ALTER TABLE "EMOC3"."WHENDISCOVEREDCODES" ADD CONSTRAINT "SYS_C0011476" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."WHENDISCOVEREDCODES" ADD CONSTRAINT "WHENDISCOVERE_PK11061906353349" PRIMARY KEY
	("WHENDISCOVEREDID") USING INDEX "EMOC3"."WHENDISCOVERE_PK11061906353349";

ALTER TABLE "EMOC3"."WHENDISCOVEREDCODETRX" ADD CONSTRAINT "PK_WHENDISCOVEREDCODETRX" PRIMARY KEY
	("WHENDISCOVEREDCODETRXID") USING INDEX "EMOC3"."PK_WHENDISCOVEREDCODETRX";

ALTER TABLE "EMOC3"."WINGS" ADD CONSTRAINT "PK_WINGS" PRIMARY KEY
	("WINGID") USING INDEX "EMOC3"."PK_WINGS";

ALTER TABLE "EMOC3"."WINGS" ADD CONSTRAINT "SYS_C0011479" CHECK ("WINGID" IS NOT NULL);

ALTER TABLE "EMOC3"."WINGS" ADD CONSTRAINT "SYS_C0011480" CHECK ("WINGNAME" IS NOT NULL);

ALTER TABLE "EMOC3"."WINGS" ADD CONSTRAINT "SYS_C0011481" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."WINGS" ADD CONSTRAINT "UK_WINGS_ELCUNITID" UNIQUE
	("ELC",
	 "UNITID") USING INDEX "EMOC3"."UK_WINGS_ELCUNITID";

ALTER TABLE "EMOC3"."WORKCENTERS" ADD CONSTRAINT "PK_WORKCENTERID" PRIMARY KEY
	("WORKCENTERID") USING INDEX "EMOC3"."WORKCENTERS_PK11061901575234";

ALTER TABLE "EMOC3"."WORKCENTERS" ADD CONSTRAINT "SYS_C0011484" CHECK ("WORKCENTERCODE" IS NOT NULL);

ALTER TABLE "EMOC3"."WORKCENTERS" ADD CONSTRAINT "SYS_C0011485" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."WORKCENTERTRX" ADD CONSTRAINT "PK_WORKCENTERTRX" PRIMARY KEY
	("WORKCENTERTRXID") USING INDEX "EMOC3"."PK_WORKCENTERTRX";

ALTER TABLE "EMOC3"."WORKUNITCODETRX" ADD CONSTRAINT "PK_WORKUNITCODETRX" PRIMARY KEY
	("WORKUNITCODETRXID") USING INDEX "EMOC3"."PK_WORKUNITCODETRX";

ALTER TABLE "EMOC3"."WRITEUPS" ADD CONSTRAINT "PK_WRITEUPS" PRIMARY KEY
	("WRITEUPID") USING INDEX "EMOC3"."PK_WRITEUPS";

ALTER TABLE "EMOC3"."WRITEUPS" ADD CONSTRAINT "SYS_C0011489" CHECK ("WRITEUPID" IS NOT NULL);

ALTER TABLE "EMOC3"."WRITEUPS" ADD CONSTRAINT "SYS_C0011490" CHECK ("WRITEUPTIME" IS NOT NULL);

ALTER TABLE "EMOC3"."WRITEUPS" ADD CONSTRAINT "SYS_C0011491" CHECK ("CORRECTED" IS NOT NULL);

ALTER TABLE "EMOC3"."WRITEUPS" ADD CONSTRAINT "SYS_C0011492" CHECK ("PACER" IS NOT NULL);

ALTER TABLE "EMOC3"."WUC" ADD CONSTRAINT "PK_WUC" PRIMARY KEY
	("WUCID") USING INDEX "EMOC3"."PK_WUC";

ALTER TABLE "EMOC3"."WUC" ADD CONSTRAINT "SYS_C0011494" CHECK ("WUCID" IS NOT NULL);

ALTER TABLE "EMOC3"."WUC" ADD CONSTRAINT "SYS_C0011495" CHECK ("WUCCODE" IS NOT NULL);

ALTER TABLE "EMOC3"."WX" ADD CONSTRAINT "PK_WX" PRIMARY KEY
	("WXCODEID") USING INDEX "EMOC3"."PK_WX";

ALTER TABLE "EMOC3"."WX" ADD CONSTRAINT "SYS_C0011497" CHECK ("DEFAULTWEATHERCODE" IS NOT NULL);

ALTER TABLE "EMOC3"."WX" ADD CONSTRAINT "SYS_C0011498" CHECK ("WEATHERCODE" IS NOT NULL);

ALTER TABLE "EMOC3"."WX" ADD CONSTRAINT "SYS_C0011499" CHECK ("MOCID" IS NOT NULL);

ALTER TABLE "EMOC3"."ACFTMDSTYPES" ADD CONSTRAINT "FK_MDSTYP_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."AIRCRAFT" ADD CONSTRAINT "FK_AIRCRAFT_REFERENCE_CONDITIO" FOREIGN KEY
	("CONDITIONCODEID")
	REFERENCES "EMOC3"."CONDITIONCODES"
	("CONDCODEID");

ALTER TABLE "EMOC3"."AIRCRAFT" ADD CONSTRAINT "FK_AIRCRAFT_REFERENCE_FLIGHTS" FOREIGN KEY
	("FLIGHTID")
	REFERENCES "EMOC3"."FLIGHTS"
	("FLIGHTID");

ALTER TABLE "EMOC3"."AIRCRAFT" ADD CONSTRAINT "FK_AIRCRAFT_REFERENCE_FUEL" FOREIGN KEY
	("FUELSTATUSID")
	REFERENCES "EMOC3"."FUEL"
	("FUELSTATUSID");

ALTER TABLE "EMOC3"."AIRCRAFT" ADD CONSTRAINT "FK_AIRCRAFT_REF_AIRCRAFTMDS" FOREIGN KEY
	("AIRCRAFTMDSID")
	REFERENCES "EMOC3"."AIRCRAFTMDS"
	("AIRCRAFTMDSID");

ALTER TABLE "EMOC3"."AIRCRAFT" ADD CONSTRAINT "FK_AIRCRAFT_REF_COMBATSCLS" FOREIGN KEY
	("COMBATSCLID")
	REFERENCES "EMOC3"."COMBATSCLS"
	("COMBATSCLID");

ALTER TABLE "EMOC3"."AIRCRAFT" ADD CONSTRAINT "FK_AIRCRAFT_REF_CREWCHIEFS" FOREIGN KEY
	("CREWCHIEFID")
	REFERENCES "EMOC3"."CREWCHIEFS"
	("CREWCHIEFID");

ALTER TABLE "EMOC3"."AIRCRAFT" ADD CONSTRAINT "FK_AIRCRAFT_REF_HaNGERQUEEN" FOREIGN KEY
	("HANGERQUEENSTATUS")
	REFERENCES "EMOC3"."HANGER_QUEEN_CODE"
	("HQCODEID");

ALTER TABLE "EMOC3"."AIRCRAFT" ADD CONSTRAINT "FK_AIRCRAFT_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."AIRCRAFT" ADD CONSTRAINT "FK_AIRCRAFT_REF_POSSESSIONS" FOREIGN KEY
	("POSSESSIONID")
	REFERENCES "EMOC3"."POSSESSIONS"
	("POSSESSIONID");

ALTER TABLE "EMOC3"."AIRCRAFT" ADD CONSTRAINT "FK_AIRCRAFT_REF_REMARKS" FOREIGN KEY
	("REMARKSID")
	REFERENCES "EMOC3"."REMARKS"
	("REMARKSID");

ALTER TABLE "EMOC3"."AIRCRAFT" ADD CONSTRAINT "FK_AIRCRAFT_REF_SQ" FOREIGN KEY
	("SQUADRONID")
	REFERENCES "EMOC3"."SQUADRONS"
	("SQUADRONID");

ALTER TABLE "EMOC3"."AIRCRAFT" ADD CONSTRAINT "FK_AIRCRAFT_REF_STATUSCODE" FOREIGN KEY
	("STATUSCODEID")
	REFERENCES "EMOC3"."STATUSCODE"
	("STATUSCODEID");

ALTER TABLE "EMOC3"."AIRCRAFT" ADD CONSTRAINT "FK_FIRESYMBOLID" FOREIGN KEY
	("FIRESYMBOLID")
	REFERENCES "EMOC3"."FIRESYMBOLS"
	("FIRESYMBOLID");

ALTER TABLE "EMOC3"."AIRCRAFTMDS" ADD CONSTRAINT "FK_MDS_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."AREAS" ADD CONSTRAINT "FK_AREA_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."ARMAMENT" ADD CONSTRAINT "FK_ARMAMENT_REFERENCE_ORDNANCE" FOREIGN KEY
	("ORDNANCEID")
	REFERENCES "EMOC3"."ORDNANCE"
	("ORDNANCEID");

ALTER TABLE "EMOC3"."ARMAMENT" ADD CONSTRAINT "FK_ARMAMENT_REF_AIRCRAFTMDS" FOREIGN KEY
	("AIRCRAFTMDSID")
	REFERENCES "EMOC3"."AIRCRAFTMDS"
	("AIRCRAFTMDSID");

ALTER TABLE "EMOC3"."ARMAMENT" ADD CONSTRAINT "FK_ARMAMNT_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."ASSIGNMENTCODES" ADD CONSTRAINT "FK_ASGNCODE_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."BASEMAPS" ADD CONSTRAINT "FK_BASEMAPS_MOCID" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID")
	ON DELETE CASCADE;

ALTER TABLE "EMOC3"."BRIEF_AIRCRAFT_STATUS" ADD CONSTRAINT "FK_MOCID_BRIEF_AC_STATUS" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."BRIEF_AIRCRAFT_STATUS" ADD CONSTRAINT "FK_SQID_BRIEF_AC_STATUS" FOREIGN KEY
	("SQUADRONID")
	REFERENCES "EMOC3"."SQUADRONS"
	("SQUADRONID");

ALTER TABLE "EMOC3"."BRIEF_DEVIATIONS" ADD CONSTRAINT "FK_MOCID_BRIEF_DEVIATIONS" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."BRIEF_DEVIATIONS" ADD CONSTRAINT "FK_SQID_BRIEF_DEVIATIONS" FOREIGN KEY
	("SQUADRONID")
	REFERENCES "EMOC3"."SQUADRONS"
	("SQUADRONID");

ALTER TABLE "EMOC3"."BRIEF_FLYING_SCHEDULE" ADD CONSTRAINT "FK_MOCID_BRIEF_FLYINGSCH" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."BRIEF_FLYING_SCHEDULE" ADD CONSTRAINT "FK_SQID_BRIEF_FLYINGSCH" FOREIGN KEY
	("SQUADRONID")
	REFERENCES "EMOC3"."SQUADRONS"
	("SQUADRONID");

ALTER TABLE "EMOC3"."BRIEF_FLYING_STATUS" ADD CONSTRAINT "FK_MOCID_BRIEF_FLYING_STATUS" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."BRIEF_FLYING_STATUS" ADD CONSTRAINT "FK_SQID_BRIEF_FLYING_STATUS" FOREIGN KEY
	("SQUADRONID")
	REFERENCES "EMOC3"."SQUADRONS"
	("SQUADRONID");

ALTER TABLE "EMOC3"."BRIEF_HANGAR_QUEEN" ADD CONSTRAINT "FK_MOCID_BRIEF_HANGAR_QUEEN" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."BRIEF_HANGAR_QUEEN" ADD CONSTRAINT "FK_SQID_BRIEF_HANGAR_QUEEN" FOREIGN KEY
	("SQUADRONID")
	REFERENCES "EMOC3"."SQUADRONS"
	("SQUADRONID");

ALTER TABLE "EMOC3"."BRIEF_MICAPS" ADD CONSTRAINT "FK_MOCID_BRIEF_MICAPS" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."BRIEF_MICAPS" ADD CONSTRAINT "FK_SQID_BRIEF_MICAPS" FOREIGN KEY
	("SQUADRONID")
	REFERENCES "EMOC3"."SQUADRONS"
	("SQUADRONID");

ALTER TABLE "EMOC3"."BRIEF_NEXT_WEEKS_PLAN" ADD CONSTRAINT "FK_MOCID_BRIEF_NXT_WEEK_PLAN" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."BRIEF_NEXT_WEEKS_PLAN" ADD CONSTRAINT "FK_SQID_BRIEF_NXT_WEEK_PLAN" FOREIGN KEY
	("SQUADRONID")
	REFERENCES "EMOC3"."SQUADRONS"
	("SQUADRONID");

ALTER TABLE "EMOC3"."BRIEF_POT_HANGAR_QUEEN" ADD CONSTRAINT "FK_MOCID_POT_HANGAR_QUEEN" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."BRIEF_POT_HANGAR_QUEEN" ADD CONSTRAINT "FK_SQID_POT_HANGAR_QUEEN" FOREIGN KEY
	("SQUADRONID")
	REFERENCES "EMOC3"."SQUADRONS"
	("SQUADRONID");

ALTER TABLE "EMOC3"."BRIEF_SCHEDULE_OVERVIEW" ADD CONSTRAINT "FK_MOCID_BRIEF_SCH_OVERVIEW" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."BRIEF_SCHEDULE_OVERVIEW" ADD CONSTRAINT "FK_SQID_BRIEF_SCH_OVERVIEW" FOREIGN KEY
	("SQUADRONID")
	REFERENCES "EMOC3"."SQUADRONS"
	("SQUADRONID");

ALTER TABLE "EMOC3"."BRIEF_WING_STATUS" ADD CONSTRAINT "FK_MOCID_BRIEF_WING_STATUS" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."BRIEF_WING_STATUS" ADD CONSTRAINT "FK_SQID_BRIEF_WING_STATUS" FOREIGN KEY
	("SQUADRONID")
	REFERENCES "EMOC3"."SQUADRONS"
	("SQUADRONID");

ALTER TABLE "EMOC3"."CAUSECODES" ADD CONSTRAINT "FK_CAUSECD_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."CHANGENOTIFICATION" ADD CONSTRAINT "FK_CHANGENOTIFICATION_MOCID" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."CHECKLIST" ADD CONSTRAINT "FK_MOCID" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."COLORRULES" ADD CONSTRAINT "FK_COLORRULES_REF_COLORS" FOREIGN KEY
	("COLORID")
	REFERENCES "EMOC3"."COLORS"
	("COLORID");

ALTER TABLE "EMOC3"."COLORRULES" ADD CONSTRAINT "FK_COLRRULE_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID")
	ON DELETE CASCADE;

ALTER TABLE "EMOC3"."COLORS" ADD CONSTRAINT "FK_COLOR_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."COMBATSCLRULES" ADD CONSTRAINT "FK_COMBATSC_REFERENCE_AIRCRAFT" FOREIGN KEY
	("AIRCRAFTMDSID")
	REFERENCES "EMOC3"."AIRCRAFTMDS"
	("AIRCRAFTMDSID");

ALTER TABLE "EMOC3"."COMBATSCLRULES" ADD CONSTRAINT "FK_COMBATSC_REFERENCE_COMBATSC" FOREIGN KEY
	("COMBATSCLID")
	REFERENCES "EMOC3"."COMBATSCLS"
	("COMBATSCLID");

ALTER TABLE "EMOC3"."COMBATSCLRULES" ADD CONSTRAINT "FK_SCLRULE_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."COMBATSCLS" ADD CONSTRAINT "FK_SCL_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."CONDITIONCODES" ADD CONSTRAINT "FK_CONDCODE_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."CONDITIONSTATUS" ADD CONSTRAINT "FK_CONDSTATUS_REF_COLORS" FOREIGN KEY
	("COLORID")
	REFERENCES "EMOC3"."COLORS"
	("COLORID");

ALTER TABLE "EMOC3"."CONDITIONSTATUS" ADD CONSTRAINT "FK_CONDSTAT_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."CREWCHIEFS" ADD CONSTRAINT "FK_CREWCHIE_REFERENCE_RANKS" FOREIGN KEY
	("RANKID")
	REFERENCES "EMOC3"."RANKS"
	("RANKID");

ALTER TABLE "EMOC3"."CREWCHIEFS" ADD CONSTRAINT "FK_CREWCH_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."CUSTOMDATA" ADD CONSTRAINT "FK_CUSTOMD_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."DEVIATIONCODES" ADD CONSTRAINT "FK_DEVC_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."DEVIATIONCODES" ADD CONSTRAINT "FK_DEVIATIO_REFERENCE_COLORS" FOREIGN KEY
	("COLORID")
	REFERENCES "EMOC3"."COLORS"
	("COLORID");

ALTER TABLE "EMOC3"."EMOCCONFIG" ADD CONSTRAINT "FK_CONFIG_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."EMOCCONFIG" ADD CONSTRAINT "FK_CONFIG_REF_USERS" FOREIGN KEY
	("LASTUPDATEDBY")
	REFERENCES "EMOC3"."USERS"
	("USERID");

ALTER TABLE "EMOC3"."ENGINERUNLOG" ADD CONSTRAINT "FK_ENGINERUNLOG_REF_AIRCRAFT" FOREIGN KEY
	("AIRCRAFTID")
	REFERENCES "EMOC3"."AIRCRAFT"
	("AIRCRAFTID");

ALTER TABLE "EMOC3"."ENGINERUNLOG" ADD CONSTRAINT "FK_RUNLOG_REF_ENGINEDATA" FOREIGN KEY
	("ENGINEDATAID")
	REFERENCES "EMOC3"."AIRCRAFTENGINEDATA"
	("ENGINEDATAID");

ALTER TABLE "EMOC3"."ENGINERUNLOG" ADD CONSTRAINT "FK_RUNLOG_REF_USERS" FOREIGN KEY
	("LASTUPDATEBY")
	REFERENCES "EMOC3"."USERS"
	("USERID");

ALTER TABLE "EMOC3"."EVENTLOG" ADD CONSTRAINT "FK_EVENTLOG_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."EVENTLOG" ADD CONSTRAINT "FK_EVENTLOG_REF_USERS" FOREIGN KEY
	("USERID")
	REFERENCES "EMOC3"."USERS"
	("USERID");

ALTER TABLE "EMOC3"."FIRESYMBOLS" ADD CONSTRAINT "FK_FIRESYM_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."FLIGHTS" ADD CONSTRAINT "FK_FLIGHTS_REFERENCE_SQUADRON" FOREIGN KEY
	("SQUADRONID")
	REFERENCES "EMOC3"."SQUADRONS"
	("SQUADRONID");

ALTER TABLE "EMOC3"."FUEL" ADD CONSTRAINT "FK_FUEL_REFERENCE_COLORS" FOREIGN KEY
	("COLORID")
	REFERENCES "EMOC3"."COLORS"
	("COLORID");

ALTER TABLE "EMOC3"."FUEL" ADD CONSTRAINT "FK_FUEL_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."GENERATIONFLOW" ADD CONSTRAINT "FK_GENFLO_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."HANGER_QUEEN_CODE" ADD CONSTRAINT "FK_HQC_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."HISTORY" ADD CONSTRAINT "FK_HISTORY_REFERENCE_AIRCRAFT" FOREIGN KEY
	("AIRCRAFTID")
	REFERENCES "EMOC3"."AIRCRAFT"
	("AIRCRAFTID");

ALTER TABLE "EMOC3"."HISTORY" ADD CONSTRAINT "FK_HISTORY_REFERENCE_USERS" FOREIGN KEY
	("USERID")
	REFERENCES "EMOC3"."USERS"
	("USERID");

ALTER TABLE "EMOC3"."HOTSPOTS" ADD CONSTRAINT "FK_HOTS_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."IMDSCDBELCUNITOPTION" ADD CONSTRAINT "FK_ELCUNITOPT_REF_IMDSCDBOPT" FOREIGN KEY
	("IMDSCDBINTERFACEOPTIONID")
	REFERENCES "EMOC3"."IMDSCDBINTERFACEOPTION"
	("IMDSCDBINTERFACEOPTIONID");

ALTER TABLE "EMOC3"."IMDSLOGINS" ADD CONSTRAINT "FK_IMDSLOGINS_REF_USERS" FOREIGN KEY
	("USERID")
	REFERENCES "EMOC3"."USERS"
	("USERID");

ALTER TABLE "EMOC3"."INTERFACECONTROL" ADD CONSTRAINT "FK_ICTRL_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."INTERFACEITEMS" ADD CONSTRAINT "FK_IITEM_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."INTERFACEITEMS" ADD CONSTRAINT "FK_INTITEMS_REF_INTCONTROL" FOREIGN KEY
	("INTERFACECONTROLID")
	REFERENCES "EMOC3"."INTERFACECONTROL"
	("INTERFACECONTROLID");

ALTER TABLE "EMOC3"."INTERFACELOG" ADD CONSTRAINT "FK_ILOG_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."INTERFACELOG" ADD CONSTRAINT "FK_INTERFACELOG_REF_AIRCRAFT" FOREIGN KEY
	("AIRCRAFTID")
	REFERENCES "EMOC3"."AIRCRAFT"
	("AIRCRAFTID");

ALTER TABLE "EMOC3"."INTERFACELOG" ADD CONSTRAINT "FK_INTERFACELOG_REF_CTRL" FOREIGN KEY
	("INTERFACECONTROLID")
	REFERENCES "EMOC3"."INTERFACECONTROL"
	("INTERFACECONTROLID");

ALTER TABLE "EMOC3"."INTERFACELOG" ADD CONSTRAINT "FK_INTERFACELOG_REF_USERS" FOREIGN KEY
	("USERID")
	REFERENCES "EMOC3"."USERS"
	("USERID");

ALTER TABLE "EMOC3"."JOAP" ADD CONSTRAINT "FK_JOAP_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."JOAPDATA" ADD CONSTRAINT "FK_JOAPDATA_REFERENCE_JOAP" FOREIGN KEY
	("JOAPID")
	REFERENCES "EMOC3"."JOAP"
	("JOAPID");

ALTER TABLE "EMOC3"."JOAPDATA" ADD CONSTRAINT "FK_JOAPDATA_REF_ENGINEDATA" FOREIGN KEY
	("ENGINEDATAID")
	REFERENCES "EMOC3"."AIRCRAFTENGINEDATA"
	("ENGINEDATAID");

ALTER TABLE "EMOC3"."JOAPDATA" ADD CONSTRAINT "FK_JOAPDATA_REF_SCHED" FOREIGN KEY
	("SCHEDULEID")
	REFERENCES "EMOC3"."SCHEDULE"
	("SCHEDULEID");

ALTER TABLE "EMOC3"."LANDINGCODES" ADD CONSTRAINT "FK_LANDC_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."LINKS" ADD CONSTRAINT "FK_LINK_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."LOCATIONS" ADD CONSTRAINT "FK_LOC_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."MAINTENANCEEVENTS" ADD CONSTRAINT "FK_MAINTEVENTS_REF_AIRCRAFT" FOREIGN KEY
	("AIRCRAFTID")
	REFERENCES "EMOC3"."AIRCRAFT"
	("AIRCRAFTID");

ALTER TABLE "EMOC3"."MAJCOMS" ADD CONSTRAINT "FK_MAJCOM_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."MESSAGES" ADD CONSTRAINT "FK_MSG_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."MISSIONS" ADD CONSTRAINT "FK_MISSION_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."MOCADMINS" ADD CONSTRAINT "FK_MOCADMIN_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."MOCADMINS" ADD CONSTRAINT "FK_MOCADMIN_REF_USERS" FOREIGN KEY
	("USERID")
	REFERENCES "EMOC3"."USERS"
	("USERID");

ALTER TABLE "EMOC3"."MOCSTATUSICONS" ADD CONSTRAINT "FK_MOCSTATUSICONS_REF_SI" FOREIGN KEY
	("STATUSIMAGEID")
	REFERENCES "EMOC3"."STATUSIMAGE"
	("STATUSIMAGEID");

ALTER TABLE "EMOC3"."MOCUSERS" ADD CONSTRAINT "FK_MOCUSER_REF_USERS" FOREIGN KEY
	("USERID")
	REFERENCES "EMOC3"."USERS"
	("USERID");

ALTER TABLE "EMOC3"."MOCUSERS" ADD CONSTRAINT "SYS_C0014200" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."OLDPASSWORDS" ADD CONSTRAINT "FK_OLDPASSW_REFERENCE_USERS" FOREIGN KEY
	("USERID")
	REFERENCES "EMOC3"."USERS"
	("USERID");

ALTER TABLE "EMOC3"."ORDNANCE" ADD CONSTRAINT "FK_ORDNANCE_REF_WEAPONSTYPE" FOREIGN KEY
	("WEAPONSTYPEID")
	REFERENCES "EMOC3"."WEAPONTYPES"
	("WEAPONSTYPEID");

ALTER TABLE "EMOC3"."ORDNANCE" ADD CONSTRAINT "FK_ORD_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."ORGANIZATIONS" ADD CONSTRAINT "FK_ORG_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."PERMISSIONS" ADD CONSTRAINT "FK_PERMISSI_REFERENCE_SQUADRON" FOREIGN KEY
	("SQUADRONID")
	REFERENCES "EMOC3"."SQUADRONS"
	("SQUADRONID");

ALTER TABLE "EMOC3"."PERMISSIONS" ADD CONSTRAINT "FK_PERMISSI_REFERENCE_USERS" FOREIGN KEY
	("USERID")
	REFERENCES "EMOC3"."USERS"
	("USERID");

ALTER TABLE "EMOC3"."PILOT" ADD CONSTRAINT "FK_PILOT_REFERENCE_RANKS" FOREIGN KEY
	("RANKID")
	REFERENCES "EMOC3"."RANKS"
	("RANKID");

ALTER TABLE "EMOC3"."PILOT" ADD CONSTRAINT "FK_PILOT_REFERENCE_SQUADRON" FOREIGN KEY
	("SQUADRONID")
	REFERENCES "EMOC3"."SQUADRONS"
	("SQUADRONID");

ALTER TABLE "EMOC3"."PILOT" ADD CONSTRAINT "FK_PILOT_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."POSSESSIONS" ADD CONSTRAINT "FK_POSS_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."RANGES" ADD CONSTRAINT "FK_RANGE_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."RANKS" ADD CONSTRAINT "FK_RANKS_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."REPORTCOLUMNS" ADD CONSTRAINT "FK_REPCOL_REF_REPORTS" FOREIGN KEY
	("REPORTID")
	REFERENCES "EMOC3"."REPORTS"
	("REPORTID");

ALTER TABLE "EMOC3"."REPORTCRITERIA" ADD CONSTRAINT "REPORTID_FK" FOREIGN KEY
	("REPORTID")
	REFERENCES "EMOC3"."REPORTS"
	("REPORTID");

ALTER TABLE "EMOC3"."REPORTPARAMETERS" ADD CONSTRAINT "FK_REPPARAM_REF_REPORTS" FOREIGN KEY
	("REPORTID")
	REFERENCES "EMOC3"."REPORTS"
	("REPORTID");

ALTER TABLE "EMOC3"."REPORTS" ADD CONSTRAINT "FK_RPT_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."REPORTS" ADD CONSTRAINT "USERID_FK" FOREIGN KEY
	("USERID")
	REFERENCES "EMOC3"."USERS"
	("USERID");

ALTER TABLE "EMOC3"."SCHEDULE" ADD CONSTRAINT "FK_SCHEDULE_REF_AREAS" FOREIGN KEY
	("AREAID")
	REFERENCES "EMOC3"."AREAS"
	("AREAID");

ALTER TABLE "EMOC3"."SCHEDULE" ADD CONSTRAINT "FK_SCHEDULE_REF_CAUSECODE" FOREIGN KEY
	("CAUSECODEID")
	REFERENCES "EMOC3"."CAUSECODES"
	("CAUSECODEID");

ALTER TABLE "EMOC3"."SCHEDULE" ADD CONSTRAINT "FK_SCHEDULE_REF_DEVIATION" FOREIGN KEY
	("DEVIATIONCODEID")
	REFERENCES "EMOC3"."DEVIATIONCODES"
	("DEVIATIONCODEID");

ALTER TABLE "EMOC3"."SCHEDULE" ADD CONSTRAINT "FK_SCHEDULE_REF_LANDINGCODES" FOREIGN KEY
	("LANDINGCODEID")
	REFERENCES "EMOC3"."LANDINGCODES"
	("LANDINGCODEID");

ALTER TABLE "EMOC3"."SCHEDULE" ADD CONSTRAINT "FK_SCHEDULE_REF_MISSIONS" FOREIGN KEY
	("MISSIONID")
	REFERENCES "EMOC3"."MISSIONS"
	("MISSIONID");

ALTER TABLE "EMOC3"."SCHEDULE" ADD CONSTRAINT "FK_SCHEDULE_REF_PILOT" FOREIGN KEY
	("PILOTID")
	REFERENCES "EMOC3"."PILOT"
	("PILOTID");

ALTER TABLE "EMOC3"."SCHEDULE" ADD CONSTRAINT "FK_SCHEDULE_REF_RANGES" FOREIGN KEY
	("RANGEID")
	REFERENCES "EMOC3"."RANGES"
	("RANGEID");

ALTER TABLE "EMOC3"."SCHEDULE" ADD CONSTRAINT "FK_SCHEDULE_REF_SQUADRONS" FOREIGN KEY
	("SQUADRONID")
	REFERENCES "EMOC3"."SQUADRONS"
	("SQUADRONID");

ALTER TABLE "EMOC3"."SCHEDULE" ADD CONSTRAINT "FK_SCHED_REF_MAINTREMARKS" FOREIGN KEY
	("MAINTREMARKS")
	REFERENCES "EMOC3"."REMARKS"
	("REMARKSID");

ALTER TABLE "EMOC3"."SCHEDULE" ADD CONSTRAINT "FK_SCHED_REF_SCHEDREMARKS" FOREIGN KEY
	("SCHEDULEREMARKS")
	REFERENCES "EMOC3"."REMARKS"
	("REMARKSID");

ALTER TABLE "EMOC3"."SCHEDULEDEVIATIONS" ADD CONSTRAINT "FK_AIRCRAFT_REF_DEVREMARKS" FOREIGN KEY
	("DEVIATIONSREMARKS")
	REFERENCES "EMOC3"."REMARKS"
	("REMARKSID");

ALTER TABLE "EMOC3"."SCHEDULEDEVIATIONS" ADD CONSTRAINT "FK_SCHEDDEV_REF_INTERFACELOG" FOREIGN KEY
	("INTERFACELOGID")
	REFERENCES "EMOC3"."INTERFACELOG"
	("INTERFACELOGID");

ALTER TABLE "EMOC3"."SCHEDULESTATUS" ADD CONSTRAINT "FK_SCHEDULESTAT_REF_FUELSTATUS" FOREIGN KEY
	("FUELSTATUSID")
	REFERENCES "EMOC3"."FUEL"
	("FUELSTATUSID");

ALTER TABLE "EMOC3"."SCHEDULESTATUS" ADD CONSTRAINT "FK_SCHEDULESTAT_REF_STATUSCODE" FOREIGN KEY
	("STATUSCODEID")
	REFERENCES "EMOC3"."STATUSCODE"
	("STATUSCODEID");

ALTER TABLE "EMOC3"."SEMEDX" ADD CONSTRAINT "FK_EDX_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."SEMEDXDATA" ADD CONSTRAINT "FK_SEMEDXDATA_REF_SCHED" FOREIGN KEY
	("SCHEDULEID")
	REFERENCES "EMOC3"."SCHEDULE"
	("SCHEDULEID");

ALTER TABLE "EMOC3"."SEMEDXDATA" ADD CONSTRAINT "FK_SEMEDXDA_REFERENCE_AIRCRAFT" FOREIGN KEY
	("ENGINEDATAID")
	REFERENCES "EMOC3"."AIRCRAFTENGINEDATA"
	("ENGINEDATAID");

ALTER TABLE "EMOC3"."SEMEDXDATA" ADD CONSTRAINT "FK_SEMEDXDA_REFERENCE_SEMEDX" FOREIGN KEY
	("SEMEDXID")
	REFERENCES "EMOC3"."SEMEDX"
	("SEMEDXID");

ALTER TABLE "EMOC3"."SHOPDISPATCH" ADD CONSTRAINT "FK_SHOPDISP_REFERENCE_AIRCRAFT" FOREIGN KEY
	("AIRCRAFTID")
	REFERENCES "EMOC3"."AIRCRAFT"
	("AIRCRAFTID");

ALTER TABLE "EMOC3"."SQUADRONS" ADD CONSTRAINT "FK_SQUADRON_REFERENCE_COLORS" FOREIGN KEY
	("COLORID")
	REFERENCES "EMOC3"."COLORS"
	("COLORID");

ALTER TABLE "EMOC3"."SQUADRONS" ADD CONSTRAINT "FK_SQ_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."SQUADRON_SORT_ORDER" ADD CONSTRAINT "FK_SQSORTORDER_REF_SQUADRONS" FOREIGN KEY
	("SQUADRONID")
	REFERENCES "EMOC3"."SQUADRONS"
	("SQUADRONID");

ALTER TABLE "EMOC3"."SQUADRON_SORT_ORDER" ADD CONSTRAINT "FK_SQSORTORDER_REF_USERS" FOREIGN KEY
	("USERID")
	REFERENCES "EMOC3"."USERS"
	("USERID");

ALTER TABLE "EMOC3"."STATIONLOCCODES" ADD CONSTRAINT "FK_SLC_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."STATUSCODE" ADD CONSTRAINT "FK_STATUS_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."STATUSTRANSITIONRULE" ADD CONSTRAINT "FK_STATUSTR_REFERENCE_STATUSCO" FOREIGN KEY
	("STATUSCODEID")
	REFERENCES "EMOC3"."STATUSCODE"
	("STATUSCODEID");

ALTER TABLE "EMOC3"."STATUSTRANSITIONRULE" ADD CONSTRAINT "FK_TRANSITION2_REFERENCE_STATU" FOREIGN KEY
	("TRANSITION2ID")
	REFERENCES "EMOC3"."STATUSCODE"
	("STATUSCODEID");

ALTER TABLE "EMOC3"."STATUSTRANSITIONRULE" ADD CONSTRAINT "STR_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."SYMBOLS" ADD CONSTRAINT "FK_SYMBOLS_REFERENCE_CONDITIO" FOREIGN KEY
	("CONDCODEID")
	REFERENCES "EMOC3"."CONDITIONCODES"
	("CONDCODEID");

ALTER TABLE "EMOC3"."SYMBOLS" ADD CONSTRAINT "FK_SYMBOL_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."TBMCSINTERFACELOG" ADD CONSTRAINT "FK_TILOG_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."USERIMAGES" ADD CONSTRAINT "FK_USERID" FOREIGN KEY
	("USERID")
	REFERENCES "EMOC3"."USERS"
	("USERID");

ALTER TABLE "EMOC3"."UTILIZATIONCODES" ADD CONSTRAINT "FK_UTC_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."WEAPONSCLASS" ADD CONSTRAINT "FK_WEAPC_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."WEAPONSINFO" ADD CONSTRAINT "FK_WEAPI_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."WEAPONSINFO" ADD CONSTRAINT "FK_WEAPONSINFO_REF_SCLS" FOREIGN KEY
	("COMBATSCLID")
	REFERENCES "EMOC3"."COMBATSCLS"
	("COMBATSCLID");

ALTER TABLE "EMOC3"."WEAPONSLOAD" ADD CONSTRAINT "FK_WEAPONSLOAD_REF_ORDNANCE" FOREIGN KEY
	("ORDNANCEID")
	REFERENCES "EMOC3"."ORDNANCE"
	("ORDNANCEID");

ALTER TABLE "EMOC3"."WEAPONSLOAD" ADD CONSTRAINT "FK_WEAPONS_REF_AIRCRAFT" FOREIGN KEY
	("AIRCRAFTID")
	REFERENCES "EMOC3"."AIRCRAFT"
	("AIRCRAFTID");

ALTER TABLE "EMOC3"."WEAPONSLOAD" ADD CONSTRAINT "FK_WEPLOAD_REF_FIRESYMB" FOREIGN KEY
	("FIRESYMBOLID")
	REFERENCES "EMOC3"."FIRESYMBOLS"
	("FIRESYMBOLID");

ALTER TABLE "EMOC3"."WEAPONTYPES" ADD CONSTRAINT "FK_WEAPT_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."WHENDISCOVEREDCODES" ADD CONSTRAINT "FK_WDC_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."WINGS" ADD CONSTRAINT "FK_WING_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."WORKCENTERS" ADD CONSTRAINT "FK_WRKC_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

ALTER TABLE "EMOC3"."WRITEUPS" ADD CONSTRAINT "FK_WRITEUPS_REFERENCE_AIRCRAFT" FOREIGN KEY
	("AIRCRAFTID")
	REFERENCES "EMOC3"."AIRCRAFT"
	("AIRCRAFTID");

ALTER TABLE "EMOC3"."WRITEUPS" ADD CONSTRAINT "FK_WRITEUPS_REFERENCE_SYMBOLS" FOREIGN KEY
	("SYMBOLID")
	REFERENCES "EMOC3"."SYMBOLS"
	("SYMBOLID");

ALTER TABLE "EMOC3"."WX" ADD CONSTRAINT "FK_WX_REF_MOC" FOREIGN KEY
	("MOCID")
	REFERENCES "EMOC3"."MOC"
	("MOCID");

CREATE OR REPLACE VIEW "EMOC3"."WRITEUPS_AND_MICAPS_VIEW" ("WING", "UNITID", "ELC", "SQUADRONNAME", "MOCID", "AIRCRAFTYEAR", "TAILNUMBER", "MISEQUIPID", "SERIALNUMBER", "AIRCRAFTMDS", "OTHERMDS", "CONDCODE", "STATUSCODE", "STATUSSTARTDATE", "STATUSWUCLCN", "AIRCRAFTWUC", "AIRCRAFTETIC", "WRITEUPTIME", "WRITEUPJCN", "CORRECTED", "CORRECTEDTIME", "PACER", "WRITEUPETIC", "SYMBOL", "WRITEUPWUC", "DISCREPANCY", "CORRECTIVEACTION", "WRITEUPCAMSINIT", "DOCUMENTNUMBER", "PART", "ETA", "MICAPCAMSINIT", "AIRCRAFTREMARKS") AS
SELECT DISTINCT WINGS.wingname "WING",
    WINGS.UNITID "UNITID",
    WINGS.ELC "ELC",
       SQUADRONS.squadronname,
AIRCRAFT.MOCID,
    AIRCRAFT.aircraftyear "AIRCRAFTYEAR",
       AIRCRAFT.shorttailnumber "TAILNUMBER",
    AIRCRAFT.misequipid "MISEQUIPID",
       AIRCRAFT.serialnumber "SERIALNUMBER",
       AIRCRAFTMDS.AIRCRAFTMDS "AIRCRAFTMDS",
    AIRCRAFT.RELATEDMDS "OTHERMDS",
       CONDITIONCODES.conditioncode "CONDCODE",
    STATUSCODE.STATUSCODE,
     AIRCRAFT.STATUSSTARTDATE || ' ' || AIRCRAFT.STATUSSTARTTIME "STATUSSTARTDATE",
    AIRCRAFT.STATUSWUCLCN ,
    WUC.WUCCODE "AIRCRAFTWUC",
    AIRCRAFT.etic "AIRCRAFTETIC",
       WRITEUPS.writeuptime,
    WRITEUPS.jcn "WRITEUPJCN",
    DECODE(TO_CHAR(WRITEUPS.corrected), '1', 'Y', 'N') CORRECTED,
       WRITEUPS.correctedtime,
    DECODE(TO_CHAR(WRITEUPS.pacer), '1', 'Y', 'N') PACER,
    WRITEUPS.etic "WRITEUPETIC",
    SYMBOLS.symbol,
    wuc2.WUCCODE "WRITEUPWUC",
       WRITEUPS.discrepancy,
    WRITEUPS.correctiveaction,
    WRITEUPS.camsinit "WRITEUPCAMSINIT" ,
    MICAP.documentnumber,
    MICAP.nomenclature AS part,
    MICAP.estimateddeliverydate AS eta,
    MICAP.camsinit "MICAPCAMSINIT",
    REMARKS.REMARKS "AIRCRAFTREMARKS"
 FROM
        AIRCRAFT,
          SQUADRONS,
      WINGS,
          CONDITIONCODES,
    CONDITIONSTATUS,
          AIRCRAFTMDS,
    WUC,
    WUC WUC2,
    SYMBOLS,
    STATUSCODE,
    WRITEUPS,
    MICAP,
    REMARKS
 WHERE (
         (AIRCRAFT.aircraftid = WRITEUPS.aircraftid)
        AND (WRITEUPS.jcn = MICAP.jobcontrolnumber(+))
        AND SYMBOLS.symbolid = WRITEUPS.SYMBOLID
  AND (AIRCRAFT.squadronid = SQUADRONS.squadronid)
        AND (WINGS.wingid = SQUADRONS.wingid)
        AND (AIRCRAFT.conditioncodeid = CONDITIONCODES.condcodeid(+))
  AND (AIRCRAFTMDS.aircraftmdsid = AIRCRAFT.aircraftmdsid(+))
        AND (AIRCRAFT.AIRCRAFTWUCID = WUC.WUCID(+))
        AND (WRITEUPS.WUCID = WUC2.WUCID(+))
        AND (AIRCRAFT.STATUSCODEID = STATUSCODE.STATUSCODEID(+))
  AND (AIRCRAFT.remarksid = REMARKS.REMARKSID(+))
          )
 
 
 
 
 
 
 
 ;

CREATE OR REPLACE VIEW "EMOC3"."WEAPONS_VIEW" ("WING", "UNITID", "ELC", "SQUADRONNAME", "MOCID", "AIRCRAFTYEAR", "TAILNUMBER", "AIRCRAFTMDS", "COMBATSCL", "WEAPONSNUMBER", "WEAPONTYPE", "ORDNANCE", "CONFIGURATION", "HOTGUNS", "ARM_DEARM") AS
SELECT WINGS.wingname WING,
    WINGS.unitid UNITID,
    WINGS.elc,
    squ.squadronname,
AIRCRAFT.MOCID,
    AIRCRAFT.aircraftyear AIRCRAFTYEAR,
       AIRCRAFT.shorttailnumber TAILNUMBER,
    "MDS".AIRCRAFTMDS AIRCRAFTMDS,
    COMBATSCLS.combatscl,
       TO_CHAR(WEAPONSLOAD.weaponsnumber) weaponsnumber,
    WEAPONTYPES.weapontype,
    ORDNANCE.ORDNANCE,
       ORDNANCE.configuration,
    DECODE(TO_CHAR(AIRCRAFT.hotguns), '1', 'Y', 'N') hotguns,
    DECODE(TO_CHAR(AIRCRAFT.arm_dearm), '1', 'Y', 'N') arm_dearm
  FROM EMOC3.AIRCRAFT,
       EMOC3.COMBATSCLS,
       EMOC3.ORDNANCE,
       EMOC3.WEAPONSINFO,
       EMOC3.WEAPONSLOAD,
       EMOC3.WEAPONTYPES,
       EMOC3.SQUADRONS squ,
       EMOC3.WINGS WINGS,
       EMOC3.AIRCRAFTMDS "MDS"
 WHERE (    (COMBATSCLS.combatsclid(+) = AIRCRAFT.combatsclid)
        AND (COMBATSCLS.combatsclid = WEAPONSINFO.combatsclid(+))
        AND (AIRCRAFT.aircraftid = WEAPONSLOAD.aircraftid(+))
        AND (ORDNANCE.ordnanceid(+) = WEAPONSLOAD.ordnanceid)
        AND (WEAPONTYPES.weaponstypeid = ORDNANCE.weaponstypeid)
        AND (squ.squadronid = AIRCRAFT.squadronid)
        AND (WINGS.wingid = squ.wingid)
        AND ("MDS".aircraftmdsid = AIRCRAFT.aircraftmdsid)
       ) ORDER BY TAILNUMBER
 
 
 
 
 
 
 
 ;

CREATE OR REPLACE VIEW "EMOC3"."STATUSTRANSITIONRULESVIEW" ("STATUSCODEID", "TRANSITION2ID", "MOCID") AS
SELECT   str.statuscodeid, str.transition2id, str.mocid
FROM statustransitionrule str, statuscode sc
WHERE str.statuscodeid = sc.statuscodeid
AND sc.allowsortieupdate = 1
ORDER BY sc.ordernumber
 
 
 
 
 
 
 
 ;

CREATE OR REPLACE VIEW "EMOC3"."SQUADRONVIEW" ("SQUADRONID", "SQUADRONNAME", "COLORVALUE", "WINGID", "COLORNAME", "SHORTNAME", "FONTCOLOR", "MOCID") AS
SELECT   squadronid, squadronname, colorvalue, wingid,
   colorname, shortname, fontcolor, squadrons.mocid
FROM squadrons LEFT JOIN colors ON squadrons.colorid = colors.colorid
ORDER BY squadronname
 
 
 
 
 
 
 
 ;

CREATE OR REPLACE VIEW "EMOC3"."SQUADRONSORTORDERVIEW" ("USERID", "SQUADRONID", "SORTORDER", "SQUADRONNAME", "SHORTNAME", "COLORVALUE", "WINGID", "COLORNAME", "FONTCOLOR", "MOCID") AS
SELECT   userid, squadrons.squadronid, sortorder, squadronname,
         shortname, colorvalue, wingid, colorname, fontcolor, squadrons.mocid
FROM emoc3.squadron_sort_order JOIN emoc3.squadrons ON squadron_sort_order.squadronid = squadrons.squadronid
LEFT JOIN emoc3.colors ON squadrons.colorid = colors.colorid
ORDER BY wingid, sortorder;

CREATE OR REPLACE VIEW "EMOC3"."SQUADRONMICAPCOUNT" ("SQUADRONID", "SQUADRONNAME", "MISEQUIPID", "AIRCRAFTID", "WINGID", "UNITID", "ELC", "MOCID", "MICAPCOUNT") AS
SELECT squadrons.squadronid, squadrons.squadronname, aircraft.misequipid,
       aircraft.aircraftid, wings.wingid, wings.unitid, wings.elc,
       wings.mocid, (Select count(*) from micap 
            where ( (aircraft.aircraftid = micap.aircraftid) 
                or (micap.enterpriselocationcode = wings.elc 
                    and micap.UNITID = wings.unitid 
                    and micap.EQUIPMENTID = aircraft.misequipid))) as micapcount
  FROM squadrons, aircraft, wings
 WHERE (    (squadrons.squadronid = aircraft.squadronid)
        AND (wings.wingid = squadrons.wingid))
 
 
 
 
 
 
 
 ;

CREATE OR REPLACE VIEW "EMOC3"."SEMEDX_VIEW" ("WING", "UNITID", "ELC", "SQUADRONNAME", "MOCID", "AIRCRAFTYEAR", "TAILNUMBER", "MISEQUIPID", "SERIALNUMBER", "AIRCRAFTMDS", "ENGINENUMBER", "SORTIEDATE", "SORTIENUM", "CODE", "COLORVALUE", "COLORNAME", "COLORRANK", "SAMPLEDATE", "REASON", "NOTIFIEDBY", "MOCCONTROLLER", "SEMEDXLASTUPDATED", "HOURSREQUIRED", "HOURSREMAINING", "EXPEDITED") AS
SELECT
    WINGS.wingname "WING",
    WINGS.UNITID "UNITID",
    WINGS.ELC "ELC",
       SQUADRONS.squadronname,
AIRCRAFT.MOCID,
    AIRCRAFT.aircraftyear "AIRCRAFTYEAR",
       AIRCRAFT.shorttailnumber "TAILNUMBER",
    AIRCRAFT.misequipid "MISEQUIPID",
       AIRCRAFT.serialnumber "SERIALNUMBER",
       AIRCRAFTMDS.AIRCRAFTMDS "AIRCRAFTMDS",
    TO_CHAR(AIRCRAFTENGINEDATA.enginenumber) "ENGINENUMBER",
    SCHEDULE.SORTIEDATE,
    TO_CHAR(SCHEDULE.SORTIENUM) "SORTIENUM",
    SEMEDX.SEMEDX "CODE",
    COLORS.colorvalue "COLORVALUE",
    COLORS.COLORNAME "COLORNAME",
    TO_CHAR(COLORRULES.colorrank) "COLORRANK",
    TO_CHAR(SEMEDXDATA.SAMPLEDATE, 'MM/DD/YYYY HH24:MI:SS') "SAMPLEDATE",
    SEMEDXDATA.REASON "REASON",
    SEMEDXDATA.NOTIFIEDBY "NOTIFIEDBY",
    SEMEDXDATA.MOCCONTROLLER "MOCCONTROLLER",
    TO_CHAR(SEMEDXDATA.SEMEDXLASTUPDATED, 'MM/DD/YYYY HH24:MI:SS') "SEMEDXLASTUPDATED",
    SEMEDXDATA.HOURSREQUIRED "HOURSREQUIRED",
    SEMEDXDATA.HOURSREMAINING "HOURSREMAINING",
    DECODE(TO_CHAR(SEMEDXDATA.EXPEDITERNOTIFIED), '1', 'Y', 'N') "EXPEDITED"
FROM EMOC3.AIRCRAFT, EMOC3.SEMEDX, EMOC3.WINGS, EMOC3.SQUADRONS, EMOC3.AIRCRAFTMDS, EMOC3.COLORS, EMOC3.COLORRULES, EMOC3.AIRCRAFTENGINEDATA, EMOC3.SEMEDXDATA, EMOC3.SCHEDULE
WHERE (    (AIRCRAFT.aircraftid = AIRCRAFTENGINEDATA.aircraftid)
        AND (AIRCRAFT.squadronid = SQUADRONS.SQUADRONID)
        AND (SQUADRONS.wingid = WINGS.wingid)
        AND (AIRCRAFT.aircraftmdsid = AIRCRAFTMDS.aircraftmdsid)
        AND (AIRCRAFTENGINEDATA.enginedataid = SEMEDXDATA.enginedataid)
        AND (SEMEDX.semedxid = SEMEDXDATA.semedxid)
        AND (SEMEDX.colorrulesid = COLORRULES.colorrulesid)
  AND (COLORRULES.CODETYPE = 'SEMEDX')
        AND (COLORRULES.colorid = COLORS.colorid)
  AND (SEMEDXDATA.scheduleid = SCHEDULE.scheduleid)
       )
 
 
 
 
 
 
 
 ;

CREATE OR REPLACE VIEW "EMOC3"."SCHEDULE_STATUS_VIEW" ("WING", "UNITID", "SQUADRONNAME", "SORTIEDATE", "SORTIE", "MOD", "GO", "BLOCKNUMBER", "AIRCRAFTYEAR", "TAILNUMBER", "AIRCRAFTMDS") AS
SELECT
--need to add records from schedulestatus table
			WG.WINGNAME "WING",
			WG.UNITID "UNITID",
			SQ.SQUADRONNAME,
			SC.SORTIEDATE "SORTIEDATE",
			TO_CHAR(SC.SORTIENUM) "SORTIE",
			TO_CHAR(SC.SORTIEMOD) "MOD",
	 		TO_CHAR(SC.GO) "GO",
			TO_CHAR(SC.BLOCKNUMBER) "BLOCKNUMBER",
			AC.AIRCRAFTYEAR "AIRCRAFTYEAR",
			AC.SHORTTAILNUMBER "TAILNUMBER",
			MDS.AIRCRAFTMDS "AIRCRAFTMDS"
		FROM EMOC3.SCHEDULE SC
			LEFT JOIN EMOC3.AIRCRAFT AC ON SC.AIRCRAFTID = AC.AIRCRAFTID
			LEFT JOIN EMOC3.SQUADRONS SQ ON SC.SQUADRONID = SQ.SQUADRONID
			LEFT JOIN EMOC3.SCHEDULEDEVIATIONS DEV ON SC.SCHEDULEID = DEV.SCHEDULEID
			LEFT JOIN EMOC3.AIRCRAFTMDS MDS ON AC.AIRCRAFTMDSID = MDS.AIRCRAFTMDSID
			LEFT JOIN EMOC3.STATUSCODE ST ON AC.STATUSCODEID = ST.STATUSCODEID
			LEFT JOIN EMOC3.REMARKS REM1 ON REM1.REMARKSID = MAINTREMARKS
			LEFT JOIN EMOC3.REMARKS REM2 ON REM2.REMARKSID = SCHEDULEREMARKS
			JOIN EMOC3.WINGS WG ON SQ.WINGID = WG.WINGID

 
 
 
 
 
 
 
 ;

CREATE OR REPLACE VIEW "EMOC3"."PILOTVIEW" ("SQUADRONID", "SQUADRONNAME", "COLORVALUE", "WINGID", "COLORNAME", "SHORTNAME", "FONTCOLOR", "MOCID") AS
SELECT   squadronid, squadronname, colorvalue, wingid,
   colorname, shortname, fontcolor, squadrons.mocid
FROM squadrons LEFT JOIN colors ON squadrons.colorid = colors.colorid
ORDER BY squadronname
 
 
 
 
 
 
 
 ;

CREATE OR REPLACE VIEW "EMOC3"."JOAP_VIEW" ("WING", "UNITID", "ELC", "SQUADRONNAME", "MOCID", "AIRCRAFTYEAR", "TAILNUMBER", "MISEQUIPID", "SERIALNUMBER", "AIRCRAFTMDS", "ENGINENUMBER", "SORTIEDATE", "SORTIENUM", "JOAPCODE", "REDCAPSTATUS", "COLORVALUE", "COLORNAME", "COLORRANK", "SAMPLEDATE", "REASON", "NOTIFIEDBY", "MOCCONTROLLER", "JOAPLASTUPDATED", "HOURSREQUIRED", "HOURSREMAINING", "EXPEDITED") AS
SELECT
      WINGS.wingname "WING",
    WINGS.UNITID "UNITID",
    WINGS.ELC "ELC",
       SQUADRONS.squadronname,
AIRCRAFT.MOCID,
    AIRCRAFT.aircraftyear "AIRCRAFTYEAR",
       AIRCRAFT.shorttailnumber "TAILNUMBER",
    AIRCRAFT.misequipid "MISEQUIPID",
       AIRCRAFT.serialnumber "SERIALNUMBER",
       AIRCRAFTMDS.AIRCRAFTMDS "AIRCRAFTMDS",
    TO_CHAR(AIRCRAFTENGINEDATA.enginenumber) "ENGINENUMBER",
    SCHEDULE.SORTIEDATE,
    TO_CHAR(SCHEDULE.SORTIENUM) "SORTIENUM",
    JOAP.joapcode "JOAPCODE",
    DECODE(TO_CHAR(JOAP.REDCAPSTATUS), '1', 'Y', 'N') "REDCAPSTATUS",
    COLORS.colorvalue "COLORVALUE",
    COLORS.COLORNAME "COLORNAME",
    TO_CHAR(COLORRULES.colorrank) "COLORRANK",
    TO_CHAR(JOAPDATA.SAMPLEDATE, 'MM/DD/YYYY HH24:MI:SS') "SAMPLEDATE",
    JOAPDATA.REASON "REASON",
    JOAPDATA.NOTIFIEDBY "NOTIFIEDBY",
    JOAPDATA.MOCCONTROLLER "MOCCONTROLLER",
    TO_CHAR(JOAPDATA.JOAPLASTUPDATED, 'MM/DD/YYYY HH24:MI:SS') "JOAPLASTUPDATED",
    JOAPDATA.HOURSREQUIRED "HOURSREQUIRED",
    JOAPDATA.HOURSREMAINING "HOURSREMAINING",
    DECODE(TO_CHAR(JOAPDATA.EXPEDITERNOTIFIED), '1', 'Y', 'N') "EXPEDITED"
FROM EMOC3.AIRCRAFT, EMOC3.AIRCRAFTMDS, EMOC3.WINGS, EMOC3.SQUADRONS, EMOC3.JOAP, EMOC3.COLORS, EMOC3.COLORRULES, EMOC3.AIRCRAFTENGINEDATA, EMOC3.JOAPDATA, EMOC3.SCHEDULE
WHERE (    (AIRCRAFT.aircraftid = AIRCRAFTENGINEDATA.aircraftid)
        AND (AIRCRAFT.squadronid = SQUADRONS.SQUADRONID)
        AND (SQUADRONS.wingid = WINGS.wingid)
        AND (AIRCRAFT.aircraftmdsid = AIRCRAFTMDS.aircraftmdsid)
        AND (AIRCRAFTENGINEDATA.enginedataid = JOAPDATA.enginedataid)
        AND (JOAP.joapid = JOAPDATA.joapid)
        AND (JOAP.colorrulesid = COLORRULES.colorrulesid)
  AND (COLORRULES.CODETYPE = 'JOAP')
        AND (COLORRULES.colorid = COLORS.colorid)
  AND (JOAPDATA.scheduleid(+) = SCHEDULE.scheduleid)
       )
ORDER BY AIRCRAFTENGINEDATA.enginenumber, JOAPDATA.SAMPLEDATE
 
 
 
 
 
 
 
 ;

CREATE OR REPLACE VIEW "EMOC3"."FLYBOARD_VIEW" ("WING", "UNITID", "MOCID", "SQUADRONNAME", "SORTIEDATE", "SORTIE", "SORTIEMOD", "GO", "BLOCKNUMBER", "AIRCRAFTYEAR", "TAILNUMBER", "AIRCRAFTMDS", "FLYABLE", "SPARE", "SCH_TO", "SCH_LND", "ACT_TO", "ACT_LND", "DURATIONHRS", "ADJ_TO", "ADJ_LND", "AREAARRIVE", "AREALEAVE", "CALLSIGN", "CONFIGCODE", "LANDING", "RANGE", "LINEDEV", "LINEDEVCAUSE", "WEATHER", "MISSION", "AREA", "PILOT", "LOCATIONCODE", "COLORVALUE", "ICONNAME", "STATUSCODE", "ROWCOLOR", "FUELSTATUS", "SCHEDDAY", "MAINTREMARKS", "REMARKS", "PUBLISHED", "LASTFLOWNTIME", "FUELLOAD", "TYPEEVENT", "SCHEDULESOURCE", "CHAFF", "FLARE", "TMEFLWNSINCEPHASE", "PHASEUNITS", "DEVIATION", "DEVCAUSE", "NEWDEVCAUSE", "DEVMOD", "DEVACTION", "CHARGEABLE", "DEVSTART", "DEVSTOP", "MAINTEVENT", "DEVRMKS") AS
SELECT
   WG.WINGNAME "WING",
   WG.UNITID "UNITID",
   MC.MOCID "MOCID",
   SQ.SQUADRONNAME,
   SC.SORTIEDATE "SORTIEDATE",
   SC.SORTIENUM "SORTIE",
   SC.SORTIEMOD "SORTIEMOD",
    SC.GO "GO",
   SC.BLOCKNUMBER "BLOCKNUMBER",
   AC.AIRCRAFTYEAR "AIRCRAFTYEAR",
   AC.SHORTTAILNUMBER "TAILNUMBER",
   MDS.AIRCRAFTMDS "AIRCRAFTMDS",
   DECODE(TO_CHAR(CS.FLYABLE), '1', 'Y', 'N') "FLYABLE",
   DECODE(TO_CHAR(SC.SPARE), '1', 'Y', 'N') "SPARE",
   SC.SCHEDULEDTAKEOFF "SCH_TO",
   SC.SCHEDULEDLANDING "SCH_LND",
   SC.ACTUALTAKEOFF "ACT_TO",
   SC.ACTUALLANDING "ACT_LND",
   TO_CHAR(((SC.ACTUALLANDING - SC.ACTUALTAKEOFF) * 24), '99999.99') "DURATIONHRS",
   SC.ADJTAKEOFF "ADJ_TO",
   SC.ADJLANDING "ADJ_LND",
   SC.AREAARRIVETIME "AREAARRIVE",
   SC.AREALEAVETIME "AREALEAVE",
   SC.CALLSIGN "CALLSIGN",
   SC.CONFIGCODE "CONFIGCODE",
   LC.LANDINGCODE "LANDING",
   RG.RANGE "RANGE",
   DC.DEVIATIONCODE "LINEDEV",
   CC.CAUSECODE "LINEDEVCAUSE",
   TO_CHAR(WX.WEATHERCODE) "WEATHER",
   MI.MISSION "MISSION",
   AR.AREA "AREA",
   PT.PILOTNAME "PILOT",
   LO.LOCATIONCODE "LOCATIONCODE",
   CO.COLORVALUE "COLORVALUE",        --ROW COLOR FOR CONDITIONSTATUS
   ST.ICONNAME "ICONNAME",
   ST.STATUSCODE "STATUSCODE",
   CO2.COLORVALUE "ROWCOLOR", --ROW COLOR FOR DEVIATIONS
   FU.FUELSTATUS "FUELSTATUS",
   SC.SCHEDDAY "SCHEDDAY",
   REM1.REMARKS "MAINTREMARKS",
   REM2.REMARKS "REMARKS",
   DECODE(TO_CHAR(SC.PUBLISHED_FLAG), '1', 'Y', 'N') "PUBLISHED",
   AC.LASTFLOWNTIME "LASTFLOWNTIME",
   AC.FUELLOAD "FUELLOAD",
   SC.TYPE_EVENT "TYPEEVENT",
   SC.SCHEDULESOURCE "SCHEDULESOURCE",
   AC.CHAFF "CHAFF",
   AC.FLARE "FLARE",
   AC.TMEFLOWNSINCEPHASEDATE "TMEFLWNSINCEPHASE",
   AC.PHASEUNITS,
   DCDEV.DEVIATIONCODE "DEVIATION",
   CCDEV.CAUSECODE "DEVCAUSE",
   CCDEV2.CAUSECODE "NEWDEVCAUSE",
   DEV.SORTIEMOD "DEVMOD",
   DEV.ACTIONOPTIONS "DEVACTION",
   DECODE(TO_CHAR(DEV.CHARGEABLE), '1', 'Y', 'N') "CHARGEABLE",
   DEV.STARTDATETIME "DEVSTART",
   DEV.STOPDATETIME "DEVSTOP",
   MAINTENANCEEVENTID "MAINTEVENT",
   REM3.REMARKS "DEVRMKS"
  FROM EMOC3.SCHEDULE SC
   LEFT JOIN EMOC3.AIRCRAFT AC ON SC.AIRCRAFTID = AC.AIRCRAFTID
   LEFT JOIN EMOC3.SQUADRONS SQ ON SC.SQUADRONID = SQ.SQUADRONID
   LEFT JOIN EMOC3.MOC MC ON MC.MOCID = SQ.MOCID
   LEFT JOIN EMOC3.SCHEDULEDEVIATIONS DEV ON SC.SCHEDULEID = DEV.SCHEDULEID
   LEFT JOIN EMOC3.LANDINGCODES LC ON SC.LANDINGCODEID = LC.LANDINGCODEID
   LEFT JOIN EMOC3.RANGES RG ON SC.RANGEID = RG.RANGEID
   LEFT JOIN EMOC3.DEVIATIONCODES DC ON SC.DEVIATIONCODEID = DC.DEVIATIONCODEID
   LEFT JOIN EMOC3.CAUSECODES CC ON SC.CAUSECODEID = CC.CAUSECODEID
   LEFT JOIN EMOC3.DEVIATIONCODES DCDEV ON DEV.DEVIATIONCODEID = DCDEV.DEVIATIONCODEID
   LEFT JOIN EMOC3.CAUSECODES CCDEV ON DEV.CAUSECODEID = CCDEV.CAUSECODEID
   LEFT JOIN EMOC3.CAUSECODES CCDEV2 ON DEV.NEWCAUSECODE = CCDEV2.CAUSECODEID
   LEFT JOIN EMOC3.REMARKS REM3 ON REM3.REMARKSID = DEV.DEVIATIONSREMARKS
   LEFT JOIN EMOC3.WX ON SC.WXCODEID = WX.WXCODEID
   LEFT JOIN EMOC3.MISSIONS MI ON SC.MISSIONID = MI.MISSIONID
   LEFT JOIN EMOC3.AREAS AR ON SC.AREAID = AR.AREAID
   LEFT JOIN EMOC3.PILOT PT ON SC.PILOTID = PT.PILOTID
   LEFT JOIN EMOC3.LOCATIONS LO ON AC.LOCATIONID = LO.LOCATIONID
   LEFT JOIN EMOC3.CONDITIONCODES CD ON AC.CONDITIONCODEID = CD.CONDCODEID
   LEFT JOIN EMOC3.CONDITIONSTATUS CS ON CD.CONDSTATID = CS.CONDSTATID
   LEFT JOIN EMOC3.COLORS CO ON CS.COLORID = CO.COLORID
   LEFT JOIN EMOC3.AIRCRAFTMDS MDS ON AC.AIRCRAFTMDSID = MDS.AIRCRAFTMDSID
   LEFT JOIN EMOC3.STATUSCODE ST ON AC.STATUSCODEID = ST.STATUSCODEID
   LEFT JOIN EMOC3.COLORS CO2 ON DC.COLORID = CO2.COLORID
   LEFT JOIN EMOC3.FUEL FU ON AC.FUELSTATUSID = FU.FUELSTATUSID
   LEFT JOIN EMOC3.REMARKS REM1 ON REM1.REMARKSID = MAINTREMARKS
   LEFT JOIN EMOC3.REMARKS REM2 ON REM2.REMARKSID = SCHEDULEREMARKS
   JOIN EMOC3.WINGS WG ON SQ.WINGID = WG.WINGID
 
 
 
 
 
 
 
 ;

CREATE OR REPLACE VIEW "EMOC3"."FLYBOARD_ARCHIVE_VIEW" ("SQUADRONNAME", "MOCID", "AIRCRAFTYEAR", "TAILNUMBER", "MISEQUIPID", "SERIALNUMBER", "AIRCRAFTMDS", "OTHERMDS", "SCH_GO", "SCH_SCHEDTAKEOFF", "SCH_SCHEDLAND", "SCH_ACTUALTAKEOFF", "SCH_ACTUALLAND", "SCH_SPARE", "SCH_ADJTAKEOFF", "SCH_ADJLANDING", "SCH_AREAARRIVETIME", "SCH_AREALEAVETIME", "SCH_LANDINGCODE", "SCH_RANGE", "SCH_DEVIATIONCODE", "SCH_CAUSECODE", "SCH_WEATHERCODE", "SCH_MISSION", "SCH_AREA", "SCH_PILOTNAME", "SCH_SORTIENUM", "SCH_SORTIEMOD", "SCH_SORTIEDATE", "SCH_BLOCKNUMBER", "SCH_PUBLISHEDFLAG", "SCH_SCHEDDAY", "SCH_CALLSIGN", "SCH_TRANSIENT", "SCH_DURATIONSCHEDULED", "SCH_DURATIONACTUAL", "SCH_CONFIGCODE", "SCH_SCHEDULEREMARKS", "SCH_MAINTREMARKS", "SCH_SORTIEJOAP", "SCH_SORTIESEMEDX", "SCH_SQUADRONNAME", "SCH_UTILIZATIONCODE", "SCH_SCHEDULESOURCE", "SCH_INTERFACELOGID", "SCH_ARCHIVEDATE", "SST_STATUSCODE", "SST_STATUSTIME", "SST_STATUSTYPE", "SST_ARCHIVEDATE", "DEV_DEVIATIONCODE", "DEV_CAUSECODE", "DEV_NEWCAUSECODE", "DEV_SORTIENUM", "DEV_SORTIEDATE", "DEV_SORTIEMOD", "DEV_ACTIONOPTIONS", "DEV_CHARGEABLE", "DEV_STARTDATETIME", "DEV_STOPDATETIME", "DEV_DEVIATIONREMARKS", "DEV_ARCHIVEDATE", "MNT_UNIT", "MNT_PCW", "MNT_EQUIPID", "MNT_CP", "MNT_WUCLCN", "MNT_WD", "MNT_PRIORITY", "MNT_SYMBOL", "MNT_TSSCH", "MNT_JOBDUR", "MNT_DISCREPANCY", "MNT_WCENARRATIVE", "MNT_EMPID", "MNT.ENTRY781", "MNT_DEFER", "MNT_WCESYMBOL", "MNT_JOBFOLLOW", "MNT_PARTSREQUIRED", "MNT_ENTERED", "MNT_ARCHIVEDATE", "JOAP", "JOAP_MOCCONTROLLER", "JOAP_SAMPLEDATE", "JOAP_REASON", "JOAP_HOURSREQUIRED", "JOAP_HOURSREMAINING", "JOAP_NOTIFIEDBY", "JOAP_EXPEDITERNOTIFIED", "JOAPLASTUPDATED", "JOAP_ARCHIVEDATE", "SEMEDX", "SEM_MOCCONTROLLER", "SEM_SAMPLEDATE", "SEM_REASON", "SEM_HOURSREQUIRED", "SEM_HOURSREMAINING", "SEM_NOTIFYBY", "SEM_EXPEDITERNOTIFIED", "SEMEDXLASTUPDATED", "SEM_ARCHIVEDATE") AS
SELECT
       AC.SQUADRONNAME,
     AC1.MOCID,
    AC.AIRCRAFTYEAR "AIRCRAFTYEAR",
       AC.SHORTTAILNUMBER "TAILNUMBER",
    AC.MISEQUIPID "MISEQUIPID",
       AC.SERIALNUMBER "SERIALNUMBER",
       AC.AIRCRAFTMDS "AIRCRAFTMDS",
    AC.RELATEDMDS "OTHERMDS",
    SCHEDULE.GO "SCH_GO",
    SCHEDULE.SCHEDULEDTAKEOFF "SCH_SCHEDTAKEOFF",
    SCHEDULE.SCHEDULEDLANDING "SCH_SCHEDLAND",
    SCHEDULE.ACTUALTAKEOFF "SCH_ACTUALTAKEOFF",
    SCHEDULE.ACTUALLANDING "SCH_ACTUALLAND",
    SCHEDULE.SPARE "SCH_SPARE",
    SCHEDULE.ADJTAKEOFF "SCH_ADJTAKEOFF",
    SCHEDULE.ADJLANDING "SCH_ADJLANDING",
    SCHEDULE.AREAARRIVETIME "SCH_AREAARRIVETIME",
    SCHEDULE.AREALEAVETIME "SCH_AREALEAVETIME",
    SCHEDULE.LANDINGCODE "SCH_LANDINGCODE",
    SCHEDULE.RANGE "SCH_RANGE",
    SCHEDULE.DEVIATIONCODE "SCH_DEVIATIONCODE",
    SCHEDULE.CAUSECODE "SCH_CAUSECODE",
    SCHEDULE.WEATHERCODE "SCH_WEATHERCODE",
    SCHEDULE.MISSION "SCH_MISSION",
    SCHEDULE.AREA "SCH_AREA",
    SCHEDULE.PILOTNAME "SCH_PILOTNAME",
    SCHEDULE.SORTIENUM "SCH_SORTIENUM",
    SCHEDULE.SORTIEMOD "SCH_SORTIEMOD",
    SCHEDULE.SORTIEDATE "SCH_SORTIEDATE",
    SCHEDULE.BLOCKNUMBER "SCH_BLOCKNUMBER",
    SCHEDULE.PUBLISHED_FLAG "SCH_PUBLISHEDFLAG",
    SCHEDULE.SCHEDDAY "SCH_SCHEDDAY",
    SCHEDULE.CALLSIGN "SCH_CALLSIGN",
    SCHEDULE.TRANSIENT "SCH_TRANSIENT",
    SCHEDULE.DURATIONSCHEDULED "SCH_DURATIONSCHEDULED",
    SCHEDULE.DURATIONACTUAL "SCH_DURATIONACTUAL",
    SCHEDULE.CONFIGCODE "SCH_CONFIGCODE",
    SCHEDULE.SCHEDULEREMARKS "SCH_SCHEDULEREMARKS",
    SCHEDULE.MAINTREMARKS "SCH_MAINTREMARKS",
    SCHEDULE.SORTIE_JOAP "SCH_SORTIEJOAP",
    SCHEDULE.SORTIE_SEMEDX "SCH_SORTIESEMEDX",
    SCHEDULE.SQUADRONNAME "SCH_SQUADRONNAME",
    SCHEDULE.UTILIZATIONCODE "SCH_UTILIZATIONCODE",
    SCHEDULE.SCHEDULESOURCE "SCH_SCHEDULESOURCE",
    SCHEDULE.INTERFACELOGID "SCH_INTERFACELOGID",
    SCHEDULE.ARCHIVEDATE "SCH_ARCHIVEDATE",
    SST.STATUSCODE "SST_STATUSCODE",
    SST.STATUSTIME "SST_STATUSTIME",
    SST.STATUSTYPE "SST_STATUSTYPE",
    SST.ARCHIVEDATE "SST_ARCHIVEDATE",
    DEV.DEVIATIONCODE "DEV_DEVIATIONCODE",
    DEV.CAUSECODE "DEV_CAUSECODE",
    DEV.NEWCAUSECODE "DEV_NEWCAUSECODE",
    DEV.SORTIENUM "DEV_SORTIENUM",
    DEV.SORTIEDATE "DEV_SORTIEDATE",
    DEV.SORTIEMOD "DEV_SORTIEMOD",
    DEV.ACTIONOPTIONS "DEV_ACTIONOPTIONS",
    DEV.CHARGEABLE "DEV_CHARGEABLE",
    DEV.STARTDATETIME "DEV_STARTDATETIME",
    DEV.STOPDATETIME "DEV_STOPDATETIME",
    DEV.DEVIATIONSREMARKS "DEV_DEVIATIONREMARKS",
    DEV.ARCHIVEDATE "DEV_ARCHIVEDATE",
    MNT.UNIT "MNT_UNIT",
    MNT.PWC "MNT_PCW",
    MNT.EQUIPID "MNT_EQUIPID",
    MNT.CP "MNT_CP",
    MNT.WUCLCN "MNT_WUCLCN",
    MNT.WD "MNT_WD",
    MNT.PRIORITY "MNT_PRIORITY",
    MNT.SYMBOL "MNT_SYMBOL",
    MNT.TSSCH "MNT_TSSCH",
    MNT.JOBDUR "MNT_JOBDUR",
    MNT.DISCREPANCY "MNT_DISCREPANCY",
    MNT.WCENARRATIVE "MNT_WCENARRATIVE",
    MNT.EMPID "MNT_EMPID",
    MNT.ENTRY781 "MNT.ENTRY781",
    MNT.DEFER "MNT_DEFER",
    MNT.WCESYMBOL "MNT_WCESYMBOL",
    MNT.JOBFOLLOW "MNT_JOBFOLLOW",
    MNT.PARTSREQUIRED "MNT_PARTSREQUIRED",
    MNT.ENTERED "MNT_ENTERED",
    MNT.ARCHIVEDATE "MNT_ARCHIVEDATE",
    JOAP.JOAP "JOAP",
    JOAP.MOCCONTROLLER "JOAP_MOCCONTROLLER",
    JOAP.SAMPLEDATE "JOAP_SAMPLEDATE",
    JOAP.REASON "JOAP_REASON",
    JOAP.HOURSREQUIRED "JOAP_HOURSREQUIRED",
    JOAP.HOURSREMAINING "JOAP_HOURSREMAINING",
    JOAP.NOTIFIEDBY "JOAP_NOTIFIEDBY",
    JOAP.EXPEDITERNOTIFIED "JOAP_EXPEDITERNOTIFIED",
    JOAP.JOAPLASTUPDATED "JOAPLASTUPDATED",
    JOAP.ARCHIVEDATE "JOAP_ARCHIVEDATE",
    SEM.SEMEDX "SEMEDX",
    SEM.MOCCONTROLLER "SEM_MOCCONTROLLER",
    SEM.SAMPLEDATE "SEM_SAMPLEDATE",
    SEM.REASON "SEM_REASON",
    SEM.HOURSREQUIRED "SEM_HOURSREQUIRED",
    SEM.HOURSREMAINING "SEM_HOURSREMAINING",
    SEM.NOTIFIEDBY "SEM_NOTIFYBY",
    SEM.EXPEDITERNOTIFIED "SEM_EXPEDITERNOTIFIED",
    SEM.SEMEDXLASTUPDATED "SEMEDXLASTUPDATED",
    SEM.ARCHIVEDATE "SEM_ARCHIVEDATE"
FROM EMOCAUX.SCHEDULE
LEFT JOIN EMOCAUX.AIRCRAFT AC ON AC.AIRCRAFTID = SCHEDULE.AIRCRAFTID
LEFT JOIN EMOC3.AIRCRAFT AC1 ON AC1.AIRCRAFTID = AC.AIRCRAFTID
LEFT JOIN EMOCAUX.SCHEDULESTATUS SST ON SST.SCHEDULEID = SCHEDULE.SCHEDULEID
LEFT JOIN EMOCAUX.SCHEDULEDEVIATIONS DEV ON DEV.SCHEDULEID = SCHEDULE.SCHEDULEID
LEFT JOIN EMOCAUX.MAINTENANCEEVENTS MNT ON MNT.MAINTENANCEEVENTID = DEV.MAINTENANCEEVENTID
LEFT JOIN EMOCAUX.JOAPDATA JOAP ON JOAP.SCHEDULEID = SCHEDULE.SCHEDULEID
LEFT JOIN EMOCAUX.SEMEDXDATA SEM ON SEM.SCHEDULEID = SCHEDULE.SCHEDULEID
 
 
 
 
 
 
 
 ;

CREATE OR REPLACE VIEW "EMOC3"."FLIGHTSVIEW" ("FLIGHTID", "FLIGHTNAME", "SQUADRONID", "WORKCENTERID", "SHORTNAME", "WORKCENTERCODE", "MOCID") AS
SELECT   flightid, flightname, squadrons.squadronid,
   workcenters.workcenterid, shortname, workcentercode, squadrons.mocid
FROM emoc3.flights JOIN emoc3.squadrons ON flights.squadronid = squadrons.squadronid
JOIN emoc3.workcenters ON flights.workcenterid = workcenters.workcenterid
ORDER BY flightname;

CREATE OR REPLACE VIEW "EMOC3"."DEVIATIONCODEVIEW" ("DEVIATIONCODEID", "DEVIATIONCODE", "DEVIATIONDESCRIPTION", "COLORVALUE", "DEVAULTDEVIATIONCODE", "MOCID") AS
SELECT   deviationcodeid, deviationcode, deviationdescription,
         colorvalue, defaultdeviationcode, deviationcodes.mocid
FROM deviationcodes LEFT JOIN colors ON deviationcodes.colorid = colors.colorid
ORDER BY deviationcode
 
 
 
 
 
 
 
 ;

CREATE OR REPLACE VIEW "EMOC3"."CUSTOM_DATA_VIEW" ("WING", "UNITID", "ELC", "SQUADRONNAME", "MOCID", "AIRCRAFTYEAR", "TAILNUMBER", "MISEQUIPID", "SERIALNUMBER", "AIRCRAFTMDS", "OTHERMDS", "MDSLASTUPDATED", "CONDITION", "CONDSTATUS", "STATUSCODE", "AIRCRAFTWUC", "LABEL", "DESCRIPTION", "VALUE", "NUMBERVALUE", "DATEVALUE", "BOOLEANVALUE", "UPDATED", "UPDATEBY") AS
SELECT WINGS.wingname "WING",
    WINGS.UNITID "UNITID",
    WINGS.ELC "ELC",
       SQUADRONS.squadronname,
Aircraft.mocid,
    AIRCRAFT.aircraftyear "AIRCRAFTYEAR",
       AIRCRAFT.shorttailnumber "TAILNUMBER",
    AIRCRAFT.misequipid "MISEQUIPID",
       AIRCRAFT.serialnumber "SERIALNUMBER",
       AIRCRAFTMDS.AIRCRAFTMDS "AIRCRAFTMDS",
    AIRCRAFT.RELATEDMDS "OTHERMDS",
    AIRCRAFT.MDSLASTUPDATED,
       CONDITIONCODES.conditioncode "CONDITION",
    CONDITIONSTATUS.CONDITIONSTATUS "CONDSTATUS",
    STATUSCODE.STATUSCODE,
    WUC.WUCCODE "AIRCRAFTWUC",
    CUSTOMDATALABEL "LABEL",
    CUSTOMDATADESCRIPTION "DESCRIPTION",
    DATAVALUE "VALUE",
    EMOC3.GET_CUSTOMDATA_NUMBER(DATAVALUE) "NUMBERVALUE",
    EMOC3.GET_CUSTOMDATA_DATE(DATAVALUE) "DATEVALUE",
    EMOC3.GET_CUSTOMDATA_BOOLEAN(DATAVALUE) "BOOLEANVALUE",
    LASTUPDATED "UPDATED",
    USERNAME "UPDATEBY"
FROM EMOC3.AIRCRAFT
JOIN EMOC3.AIRCRAFTMDS ON AIRCRAFTMDS.AIRCRAFTMDSID = AIRCRAFT.AIRCRAFTMDSID
JOIN EMOC3.SQUADRONS ON AIRCRAFT.SQUADRONID = SQUADRONS.SQUADRONID
JOIN EMOC3.WINGS ON SQUADRONS.WINGID = WINGS.WINGID
LEFT JOIN EMOC3.AIRCRAFTCUSTOMDATA ON AIRCRAFT.AIRCRAFTID = AIRCRAFTCUSTOMDATA.AIRCRAFTID
LEFT JOIN EMOC3.CUSTOMDATA ON CUSTOMDATA.CUSTOMDATAID = AIRCRAFTCUSTOMDATA.CUSTOMDATAID
JOIN EMOC3.USERS ON USERS.USERID = AIRCRAFTCUSTOMDATA.LASTUPDATEBY
LEFT JOIN EMOC3.CONDITIONCODES ON AIRCRAFT.CONDITIONCODEID = CONDITIONCODES.CONDCODEID
LEFT JOIN EMOC3.CONDITIONSTATUS ON CONDITIONCODES.CONDSTATID = CONDITIONSTATUS.CONDSTATID
LEFT JOIN EMOC3.WUC ON AIRCRAFT.AIRCRAFTWUCID = WUC.WUCID
LEFT JOIN EMOC3.STATUSCODE ON AIRCRAFT.STATUSCODEID = STATUSCODE.STATUSCODEID
WHERE AIRCRAFT.AIRCRAFTID IN (SELECT DISTINCT aircraftid FROM aircraftcustomdata) AND customdata.customdataid IN (SELECT DISTINCT customdataid FROM aircraftcustomdata)
 
 
 
 
 
 
 
 ;

CREATE OR REPLACE VIEW "EMOC3"."BRIEF_WING_STATUS_VIEW" ("WING", "WINGID", "SQUADRON", "SQUADRONID", "AIRCRAFTID", "TAILNUMBER", "MDS", "STATUSCODE", "POSSESSIONCODE", "MOCID") AS
SELECT WI.wingname AS wing,
    WI.WINGID AS wingid,
    SQ.shortname AS squadron,
    SQ.SQUADRONID AS squadronid,
    AC.AIRCRAFTID AS aircraftid,
    AC.SHORTTAILNUMBER AS tailnumber,
    AM.AIRCRAFTMDS AS mds,
    CC.CONDITIONCODE AS statuscode,
    SUBSTR(PO.POSSESSIONCODE,1,1) AS possessioncode,
 sq.mocid AS mocid
FROM AIRCRAFT AC
LEFT JOIN SQUADRONS SQ ON AC.SQUADRONID = SQ.SQUADRONID
LEFT JOIN WINGS WI ON WI.WINGID = SQ.WINGID
LEFT JOIN CONDITIONCODES CC ON AC.CONDITIONCODEID = CC.CONDCODEID
LEFT JOIN AIRCRAFTMDS AM ON AC.AIRCRAFTMDSID = AM.AIRCRAFTMDSID
LEFT JOIN POSSESSIONS PO ON PO.POSSESSIONID = AC.POSSESSIONID
 
 
 
 
 
 
 
 ;

CREATE OR REPLACE VIEW "EMOC3"."AIRCRAFT_STATUSUPDATE_VIEW" ("WING", "UNITID", "ELC", "SQUADRONNAME", "MOCID", "AIRCRAFTYEAR", "TAILNUMBER", "MISEQUIPID", "SERIALNUMBER", "AIRCRAFTMDS", "OTHERMDS", "MAINTSTATUSCODE", "CONDITIONSTATCODE", "STATUSSTARTDATE", "STATUSSTARTTIME", "WORKUNITCODE", "OPENSTATUSEVENT", "ETIC", "PARTSPLUS", "STATUSNARRATIVE", "LOCATION", "CONFIGURATION", "PRIORITY", "ARM", "MULTIPLECONFIGID", "LOCALOPTION", "ENTERED", "LASTUPDATE", "ENTEREDBY", "UPDATEDBY") AS
SELECT WINGS.wingname "WING",
    WINGS.UNITID "UNITID",
    WINGS.ELC "ELC",
       SQUADRONS.squadronname,
AIRCRAFT.MOCID,
    AIRCRAFT.aircraftyear "AIRCRAFTYEAR",
       AIRCRAFT.shorttailnumber "TAILNUMBER",
    AIRCRAFT.misequipid "MISEQUIPID",
       AIRCRAFT.serialnumber "SERIALNUMBER",
       AIRCRAFTMDS.AIRCRAFTMDS "AIRCRAFTMDS",
    AIRCRAFT.RELATEDMDS "OTHERMDS",
    AIRCRAFTSTATUSUPDATE.maintenancestatuscode "MAINTSTATUSCODE",
    AIRCRAFTSTATUSUPDATE.conditionstatuscode "CONDITIONSTATCODE",
       AIRCRAFTSTATUSUPDATE.statusstartdate,
    AIRCRAFTSTATUSUPDATE.statusstarttime,
    AIRCRAFTSTATUSUPDATE.workunitcode,
       AIRCRAFTSTATUSUPDATE.openstatusevent,
    AIRCRAFTSTATUSUPDATE.estimatedtimeincommission "ETIC",
    AIRCRAFTSTATUSUPDATE.partsplus,
       AIRCRAFTSTATUSUPDATE.statusnarrative,
    AIRCRAFTSTATUSUPDATE.LOCATION,
    AIRCRAFTSTATUSUPDATE.configuration,
    AIRCRAFTSTATUSUPDATE.priority,
       AIRCRAFTSTATUSUPDATE.arm,
    AIRCRAFTSTATUSUPDATE.multipleconfigid,
    AIRCRAFTSTATUSUPDATE.localoption,
    AIRCRAFTSTATUSUPDATE.entered,
       AIRCRAFTSTATUSUPDATE.lastupdate,
    AIRCRAFTSTATUSUPDATE.enteredby,
    AIRCRAFTSTATUSUPDATE.updatedby
       FROM EMOC3.AIRCRAFT,
          EMOC3.SQUADRONS,
          EMOC3.AIRCRAFTMDS,
    EMOC3.WINGS,
    EMOC3.AIRCRAFTSTATUSUPDATE
    WHERE (    (AIRCRAFT.squadronid = SQUADRONS.squadronid)
           AND (WINGS.wingid = SQUADRONS.wingid)
           AND (AIRCRAFTMDS.aircraftmdsid = AIRCRAFT.aircraftmdsid(+))
           AND (AIRCRAFT.aircraftid = AIRCRAFTSTATUSUPDATE.aircraftid)
          )
 
 
 
 
 
 
 
 ;

CREATE OR REPLACE VIEW "EMOC3"."AIRCRAFT_STATUSBOARD_VIEW" ("WING", "UNITID", "ELC", "SQUADRONNAME", "MOCID", "AIRCRAFTYEAR", "TAILNUMBER", "MISEQUIPID", "SERIALNUMBER", "AIRCRAFTMDS", "OTHERMDS", "MDSLASTUPDATED", "CONDCODE", "CONDUPD", "CONDTIME", "CONDSTATUS", "STATUSCODE", "STATUSUPDATED", "STATUSCODETIME", "STATUSNARRATIVE", "STATUSSTARTDATE", "STATUSSTARTTIME", "STATUSWUCLCN", "ETIC", "ETICDATE", "ETICUPDATED", "AIRCRAFTWUC", "WUCLASTUPDATED", "OPENSTATEVENTJCN", "FCF", "OCF", "QVI", "HOTGUNS", "ARM_DEARM", "FIRESYMBOL", "FUELLOAD", "FUELSTATUS", "FUELSTATUSLASTUPD", "FUELSTATUSTIME", "CREWCHIEF", "RANKCODE", "FIRSTOFFICIAL", "SECONDOFFICIAL", "PRIORITY", "HQCODE", "LASTFLOWNTIME", "PICTURE", "PHASEDATE", "PHASEDATELASTUPD", "TMEFLWNSINCEPHASE", "PHASEUNITS", "MULTICONFIGID", "ACFT_CONFIG_ID", "LOCALCONFIGID", "LOCALOPTION", "LOCCODE", "LOCLASTUPDATED", "STATIONLOC", "CONFIGDATE", "CONFIGUPDATED", "CREWCHIEFLASTUPD", "SERIALNUMLASTUPD", "IMPOUNDSLASTUPD", "HQSTATUSLASTUPD", "TESTSTATUSLASTUPD", "REMARKSLASTUPD", "PRIORITYLASTUPD", "ASSIGNCMD", "ASSIGNSTATUS", "ASSIGNDATE", "ASSIGNUPDATED", "POSSESSION", "POSSDATETIME", "POSSCODELASTUPD", "REPDESIGNDATETIME", "REPDESIGNLASTUPD", "REPORTDESIG", "SQPRESELECT", "WEAPONSTATLASTUPD", "WEAPONSSTATUSTIME", "AIRCRAFTREMARKS") AS
SELECT WINGS.wingname "WING",
    WINGS.UNITID "UNITID",
    WINGS.ELC "ELC",
       SQUADRONS.squadronname,
AIRCRAFT.mocid,
    AIRCRAFT.aircraftyear "AIRCRAFTYEAR",
       AIRCRAFT.shorttailnumber "TAILNUMBER",
    AIRCRAFT.misequipid "MISEQUIPID",
       AIRCRAFT.serialnumber "SERIALNUMBER",
       AIRCRAFTMDS.AIRCRAFTMDS "AIRCRAFTMDS",
    AIRCRAFT.RELATEDMDS "OTHERMDS",
    AIRCRAFT.MDSLASTUPDATED,
       CONDITIONCODES.conditioncode "CONDCODE",
    AIRCRAFT.CONDITIONCODELASTUPDATED "CONDUPD",
    AIRCRAFT.CONDITIONCODETIME "CONDTIME",
    CONDITIONSTATUS.CONDITIONSTATUS "CONDSTATUS",
    STATUSCODE.STATUSCODE,
    AIRCRAFT.STATUSCODELASTUPDATED "STATUSUPDATED",
    AIRCRAFT.STATUSCODETIME,
    AIRCRAFT.STATUSNARRATIVE,
    AIRCRAFT.STATUSSTARTDATE,
    AIRCRAFT.STATUSSTARTTIME,
    AIRCRAFT.STATUSWUCLCN,
    AIRCRAFT.etic "ETIC",
    AIRCRAFT.eticdatetime "ETICDATE",
    AIRCRAFT.eticlastupdated "ETICUPDATED",
    WUC.WUCCODE "AIRCRAFTWUC",
    AIRCRAFT.WUCLASTUPDATED,
    AIRCRAFT.OPENSTATUSEVENTJCN "OPENSTATEVENTJCN",
    DECODE(TO_CHAR(FCF), '1', 'Y', 'N') FCF,
    DECODE(TO_CHAR(OCF), '1', 'Y', 'N') OCF,
    DECODE(TO_CHAR(QVI), '1', 'Y', 'N') QVI,
    DECODE(TO_CHAR(AIRCRAFT.hotguns), '1', 'Y', 'N') hotguns,
    DECODE(TO_CHAR(AIRCRAFT.arm_dearm), '1', 'Y', 'N') arm_dearm,
    FIRESYMBOLS.FIRESYMBOL,
    AIRCRAFT.FUELLOAD,
       FUEL.FUELSTATUS,
    AIRCRAFT.FUELSTATUSLASTUPDATED "FUELSTATUSLASTUPD",
       AIRCRAFT.FUELSTATUSTIME,
    CREWCHIEFS.crewchief "CREWCHIEF",
    RANKS.rankcode "RANKCODE",
    AIRCRAFT.firstofficial "FIRSTOFFICIAL",
       AIRCRAFT.secondofficial "SECONDOFFICIAL",
    TO_CHAR(AIRCRAFT.priority) "PRIORITY",
       HANGER_QUEEN_CODE.hqcode "HQCODE",
       AIRCRAFT.lastflowntime "LASTFLOWNTIME",
    CREWCHIEFS.picture "PICTURE",
    AIRCRAFT.phasedate "PHASEDATE",
       AIRCRAFT.phasedatelastupdated "PHASEDATELASTUPD",
    AIRCRAFT.TMEFLOWNSINCEPHASEDATE "TMEFLWNSINCEPHASE",
    AIRCRAFT.PHASEUNITS,
    AIRCRAFT.MULTICONFIGID,
    AIRCRAFT.ACFT_CONFIG_ID,
    AIRCRAFT.LOCALCONFIGID,
    AIRCRAFT.LOCALOPTION,
    LOCATIONS.LOCATIONCODE "LOCCODE",
    AIRCRAFT.LOCATIONLASTUPDATED "LOCLASTUPDATED",
    STATIONLOCCODES.STATIONLOC,
    AIRCRAFT.AIRCONFIGDATETIME "CONFIGDATE",
    AIRCRAFT.AIRCONFIGIDLASTUPDATED "CONFIGUPDATED",
       AIRCRAFT.crewchieflastupdated "CREWCHIEFLASTUPD",
    AIRCRAFT.serialnumberlastupdated "SERIALNUMLASTUPD",
       AIRCRAFT.impoundslastupdated "IMPOUNDSLASTUPD",
       AIRCRAFT.hqstatuslastupdated "HQSTATUSLASTUPD",
    AIRCRAFT.teststatuslastupdated "TESTSTATUSLASTUPD",
    AIRCRAFT.remarkslastupdated "REMARKSLASTUPD",
    AIRCRAFT.prioritylastupdated "PRIORITYLASTUPD",
    AIRCRAFT.ASSIGNMENTCMD "ASSIGNCMD",
    AIRCRAFT.ASSIGNMENTSTATUS "ASSIGNSTATUS",
    AIRCRAFT.ASSIGNSTATDATETIME "ASSIGNDATE",
    AIRCRAFT.ASSIGNSTATUSLASTUPDATED "ASSIGNUPDATED",
       POSSESSIONS.POSSESSIONCODE "POSSESSION",
    AIRCRAFT.POSSDATETIME,
    AIRCRAFT.POSSESSIONCODELASTUPDATED "POSSCODELASTUPD",
    AIRCRAFT.REPDESIGNDATETIME,
    AIRCRAFT.REPDESIGNLASTUPDATED "REPDESIGNLASTUPD",
       AIRCRAFT.REPORTDESIG,
    AIRCRAFT.SQPRESELECT,
    AIRCRAFT.WEAPONSSTATUSLASTUPDATED "WEAPONSTATLASTUPD",
    AIRCRAFT.WEAPONSSTATUSTIME,
    REMARKS.REMARKS "AIRCRAFTREMARKS"
     FROM AIRCRAFT,
          CREWCHIEFS,
          SQUADRONS,
          CONDITIONCODES,
          CONDITIONSTATUS,
          HANGER_QUEEN_CODE,
          POSSESSIONS,
          RANKS,
          AIRCRAFTMDS,
          WUC,
          FIRESYMBOLS,
          FUEL,
          LOCATIONS,
          STATIONLOCCODES,
          STATUSCODE,
          WINGS,
          REMARKS
    WHERE (    (AIRCRAFT.crewchiefid = CREWCHIEFS.crewchiefid(+))
           AND (AIRCRAFT.squadronid = SQUADRONS.squadronid)
           AND (WINGS.wingid = SQUADRONS.wingid)
           AND (AIRCRAFT.conditioncodeid = CONDITIONCODES.condcodeid(+))
     AND (CONDITIONCODES.CONDSTATID = CONDITIONSTATUS.CONDSTATID(+))
           AND (AIRCRAFT.hangerqueenstatus = HANGER_QUEEN_CODE.hqcodeid(+))
           AND (AIRCRAFT.possessionid = POSSESSIONS.possessionid(+))
           AND (RANKS.rankid(+) = CREWCHIEFS.rankid)
           AND (AIRCRAFTMDS.aircraftmdsid = AIRCRAFT.aircraftmdsid(+))
           AND (AIRCRAFT.AIRCRAFTWUCID = WUC.WUCID(+))
     AND (AIRCRAFT.firesymbolid = FIRESYMBOLS.FIRESYMBOLID(+))
     AND (AIRCRAFT.fuelstatusid = FUEL.FUELSTATUSID(+))
     AND (AIRCRAFT.locationid = LOCATIONS.LOCATIONID(+))
     AND (AIRCRAFT.STALOCCODEID = STATIONLOCCODES.STALOCCODEID(+))
     AND (AIRCRAFT.STATUSCODEID = STATUSCODE.STATUSCODEID(+))
     AND (AIRCRAFT.remarksid = REMARKS.REMARKSID(+))
          )
 
 
 
 
 
 
 
 ;

CREATE OR REPLACE VIEW "EMOC3"."AIRCRAFT_ENGINE_DATA_VIEW" ("WING", "UNITID", "ELC", "SQUADRONNAME", "MOCID", "AIRCRAFTYEAR", "TAILNUMBER", "MISEQUIPID", "SERIALNUMBER", "AIRCRAFTMDS", "ENGINENUMBER", "ENGHRSFLOWN", "AIRCRAFTREMARKS") AS
SELECT
       WINGS.wingname "WING",
    WINGS.UNITID "UNITID",
    WINGS.ELC "ELC",
       SQUADRONS.squadronname,
AIRCRAFT.MOCID,
    AIRCRAFT.aircraftyear "AIRCRAFTYEAR",
       AIRCRAFT.shorttailnumber "TAILNUMBER",
    AIRCRAFT.misequipid "MISEQUIPID",
       AIRCRAFT.serialnumber "SERIALNUMBER",
       AIRCRAFTMDS.AIRCRAFTMDS "AIRCRAFTMDS",
    TO_CHAR(AIRCRAFTENGINEDATA.enginenumber) enginenumber,
    TO_NUMBER(TO_CHAR(SUM((SCHEDULE.ACTUALLANDING - SCHEDULE.ACTUALTAKEOFF) * 24), '99999.99')) "ENGHRSFLOWN",
    REMARKS.REMARKS "AIRCRAFTREMARKS"
FROM EMOC3.AIRCRAFT, EMOC3.WINGS, EMOC3.SQUADRONS, EMOC3.AIRCRAFTMDS, EMOC3.AIRCRAFTENGINEDATA, EMOC3.SCHEDULE, EMOC3.REMARKS
WHERE (    (AIRCRAFT.aircraftid = AIRCRAFTENGINEDATA.aircraftid)
        AND (AIRCRAFT.squadronid = SQUADRONS.SQUADRONID)
        AND (SQUADRONS.wingid = WINGS.wingid)
        AND (AIRCRAFT.aircraftmdsid = AIRCRAFTMDS.aircraftmdsid)
  AND (SCHEDULE.AIRCRAFTID = AIRCRAFT.AIRCRAFTID(+))
  AND (AIRCRAFT.remarksid = REMARKS.REMARKSID(+))
   )
GROUP BY
       WINGS.wingname,
    WINGS.UNITID,
    WINGS.ELC,
AIRCRAFT.MOCID,
       SQUADRONS.squadronname,
    AIRCRAFT.aircraftyear,
       AIRCRAFT.shorttailnumber,
    AIRCRAFT.misequipid,
       AIRCRAFT.serialnumber,
       AIRCRAFTMDS.AIRCRAFTMDS,
    AIRCRAFTENGINEDATA.enginenumber,
    REMARKS.REMARKS
ORDER BY AIRCRAFT.shorttailnumber, AIRCRAFTENGINEDATA.enginenumber
 
 
 
 
 
 
 
 ;

CREATE OR REPLACE VIEW "EMOC3"."ALL_AIRCRAFT_DATA_VIEW" ("WING", "UNITID", "ELC", "MOCID", "SQUADRONNAME", "AIRCRAFTYEAR", "TAILNUMBER", "MISEQUIPID", "SERIALNUMBER", "AIRCRAFTMDS", "OTHERMDS", "MDSLASTUPDATED", "CONDCODE", "CONDUPD", "CONDTIME", "CONDSTATUS", "STATUSCODE", "STATUSUPDATED", "STATUSCODETIME", "CURRENTSTAUSTNARR", "CURRENTSTATSTART", "STATUSWUCLCN", "CURRENTETIC", "ETICDATE", "ETICUPDATED", "AIRCRAFTWUC", "WUCLASTUPDATED", "OPENSTATEVENTJCN", "FCF", "OCF", "QVI", "HOTGUNS", "ARM_DEARM", "FIRESYMBOL", "FUELLOAD", "FUELSTATUS", "FUELSTATUSLASTUPD", "FUELSTATUSTIME", "CREWCHIEF", "RANKCODE", "FIRSTOFFICIAL", "SECONDOFFICIAL", "CURRENTPRIORITY", "HQCODE", "LASTFLOWNTIME", "PICTURE", "PHASEDATE", "PHASEDATELASTUPD", "TMEFLWNSINCEPHASE", "PHASEUNITS", "MULTICONFIGID", "ACFT_CONFIG_ID", "LOCALCONFIGID", "CURRENTLOCOPTION", "LOCCODE", "LOCLASTUPDATED", "STATIONLOC", "CONFIGDATE", "CONFIGUPDATED", "CREWCHIEFLASTUPD", "SERIALNUMLASTUPD", "IMPOUNDSLASTUPD", "HQSTATUSLASTUPD", "TESTSTATUSLASTUPD", "REMARKSLASTUPD", "PRIORITYLASTUPD", "ASSIGNCMD", "ASSIGNSTATUS", "ASSIGNDATE", "ASSIGNUPDATED", "POSSESSION", "POSSDATETIME", "POSSCODELASTUPD", "REPDESIGNDATETIME", "REPDESIGNLASTUPD", "REPORTDESIG", "SQPRESELECT", "WEAPONSTATLASTUPD", "WEAPONSSTATUSTIME", "COMBATSCL", "WEAPONSNUMBER", "WEAPONTYPE", "ORDNANCE", "WEAPONS_CONFIG", "ENGINENUMBER", "ENGHRSFLOWN", "MAINTSTATUSCODE", "CONDITIONSTATCODE", "STATUSSTARTDATE", "STATUSCHANGEWUC", "OPENSTATUSEVENT", "STATUSETIC", "PARTSPLUS", "STATUSNARRATIVE", "LOCATION", "CONFIGURATION", "PRIORITY", "ARM", "MULTIPLECONFIGID", "LOCALOPTION", "ENTERED", "LASTUPDATE", "ENTEREDBY", "UPDATEDBY", "WRITEUPTIME", "WRITEUPJCN", "WRITEUPCORRECTED", "CORRECTEDTIME", "WRITEUPPACER", "WRITEUPETIC", "WRITEUPSYMBOL", "WRITEUPWUC", "WRITEUPDISCREPANCY", "CORRECTIVEACTION", "WRITEUPCAMSINIT", "MICAPDOCNUMBER", "MICAPPART", "MICAPETA", "MICAPCAMSINIT", "JOAP_ENGINENUM", "JOAP_SORTIEDATE", "JOAP_SORTIENUM", "JOAPCODE", "REDCAPSTATUS", "JOAP_COLOR", "JOAP_COLORRANK", "JOAP_SAMPLEDATE", "JOAP_REASON", "JOAP_NOTIFIEDBY", "JOAP_MOCCONTROLLER", "JOAPLASTUPDATED", "JOAP_HRSREQUIRED", "JOAP_HRSREMAINING", "JOAP_EXPEDITED", "SEM_ENGINENUM", "SEM_SORTIEDATE", "SEM_SORTIENUM", "SEMEDXCODE", "SEM_COLOR", "SEM_COLORRANK", "SEM_SAMPLEDATE", "SEM_REASON", "SEM_NOTIFIEDBY", "SEM_MOCCONTROLLER", "SEMEDXLASTUPDATED", "SEM_HRSREQUIRED", "SEM_HRSREMAINING", "SEM_EXPEDITED") AS
SELECT
--STATUS BOARD VIEW--
 STB.WING,
 STB.UNITID,
 STB.ELC,
STB.MOCID,
 STB.SQUADRONNAME,
 STB.AIRCRAFTYEAR,
 STB.TAILNUMBER,
 STB.MISEQUIPID,
 STB.SERIALNUMBER,
 STB.AIRCRAFTMDS,
 STB.OTHERMDS,
 STB.MDSLASTUPDATED,
 STB.CONDCODE,
 STB.CONDUPD,
 STB.CONDTIME,
 STB.CONDSTATUS,
 STB.STATUSCODE,
 STB.STATUSUPDATED,
 STB.STATUSCODETIME,
 STB.STATUSNARRATIVE "CURRENTSTAUSTNARR",
 STB.STATUSSTARTDATE || ' ' || STB.STATUSSTARTTIME "CURRENTSTATSTART",
 STB.STATUSWUCLCN,
 STB.ETIC "CURRENTETIC",
 STB.ETICDATE,
 STB.ETICUPDATED,
 STB.AIRCRAFTWUC,
 STB.WUCLASTUPDATED,
 STB.OPENSTATEVENTJCN,
 STB.FCF, STB.OCF, STB.QVI,
 STB.HOTGUNS, STB.ARM_DEARM, STB.FIRESYMBOL,
 STB.FUELLOAD,
 STB.FUELSTATUS,
 STB.FUELSTATUSLASTUPD,
 STB.FUELSTATUSTIME,
 STB.CREWCHIEF,
 STB.RANKCODE,
 STB.FIRSTOFFICIAL, STB.SECONDOFFICIAL,
 STB.PRIORITY "CURRENTPRIORITY",
 STB.HQCODE,
 STB.LASTFLOWNTIME,
 STB.PICTURE,
 STB.PHASEDATE,
 STB.PHASEDATELASTUPD,
 STB.TMEFLWNSINCEPHASE,
 STB.PHASEUNITS,
 STB.MULTICONFIGID,
 STB.ACFT_CONFIG_ID,
 STB.LOCALCONFIGID,
 STB.LOCALOPTION "CURRENTLOCOPTION",
 STB.LOCCODE,
 STB.LOCLASTUPDATED,
 STB.STATIONLOC,
 STB.CONFIGDATE,
 STB.CONFIGUPDATED,
 STB.CREWCHIEFLASTUPD,
 STB.SERIALNUMLASTUPD,
 STB.IMPOUNDSLASTUPD,
 STB.HQSTATUSLASTUPD,
 STB.TESTSTATUSLASTUPD,
 STB.REMARKSLASTUPD,
 STB.PRIORITYLASTUPD,
 STB.ASSIGNCMD,
 STB.ASSIGNSTATUS,
 STB.ASSIGNDATE,
 STB.ASSIGNUPDATED,
 STB.POSSESSION,
 STB.POSSDATETIME,
 STB.POSSCODELASTUPD,
 STB.REPDESIGNDATETIME,
 STB.REPDESIGNLASTUPD,
 STB.REPORTDESIG,
 STB.SQPRESELECT,
 STB.WEAPONSTATLASTUPD,
 STB.WEAPONSSTATUSTIME,
--WEAPONS VIEW--
 COMBATSCL,
 WEAPONSNUMBER,
 WEAPONTYPE,
 ORDNANCE,
 WPN.CONFIGURATION "WEAPONS_CONFIG",
--ENGINE DATA VIEW--
 ENG.ENGINENUMBER,
 ENG.ENGHRSFLOWN,
--STATUS UPDATE VIEW--
 STU.MAINTSTATUSCODE,
 STU.CONDITIONSTATCODE,
 STU.STATUSSTARTDATE || ' ' || STU.STATUSSTARTTIME "STATUSSTARTDATE",
 WORKUNITCODE "STATUSCHANGEWUC",
 OPENSTATUSEVENT,
 STU.ETIC "STATUSETIC",
 PARTSPLUS,
 STU.STATUSNARRATIVE,
 LOCATION,
 STU.CONFIGURATION,
 STU.PRIORITY, ARM,
 MULTIPLECONFIGID,
 STU.LOCALOPTION,
 ENTERED,
 LASTUPDATE,
 ENTEREDBY,
 UPDATEDBY,
 --WRITEUPS AND MICAPS VIEW
 WRITEUPTIME,
 WRITEUPJCN,
 CORRECTED WRITEUPCORRECTED,
 CORRECTEDTIME,
 PACER WRITEUPPACER,
 WRITEUPETIC,
 SYMBOL WRITEUPSYMBOL,
 WRITEUPWUC,
 DISCREPANCY WRITEUPDISCREPANCY,
 CORRECTIVEACTION,
 WRITEUPCAMSINIT,
 DOCUMENTNUMBER MICAPDOCNUMBER,
 PART MICAPPART,
 ETA MICAPETA,
 MICAPCAMSINIT,
--JOAP VIEW--
 JP.ENGINENUMBER "JOAP_ENGINENUM",
 JP.SORTIEDATE "JOAP_SORTIEDATE",
 JP.SORTIENUM "JOAP_SORTIENUM",
 JP.JOAPCODE, JP.REDCAPSTATUS,
 JP.COLORNAME "JOAP_COLOR",
 JP.COLORRANK "JOAP_COLORRANK",
 JP.SAMPLEDATE "JOAP_SAMPLEDATE",
 JP.REASON "JOAP_REASON",
 JP.NOTIFIEDBY "JOAP_NOTIFIEDBY",
 JP.MOCCONTROLLER "JOAP_MOCCONTROLLER",
 JP.JOAPLASTUPDATED,
 JP.HOURSREQUIRED "JOAP_HRSREQUIRED",
 JP.HOURSREMAINING "JOAP_HRSREMAINING",
 JP.EXPEDITED "JOAP_EXPEDITED",
--SEMEDX VIEW--
 SEM.ENGINENUMBER "SEM_ENGINENUM",
 SEM.SORTIEDATE "SEM_SORTIEDATE",
 SEM.SORTIENUM "SEM_SORTIENUM",
 SEM.CODE "SEMEDXCODE",
 SEM.COLORNAME "SEM_COLOR",
 SEM.COLORRANK "SEM_COLORRANK",
 SEM.SAMPLEDATE "SEM_SAMPLEDATE",
 SEM.REASON "SEM_REASON",
 SEM.NOTIFIEDBY "SEM_NOTIFIEDBY",
 SEM.MOCCONTROLLER "SEM_MOCCONTROLLER",
 SEM.SEMEDXLASTUPDATED,
 SEM.HOURSREQUIRED "SEM_HRSREQUIRED",
 SEM.HOURSREMAINING "SEM_HRSREMAINING",
 SEM.EXPEDITED "SEM_EXPEDITED"
FROM EMOC3.AIRCRAFT_STATUSBOARD_VIEW STB
LEFT JOIN EMOC3.AIRCRAFT_ENGINE_DATA_VIEW ENG ON ENG.SQUADRONNAME = STB.SQUADRONNAME AND ENG.TAILNUMBER = STB.TAILNUMBER AND ENG.AIRCRAFTMDS = STB.AIRCRAFTMDS
LEFT JOIN EMOC3.AIRCRAFT_STATUSUPDATE_VIEW STU ON STB.SQUADRONNAME = STU.SQUADRONNAME AND STB.TAILNUMBER = STU.TAILNUMBER AND STB.AIRCRAFTMDS = STU.AIRCRAFTMDS
LEFT JOIN EMOC3.JOAP_VIEW JP ON STB.SQUADRONNAME = JP.SQUADRONNAME AND STB.TAILNUMBER = JP.TAILNUMBER AND STB.AIRCRAFTMDS = JP.AIRCRAFTMDS
LEFT JOIN EMOC3.SEMEDX_VIEW SEM ON STB.SQUADRONNAME = SEM.SQUADRONNAME AND STB.TAILNUMBER = SEM.TAILNUMBER AND STB.AIRCRAFTMDS = SEM.AIRCRAFTMDS
LEFT JOIN EMOC3.WEAPONS_VIEW WPN ON STB.SQUADRONNAME = WPN.SQUADRONNAME AND STB.TAILNUMBER = WPN.TAILNUMBER AND STB.AIRCRAFTMDS = WPN.AIRCRAFTMDS
LEFT JOIN EMOC3.WRITEUPS_AND_MICAPS_VIEW WMV ON STB.SQUADRONNAME = WMV.SQUADRONNAME AND STB.TAILNUMBER = WMV.TAILNUMBER AND STB.AIRCRAFTMDS = WMV.AIRCRAFTMDS;

CREATE OR REPLACE VIEW "EMOC3"."AIRCRAFT_HISTORY_VIEW" ("WING", "UNITID", "ELC", "SQUADRONNAME", "MOCID", "AIRCRAFTYEAR", "TAILNUMBER", "MISEQUIPID", "SERIALNUMBER", "AIRCRAFTMDS", "OTHERMDS", "EVENTDATE", "FIELD", "VALUE", "UPDATER") AS
SELECT WINGS.wingname "WING",
    WINGS.UNITID "UNITID",
    WINGS.ELC "ELC",
       SQUADRONS.squadronname,
AIRCRAFT.MOCID,
    AIRCRAFT.aircraftyear "AIRCRAFTYEAR",
       AIRCRAFT.shorttailnumber "TAILNUMBER",
    AIRCRAFT.misequipid "MISEQUIPID",
       AIRCRAFT.serialnumber "SERIALNUMBER",
       AIRCRAFTMDS.AIRCRAFTMDS "AIRCRAFTMDS",
    AIRCRAFT.RELATEDMDS "OTHERMDS",
    HISTORY.EVENTDATE,
    HISTORY.ELEMENT "FIELD",
       HISTORY.elementvalue "VALUE",
    USERS.fullname "UPDATER"
 FROM EMOC3.AIRCRAFT,
          EMOC3.SQUADRONS,
          EMOC3.AIRCRAFTMDS,
    EMOC3.WINGS,
    EMOC3.HISTORY, EMOC3.USERS
    WHERE (    (AIRCRAFT.squadronid = SQUADRONS.squadronid)
           AND (WINGS.wingid = SQUADRONS.wingid)
           AND (AIRCRAFTMDS.aircraftmdsid = AIRCRAFT.aircraftmdsid(+))
           AND (AIRCRAFT.aircraftid = HISTORY.aircraftid)
     AND (USERS.userid = HISTORY.userid)
          )
 
 
 
 
 
 
 
 ;

CREATE OR REPLACE VIEW "EMOC3"."AIRCRAFT_HISTORY_ARCHIVE_VIEW" ("SQUADRONNAME", "AIRCRAFTYEAR", "TAILNUMBER", "MISEQUIPID", "SERIALNUMBER", "AIRCRAFTMDS", "OTHERMDS", "HIS_EVENTDATE", "HIS_ELEMENTVALUE", "HIS_ELEMENT", "HIS_TRANSACTIONID", "HIS_ARCHIVEDATE", "MOCID") AS
SELECT
       AIRCRAFT.SQUADRONNAME,
    AIRCRAFT.AIRCRAFTYEAR "AIRCRAFTYEAR",
       AIRCRAFT.SHORTTAILNUMBER "TAILNUMBER",
    AIRCRAFT.MISEQUIPID "MISEQUIPID",
       AIRCRAFT.SERIALNUMBER "SERIALNUMBER",
       AIRCRAFT.AIRCRAFTMDS "AIRCRAFTMDS",
    AIRCRAFT.RELATEDMDS "OTHERMDS",
    HIS.EVENTDATE "HISTORY_EVENTDATE",
    HIS.ELEMENT "HISTORY_ELEMENT",
    HIS.ELEMENTVALUE "HISTORY_VALUE",
    HIS.TRANSACTIONID "HISTORY_TRANSACTIONID",
    HIS.ARCHIVEDATE "HIS_ARCHIVEDATE",
    AC.MOCID "MOCID"
FROM EMOCAUX.AIRCRAFT
LEFT JOIN EMOCAUX.HISTORY HIS ON HIS.AIRCRAFTID = AIRCRAFT.AIRCRAFTID
LEFT JOIN EMOC3.AIRCRAFT AC ON AC.AIRCRAFTID = AIRCRAFT.AIRCRAFTID
 
 
 
 
 
 
 
 ;

CREATE OR REPLACE VIEW "EMOC3"."AIRCRAFT_ARCHIVE_VIEW" ("SQUADRONNAME", "MOCID", "AIRCRAFTYEAR", "TAILNUMBER", "MISEQUIPID", "SERIALNUMBER", "AIRCRAFTMDS", "OTHERMDS", "CONDCODE", "STATUSCODE", "STATUSNARRATIVE", "FLIGHTNAME", "ETIC", "AIRCRAFTWUC", "FCF", "OCF", "QVI", "HOTGUNS", "ARM_DEARM", "COMMANDCODE", "PRIORITY", "HQCODE", "LASTFLOWNTIME", "PHASEDATE", "TMEFLWNSINCEPHASE", "PHASEUNITS", "MULTICONFIGID", "ACFT_CONFIG_ID", "LOCALCONFIGID", "LOCALOPTION", "LOCCODE", "STALOCCODE", "BLOCKNUMBER", "ASSIGNCMD", "ASSIGNSTATUS", "POSSESSION", "REPORTDESIG", "REMARKS", "ARCHIVEDATE", "AED_ENGINENUMBER", "AED_ARCHIVEDATE", "MNT_UNIT", "MNT_EVENTID", "MNT_PWC", "MNT_EQUIPID", "MNT_CP", "MNT_WUCLCN", "MNT_WD", "MNT_PRIORITY", "MNT_SYMBOL", "MNT_TSSCH", "MNT_JOBDUR", "MNT_DISCREPANCY", "MNT_WCENARRATIVE", "MNT_EMPID", "MNT_ENTRY781", "MNT_DEFER", "MNT_WCESYMBOL", "MNT_JOB_FOLLOW", "MNT_PARTSREQUIRED", "MNT_ENTERED", "MNT_ARCHIVEDATE", "MIC_MICAPID", "MIC_DOCNUMBER", "MIC_PART", "MIC_ETA", "MIC_ARCHIVEDATE", "SD_REQUESTER", "SD_WORKCENTERCODE", "SD_PERSONCONTACTED", "SD_PERSONDISPATCHED", "SD_REQUESTDATE", "SD_DISCREPANCY", "SD_COMPLETIONDATE", "SD_ETICSHOWTIME", "SD_ENTERED", "SD_ENTEREDBY", "SD_SQDISPATCHEDTO", "SD_ARCHIVEDATE", "WL_STATION", "WL_ORDNANCE", "WL_WEAPONSNUMBER", "WL_WEAPONSCLASS", "WL_FIRESYMBOL", "WL_ARCHIVEDATE", "WU_WRITEUPTIME", "WU_JCN", "WU_CORRECTED", "WU_CORRECTEDTIME", "WU_PACER", "WU_ETIC", "WU_SYMBOL", "WU_WUC", "WU_DISCREPANCY", "WU_CORRECTIVEACTION", "WU_ARCHIVEDATE") AS
SELECT
       AIRCRAFT.SQUADRONNAME,
       AC.MOCID,
    AIRCRAFT.AIRCRAFTYEAR "AIRCRAFTYEAR",
       AIRCRAFT.SHORTTAILNUMBER "TAILNUMBER",
    AIRCRAFT.MISEQUIPID "MISEQUIPID",
       AIRCRAFT.SERIALNUMBER "SERIALNUMBER",
       AIRCRAFT.AIRCRAFTMDS "AIRCRAFTMDS",
    AIRCRAFT.RELATEDMDS "OTHERMDS",
       AIRCRAFT.CONDITIONCODE "CONDCODE",
    AIRCRAFT.STATUSCODE,
    AIRCRAFT.STATUSNARRATIVE,
    AIRCRAFT.FLIGHTNAME "FLIGHTNAME",
    AIRCRAFT.ETIC "ETIC",
    AIRCRAFT.AIRCRAFTWUC "AIRCRAFTWUC",
    DECODE(TO_CHAR(AIRCRAFT.FCF), '1', 'Y', 'N') FCF,
    DECODE(TO_CHAR(AIRCRAFT.OCF), '1', 'Y', 'N') OCF,
    NULL AS "QVI", --DECODE(TO_CHAR(AIRCRAFT.QVI), '1', 'Y', 'N') QVI,
    NULL AS "HOTGUNS", --DECODE(TO_CHAR(AIRCRAFT.hotguns), '1', 'Y', 'N') hotguns,
    DECODE(TO_CHAR(AIRCRAFT.ARM_DEARM), '1', 'Y', 'N') arm_dearm,
    AIRCRAFT.COMMANDCODE "COMMANDCODE",
    TO_CHAR(AIRCRAFT.PRIORITY) "PRIORITY",
       AIRCRAFT.HQCODE "HQCODE",
       AIRCRAFT.LASTFLOWNTIME "LASTFLOWNTIME",
    AIRCRAFT.PHASEDATE "PHASEDATE",
    AIRCRAFT.TMEFLOWNSINCEPHASEDATE "TMEFLWNSINCEPHASE",
    AIRCRAFT.PHASEUNITS,
    AIRCRAFT.MULTICONFIGID,
    AIRCRAFT.ACFT_CONFIG_ID,
    AIRCRAFT.LOCALCONFIGID,
    AIRCRAFT.LOCALOPTION,
    AIRCRAFT.LOCATION "LOCCODE",
    AIRCRAFT.STALOCCODE,
    AIRCRAFT.BLOCKNUMBER "BLOCKNUMBER",
    AIRCRAFT.ASSIGNMENTCMD "ASSIGNCMD",
    AIRCRAFT.ASSIGNMENTSTATUS "ASSIGNSTATUS",
       AIRCRAFT.POSSESSIONCODE "POSSESSION",
       AIRCRAFT.REPORTDESIG,
    AIRCRAFT.REMARKS "REMARKS",
    AIRCRAFT.ARCHIVEDATE "ARCHIVEDATE",
    AED.ENGINENUMBER "AED_ENGINENUMBER",
    AED.ARCHIVEDATE "AED_ARCHIVEDATE",
    MNT.UNIT "MNT_UNIT",
    MNT.EVENTID "MNT_EVENTID",
    MNT.PWC "MNT_PWC",
    MNT.EQUIPID "MNT_EQUIPID",
    MNT.CP "MNT_CP",
    MNT.WUCLCN "MNT_WUCLCN",
    MNT.WD "MNT_WD",
    MNT.PRIORITY "MNT_PRIORITY",
    MNT.SYMBOL "MNT_SYMBOL",
    MNT.TSSCH "MNT_TSSCH",
    MNT.JOBDUR "MNT_JOBDUR",
    MNT.DISCREPANCY "MNT_DISCREPANCY",
    MNT.WCENARRATIVE "MNT_WCENARRATIVE",
    MNT.EMPID "MNT_EMPID",
    MNT.ENTRY781 "MNT_ENTRY781",
    MNT.DEFER "MNT_DEFER",
    MNT.WCESYMBOL "MNT_WCESYMBOL",
    MNT.JOBFOLLOW "MNT_JOB_FOLLOW",
    MNT.PARTSREQUIRED "MNT_PARTSREQUIRED",
    MNT.ENTERED "MNT_ENTERED",
    MNT.ARCHIVEDATE "MNT_ARCHIVEDATE",
    MIC.MICAPID "MIC_MICAPID",
    MIC.DOCUMENTNUMBER "MIC_DOCNUMBER",
    MIC.NOMENCLATURE "MIC_PART",
    MIC.ESTIMATEDDELIVERYDATE "MIC_ETA",
    MIC.ARCHIVEDATE "MIC_ARCHIVEDATE",
    SD.REQUESTER "SD_REQUESTER",
    SD.WORKCENTERCODE "SD_WORKCENTERCODE",
    SD.PERSONCONTACTED "SD_PERSONCONTACTED",
    SD.PERSONDISPATCHED "SD_PERSONDISPATCHED",
    SD.REQUESTDATE "SD_REQUESTDATE",
    SD.DISCREPANCY "SD_DISCREPANCY",
    SD.COMPLETIONDATE "SD_COMPLETIONDATE",
    SD.ETICSHOWTIME "SD_ETICSHOWTIME",
    SD.ENTERED "SD_ENTERED",
    SD.ENTEREDBY "SD_ENTEREDBY",
    SD.SQDISPATCHEDTO "SD_SQDISPATCHEDTO",
    SD.ARCHIVEDATE "SD_ARCHIVEDATE",
    WL.STATION "WL_STATION",
    WL.ORDNANCE "WL_ORDNANCE",
    WL.WEAPONSNUMBER "WL_WEAPONSNUMBER",
    WL.WEAPONSCLASS "WL_WEAPONSCLASS",
    WL.FIRESYMBOL "WL_FIRESYMBOL",
    WL.ARCHIVEDATE "WL_ARCHIVEDATE",
    WU.WRITEUPTIME "WU_WRITEUPTIME",
    WU.JCN "WU_JCN",
    WU.CORRECTED "WU_CORRECTED",
    WU.CORRECTEDTIME "WU_CORRECTEDTIME",
    WU.PACER "WU_PACER",
    WU.ETIC "WU_ETIC",
    WU.SYMBOL "WU_SYMBOL",
    WU.WUC "WU_WUC",
    WU.DISCREPANCY "WU_DISCREPANCY",
    WU.CORRECTIVEACTION "WU_CORRECTIVEACTION",
    WU.ARCHIVEDATE "WU_ARCHIVEDATE"
FROM EMOCAUX.AIRCRAFT
LEFT JOIN EMOC3.AIRCRAFT AC ON AC.AIRCRAFTID = AIRCRAFT.AIRCRAFTID
LEFT JOIN EMOCAUX.AIRCRAFTENGINEDATA AED ON AED.AIRCRAFTID = AIRCRAFT.AIRCRAFTID
LEFT JOIN EMOCAUX.MAINTENANCEEVENTS MNT ON MNT.AIRCRAFTID = AIRCRAFT.AIRCRAFTID
LEFT JOIN EMOCAUX.MICAP MIC ON MIC.AIRCRAFTID = AIRCRAFT.AIRCRAFTID
LEFT JOIN EMOCAUX.SHOPDISPATCH SD ON SD.AIRCRAFTID = AIRCRAFT.AIRCRAFTID
LEFT JOIN EMOCAUX.WEAPONSLOAD WL ON WL.AIRCRAFTID = AIRCRAFT.AIRCRAFTID
LEFT JOIN EMOCAUX.WRITEUPS WU ON WU.AIRCRAFTID = AIRCRAFT.AIRCRAFTID
 
 
 
 
 
 
 
 ;

CREATE OR REPLACE VIEW "EMOC3"."AIRCRAFTVIEW" ("AIRCRAFTID", "SHORTTAILNUMBER", "TAILNUMBER", "SQUADRONID", "WINGID", "CONDITIONCODEID", "AIRCRAFTMDSID", "AIRCRAFTYEAR", "AIRCRAFTMDS", "ACFTMDSTYPECD", "MISEQUIPID", "MOCID") AS
SELECT   aircraftid, shorttailnumber, tailnumber, squadrons.squadronid,
         wingid, conditioncodeid, aircraftmds.aircraftmdsid, aircraftyear,
         aircraftmds, acftmdstypecd, misequipid, aircraft.mocid
FROM emoc3.aircraft JOIN emoc3.squadrons ON aircraft.squadronid = squadrons.squadronid
              JOIN emoc3.aircraftmds ON aircraft.aircraftmdsid = aircraftmds.aircraftmdsid
ORDER BY shorttailnumber;

CREATE FUNCTION         "EMOC3"."DT_ADDUSEROBJECT" RETURN NUMBER IS NEWOBJECTID NUMBER; BEGIN /* GET THE NEXT VALUE FROM THE SEQUENCE FOR THE OBJECT ID */ SELECT MICROSOFTSEQDTPROPERTIES.NEXTVAL INTO NEWOBJECTID FROM DUAL; /* ADD THE PARENT NODE FOR THE NEW OBJECT */ INSERT INTO MICROSOFTDTPROPERTIES ( ID, OBJECTID, PROPERTY ) VALUES ( NEWOBJECTID, NEWOBJECTID, 'DtgSchemaOBJECT' ); RETURN( NEWOBJECTID ); END DT_ADDUSEROBJECT; 
 
 
 
 
 
 
 
 ;

CREATE FUNCTION         "EMOC3"."FUNCCOUNTENGINERELATEDDATA" (p_aircraftid IN INTEGER) 
RETURN number
IS 
var_temp_count NUMBER; 
COUNTER1 INTEGER;
COUNTER2 INTEGER;
COUNTER3 INTEGER;
BEGIN 

SELECT COUNT(*) INTO COUNTER1
FROM JOAPDATA,AIRCRAFTENGINEDATA
WHERE JOAPDATA.ENGINEDATAID = AIRCRAFTENGINEDATA.ENGINEDATAID
AND AIRCRAFTENGINEDATA.AIRCRAFTID = p_aircraftid;

SELECT COUNT(*) INTO COUNTER2
FROM SEMEDXDATA,AIRCRAFTENGINEDATA
WHERE SEMEDXDATA.ENGINEDATAID = AIRCRAFTENGINEDATA.ENGINEDATAID
AND AIRCRAFTENGINEDATA.AIRCRAFTID = p_aircraftid;

SELECT COUNT(*) INTO COUNTER3
FROM WEAPONSLOAD
WHERE AIRCRAFTID = p_aircraftid;

IF (COUNTER1 + COUNTER2 + COUNTER3) = 0 THEN
   var_temp_count := 0;
END IF;
IF (COUNTER1 + COUNTER2 + COUNTER3) > 0 THEN 
   var_temp_count := 1;
END IF;

return var_temp_count;
END;



 
 
 
 
 
 
 
 ;

CREATE FUNCTION         "EMOC3"."GET_CUSTOMDATA_BOOLEAN" (
i_value_to_check in varchar2) return STRING is
v_dummy VARCHAR2(1);
begin

	 select decode(i_value_to_check, '1', 'T', 'F')
	 into v_dummy
	 from dual;

return v_dummy;
exception
when others then
return NULL; -- it's invalid
end GET_CUSTOMDATA_BOOLEAN ;
 
 
 
 
 
 
 
 ;

CREATE FUNCTION         "EMOC3"."GET_CUSTOMDATA_DATE" (
i_value_to_check in varchar2) return DATE is
v_dummy DATE;
begin

	v_dummy := TO_DATE(i_value_to_check, 'MM/DD/YYYY HH:MM:SS AM');

return v_dummy;
exception
when others then
return NULL; -- it's invalid
end GET_CUSTOMDATA_DATE ;
 
 
 
 
 
 
 
 ;

CREATE FUNCTION         "EMOC3"."GET_CUSTOMDATA_NUMBER" (
i_value_to_check in varchar2) return NUMBER is
v_dummy NUMBER;
begin

v_dummy := TO_NUMBER(i_value_to_check);

return v_dummy;
exception
when others then
return NULL; -- it's invalid
end GET_CUSTOMDATA_NUMBER ;
 
 
 
 
 
 
 
 ;

CREATE FUNCTION         "EMOC3"."GET_SCHEDDAY_DEV" (
SORTIEDATEIN IN VARCHAR2,
SQUADRONIDIN NUMBER,
DEVIATIONIN VARCHAR2
)
/******************************************************************************
   NAME:       GET_SCHEDDAYDEV
   PURPOSE:    Return the number of associated DEVs for Schedule Fly Day report

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/9/2004    A.Mitchell      1. Created this function.


******************************************************************************/

RETURN VARCHAR2

IS
retVal NUMBER := 0;

BEGIN

	   select sum(DEV) DEV
	   into retVal
	   from
       (
        select count(sch.deviationcodeid) DEV
          from schedule sch
          join deviationcodes dev on dev.deviationcodeid = sch.deviationcodeid
         where (
         	   	sch.sortiedate = SORTIEDATEIN
        		and sch.squadronid = SQUADRONIDIN
        		and (dev.deviationcode = DEVIATIONIN)
               )
        union all
        select count(sch.deviationcodeid) DEV
          from scheduledeviations sch
          join schedule on sch.scheduleid = schedule.scheduleid
          join deviationcodes dev on dev.deviationcodeid = sch.deviationcodeid
         where (
         	   	schedule.sortiedate = SORTIEDATEIN
        		and schedule.squadronid = SQUADRONIDIN
        		and (dev.deviationcode = DEVIATIONIN)
               )
       );

   RETURN retVal;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END GET_SCHEDDAY_DEV;
 
 
 
 
 
 
 
 ;

CREATE FUNCTION         "EMOC3"."GET_SCHEDDAY_GO" (
SORTIEDATEIN IN VARCHAR2,
SQUADRONIDIN NUMBER
)
/******************************************************************************
   NAME:       GET_SCHEDDAYGO
   PURPOSE:    Return a string with scheduled 'GO' for Schedule Fly Day report

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/9/2004    A.Mitchell      1. Created this function.


******************************************************************************/

RETURN VARCHAR2

IS
retVal VARCHAR2(500) := null;
CURSOR schedcur is
	   select distinct nvl(go, 0) go, count(nvl(go, 0)) scheduled
	   from schedule
	   where schedule.sortiedate = SORTIEDATEIN
	   and squadronid = SQUADRONIDIN
	   group by go;

	   schedrec schedcur%rowtype;
BEGIN

	   open schedcur;

	   fetch schedcur into schedrec;

	   while schedcur%found
	   loop
	   	   if length(retVal) != 0 then
		   	  begin
			  	   retval := retVal || ' X ';
			  end;
		   end if;

	   	   retVal := retVal || schedrec.scheduled;

		   fetch schedcur into schedrec;
	   end loop;
	   close schedcur;

	   if length(retVal) < 3 then
	   	  begin
		  	   retVal := retVal || ' X 0';
		  end;
	   end if;

   RETURN retVal;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END GET_SCHEDDAY_GO;
 
 
 
 
 
 
 
 ;

CREATE FUNCTION         "EMOC3"."GET_SCHEDDAY_UNAVAILABLE" (
SORTIEDATEIN IN VARCHAR2,
SQUADRONIDIN NUMBER
)
/******************************************************************************
   NAME:       GET_SCHEDDAY_UNAVAILABLE
   PURPOSE:    Return a string with NMC aircraft for Schedule Fly Day report

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/9/2004    A.Mitchell      1. Created this function.


******************************************************************************/

RETURN VARCHAR2

IS
retVal VARCHAR2(500) := null;
CURSOR schedcur is
	   select  distinct aircraft.shorttailnumber
	   from schedule
	   join aircraft on schedule.aircraftid = aircraft.aircraftid
	   join conditioncodes cc on aircraft.conditioncodeid = cc.condcodeid
	   join conditionstatus cs on cc.condstatid = cs.condstatid
	   where conditionstatus like 'NMC%' and schedule.sortiedate = SORTIEDATEIN and schedule.squadronid = SQUADRONIDIN;

	   schedrec schedcur%rowtype;
BEGIN

	   open schedcur;

	   fetch schedcur into schedrec;

	   while schedcur%found
	   loop
	   	   retVal := retVal || '  ' || schedrec.shorttailnumber;
		   fetch schedcur into schedrec;
	   end loop;
	   close schedcur;

   RETURN retVal;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END GET_SCHEDDAY_UNAVAILABLE;
 
 
 
 
 
 
 
 ;

CREATE FUNCTION         "EMOC3"."GET_SCHEDLINE_DEV"(

SCHEDULEIDIN IN NUMBER

)

/******************************************************************************

   NAME:       GET_SCHEDDLINE_DEV

   PURPOSE:    Return deviation for scheduleid



   REVISIONS:

   Ver        Date        Author           Description

   ---------  ----------  ---------------  ------------------------------------

   1.0        5/25/2004   J.Chaplin        1. Created this function.

   2.0        12/7/2011   J.Long	   1. Update the retVal for multiple values



******************************************************************************/

RETURN VARCHAR2

IS

retVal VARCHAR2(50) := null;

BEGIN

        select wm_concat(deviationcode) DEV
		  into retVal
		  from scheduledeviations sch
          join schedule on sch.scheduleid = schedule.scheduleid
          join deviationcodes dev on dev.deviationcodeid = sch.deviationcodeid
         where (
         	   	schedule.scheduleid = SCHEDULEIDIN
               );

		RETURN retVal;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
        if retVal is NULL then
		   begin
           select sch.deviationcodeid DEV
		   into retVal
           from schedule sch
           join deviationcodes dev on dev.deviationcodeid = sch.deviationcodeid
           where (
         	   	sch.scheduleid = SCHEDULEIDIN
               	);
		select wm_concat(deviationcode) into retVal from deviationcodes where deviationcodeid in TO_NUMBER(retVal);
			end;
		end if;
		RETURN retVal;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END GET_SCHEDLINE_DEV;

CREATE FUNCTION         "EMOC3"."GET_SCHEDLINE_JOAP" (SCHEDULEIDIN IN NUMBER)
/******************************************************************************
   NAME:       GET_SCHEDDLINE_JOAP
   PURPOSE:    Return JOAP for scheduleid

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        5/25/2004   J.Chaplin        1. Created this function.


******************************************************************************/

RETURN VARCHAR2

IS
retVal VARCHAR2(5) := NULL;
mocvar NUMBER;
BEGIN
  select mocid into mocvar from squadrons 
  where squadronid = (select squadronid 
            from schedule 
      where scheduleid = SCHEDULEIDIN);
     GET_FLYBOARD_JOAP_SEMEDX(retVal, SCHEDULEIDIN, 0, mocvar); --0 is for JOAP

  RETURN retVal;

END GET_SCHEDLINE_JOAP;
 
 
 
 
 
 
 
 ;

CREATE FUNCTION         "EMOC3"."GET_SCHEDLINE_STATUSCODE" (
SCHEDULEIDIN IN NUMBER,
STATUSCODEIN IN VARCHAR2
)
/******************************************************************************
   NAME:       GET_SCHEDDLINE_STATUSCODE
   PURPOSE:    Return time for statuscode for scheduleid

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        5/25/2004   J.Chaplin        1. Created this function.


******************************************************************************/

RETURN VARCHAR2

IS
retVal VARCHAR2(10) := null;

BEGIN


        select TO_CHAR(STATUSTIME,'HH24MI') STATUSTIME
		into retVal
          from schedule sch
          join schedulestatus stat on stat.scheduleid = sch.scheduleid
		  join statuscode code on code.statuscodeid = stat.statuscodeid
         where (
         	   	sch.scheduleid = SCHEDULEIDIN
				and code.statuscode = STATUSCODEIN
               );

		IF retVal is null
		THEN
		   BEGIN
		   		retVal := 'none';
		   END;
		END IF;

		RETURN retVal;
		--EXCEPTION
		  --WHEN NO_DATA_FOUND THEN
		   -- retVal := 'none';
		  --WHEN OTHERS THEN
		    --Consider logging the error and then re-raise
			--retVal := 'none';
END GET_SCHEDLINE_STATUSCODE;
 
 
 
 
 
 
 
 ;

CREATE FUNCTION         "EMOC3"."GET_STATCOUNT" (CONDCODEIN IN CHAR, SQUADIN IN NUMBER, WINGIN IN NUMBER)
/******************************************************************************
   NAME:       GET_STATCOUNT
   PURPOSE:    Return the number of aircraft with a conditioncode

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        11/12/2004  J.Chaplin        1. Created this function.


******************************************************************************/

RETURN VARCHAR2

IS
retVal NUMBER := 0;

BEGIN

	   SELECT COUNT(*)
	   INTO retVal
	   FROM
       		WINGS W,
			SQUADRONS SQ,
			AIRCRAFT AC,
			CONDITIONCODES CC
	   WHERE
	   		W.WINGID = WINGIN
	   		AND W.WINGID = SQ.WINGID
			AND AC.SQUADRONID = SQ.SQUADRONID
	 		AND AC.SQUADRONID = SQUADIN
	 		AND CC.CONDCODEID = AC.CONDITIONCODEID
			AND CC.CONDITIONCODE = CONDCODEIN;

   RETURN retVal;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END GET_STATCOUNT;

 
 
 
 
 
 
 
 ;

CREATE FUNCTION         "EMOC3"."GET_UNAVAILABLE_AIRCRAFT" (
SORTIEDATEIN IN VARCHAR2,
SQUADRONIDIN NUMBER
)
/******************************************************************************
   NAME:       GET_UNAVAILABLE_AIRCRAFT
   PURPOSE:    Return a string with NMC aircraft for Schedule Fly Day report

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        4/9/2004    A.Mitchell      1. Created this function.


******************************************************************************/

RETURN VARCHAR2

IS
retVal VARCHAR2(500) := null;
CURSOR schedcur is
	   select  aircraft.shorttailnumber
	   from schedule
	   join aircraft on schedule.aircraftid = aircraft.aircraftid
	   join conditioncodes cc on aircraft.conditioncodeid = cc.condcodeid
	   join conditionstatus cs on cc.condstatid = cs.condstatid
	   where conditionstatus like 'NMC%' and schedule.sortiedate = SORTIEDATEIN and schedule.squadronid = SQUADRONIDIN;

	   schedrec schedcur%rowtype;
BEGIN

	   open schedcur;

	   fetch schedcur into schedrec;

	   while schedcur%found
	   loop
	   	   retVal := retVal || '  ' || schedrec.shorttailnumber;
		   fetch schedcur into schedrec;
	   end loop;
	   close schedcur;

   RETURN retVal;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END GET_UNAVAILABLE_AIRCRAFT;
 
 
 
 
 
 
 
 ;

CREATE FUNCTION         "EMOC3"."ISNUMERIC" ( i_value_to_check varchar2) return number is
v_dummy number;
begin
v_dummy := to_number( i_value_to_check);
return v_dummy; -- it's number
exception
when others then
return NULL; -- it's invalid
end isNumeric;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE                                   "EMOC3"."SPGETCURRENTDAYFLIGHTLINES"
(
P_CURSOR OUT EMOC_TYPES.EMOC_CURSOR,
AIRCRAFTIDIN AIRCRAFT.AIRCRAFTID%TYPE,
SORTIEDATEIN SCHEDULE.SCHEDULEDTAKEOFF%TYPE)
/******************************************************************************
   NAME:       SPGETCURRENTDAYFLIGHTLINES
   PURPOSE:
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        7/11/03      A.Mitchell       1. Created this procedure.
   1.1        9/04/09      J.C.             2. Modified to use SORTIEDATEIN
                                               vice SYSDATE (QC392)
   1.2        2/01/12      D.T.             Modified to show the deviation code
******************************************************************************/
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR

SELECT
schedule.scheduleid,
schedule.aircraftid,
schedule.sortienum,
schedule.callsign,
TO_CHAR(schedule.ACTUALTAKEOFF, 'MM/DD/YYYY HH24:MI:SS') "ACTUALTAKEOFF",
TO_CHAR(schedule.ACTUALLANDING, 'MM/DD/YYYY HH24:MI:SS') "ACTUALLANDING",
TO_CHAR(schedule.SCHEDULEDTAKEOFF, 'MM/DD/YYYY HH24:MI:SS') "SCHEDULEDTAKEOFF",
TO_CHAR(schedule.SCHEDULEDLANDING, 'MM/DD/YYYY HH24:MI:SS') "SCHEDULEDLANDING",
TO_CHAR(schedule.SCHEDDAY, 'MM/DD/YYYY') "SCHEDDAY",

dc.deviationcode,
dc0.deviationcode "TAILSWP_SPARE"

FROM (((schedule schedule left join  scheduledeviations
on schedule.scheduleid = scheduledeviations.scheduleid)
 left join deviationcodes dc
 on scheduledeviations.deviationcodeid = dc.deviationcodeid))
 left join deviationcodes dc0
 on schedule.deviationcodeid = dc0.deviationcodeid

WHERE ((   (TO_CHAR(schedule.SCHEDULEDTAKEOFF, 'MM/DD/YYYY') = TO_CHAR(SORTIEDATEIN, 'MM/DD/YYYY'))
        OR (TO_CHAR(schedule.SCHEDULEDLANDING, 'MM/DD/YYYY') = TO_CHAR(SORTIEDATEIN, 'MM/DD/YYYY')))
        AND (schedule.aircraftid = AIRCRAFTIDIN))



ORDER BY SCHEDULE.SCHEDULEDTAKEOFF;

END SPGETCURRENTDAYFLIGHTLINES;
;

CREATE PROCEDURE                 "EMOC3"."ADD_WUCFROMXML" (
   wuccodein                wuc.wuccode%TYPE,
   wucdescriptionin         wuc.wucdescription%TYPE,
   mdsin              wuc.MISSIONDESIGNSERIES%type,
   blocknumberin            wuc.BLOCKNUMBER%type,
   wucstartdatein           wuc.wucstartdate%TYPE,
   wucstopdatein            wuc.wucstopdate%TYPE,
   lastupdatebyin           INTEGER,
   wucid              OUT   wuc.wucid%TYPE
)
AS
   row_id   INTEGER;
   dupwuc   INTEGER;
BEGIN


   SELECT COUNT (wucid)
     INTO dupwuc
     FROM wuc
    WHERE wuccode = wuccodein
      AND missiondesignseries = mdsin
      AND blocknumber = blocknumberin;

   IF (dupwuc = 0)
   THEN
      SELECT NVL (MAX (wuc.wucid), 0)
        INTO row_id
        FROM wuc;


      INSERT INTO wuc
               (wucid, wuccode, wucdescription, missiondesignseries,
                blocknumber, wucstartdate, wucstopdate, lastupdateby,
                lastupdate, camsinit
               )
        VALUES (row_id + 1, wuccodein, wucdescriptionin, mdsin,
                nvl(blocknumberin,'000'), wucstartdatein, wucstopdatein, lastupdatebyin,
                SYSDATE, SYSDATE
               );

    END IF;


END add_wucfromxml;
;

CREATE PROCEDURE                 "EMOC3"."DELETE_AIRCRAFT" (
   aircraftidin   aircraft.aircraftid%TYPE
)
AS
   aircraftremarksid   INTEGER;
   shorttail           VARCHAR2(5);
BEGIN
   SELECT remarksid, shorttailnumber
     INTO aircraftremarksid, shorttail
     FROM aircraft
    WHERE aircraftid = aircraftidin;

   remove_aircraft_enginedata (aircraftidin);
   /* remove_aircraft_micaps (aircraftidin); */
   remove_aircraft_writeups (aircraftidin);
   remove_aircraft_shopdispatch (aircraftidin);
   remove_aircraft_weaponsload (aircraftidin);
   remove_aircraft_history (aircraftidin);
   remove_aircraft_interfacerecs (aircraftidin);
   remove_aircraft_eventlog (shorttail);
   remove_aircraft_maintevents (aircraftidin);
   remove_aircraft_schedulerecs (aircraftidin);

   INSERT INTO emocaux.aircraft
      SELECT aircraftid, tailnumber, serialnumber, aircraftyear, misequipid,
             lastflowntime,
             aircraft.locationcode AS LOCATION, phasedate,
             etic,
             (SELECT possessioncode
                FROM possessions
               WHERE possessionid = aircraft.possessionid) AS possessioncode,
             priority,
             (SELECT conditioncode
                FROM conditioncodes
               WHERE condcodeid = aircraft.conditioncodeid) AS conditioncode,
             (SELECT flightname
                FROM flights
               WHERE flightid = aircraft.flightid) AS flightname, arm_dearm,
             multiconfigid, statusnarrative, localoption, assignmentcmd,
             assignmentstatus, reportdesig, relatedmds, commandcode,
             aircraftmds.aircraftmds, aircraftmds.blocknumber, localconfigid,
             phaseunits,
             (SELECT wuccode
                FROM wuc
               WHERE wucid = aircraft.aircraftwucid) AS aircraftwuc,
             acft_config_id,
             (SELECT remarks
                FROM remarks
               WHERE remarksid = aircraft.remarksid) AS remarks,
             aircraft.geoloccode AS staloccode,
             tmeflownsincephasedate, squadrons.squadronname, SYSDATE,
             (SELECT statuscode
                FROM statuscode
               WHERE statuscodeid = aircraft.statuscodeid) AS statuscode,
             shorttailnumber, fcf, ocf,
             (SELECT hqcode
                FROM hanger_queen_code
               WHERE hqcodeid = aircraft.hangerqueenstatus) AS hqcode
        FROM aircraft, aircraftmds, squadrons
       WHERE aircraftid = aircraftidin
         AND aircraftmds.aircraftmdsid = aircraft.aircraftmdsid
         AND squadrons.squadronid = aircraft.squadronid;

   UPDATE aircraft
      SET remarksid = NULL
    WHERE aircraftid = aircraftidin;

   DELETE FROM remarks
         WHERE remarksid = aircraftremarksid;

   DELETE FROM aircraftcustomdata
         WHERE aircraftid = aircraftidin;

   DELETE FROM aircraft
         WHERE aircraftid = aircraftidin;

   COMMIT;
END delete_aircraft;
;

CREATE PROCEDURE                 "EMOC3"."GET_CAMS_SCHEDULE_BY_DATE" (
DATETIMEIN DATE,
P_CURSOR OUT EMOC_TYPES.EMOC_CURSOR
)
/******************************************************************************
   NAME:       GET_CAMS_SCHEDULE_BY_DATE
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        6/13/13     DAVID TSAI       Specified the table for the SQUADRONID
					   to fix the compile error during the upgrade
					   from 11gR1 to 11gR2.



******************************************************************************/

AS
BEGIN

  --Use to create CAMS 174 transactions for each Unit/MDS at specific date/time
  OPEN P_CURSOR FOR
  SELECT DISTINCT AIRCRAFTMDS, WINGNAME, ELC, wings.UNITID, WORKCENTERCODE, AC.SQUADRONID,
  (SELECT USERID FROM USERS WHERE USERNAME='emocadmin') as adminuserid,
  (select imdsloginid from imdslogins where userid = (select USERID FROM USERS WHERE USERNAME='emocadmin')
     and wingid =  wings.wingid) as imdsloginid
  FROM AIRCRAFT AC
  JOIN AIRCRAFTMDS MDS ON AC.AIRCRAFTMDSID = MDS.AIRCRAFTMDSID
  JOIN SQUADRONS SQ ON AC.SQUADRONID = SQ.SQUADRONID
  JOIN WINGS ON WINGS.WINGID = SQ.WINGID
  JOIN FLIGHTS ON FLIGHTS.SQUADRONID = SQ.SQUADRONID
  JOIN WORKCENTERS WK ON WK.WORKCENTERID = FLIGHTS.WORKCENTERID
  WHERE TO_CHAR(SCHEDULEDOW) = TO_CHAR(DATETIMEIN, 'D')
  AND TO_CHAR(SCHEDULETIME) = TO_CHAR(DATETIMEIN, 'HH24MI');

END GET_CAMS_SCHEDULE_BY_DATE;

CREATE PROCEDURE                 "EMOC3"."GET_FLYING_SCHEDULE_LINE" (
P_CURSOR OUT    EMOC_TYPES.EMOC_CURSOR,
SCHEDULEIDIN    SCHEDULE.SCHEDULEID%TYPE
)
/******************************************************************************
   NAME:       GET_FLYING_SCHEDULE_LINE
   PURPOSE:    Returns Schedule for the specified ID

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        6/24/03      A.Mitchell       1. Created this procedure.
   2.0		  3/28/13	   JACL				2. Edit CAUSECODEID from Flyboard

   PARAMETERS:
   INPUT:
   *SCHEDULEIDIN
   OUTPUT:
   *P_CURSOR
   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/

AS
BEGIN
  OPEN P_CURSOR FOR
  SELECT SC.SCHEDULEID,
    SC.GO,
   SC.SCHEDULEDTAKEOFF,
   SC.SCHEDULEDLANDING,
   SC.ACTUALTAKEOFF,
   SC.ACTUALLANDING,
   SC.SPARE,
   SC.ADJTAKEOFF,
   SC.ADJLANDING,
   SC.AREAARRIVETIME,
   SC.AREALEAVETIME,
   SC.CALLSIGN,
   SQ.SQUADRONNAME,
   LC.LANDINGCODE,
   RG.RANGE,
   DC.DEVIATIONCODE,
   CC.CAUSECODE,
   WX.WEATHERCODE,
   MI.MISSION,
   AR.AREA,
   SC.AIRCRAFTID,
   PT.PILOTNAME,
   SC.SORTIENUM,
   SC.SORTIEMOD,
   SC.SORTIEDATE,
   AC.SHORTTAILNUMBER,
   SC.SQUADRONID,
   AC.LOCATIONCODE,
   CO.COLORVALUE,        --ROW COLOR FOR CONDITIONSTATUS
   MDS.AIRCRAFTMDS,
   ST.ICONNAME,
   ST.STATUSCODE,
   CO2.COLORVALUE ROWCOLOR, --ROW COLOR FOR DEVIATIONS
   FU.FUELSTATUS,
   SC.CONFIGCODE,
   SC.SORTIE_JOAP,
   SC.SORTIE_SEMEDX,
   SC.SCHEDDAY,
   REM1.REMARKS MAINTENANCEREMARKS,
   REM2.REMARKS,
   SC.SCHEDULEREMARKS,
   SC.MAINTREMARKS,
   WG.WINGID,
   WG.UNITID,
   NVL(SC.PUBLISHED_FLAG, 0) PUBLISHED_FLAG,
   AC.LASTFLOWNTIME,
   AC.FUELLOAD,
   SC.BLOCKNUMBER,
   SC.TYPE_EVENT,
   SC.SCHEDULESOURCE,
   AC.CHAFF,
   AC.FLARE,
   AC.AIRCRAFTYEAR,
   AC.TMEFLOWNSINCEPHASEDATE,
    SC.LANDINGCODEID,
    SC.WXCODEID,
    SC.PILOTID,
    SC.AREAID,
    SC.RANGEID,
    SC.MISSIONID,
    CS.FLYABLE,
    MDS.PHASEUNIT,
    AC.MISEQUIPID,
	SC.CAUSECODEID
  FROM SCHEDULE SC
   LEFT JOIN AIRCRAFT AC ON SC.AIRCRAFTID = AC.AIRCRAFTID
   LEFT JOIN SQUADRONS SQ ON SC.SQUADRONID = SQ.SQUADRONID
   LEFT JOIN LANDINGCODES LC ON SC.LANDINGCODEID = LC.LANDINGCODEID
   LEFT JOIN RANGES RG ON SC.RANGEID = RG.RANGEID
   LEFT JOIN DEVIATIONCODES DC ON SC.DEVIATIONCODEID = DC.DEVIATIONCODEID
   LEFT JOIN CAUSECODES CC ON SC.CAUSECODEID = CC.CAUSECODEID
   LEFT JOIN WX ON SC.WXCODEID = WX.WXCODEID
   LEFT JOIN MISSIONS MI ON SC.MISSIONID = MI.MISSIONID
   LEFT JOIN AREAS AR ON SC.AREAID = AR.AREAID
   LEFT JOIN PILOT PT ON SC.PILOTID = PT.PILOTID
   LEFT JOIN CONDITIONCODES CD ON AC.CONDITIONCODEID = CD.CONDCODEID
   LEFT JOIN CONDITIONSTATUS CS ON CD.CONDSTATID = CS.CONDSTATID
   LEFT JOIN COLORS CO ON CS.COLORID = CO.COLORID
   LEFT JOIN AIRCRAFTMDS MDS ON AC.AIRCRAFTMDSID = MDS.AIRCRAFTMDSID
   LEFT JOIN STATUSCODE ST ON AC.STATUSCODEID = ST.STATUSCODEID
   LEFT JOIN COLORS CO2 ON DC.COLORID = CO2.COLORID
   LEFT JOIN FUEL FU ON AC.FUELSTATUSID = FU.FUELSTATUSID
   LEFT JOIN REMARKS REM1 ON REM1.REMARKSID = MAINTREMARKS
   LEFT JOIN REMARKS REM2 ON REM2.REMARKSID = SCHEDULEREMARKS
   JOIN WINGS WG ON SQ.WINGID = WG.WINGID
  WHERE SC.SCHEDULEID = SCHEDULEIDIN;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
      WHEN OTHERS THEN
        NULL;
END GET_FLYING_SCHEDULE_LINE;

CREATE PROCEDURE                 "EMOC3"."INSERTSTATUSUPDATETRX" (
   p_homeelc                     VARCHAR2,
   p_currentelc                  VARCHAR2,
   p_unitid                      VARCHAR2,
   p_equipmentid                 VARCHAR2,
   p_maintenancestatuscode       VARCHAR2,
   p_conditionstatuscode         VARCHAR2,
   p_startdate                   VARCHAR2,
   p_starttime                   VARCHAR2,
   p_workunitcode                VARCHAR2,
   p_eventid                     VARCHAR2,
   p_workcenterevent             VARCHAR2,
   p_estimatedtimeincommission   VARCHAR2,
   p_partsplus                   VARCHAR2,
   p_geoloccode                  VARCHAR2,
   p_statusnarrative             VARCHAR2,
   p_locationcode                VARCHAR2,
   p_organizationflightid        VARCHAR2,
   p_maintenancerepairpriority   VARCHAR2,
   p_armed                       VARCHAR2,
   p_multipleconfigurationid     VARCHAR2,
   p_localoption                 VARCHAR2,
   p_receivemaintlimitreport     VARCHAR2,
   p_hostunitdateandtime         VARCHAR2,
   p_transactionordinaldate      VARCHAR2,
   p_utcstartdateandtime         DATE
)
AS
   tmpvar      NUMBER;
   mocidvar    NUMBER;
   wingidvar   NUMBER;
   sqidvar     NUMBER;
   acidvar     NUMBER;
   mds         VARCHAR2 (15);
   blk         VARCHAR2 (3);
   pplusvar    VARCHAR2 (4);
   /******************************************************************************
   NAME:       insertstatusupdatetrx
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  r mcbride        1. Created this procedure.
   1.1        02/07/2011  FE               1. Inserted fix for QC 425
   1.2        09/13/2012  JAL              1. Inserted fix for QC 518
   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     insertstatusupdatetrx
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       statusupdatetrx)

******************************************************************************/
BEGIN
   SELECT seq_statusupdatetrx.NEXTVAL
     INTO tmpvar
     FROM DUAL;

   INSERT INTO statusupdatetrx
               (statusupdatetrxid, homeenterpriselocationcode,
                currententerpriselocationcode, unitid, equipmentid,
                maintenancestatuscode, conditionstatuscode, startdate,
                starttime, workunitcode, eventid, workcenterevent,
                estimatedtimeincommission, partsplus, geoloccode,
                statusnarrative, locationcode, equipmentorganizationflightid,
                maintenancerepairpriority, armed,
                multipleconfigurationid, localoption,
                receivemaintenancelimitreport, hostunitdateandtime,
                transactionordinaldate, utcstartdateandtime
               )
        VALUES (tmpvar, p_homeelc,
                p_currentelc, p_unitid, p_equipmentid,
                p_maintenancestatuscode, p_conditionstatuscode, p_startdate,
                p_starttime, p_workunitcode, p_eventid, p_workcenterevent,
                p_estimatedtimeincommission, p_partsplus, p_geoloccode,
                p_statusnarrative, p_locationcode, p_organizationflightid,
                p_maintenancerepairpriority, p_armed,
                p_multipleconfigurationid, p_localoption,
                p_receivemaintlimitreport, p_hostunitdateandtime,
                p_transactionordinaldate, p_utcstartdateandtime
               );

   COMMIT;
   /*GET MOCID for gathering code ids*/
   get_mocid_by_elcunitid (p_homeelc, p_unitid, mocidvar);

   IF mocidvar IS NOT NULL
   THEN
      /*Get Aircraftid to make sure correct schedule line*/
      get_aircraftid_by_mocequipid (mocidvar, p_equipmentid, acidvar);

      IF acidvar IS NOT NULL
      THEN
         IF (p_workunitcode IS NOT NULL)
         THEN
            SELECT missiondesignseries, missiondesignseriesblock
              INTO mds, blk
              FROM aircraft
             WHERE aircraftid = acidvar;

            UPDATE aircraft
               SET statuswuclcn = p_workunitcode,
                   aircraftwucid =
                      (SELECT wucid
                         FROM (SELECT wucid
                                 FROM wuc
                                WHERE wuccode = p_workunitcode
                                  AND missiondesignseries = mds
                                  AND blocknumber = blk
                                  AND ROWNUM < 2))
             WHERE aircraftid = acidvar;
         END IF;

         COMMIT;

         IF (p_startdate IS NOT NULL)
         THEN
            UPDATE aircraft
               SET statusstartdate = p_startdate
             WHERE aircraftid = acidvar;
         END IF;

         COMMIT;

         IF (p_starttime IS NOT NULL)
         THEN
            UPDATE aircraft
               SET statusstarttime = p_starttime
             WHERE aircraftid = acidvar;
         END IF;

         COMMIT;

         IF (p_geoloccode IS NOT NULL)
         THEN
            UPDATE aircraft
               SET geoloccode = p_geoloccode,
                   staloccodeid =
                      (SELECT staloccodeid
                         FROM (SELECT staloccodeid
                                 FROM stationloccodes
                                WHERE stationloc = p_geoloccode AND ROWNUM < 2))
             WHERE aircraftid = acidvar;
         END IF;

         COMMIT;

         IF (p_locationcode IS NOT NULL)
         THEN
            UPDATE aircraft
               SET locationcode = p_locationcode,
                   locationid =
                      (SELECT locationid
                         FROM (SELECT locationid
                                 FROM locations
                                WHERE locationcode = p_locationcode
                                  AND elc = p_currentelc
                                  AND ROWNUM < 2))
             WHERE aircraftid = acidvar;
         END IF;

         COMMIT;

         IF (p_statusnarrative IS NOT NULL)
         THEN
            UPDATE aircraft
               SET statusnarrative = p_statusnarrative
             WHERE aircraftid = acidvar;
         END IF;

         COMMIT;

         IF (p_localoption IS NOT NULL)
         THEN
            UPDATE aircraft
               SET localoption = p_localoption
             WHERE aircraftid = acidvar;
         END IF;

         COMMIT;

         IF (p_maintenancerepairpriority IS NOT NULL)
         THEN
            UPDATE aircraft
               SET priority = isnumeric (p_maintenancerepairpriority)
             WHERE aircraftid = acidvar;
         END IF;

         COMMIT;

         IF (p_armed IS NOT NULL)
         THEN
            IF (p_armed = 'Y')
            THEN
               UPDATE aircraft
                  SET arm_dearm = 1
                WHERE aircraftid = acidvar;
            ELSE
               UPDATE aircraft
                  SET arm_dearm = 0
                WHERE aircraftid = acidvar;
            END IF;
         END IF;

         COMMIT;

         IF (p_organizationflightid IS NOT NULL)
         THEN
            UPDATE aircraft
               SET localconfigid = p_organizationflightid
             WHERE aircraftid = acidvar;
         END IF;

         COMMIT;

         IF (p_multipleconfigurationid IS NOT NULL)
         THEN
            UPDATE aircraft
               SET multiconfigid = p_multipleconfigurationid
             WHERE aircraftid = acidvar;
         END IF;

         COMMIT;

         IF (p_eventid IS NOT NULL)
         THEN
            IF (p_workcenterevent IS NOT NULL)
            THEN
               UPDATE aircraft
                  SET openstatuseventjcn = p_eventid || p_workcenterevent
                WHERE aircraftid = acidvar;
            ELSE
               UPDATE aircraft
                  SET openstatuseventjcn = p_eventid
                WHERE aircraftid = acidvar;
            END IF;
         END IF;

         COMMIT;

         IF (p_maintenancestatuscode IS NOT NULL)
         THEN
            IF (p_conditionstatuscode IS NOT NULL)
            THEN
               UPDATE aircraft
                  SET conditioncodeid =
                         (SELECT condcodeid
                            FROM conditioncodes
                           WHERE conditioncode =
                                       p_maintenancestatuscode
                                    || p_conditionstatuscode
                             AND mocid = mocidvar)
                WHERE aircraftid = acidvar;
            ELSE
               UPDATE aircraft
                  SET conditioncodeid =
                         (SELECT condcodeid
                            FROM conditioncodes
                           WHERE trim(conditioncode) = p_maintenancestatuscode
                             AND mocid = mocidvar)
                WHERE aircraftid = acidvar;
            END IF;
         END IF;

         COMMIT;

         IF (p_maintenancestatuscode = 'FMC')
         THEN
             UPDATE aircraft
              SET etic = NULL,
                  statuswuclcn = NULL,
                  statusnarrative = NULL,
                  eticlastupdated = NULL,
                  aircraftwucid = NULL,
                  eticdatetime = NULL,
                  wuclastupdated = NULL,
				  openstatuseventjcn = NULL
              WHERE aircraftid = acidvar;
         END IF;

         COMMIT;

         IF (p_estimatedtimeincommission IS NOT NULL)
         THEN
            UPDATE aircraft
               SET etic = p_estimatedtimeincommission
             WHERE aircraftid = acidvar;
         END IF;

         COMMIT;

         IF (p_partsplus IS NOT NULL)
         THEN
            IF (LENGTH (p_partsplus) = 4)
            THEN
               pplusvar := p_partsplus;

               UPDATE aircraft
                  SET etic = 'PARTS' || p_partsplus
                WHERE aircraftid = acidvar;
            ELSE
               IF (LENGTH (p_partsplus) = 9)
               THEN
                  pplusvar := SUBSTR (p_partsplus, 6, 4);
               END IF;

               UPDATE aircraft
                  SET etic = p_partsplus
                WHERE aircraftid = acidvar;
            END IF;
         ELSE
            pplusvar := NULL;
         END IF;

         COMMIT;

         INSERT INTO aircraftstatusupdate
                     (statusupdateid, unitid, equipmentid,
                      maintenancestatuscode, conditionstatuscode,
                      statusstartdate, statusstarttime, workunitcode,
                      openstatusevent,
                      estimatedtimeincommission, partsplus,
                      statusnarrative, LOCATION,
                      configuration, priority,
                      arm, multipleconfigid, localoption,
                      aircraftid, geoloccode
                     )
              VALUES (seq_statusupdate.NEXTVAL, p_unitid, p_equipmentid,
                      p_maintenancestatuscode, p_conditionstatuscode,
                      p_startdate, p_starttime, p_workunitcode,
                      p_eventid || NVL (p_workcenterevent, ''),
                      p_estimatedtimeincommission, pplusvar,
                      p_statusnarrative, p_locationcode,
                      p_organizationflightid, p_maintenancerepairpriority,
                      p_armed, p_multipleconfigurationid, p_localoption,
                      acidvar, p_geoloccode
                     );

         COMMIT;
      END IF;
   END IF;
         emoc_cache.updatechangenotification('aircraft'||TO_CHAR(acidvar), 0);
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END insertstatusupdatetrx;

CREATE PROCEDURE                 "EMOC3"."SPUPDATEMAINTENANCESTATUS3" (
   aircraftidin                 aircraft.aircraftid%TYPE,
   crewchiefidin                aircraft.crewchiefid%TYPE,
   fcfin                        aircraft.fcf%TYPE,
   ocfin                        aircraft.ocf%TYPE,
   qviin                        aircraft.qvi%TYPE,
   serialnumberin               aircraft.serialnumber%TYPE,
   lastphasedatein              VARCHAR,
   phaseunitsin                 aircraft.phaseunits%TYPE,
   firstofficialin              aircraft.firstofficial%TYPE,
   secondofficialin             aircraft.secondofficial%TYPE,
   possessioncodeidin           aircraft.possessionid%TYPE,
   possessioncodedtin           VARCHAR,
   eticin                       aircraft.etic%TYPE,
   priorityin                   aircraft.priority%TYPE,
   squadronidin                 aircraft.squadronid%TYPE,
   conditioncodeidin            aircraft.conditioncodeid%TYPE,
   hangarqueenstatusidin        aircraft.hangerqueenstatus%TYPE,
   crewchieflastupdatedin       VARCHAR,
   teststatuslastupdatedin      VARCHAR,
   serialnumberlastupdatedin    VARCHAR,
   phasedatelastupdatedin       VARCHAR,
   impoundslastupdatedin        VARCHAR,
   posscodelastupdatedin        VARCHAR,
   squadronlastupdatedin        VARCHAR,
   conditioncodelastupdatedin   VARCHAR,
   eticlastupdatedin            VARCHAR,
   hqstatuslastupdatedin        VARCHAR,
   prioritylastupdatedin        VARCHAR,
   localconfigidin              aircraft.localconfigid%TYPE,
   multiconfigidin              aircraft.multiconfigid%TYPE,
   localoptionin                aircraft.localoption%TYPE,
   wucidin                      aircraft.aircraftwucid%TYPE,
   remarksin                    remarks.remarks%TYPE,
   aircraftmdsidin              aircraft.aircraftmdsid%TYPE,
   statusstartdatein            aircraft.statusstartdate%TYPE,
   statusstarttimein            aircraft.statusstarttime%TYPE,
   statusnarrativein            aircraft.statusnarrative%TYPE,
   arm_dearmin                  aircraft.arm_dearm%TYPE,
   statuswuclcnin               aircraft.statuswuclcn%TYPE,
   openstatuseventjcnin         aircraft.openstatuseventjcn%TYPE
)
AS
   condcode   INTEGER;
   remid      INTEGER;
   row_id     INTEGER;
BEGIN
--delete etics from writeups when conditioncode changes
   SELECT conditioncodeid
     INTO condcode
     FROM aircraft
    WHERE aircraftid = aircraftidin;

--deal with remarks
--determine if remarks id exists
   SELECT aircraft.remarksid
     INTO remid
     FROM aircraft
    WHERE aircraftid = aircraftidin;

--if remarks id exists and user is updating remarks field with value
   IF (remid IS NOT NULL AND remarksin IS NOT NULL)
   THEN
      UPDATE remarks
         SET remarks = remarksin,
             remarksdate = SYSDATE
       WHERE remarks.remarksid = remid;

      UPDATE aircraft
         SET remarkslastupdated = SYSDATE
       WHERE aircraftid = aircraftidin;
   END IF;

--if remarks id exists and user is updating remarks field with null
   IF (remid IS NOT NULL AND remarksin IS NULL)
   THEN
      UPDATE aircraft
         SET remarksid = NULL
       WHERE aircraftid = aircraftidin;

      UPDATE aircraft
         SET remarkslastupdated = SYSDATE
       WHERE aircraftid = aircraftidin;

      DELETE FROM remarks
            WHERE remarksid = remid;
   END IF;

--if remarks id is null and user is updating remarks field with value
   IF (remid IS NULL AND remarksin IS NOT NULL)
   THEN
--2.0.6 A. Mitchell - Modified to use ADD_REMARKS SP (for Sequence)
      SELECT seq_remarks.NEXTVAL
        INTO row_id
        FROM DUAL;

      add_remarks (row_id, remarksin);

/*SELECT NVL(MAX(REMARKS.REMARKSID), 0)
INTO ROW_ID
FROM REMARKS;

INSERT INTO REMARKS(REMARKSID, REMARKS, REMARKSDATE)
VALUES (ROW_ID + 1, REMARKSIN, SYSDATE);
*/
-- end 2.0.6 modification
      UPDATE aircraft
         SET remarksid = row_id                     --+ 1 (2.0.6 modification)
       WHERE aircraftid = aircraftidin;
   END IF;

   UPDATE aircraft
      SET crewchiefid = crewchiefidin,
          fcf = fcfin,
          ocf = ocfin,
          qvi = qviin,
          serialnumber = serialnumberin,
          phasedate = TO_DATE (lastphasedatein, 'MM/DD/YYYY HH24:MI:SS'),
          phaseunits = phaseunitsin,
          firstofficial = firstofficialin,
          secondofficial = secondofficialin,
          possessionid = possessioncodeidin,
          possdatetime = TO_DATE (possessioncodedtin, 'MM/DD/YYYY HH24:MI:SS'),
          etic = eticin,
          priority = priorityin,
          squadronid = squadronidin,
          conditioncodeid = conditioncodeidin,
          hangerqueenstatus = hangarqueenstatusidin,
          crewchieflastupdated =
                     TO_DATE (crewchieflastupdatedin, 'MM/DD/YYYY HH24:MI:SS'),
          teststatuslastupdated =
                    TO_DATE (teststatuslastupdatedin, 'MM/DD/YYYY HH24:MI:SS'),
          serialnumberlastupdated =
                  TO_DATE (serialnumberlastupdatedin, 'MM/DD/YYYY HH24:MI:SS'),
          phasedatelastupdated =
                     TO_DATE (phasedatelastupdatedin, 'MM/DD/YYYY HH24:MI:SS'),
          impoundslastupdated =
                      TO_DATE (impoundslastupdatedin, 'MM/DD/YYYY HH24:MI:SS'),
          possessioncodelastupdated =
                      TO_DATE (posscodelastupdatedin, 'MM/DD/YYYY HH24:MI:SS'),
          squadronlastupdated =
                      TO_DATE (squadronlastupdatedin, 'MM/DD/YYYY HH24:MI:SS'),
          conditioncodelastupdated =
                 TO_DATE (conditioncodelastupdatedin, 'MM/DD/YYYY HH24:MI:SS'),
          eticlastupdated =
                          TO_DATE (eticlastupdatedin, 'MM/DD/YYYY HH24:MI:SS'),
          hqstatuslastupdated =
                      TO_DATE (hqstatuslastupdatedin, 'MM/DD/YYYY HH24:MI:SS'),
          prioritylastupdated =
                      TO_DATE (prioritylastupdatedin, 'MM/DD/YYYY HH24:MI:SS'),
          localconfigid = localconfigidin,
          multiconfigid = multiconfigidin,
          localoption = localoptionin,
          aircraftwucid = wucidin,
          aircraftmdsid = aircraftmdsidin,
          statusstartdate = statusstartdatein,
          statusstarttime = statusstarttimein,
          statusnarrative = statusnarrativein,
          arm_dearm = arm_dearmin,
          statuswuclcn = statuswuclcnin,
          openstatuseventjcn = openstatuseventjcnin
    WHERE aircraftid = aircraftidin;

--set etic in pacer writeup
   UPDATE writeups
      SET etic = eticin
    WHERE writeups.aircraftid = aircraftidin
      AND writeups.correctedtime IS NULL
      AND writeups.pacer = 1;
END spupdatemaintenancestatus3;

CREATE PROCEDURE                 "EMOC3"."SPUPDATEWRITEUP" (
aircraftidin aircraft.aircraftid%TYPE,
eventnumberin writeups.jcn%TYPE,
symbolidin writeups.symbolid%TYPE,
pacerin writeups.pacer%TYPE,
writeuptimein VARCHAR,
eticin writeups.etic%TYPE,
wucidin writeups.wucid%TYPE,
discrepancyin writeups.discrepancy%TYPE,
correctedin writeups.corrected%TYPE,
correctedtimein VARCHAR,
correctiveactionin writeups.correctiveaction%TYPE,
conditioncodeidin INTEGER,
writeupidin INTEGER
)
/***********************************************
   NAME:       SPUPDATEWRITEUP
   PURPOSE:    Updates Writeups, Sets ETIC/Pacer if applicable

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        6/24/13      JACL            1. Updated Procedure, allow user to set pacer.

************************************************/
AS
et VARCHAR (15);

BEGIN
UPDATE writeups
SET writeups.jcn = eventnumberin,
writeups.symbolid = symbolidin,
writeups.pacer = pacerin,
writeups.writeuptime =
TO_DATE (writeuptimein, 'MM/DD/YYYY HH24:MI:SS'),
writeups.etic = eticin,
writeups.wucid = wucidin,
writeups.discrepancy = discrepancyin,
writeups.corrected = correctedin,
writeups.correctedtime =
TO_DATE (correctedtimein, 'MM/DD/YYYY HH24:MI:SS'),
writeups.correctiveaction = correctiveactionin
WHERE ((aircraftid = aircraftidin) AND (writeupid = writeupidin));
COMMIT;

--case where record updated to be pacer writeup, make other records for that aircraft non-pacer records

IF pacerin = 1
THEN
UPDATE writeups
SET pacer = 0
WHERE aircraftid = aircraftidin AND writeupid NOT IN writeupidin;
END IF;
COMMIT;

--Always update aircraft table with pacer writeup's etic
--update etic

SELECT etic
INTO et
FROM (SELECT etic
FROM writeups
WHERE aircraftid = aircraftidin
AND correctedtime IS NULL
AND pacer = 1
AND ROWNUM < 2
ORDER BY writeups.writeuptime DESC);
IF (et IS NOT NULL)
THEN
UPDATE aircraft
SET etic = et
WHERE aircraft.aircraftid = aircraftidin;
END IF;
END SPUPDATEWRITEUP;

CREATE PROCEDURE                 "EMOC3"."UPDATE_FLYBOARD" (
SCHEDULEIDIN      SCHEDULE.SCHEDULEID%TYPE,
SORTIENUMIN  	 	  SCHEDULE.SORTIENUM%TYPE,
CALLSIGNIN		  	  SCHEDULE.CALLSIGN%TYPE,
PILOTIDIN			  SCHEDULE.PILOTID%TYPE,
AREAIDIN			  SCHEDULE.AREAID%TYPE,
AREAARRIVETIMEIN	  SCHEDULE.AREAARRIVETIME%TYPE,
AREALEAVETIMEIN	  	  SCHEDULE.AREALEAVETIME%TYPE,
SCHEDULEREMARKSIN	  REMARKS.REMARKS%TYPE,
MAINTREMARKSIN REMARKS.REMARKS%TYPE,
CONFIGCODEIN		  SCHEDULE.CONFIGCODE%TYPE,
WXCODEIDIN        SCHEDULE.WXCODEID%TYPE,
ACTUALTAKEOFFIN   SCHEDULE.ACTUALTAKEOFF%TYPE,
ACTUALLANDINGIN   SCHEDULE.ACTUALLANDING%TYPE,
ADJTAKEOFFIN      SCHEDULE.ADJTAKEOFF%TYPE,
ADJLANDINGIN      SCHEDULE.ADJLANDING%TYPE,
LANDINGCODEIDIN   SCHEDULE.LANDINGCODEID%TYPE,
BLOCKNUMBERIN     SCHEDULE.BLOCKNUMBER%TYPE,
CAUSECODEIDIN        SCHEDULE.CAUSECODEID%TYPE
)
/******************************************************************************
   NAME:       UPDATE_FLYBOARD
   PURPOSE:    Updates a schedule line.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        10/3/03      A.Mitchell       1. Created this procedure.
   1.1        10/23/03     A.Mitchell       2. Added BLOCKNUMBER for nonIMDS locations
                                               so they could use blocks
   2.0		  03/26/13     JACL				3. Edit Cause Code from Flyboard manually
   PARAMETERS:
   INPUT:
   OUTPUT:
   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/
AS

REMARKID NUMBER;

BEGIN

	 --GET REMARK, IF ONE EXISTS
	 SELECT SCHEDULEREMARKS
	 INTO REMARKID
	 FROM SCHEDULE
	 WHERE SCHEDULEID = SCHEDULEIDIN;


	 IF REMARKID IS NULL
	 THEN --EXISTS, NOW UPDATE
	  	    BEGIN
		   		 IF  LENGTH(SCHEDULEREMARKSIN) > 0 OR SCHEDULEREMARKSIN IS NOT NULL THEN
				 	BEGIN
						 SELECT SEQ_REMARKS.NEXTVAL
						 INTO   REMARKID
						 FROM   DUAL;
						 ADD_REMARKS (REMARKID, SCHEDULEREMARKSIN);
						 UPDATE SCHEDULE SET SCHEDULEREMARKS = REMARKID WHERE SCHEDULEID = SCHEDULEIDIN;
					END;
				 END IF;
	        END;
	 ELSE
			BEGIN
				 IF  LENGTH(SCHEDULEREMARKSIN) > 0 OR SCHEDULEREMARKSIN IS NOT NULL THEN
				    BEGIN
		    	  	  UPDATE REMARKS SET REMARKS.REMARKSDATE = SYSDATE, REMARKS.REMARKS = SCHEDULEREMARKSIN WHERE REMARKSID = REMARKID;
				    END;
				 ELSE
				    BEGIN
				      UPDATE SCHEDULE SET SCHEDULEREMARKS = NULL WHERE SCHEDULEID = SCHEDULEIDIN;
			 	   	  DELETE REMARKS WHERE REMARKSID = REMARKID;
					END;
				 END IF;
			END;
	 END IF;

	 --GET REMARK, IF ONE EXISTS
	 SELECT MAINTREMARKS
	 INTO REMARKID
	 FROM SCHEDULE
	 WHERE SCHEDULEID = SCHEDULEIDIN;


	 IF REMARKID IS NULL
	 THEN --EXISTS, NOW UPDATE
	  	    BEGIN
		   		 IF  LENGTH(MAINTREMARKSIN) > 0 OR MAINTREMARKSIN IS NOT NULL THEN
				 	BEGIN
						 SELECT SEQ_REMARKS.NEXTVAL
						 INTO   REMARKID
						 FROM   DUAL;
						 ADD_REMARKS (REMARKID, MAINTREMARKSIN);
						 UPDATE SCHEDULE SET MAINTREMARKS = REMARKID WHERE SCHEDULEID = SCHEDULEIDIN;
					END;
				 END IF;
	        END;
	 ELSE
			BEGIN
				 IF  LENGTH(MAINTREMARKSIN) > 0 OR MAINTREMARKSIN IS NOT NULL THEN
				    BEGIN
		    	  	  UPDATE REMARKS SET REMARKS.REMARKSDATE = SYSDATE, REMARKS.REMARKS = MAINTREMARKSIN WHERE REMARKSID = REMARKID;
				    END;
				 ELSE
				    BEGIN
					  UPDATE SCHEDULE SET MAINTREMARKS = NULL WHERE SCHEDULEID = SCHEDULEIDIN;
			 	   	  DELETE REMARKS WHERE REMARKSID = REMARKID;
					END;
				 END IF;
			END;
	 END IF;

	 UPDATE SCHEDULE SET
			SORTIENUM = SORTIENUMIN,
			CALLSIGN = CALLSIGNIN,
			AREAID = AREAIDIN,
			AREAARRIVETIME = AREAARRIVETIMEIN,
			AREALEAVETIME = AREALEAVETIMEIN,
			PILOTID = PILOTIDIN,
			CONFIGCODE = CONFIGCODEIN,
			WXCODEID = WXCODEIDIN,
			ACTUALTAKEOFF = ACTUALTAKEOFFIN,
			ACTUALLANDING = ACTUALLANDINGIN,
			ADJTAKEOFF = ADJTAKEOFFIN,
			ADJLANDING = ADJLANDINGIN,
	    LANDINGCODEID = LANDINGCODEIDIN,
	    BLOCKNUMBER = BLOCKNUMBERIN,
		CAUSECODEID = CAUSECODEIDIN
		WHERE SCHEDULEID = SCHEDULEIDIN;

END UPDATE_FLYBOARD;

CREATE PROCEDURE             "EMOC3"."GET_CAMS_SCHEDULE_FOR_USER"  (
USERIDIN      USERS.USERID%TYPE,
MOCIDIN          WINGS.MOCID%TYPE,
P_CURSOR OUT EMOC_TYPES.EMOC_CURSOR
)
AS
/******************************************************************************
   NAME:       GET_CAMS_SCHEDULE_FOR_USER
   PURPOSE:

   REVISIONS:
   Ver        Date           Author           Description
   ---------  ----------        ---------------  ------------------------------------
   1.0      12/30/2006   r mcbride       1. Created this procedure.
   1.1      02/07/2011   FE              1. Added fix for QC 460

   NOTES:

******************************************************************************/
BEGIN

  --Use to create CAMS 174 transactions for each Unit/MDS at specific date/time
  OPEN P_CURSOR FOR
  SELECT DISTINCT AIRCRAFTMDS, WINGNAME, ELC, wings.UNITID, WORKCENTERCODE, flights.SQUADRONID, SHORTNAME || '/' || wings.UNITID || WORKCENTERCODE || '/' || AIRCRAFTMDS "SQFLIGHT"
  FROM emoc3.AIRCRAFT AC
  JOIN emoc3.AIRCRAFTMDS MDS ON AC.AIRCRAFTMDSID = MDS.AIRCRAFTMDSID
  JOIN emoc3.SQUADRONS SQ ON AC.SQUADRONID = SQ.SQUADRONID
  JOIN emoc3.WINGS ON WINGS.WINGID = SQ.WINGID
  JOIN emoc3.FLIGHTS ON FLIGHTS.SQUADRONID = SQ.SQUADRONID
  JOIN emoc3.WORKCENTERS WK ON WK.WORKCENTERID = FLIGHTS.WORKCENTERID
  JOIN emoc3.PERMISSIONS ON PERMISSIONS.SQUADRONID = SQ.SQUADRONID
  JOIN emoc3.USERS ON USERS.USERID = PERMISSIONS.USERID
Where emoc3.wings.mocid = MOCIDIN
AND PERMISSIONS.EMOCROLE = 1 --updater role
ORDER BY SQFLIGHT;

END GET_CAMS_SCHEDULE_FOR_USER;

CREATE PROCEDURE         "EMOC3"."ADDAIRCRAFT2" (
   aircraftyearin            aircraft.aircraftyear%TYPE,
   statuscodeidin            INTEGER,
   equipidin                 VARCHAR,
   locationidin              INTEGER,
   serialnumberin            VARCHAR,
   tailnumberin              VARCHAR,
   aircraftmdsidin           aircraft.aircraftmdsid%TYPE,
   conditioncodeidin         INTEGER,
   firesymbolidin            INTEGER,
   flightidin                aircraft.flightid%TYPE,
   fuelstatusidin            INTEGER,
   possessionidin            INTEGER,
   squadronidin              aircraft.squadronid%TYPE,
   aircraftidout       OUT   aircraft.aircraftid%TYPE
)
AS
   stations   INTEGER := 0;
   engines    INTEGER := 0;
   newrowid   INTEGER;
   loops      INTEGER := 0;
BEGIN
   SELECT seq_aircraft.NEXTVAL
     INTO aircraftidout
     FROM DUAL;

   INSERT INTO aircraft
               (aircraftid, aircraftmdsid, tailnumber, shorttailnumber,
                aircraftyear, misequipid, serialnumber, squadronid,
                flightid, conditioncodeid, firesymbolid,
                fuelstatusid, locationid, possessionid, statuscodeid
               )
        VALUES (aircraftidout, aircraftmdsidin, tailnumberin, tailnumberin,
                aircraftyearin, equipidin, serialnumberin, squadronidin,
                flightidin, conditioncodeidin, firesymbolidin,
                fuelstatusidin, locationidin, possessionidin, statuscodeidin
               );

   SELECT numberofengines, numberofstations
     INTO engines, stations
     FROM aircraftmds
    WHERE aircraftmdsid = aircraftmdsidin;

   IF engines > 0
   THEN
      BEGIN
         loops := 0;

         WHILE loops < engines
         LOOP
            SELECT NVL (MAX (aircraftenginedata.enginedataid), 0)
              INTO newrowid
              FROM aircraftenginedata;

            INSERT INTO aircraftenginedata
                        (enginedataid, aircraftid, enginenumber
                        )
                 VALUES (newrowid + 1, aircraftidout, loops + 1
                        );

            loops := loops + 1;
         END LOOP;
      END;
   END IF;
END addaircraft2;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADDAIRCRAFT2_MOC" (
   aircraftyearin            aircraft.aircraftyear%TYPE,
   statuscodeidin            INTEGER,
   equipidin                 VARCHAR,
   locationidin              INTEGER,
   serialnumberin            VARCHAR,
   tailnumberin              VARCHAR,
   aircraftmdsidin           aircraft.aircraftmdsid%TYPE,
   conditioncodeidin         INTEGER,
   firesymbolidin            INTEGER,
   flightidin                aircraft.flightid%TYPE,
   fuelstatusidin            INTEGER,
   possessionidin            INTEGER,
   squadronidin              aircraft.squadronid%TYPE,
   mocidin                   aircraft.mocid%TYPE,
   aircraftidout       OUT   aircraft.aircraftid%TYPE,
   countrycodein             aircraft.countrycode%TYPE
)
AS
   stations   INTEGER := 0;
   engines    INTEGER := 0;
   newrowid   INTEGER;
   loops      INTEGER := 0;
BEGIN
   SELECT seq_aircraft.NEXTVAL
     INTO aircraftidout
     FROM DUAL;

   INSERT INTO aircraft
               (aircraftid, aircraftmdsid, tailnumber, shorttailnumber,
                aircraftyear, misequipid, serialnumber, squadronid,
                flightid, conditioncodeid, firesymbolid,
                fuelstatusid, locationid, possessionid, statuscodeid,
                mocid, countrycode
               )
        VALUES (aircraftidout, aircraftmdsidin, tailnumberin, tailnumberin,
                aircraftyearin, equipidin, serialnumberin, squadronidin,
                flightidin, conditioncodeidin, firesymbolidin,
                fuelstatusidin, locationidin, possessionidin, statuscodeidin,
                mocidin, countrycodein
               );

   SELECT numberofengines, numberofstations
     INTO engines, stations
     FROM aircraftmds
    WHERE aircraftmdsid = aircraftmdsidin;

   IF engines > 0
   THEN
      BEGIN
         loops := 0;

         WHILE loops < engines
         LOOP
            SELECT NVL (MAX (aircraftenginedata.enginedataid), 0)
              INTO newrowid
              FROM aircraftenginedata;

            INSERT INTO aircraftenginedata
                        (enginedataid, aircraftid, enginenumber
                        )
                 VALUES (newrowid + 1, aircraftidout, loops + 1
                        );

            loops := loops + 1;
         END LOOP;
      END;
   END IF;
END addaircraft2_moc;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADDAIRCRAFTENGINEDATA" (
   aircraftidin   NUMBER,
   mdsid          NUMBER
)
AS
   engines    NUMBER;
   newrowid   NUMBER;
   loops      NUMBER;
   tmpvar     NUMBER;
/******************************************************************************
   NAME:       addaircraftenginedata
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/30/2006   r mcbride       1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     addaircraftenginedata
      Sysdate:         12/30/2006
      Date and Time:   12/30/2006, 8:28:59 AM, and 12/30/2006 8:28:59 AM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
   SELECT numberofengines
     INTO engines
     FROM aircraftmds
    WHERE aircraftmdsid = mdsid;

   IF engines > 0
   THEN
      BEGIN
         loops := 0;

         WHILE loops < engines
         LOOP
            SELECT COUNT (*)
              INTO tmpvar
              FROM aircraftenginedata
             WHERE aircraftid = aircraftidin AND enginenumber = loops + 1;

            IF (tmpvar = 0)
            THEN
               SELECT NVL (MAX (aircraftenginedata.enginedataid), 0)
                 INTO newrowid
                 FROM aircraftenginedata;

               INSERT INTO aircraftenginedata
                           (enginedataid, aircraftid, enginenumber
                           )
                    VALUES (newrowid + 1, aircraftidin, loops + 1
                           );
            END IF;

            loops := loops + 1;
         END LOOP;

         COMMIT;
      END;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END addaircraftenginedata;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADDAIRCRAFTFROMADMIN" (
   aircraftyearin                   aircraft.aircraftyear%TYPE,
   armin                            INTEGER,
   assignmentstatuscodein           CHAR,
   conditionstatusin                VARCHAR,
   localconfigidin                  VARCHAR,
   crewchiefin                      VARCHAR,
   equipidin                        VARCHAR,
   eticin                           VARCHAR,
   eticdatetimein                   DATE,
   lastflydatein                    DATE,
   locationin                       VARCHAR,
   localoptionin                    VARCHAR,
   maintenancestatuscodein          VARCHAR,
   commandcodein                    VARCHAR,
   mdsblocknumberin                 VARCHAR,
   missiondesignseriesin            VARCHAR,
   multiconfigidin                  VARCHAR,
   owningworkcenterin               VARCHAR,
   possessioncodein                 VARCHAR,
   priorityin                       INTEGER,
   serialnumberin                   VARCHAR,
   shorttailnumberin                VARCHAR,
   statcodetimein                   DATE,
   statusdatein                     VARCHAR,
   statuseticin                     VARCHAR,
   statusjobcontrolnumberin         VARCHAR,
   statusnarrativein                VARCHAR,
   statustimein                     VARCHAR,
   statusworkunitcodein             VARCHAR,
   tailnumberin                     VARCHAR,
   unitidin                         VARCHAR,
   aircraftmdsidin                  aircraft.aircraftmdsid%TYPE,
   aircraftwucidin                  INTEGER,
   conditioncodeidin                INTEGER,
   crewchiefidin                    INTEGER,
   firesymbolidin                   INTEGER,
   flightidin                       aircraft.flightid%TYPE,
   fuelstatusidin                   INTEGER,
   locationidin                     INTEGER,
   possessionidin                   INTEGER,
   staloccodeidin                   INTEGER,
   squadronidin                     aircraft.squadronid%TYPE,
   mocidin                          aircraft.mocid%TYPE,
   statuscodeidin					aircraft.STATUSCODEID%TYPE,
   aircraftidout              OUT   aircraft.aircraftid%TYPE
)
AS
   stations   INTEGER := 0;
   engines    INTEGER := 0;
   newrowid   INTEGER;
   loops      INTEGER := 0;
BEGIN
   SELECT seq_aircraft.NEXTVAL
     INTO aircraftidout
     FROM DUAL;

   INSERT INTO aircraft
               (aircraftid, aircraftmdsid, tailnumber, shorttailnumber,
                aircraftyear, misequipid, serialnumber, squadronid,
                flightid, aircraftwucid, conditioncodeid,
                crewchiefid, firesymbolid, fuelstatusid, locationid,
                possessionid, staloccodeid, etic, mocid, statuscodeid
               )
        VALUES (aircraftidout, aircraftmdsidin, tailnumberin, tailnumberin,
                aircraftyearin, equipidin, serialnumberin, squadronidin,
                flightidin, aircraftwucidin, conditioncodeidin,
                crewchiefidin, firesymbolidin, fuelstatusidin, locationidin,
                possessionidin, staloccodeidin, eticin, mocidin, statuscodeidin
               );

   SELECT numberofengines, numberofstations
     INTO engines, stations
     FROM aircraftmds
    WHERE aircraftmdsid = aircraftmdsidin;

   IF engines > 0
   THEN
      BEGIN
         loops := 0;

         WHILE loops < engines
         LOOP
            SELECT NVL (MAX (aircraftenginedata.enginedataid), 0)
              INTO newrowid
              FROM aircraftenginedata;

            INSERT INTO aircraftenginedata
                        (enginedataid, aircraftid, enginenumber
                        )
                 VALUES (newrowid + 1, aircraftidout, loops + 1
                        );

            loops := loops + 1;
         END LOOP;
      END;
   END IF;
/*************************************************
if stations > 0 then
   begin
         loops := 0;
         while loops < stations loop
            SELECT NVL(MAX(weaponsload.loadid), 0)
         INTO newrowid
         FROM weaponsload;
         insert into weaponsload (loadid,
              aircraftid, station, weaponsnumber) values (newrowid+1,
              AIRCRAFTIDOUT, loops+1, 0);
         loops := loops + 1;
      end loop;
   end;

end if;

*/
END addaircraftfromadmin;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADDBADATTEMPT" (usernamein users.username%TYPE)
IS
   nbadattempts   INTEGER;
BEGIN
   SELECT badattempts
     INTO nbadattempts
     FROM users
    WHERE LOWER (username) = LOWER (usernamein);

   IF (nbadattempts < 3)
   THEN
      UPDATE users
         SET badattempts = nbadattempts + 1
       WHERE LOWER (users.username) = LOWER (usernamein);
   END IF;
END addbadattempt;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADDIMDSCDBMICAP" (  
   equipidin        VARCHAR2,  
   elcin            VARCHAR2,  
   unitidin         VARCHAR2,  
   jcnin            VARCHAR2,  
   docnumberin      VARCHAR2,  
   nomenclaturein   VARCHAR2,  
   eddin            VARCHAR2,  
   issuedatein      VARCHAR2,  
   ujcin            VARCHAR2,  
   wucin            VARCHAR2  
)  
AS  
   mid        INTEGER;  
   micapid    INTEGER;  
   mocidvar   INTEGER;  
   acidvar    INTEGER;  
   wucidvar   INTEGER;  
BEGIN  
   /*GET MOCID */  
   get_mocid_by_elcunitid (elcin, unitidin, mocidvar);  
  
   IF (mocidvar IS NOT NULL)  
   THEN  
      get_aircraftid_by_mocequipid (mocidvar, equipidin, acidvar);  
  
      SELECT COUNT (*)  
        INTO mid  
        FROM micap  
       WHERE equipmentid = equipidin  
         AND enterpriselocationcode = elcin  
         AND unitid = unitidin  
         AND jobcontrolnumber = jcnin  
         AND documentnumber = docnumberin;  
  
      IF (mid > 0)  
      THEN  
         UPDATE micap  
            SET nomenclature = nomenclaturein,  
                estimateddeliverydate = eddin,  
                issuedate = issuedatein,  
                urgencyjustificationcode = ujcin,  
                workunitcode = wucin  
          WHERE equipmentid = equipidin  
            AND enterpriselocationcode = elcin  
            AND unitid = unitidin  
            AND jobcontrolnumber = jcnin  
            AND documentnumber = docnumberin;  
  
         COMMIT;  
      ELSE  
         SELECT NVL (MAX (micap.micapid), 0)  
           INTO mid  
           FROM micap;  
  
         INSERT INTO micap  
                     (micapid, equipmentid, enterpriselocationcode, unitid,  
                      jobcontrolnumber, documentnumber, nomenclature,  
                      estimateddeliverydate, issuedate,  
                      urgencyjustificationcode, workunitcode, aircraftid  
                     )  
              VALUES (mid + 1, equipidin, elcin, unitidin,  
                      jcnin, docnumberin, nomenclaturein,  
                      eddin, issuedatein,  
                      ujcin, wucin, acidvar  
                     );  
  
         COMMIT;  
  
         IF (LENGTH (wucin) > 0)  
         THEN  
            get_wucid_by_wucaircraftid (wucin, acidvar, wucidvar);  
         ELSE  
            wucidvar := NULL;  
         END IF;  
  
         spinsertwriteup (acidvar,  
                          jcnin,  
                          NULL,  
                          0,  
                          NULL,  
                          NULL,  
                          wucidvar,  
                          NULL,  
                          0,  
                          NULL  
                         );  
      END IF;  
   END IF;  
          emoc_cache.updatechangenotification('aircraft'||to_char(acidvar), 0);  
EXCEPTION  
   WHEN NO_DATA_FOUND  
   THEN  
      NULL;  
   WHEN OTHERS  
   THEN  
      -- Consider logging the error and then re-raise  
      RAISE;  
END addimdscdbmicap;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADDSTATUSUPDATEREC" (
   unitidin                        VARCHAR2,
   equipmentidin                   VARCHAR2,
   maintstatuscodein               VARCHAR2,
   condstatuscodein                VARCHAR2,
   statusstartdatein               VARCHAR2,
   statusstarttimein               VARCHAR2,
   workunitcodein                  VARCHAR2,
   jcnin                           VARCHAR2,
   eticin                          VARCHAR2,
   partsplusin                     VARCHAR2,
   statusnarrativein               VARCHAR2,
   configurationin                 VARCHAR2,
   priorityin                      VARCHAR2,
   armin                           VARCHAR2,
   multifigidin                    VARCHAR2,
   localoptionin                   VARCHAR2,
   enteredbyin                     NUMBER,
   aircraftidin                    NUMBER,
   updateid                  OUT   NUMBER,
   prevconditioncodeidin           NUMBER,
   prevstartdatein                 VARCHAR2,
   prevstarttimein                 VARCHAR2,
   prevwucin                       VARCHAR2,
   prevwucidin                     NUMBER,
   prevosein                       VARCHAR2,
   preveticin                      VARCHAR2,
   prevpartsplusin                 VARCHAR2,
   prevnarrativein                 VARCHAR2,
   prevmaintenancestatusin         VARCHAR2,
   prevconditionstatusin           VARCHAR2,
   prevconfigin                    VARCHAR2,
   prevpriorityin                  VARCHAR2,
   prevarmin                       VARCHAR2,
   prevmultifigidin                VARCHAR2,
   prevlocaloptionin               VARCHAR2,
   locationin                      VARCHAR2,
   prevlocationin                  VARCHAR2,
   locationidin                    NUMBER,
   prevlocationidin                NUMBER,
   geoloccodein                    VARCHAR2,
   prevgeoloccodein                VARCHAR2,
   mocidin                         NUMBER
)
AS
   username   VARCHAR2 (50);
   mdsidin    INTEGER;
   wucidin    INTEGER;
BEGIN
   SELECT seq_statusupdate.NEXTVAL
     INTO updateid
     FROM DUAL;

   SELECT users.fullname
     INTO username
     FROM users
    WHERE userid = enteredbyin;

   INSERT INTO aircraftstatusupdate
               (statusupdateid, unitid, equipmentid, maintenancestatuscode,
                conditionstatuscode, statusstartdate, statusstarttime,
                workunitcode, openstatusevent, estimatedtimeincommission,
                partsplus, statusnarrative, configuration, priority,
                arm, multipleconfigid, localoption, enteredby, aircraftid,
                prevconditioncodeid, prevstartdate, prevstarttime,
                prevwuc, prevose, prevetic, prevpartsplus,
                prevnarrative, prevmaintenancestatus,
                prevconditionstatus, prevconfig, prevpriority,
                prevarm, prevmultifigid, prevlocaloption, LOCATION,
                prevlocation, locationid, prevlocationid, geoloccode,
                prevgeoloccode,prevwucid
               )
        VALUES (updateid, unitidin, equipmentidin, maintstatuscodein,
                condstatuscodein, statusstartdatein, statusstarttimein,
                workunitcodein, jcnin, eticin,
                partsplusin, statusnarrativein, configurationin, priorityin,
                armin, multifigidin, localoptionin, username, aircraftidin,
                prevconditioncodeidin, prevstartdatein, prevstarttimein,
                prevwucin, prevosein, preveticin, prevpartsplusin,
                prevnarrativein, prevmaintenancestatusin,
                prevconditionstatusin, prevconfigin, prevpriorityin,
                prevarmin, prevmultifigidin, prevlocaloptionin, locationin,
                prevlocationin, locationidin, prevlocationidin, geoloccodein,
                prevgeoloccodein, prevwucidin
               );
/*
   IF (LENGTH (workunitcodein) > 0)
   THEN
      SELECT aircraftmdsid
        INTO mdsidin
        FROM aircraft
       WHERE aircraftid = aircraftidin;

      spinsertworkunitcode (workunitcodein,
                            '',
                            TO_CHAR (SYSDATE, 'MM/DD/YYYY HH24:MI:SS'),
                            NULL,
                            mdsidin,
                            TO_CHAR (SYSDATE, 'MM/DD/YYYY HH24:MI:SS'),
                            enteredbyin,
                            mocidin
                           );

      SELECT wucid
        INTO wucidin
        FROM wuc
       WHERE wuccode = workunitcodein AND aircraftmdsid = mdsidin;

      IF (wucidin IS NOT NULL)
      THEN
         UPDATE aircraft
            SET aircraftwucid = wucidin
          WHERE aircraftid = aircraftidin;
      END IF;
   END IF;
*/
END addstatusupdaterec;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADDWRITEUP" (
   aircraftidin         aircraft.aircraftid%TYPE,
   jcnin                writeups.jcn%TYPE,
   wid            OUT   NUMBER
)
AS
   row_id   NUMBER;
BEGIN
   SELECT NVL (MAX (writeups.writeupid), 0)
     INTO row_id
     FROM writeups;

   wid := row_id + 1;

   INSERT INTO writeups
               (writeupid, writeuptime, jcn, corrected, pacer, aircraftid,
                discrepancy,
                wucid,
                etic
               )
        VALUES (wid, SYSDATE, jcnin, 0, 0, aircraftidin,
                (SELECT statusnarrative
                   FROM aircraft
                  WHERE aircraftid = aircraftidin),
                (SELECT aircraftwucid
                   FROM aircraft
                  WHERE aircraftid = aircraftidin),
                (SELECT etic
                   FROM aircraft
                  WHERE aircraftid = aircraftidin)
               );
END addwriteup;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_AIRCRAFT" (
   tailnumberin     VARCHAR,
   squadronnamein   VARCHAR
)
AS
   counter       INTEGER;
   new_id        INTEGER;
   squadron_id   INTEGER;
BEGIN
   SELECT COUNT (aircraftid)
     INTO counter
     FROM aircraft, squadrons
    WHERE (    (aircraft.squadronid = squadrons.squadronid)
           AND (UPPER (squadrons.squadronname) = UPPER (squadronnamein))
           AND (aircraft.tailnumber = tailnumberin)
          );

   SELECT seq_aircraft.NEXTVAL
     INTO new_id
     FROM aircraft;

   SELECT squadronid
     INTO squadron_id
     FROM squadrons
    WHERE squadrons.squadronname = squadronnamein;

   IF (counter = 0)
   THEN
      INSERT INTO aircraft
                  (aircraftid, tailnumber, squadronid
                  )
           VALUES (new_id, tailnumberin, squadron_id
                  );
   END IF;
END add_aircraft;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_AIRCRAFTMDS" (
   aircraftmds              aircraftmds.aircraftmds%TYPE,
   numberofstations         aircraftmds.numberofstations%TYPE,
   numberofengines          aircraftmds.numberofengines%TYPE,
   timebetweenphase         aircraftmds.timebetweenphase%TYPE,
   defaultmds               aircraftmds.defaultaircrafttype%TYPE,
   phaseunit                aircraftmds.phaseunit%TYPE,
   blocknumber              aircraftmds.blocknumber%TYPE,
   acftmdstypecdin          aircraftmds.acftmdstypecd%TYPE,
   aircraftmdsid      OUT   aircraftmds.aircraftmdsid%TYPE
)
AS
BEGIN
   SELECT seq_aircraftmds.NEXTVAL
     INTO aircraftmdsid
     FROM DUAL;

   INSERT INTO aircraftmds
               (aircraftmdsid, aircraftmds, numberofstations,
                numberofengines, timebetweenphase, defaultaircrafttype,
                blocknumber, phaseunit, acftmdstypecd
               )
        VALUES (aircraftmdsid, aircraftmds, numberofstations,
                numberofengines, timebetweenphase, defaultmds,
                blocknumber, phaseunit, acftmdstypecdin
               );
END add_aircraftmds;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_AIRCRAFT_FROM_EXCEL" (
   insquadronid              aircraft.squadronid%TYPE,
   inshorttailnumber         aircraft.shorttailnumber%TYPE,
   outaircraftid        OUT   aircraft.aircraftid%TYPE
)
/******************************************************************************
   NAME:       ADD_AIRCRAFT_FROM_EXCEL
   PURPOSE:    Inserts an aircraft found in an Excel schedule line not
               already in the db.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        5/27/03      A.Mitchell       1. Created this procedure.
   1.1        10/1/03      A.Mitchell       2. Added MISEQUIPID
   PARAMETERS:
   INPUT:
   *SQUADRONID,
   *SHORTTAILNUMBER
   OUTPUT:
   *AIRCRAFTID
   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/
AS
   v_newaircraftid   NUMBER;
   v_mocid           NUMBER;
BEGIN
   --INCREMENT
   SELECT seq_aircraft.NEXTVAL
     INTO v_newaircraftid
     FROM DUAL;

   SELECT squadrons.mocid
     INTO v_mocid
     FROM squadrons
    WHERE squadrons.squadronid = insquadronid;

   INSERT INTO aircraft
               (aircraftid, squadronid, shorttailnumber, tailnumber,
                misequipid, mocid
               )
        VALUES (v_newaircraftid, insquadronid, inshorttailnumber, inshorttailnumber,
                'A' || inshorttailnumber, v_mocid
               );

   outaircraftid := v_newaircraftid;
END add_aircraft_from_excel;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_AREA" (
   area                    areas.area%TYPE,
   areadescription         areas.areadescription%TYPE,
   areaid            OUT   areas.areaid%TYPE
)
AS
BEGIN
   SELECT seq_areas.NEXTVAL
     INTO areaid
     FROM DUAL;

   INSERT INTO areas
               (areaid, area, areadescription
               )
        VALUES (areaid, area, areadescription
               );
END add_area;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_AREA_FROM_EXCEL" (
AREA       AREAS.AREA%TYPE,
MOCID     AREAS.MOCID%TYPE,
AREAID OUT      AREAS.AREAID%TYPE
)
/******************************************************************************
   NAME:       ADD_AREA_FROM_EXCEL
   PURPOSE:    Inserts an AREA found in an Excel schedule line not
         already in the db.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        5/27/03      A.Mitchell       1. Created this procedure.

   PARAMETERS:
   INPUT:
   *AREA
   OUTPUT:
   *AREAID
   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/
AS

NEWAREAID NUMBER;

BEGIN
  --INCREMENT
  SELECT SEQ_AREAS.NEXTVAL INTO NEWAREAID FROM DUAL;

  INSERT INTO AREAS (
  AREAID,
  AREA,
  MOCID
  )
    VALUES
 ( NEWAREAID,
  AREA,
  MOCID

 );
 AREAID := NEWAREAID;
END ADD_AREA_FROM_EXCEL;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_ARMAMENT" (
   station               armament.station%TYPE,
   aircraftmdsid         armament.aircraftmdsid%TYPE,
   ordnanceid            armament.ordnanceid%TYPE,
   armamentid      OUT   armament.armamentid%TYPE
)
AS
BEGIN
   SELECT seq_armament.NEXTVAL
     INTO armamentid
     FROM DUAL;

   INSERT INTO armament
               (armamentid, station, aircraftmdsid, ordnanceid
               )
        VALUES (armamentid, station, aircraftmdsid, ordnanceid
               );
END add_armament;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_ASSIGNMENT" (
   assignmentcode                assignmentcodes.assignmentcode%TYPE,
   assignmentdescription         assignmentcodes.assignmentdescription%TYPE,
   defaultassignment             assignmentcodes.defaultassignment%TYPE,
   assignmentid            OUT   assignmentcodes.assignmentcodeid%TYPE
)
AS
BEGIN
   SELECT seq_assignments.NEXTVAL
     INTO assignmentid
     FROM DUAL;

   INSERT INTO assignmentcodes
               (assignmentcodeid, assignmentcode, assignmentdescription,
                defaultassignment
               )
        VALUES (assignmentid, assignmentcode, assignmentdescription,
                defaultassignment
               );
END add_assignment;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_CAUSECODE" (
   causecode             causecodes.causecode%TYPE,
   description           causecodes.description%TYPE,
   causecodetype         causecodes.causecodetype%TYPE,
   camsinitflag          INTEGER,
   causecodeid     OUT   causecodes.causecodeid%TYPE
)
AS
BEGIN
   SELECT seq_causecodes.NEXTVAL
     INTO causecodeid
     FROM DUAL;

   INSERT INTO causecodes
               (causecodeid, causecode, description, causecodetype
               )
        VALUES (causecodeid, causecode, description, causecodetype
               );

   IF (camsinitflag = 1)
   THEN
      UPDATE causecodes
         SET camsinit = SYSDATE
       WHERE causecodeid = causecodeid;
   END IF;
END add_causecode;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_COLOR" (
   colorname          colors.colorname%TYPE,
   colorvalue         colors.colorvalue%TYPE,
   fontcolor          colors.fontcolor%TYPE,
   colorid      OUT   colors.colorid%TYPE
)
AS
BEGIN
   SELECT seq_colors.NEXTVAL
     INTO colorid
     FROM DUAL;

   INSERT INTO colors
               (colorid, colorname, colorvalue, fontcolor
               )
        VALUES (colorid, colorname, colorvalue, fontcolor
               );
END add_color;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_COLORRULE" (
   codetype             colorrules.codetype%TYPE,
   colorrank            colorrules.colorrank%TYPE,
   colorid              colorrules.colorid%TYPE,
   colorrulesid   OUT   colorrules.colorrulesid%TYPE
)
AS
BEGIN
   SELECT seq_colorrules.NEXTVAL
     INTO colorrulesid
     FROM DUAL;

   INSERT INTO colorrules
               (colorrulesid, codetype, colorrank, colorid
               )
        VALUES (colorrulesid, codetype, colorrank, colorid
               );
END add_colorrule;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_COMBATSCL" (
   combatscl           combatscls.combatscl%TYPE,
   combatsclid   OUT   combatscls.combatsclid%TYPE
)
AS
BEGIN
   SELECT seq_combatscls.NEXTVAL
     INTO combatsclid
     FROM DUAL;

   INSERT INTO combatscls
               (combatsclid, combatscl
               )
        VALUES (combatsclid, combatscl
               );
END add_combatscl;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_COMBATSCLRULE" (
   combatsclid           combatsclrules.combatsclid%TYPE,
   aircraftmdsid         combatsclrules.aircraftmdsid%TYPE,
   sclrulesid      OUT   combatsclrules.sclrulesid%TYPE
)
AS
BEGIN
   SELECT seq_combatsclrules.NEXTVAL
     INTO sclrulesid
     FROM DUAL;

   INSERT INTO combatsclrules
               (sclrulesid, combatsclid, aircraftmdsid
               )
        VALUES (sclrulesid, combatsclid, aircraftmdsid
               );
END add_combatsclrule;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_CONDITIONCODE" (
   conditioncode                conditioncodes.conditioncode%TYPE,
   conditiondescription         conditioncodes.conditiondescription%TYPE,
   defaultconditioncode         conditioncodes.defaultconditioncode%TYPE,
   condstatid                   conditioncodes.condstatid%TYPE,
   condcodeid             OUT   conditioncodes.condcodeid%TYPE
)
AS
BEGIN
   SELECT seq_conditioncodes.NEXTVAL
     INTO condcodeid
     FROM DUAL;

   INSERT INTO conditioncodes
               (condcodeid, conditioncode, conditiondescription,
                defaultconditioncode, condstatid
               )
        VALUES (condcodeid, conditioncode, conditiondescription,
                defaultconditioncode, condstatid
               );
END add_conditioncode;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_CONDITIONSTATUS" (
   conditionstatus         conditionstatus.conditionstatus%TYPE,
   conditionlevel          conditionstatus.conditionlevel%TYPE,
   flyable                 conditionstatus.flyable%TYPE,
   colorid                 conditionstatus.colorid%TYPE,
   condstatid        OUT   conditionstatus.condstatid%TYPE
)
AS
BEGIN
   SELECT seq_conditionstatus.NEXTVAL
     INTO condstatid
     FROM DUAL;

   INSERT INTO conditionstatus
               (condstatid, conditionstatus, conditionlevel, flyable, colorid
               )
        VALUES (condstatid, conditionstatus, conditionlevel, flyable, colorid
               );
END add_conditionstatus;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_CREWCHIEF" (
   crewchiefin                crewchiefs.crewchief%TYPE,
   defaultcrewchiefin         crewchiefs.defaultcrewchief%TYPE,
   picturein                  crewchiefs.picture%TYPE,
   rankidin                   crewchiefs.rankid%TYPE,
   crewchiefid          OUT   crewchiefs.crewchiefid%TYPE
)
AS
BEGIN
   SELECT seq_crewchiefs.NEXTVAL
     INTO crewchiefid
     FROM DUAL;

   INSERT INTO crewchiefs
               (crewchiefid, crewchief, defaultcrewchief, picture,
                rankid
               )
        VALUES (crewchiefid, crewchiefin, defaultcrewchiefin, picturein,
                rankidin
               );
END add_crewchief;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_CREWCHIEF_FROMIMDS" (aircraftidin NUMBER,
                                                     mocidin      NUMBER,
                                                     crewchiefin  crewchiefs.crewchief%TYPE) AS
  gradecodevar   VARCHAR2(3);
  crewchiefvar   VARCHAR2(50);
  crewchiefidvar NUMBER;
  tmpvar         NUMBER;
BEGIN
  IF (LENGTH(crewchiefin) > 3) THEN
    gradecodevar := SUBSTR(crewchiefin, 1, 3);
    crewchiefvar := SUBSTR(crewchiefin, 4);

    SELECT COUNT(*)
      INTO tmpvar
      FROM crewchiefs
     WHERE RTRIM(crewchief) = RTRIM(crewchiefvar)
       AND mocid = mocidin;

    IF (tmpvar = 0) THEN
      SELECT seq_crewchiefs.NEXTVAL INTO crewchiefidvar FROM DUAL;

      INSERT INTO crewchiefs
        (crewchiefid, crewchief, defaultcrewchief, picture, rankid)
      VALUES
        (crewchiefidvar,
         crewchiefvar,
         0,
         NULL,
         (SELECT rankid
            FROM ranks r, gradecodes g
           WHERE g.rankcode = r.rankcode
             AND r.mocid = mocidin));

      COMMIT;
    ELSE
      SELECT crewchiefid
        INTO crewchiefidvar
        FROM crewchiefs
       WHERE RTRIM(crewchief) = RTRIM(crewchiefvar)
         AND mocid = mocidin;
    END IF;

    UPDATE aircraft
       SET crewchiefid = crewchiefidvar
     WHERE aircraftid = aircraftidin;
  END IF;
END add_crewchief_fromimds;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_CUSTOMDATA" (
   labelin               customdata.customdatalabel%TYPE,
   descriptionin         customdata.customdatadescription%TYPE,
   typein                customdata.customdatatype%TYPE,
   widthin               customdata.customdatawidth%TYPE,
   bgcolorin             customdata.bgcolorvalue%TYPE,
   fontcolorin           customdata.fontcolor%TYPE,
   idout           OUT   customdata.customdataid%TYPE
)
AS
BEGIN
   SELECT seq_customdata.NEXTVAL
     INTO idout
     FROM DUAL;

   INSERT INTO customdata
               (customdataid, customdatalabel, customdatadescription,
                customdatatype, customdatawidth, bgcolorvalue, fontcolor
               )
        VALUES (idout, labelin, descriptionin,
                typein, widthin, bgcolorin, fontcolorin
               );
END add_customdata;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_CUSTOMDATALISTITEM" (
   customdataidin   customdata.customdataid%TYPE,
   datavaluein      customdatalistitem.customdataitemvalue%TYPE
)
AS
   listitemid   INTEGER;
   itemcount    INTEGER;
BEGIN
   SELECT COUNT (*)
     INTO itemcount
     FROM customdatalistitem
    WHERE customdataid = customdataidin
      AND LOWER (customdataitemvalue) = LOWER (datavaluein);

   IF (itemcount = 0)
   THEN
      SELECT seq_customdatalistitem.NEXTVAL
        INTO listitemid
        FROM DUAL;

      INSERT INTO customdatalistitem
                  (customdataitemid, customdataid, customdataitemvalue
                  )
           VALUES (listitemid, customdataidin, upper(datavaluein)
                  );
   END IF;
END add_customdatalistitem;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_DEVIATIONCODE" (
   deviationcode                deviationcodes.deviationcode%TYPE,
   deviationdescription         deviationcodes.deviationdescription%TYPE,
   defaultdeviationcode         deviationcodes.defaultdeviationcode%TYPE,
   colorid                      deviationcodes.colorid%TYPE,
   camsinitflag                 INTEGER,
   deviationcodeid        OUT   deviationcodes.deviationcodeid%TYPE
)
AS
BEGIN
   SELECT seq_deviationcodes.NEXTVAL
     INTO deviationcodeid
     FROM DUAL;

   INSERT INTO deviationcodes
               (deviationcodeid, deviationcode, deviationdescription,
                defaultdeviationcode, colorid
               )
        VALUES (deviationcodeid, deviationcode, deviationdescription,
                defaultdeviationcode, colorid
               );

   IF (camsinitflag = 1)
   THEN
      UPDATE deviationcodes
         SET camsinit = SYSDATE
       WHERE deviationcodeid = deviationcodeid;
   END IF;
END add_deviationcode;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_EMOCCONFIG" 
as
begin

DELETE FROM EMOCCONFIG WHERE EMOCCONFIGID = 0;

INSERT INTO EMOCCONFIG (EMOCCONFIGID) VALUES (0);


end ADD_EMOCCONFIG;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_FIRESYMBOL" (
   firesymbolin          firesymbols.firesymbol%TYPE,
   descriptionin         firesymbols.description%TYPE,
   defaultvalin          firesymbols.defaultval%TYPE,
   rankingin             firesymbols.ranking%TYPE,
   firesymbolid    OUT   firesymbols.firesymbolid%TYPE
)
AS
BEGIN
   SELECT seq_firesymbols.NEXTVAL
     INTO firesymbolid
     FROM DUAL;

   INSERT INTO firesymbols
               (firesymbolid, firesymbol, description, defaultval,
                ranking
               )
        VALUES (firesymbolid, firesymbolin, descriptionin, defaultvalin,
                rankingin
               );
END add_firesymbol;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_FLIGHT" (
   flightnamein           flights.flightname%TYPE,
   squadronidin           flights.squadronid%TYPE,
   workcenteridin         flights.workcenterid%TYPE,
   lastupdatebyin         flights.lastupdateby%TYPE,
   flightid         OUT   flights.flightid%TYPE
)
AS
BEGIN
   SELECT seq_flights.NEXTVAL
     INTO flightid
     FROM DUAL;

   INSERT INTO flights
               (flightid, flightname, squadronid, workcenterid,
                lastupdate, lastupdateby
               )
        VALUES (flightid, flightnamein, squadronidin, workcenteridin,
                SYSDATE, lastupdatebyin
               );
END add_flight;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_FUEL" (
   fuelstatus                fuel.fuelstatus%TYPE,
   fueldescription           fuel.fueldescription%TYPE,
   landing                   fuel.landing%TYPE,
   colorid                   fuel.colorid%TYPE,
   defaultfuel               fuel.defaultfuel%TYPE,
   fuelstatuslabel           fuel.fuelstatuslabel%TYPE,
   allowsortieupdate         fuel.allowsortieupdate%TYPE,
   fuelstatusid        OUT   fuel.fuelstatusid%TYPE
)
AS
BEGIN
   SELECT seq_fuels.NEXTVAL
     INTO fuelstatusid
     FROM DUAL;

   INSERT INTO fuel
               (fuelstatusid, fuelstatus, fueldescription, landing, colorid,
                defaultfuel, fuelstatuslabel, allowsortieupdate
               )
        VALUES (fuelstatusid, fuelstatus, fueldescription, landing, colorid,
                defaultfuel, fuelstatuslabel, allowsortieupdate
               );
END add_fuel;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_HELP" (
   helpidout    OUT   emochelp.helpid%TYPE,
   parentidin         emochelp.parentid%TYPE,
   topicin            emochelp.topic%TYPE,
   helphtmlin         emochelp.helphtml%TYPE,
   nodein             emochelp.node%TYPE
)
AS
BEGIN
   SELECT seq_emochelp.NEXTVAL
     INTO helpidout
     FROM DUAL;

   INSERT INTO emochelp
               (helpid, parentid, topic, helphtml, node
               )
        VALUES (helpidout, parentidin, topicin, helphtmlin, nodein
               );
END add_help;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_HQCODE" (
   hqcodein                hanger_queen_code.hqcode%TYPE,
   hqdescriptionin         hanger_queen_code.hqdescription%TYPE,
   hqlevelin               hanger_queen_code.hqlevel%TYPE,
   hqdefaultin             hanger_queen_code.hqdefault%TYPE,
   hqcodeid          OUT   hanger_queen_code.hqcodeid%TYPE
)
AS
   hq_level     INTEGER;
   hqlevelmax   INTEGER;
BEGIN
   IF hqlevelin = -1
   THEN
      hq_level := 0;

      SELECT MAX (hqlevel) + 1
        INTO hq_level
        FROM hanger_queen_code;
   ELSE
      hq_level := hqlevelin;
   END IF;

   IF hq_level > 99
   THEN
      hq_level := 0;
   END IF;

   SELECT seq_hangarqueen.NEXTVAL
     INTO hqcodeid
     FROM DUAL;

   INSERT INTO hanger_queen_code
               (hqcodeid, hqcode, hqdescription, hqlevel, hqdefault
               )
        VALUES (hqcodeid, hqcodein, hqdescriptionin, hq_level, hqdefaultin
               );
END add_hqcode;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_IMDSLOGIN" (
   useridin             users.userid%TYPE,
   loginin              imdslogins.imdslogin%TYPE,
   passwordin           imdslogins.imdspassword%TYPE,
   accountin            imdslogins.imdsaccount%TYPE,
   projectidin          imdslogins.imdsprojectid%TYPE,
   terminalidin         imdslogins.imdsterminalid%TYPE,
   wingidin             imdslogins.wingid%TYPE,
   loginid        OUT   imdslogins.imdsloginid%TYPE
)
AS
BEGIN
   SELECT seq_imdslogins.NEXTVAL
     INTO loginid
     FROM DUAL;

   INSERT INTO imdslogins
               (imdsloginid, userid, imdslogin, imdsaccount, imdsprojectid,
                imdspassword, imdsterminalid, wingid
               )
        VALUES (loginid, useridin, loginin, accountin, projectidin,
                emoc_security.encrypt ('nopassword'), terminalidin, wingidin
               );

   IF LENGTH (NVL (passwordin, '')) > 0
   THEN
      UPDATE imdslogins
         SET imdspassword = emoc_security.encrypt (passwordin)
       WHERE imdsloginid = loginid;
   END IF;
END add_imdslogin;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_INTERFACECONTROL" (interfacenamein    interfacecontrol.interfacename%TYPE,
                                                 lastupdatebyin     interfacecontrol.lastupdateby%TYPE,
                                                 interfacecontrolid OUT interfacecontrol.interfacecontrolid%TYPE) AS
BEGIN
  SELECT seq_icontrol.NEXTVAL INTO interfacecontrolid FROM DUAL;

  INSERT INTO interfacecontrol
    (interfacecontrolid, interfacename, lastupdateby)
  VALUES
    (interfacecontrolid, interfacenamein, lastupdatebyin);
END add_interfacecontrol;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_JOAP" (
   joapcode                joap.joapcode%TYPE,
   joapdescription         joap.joapdescription%TYPE,
   landing                 joap.landing%TYPE,
   redcapstatus            joap.redcapstatus%TYPE,
   defaultjoap             joap.defaultjoap%TYPE,
   colorrulesid            joap.colorrulesid%TYPE,
   joapid            OUT   joap.joapid%TYPE
)
AS
BEGIN
   SELECT seq_joaps.NEXTVAL
     INTO joapid
     FROM DUAL;

   INSERT INTO joap
               (joapid, joapcode, joapdescription, landing, redcapstatus,
                defaultjoap, colorrulesid
               )
        VALUES (joapid, joapcode, joapdescription, landing, redcapstatus,
                defaultjoap, colorrulesid
               );
END add_joap;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_LANDINGCODE" (
   landingcode                    landingcodes.landingcode%TYPE,
   landingcodedescription         landingcodes.landingcodedescription%TYPE,
   writeupneeded                  landingcodes.writeupneeded%TYPE,
   landingcodeid            OUT   landingcodes.landingcodeid%TYPE
)
AS
BEGIN
   SELECT seq_landingcodes.NEXTVAL
     INTO landingcodeid
     FROM DUAL;

   INSERT INTO landingcodes
               (landingcodeid, landingcode, landingcodedescription,
                writeupneeded
               )
        VALUES (landingcodeid, landingcode, landingcodedescription,
                writeupneeded
               );
END add_landingcode;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_LINK" (
   linktitlein               links.linktitle%TYPE,
   linkurlin                 links.linkurl%TYPE,
   linkdescriptionin         links.linkdescription%TYPE,
   enteredbyin               links.enteredby%TYPE,
   linkorderin               links.linkorder%TYPE,
   linkid              OUT   links.linkid%TYPE
)
AS
BEGIN
   SELECT seq_links.NEXTVAL
     INTO linkid
     FROM DUAL;

   INSERT INTO links
               (linkid, linktitle, linkurl, linkdescription,
                enteredby, linkorder
               )
        VALUES (linkid, linktitlein, linkurlin, linkdescriptionin,
                enteredbyin, linkorderin
               );
END add_link;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_LOCATION" (
   locationcode             locations.locationcode%TYPE,
   locationname             locations.locationname%TYPE,
   maximumoccupancy         locations.maximumoccupancy%TYPE,
   defaultlocation          locations.defaultlocation%TYPE,
   elcin                    locations.elc%TYPE,
   camsinitin               INTEGER,
   locationid         OUT   locations.locationid%TYPE
)
AS
BEGIN
   SELECT seq_locations.NEXTVAL
     INTO locationid
     FROM DUAL;

   INSERT INTO locations
               (locationid, locationcode, locationname, maximumoccupancy,
                defaultlocation, elc
               )
        VALUES (locationid, locationcode, locationname, maximumoccupancy,
                defaultlocation, elcin
               );

   IF (camsinitin = 1)
   THEN
      UPDATE locations
         SET camsinit = SYSDATE
       WHERE locationid = locationid;
   END IF;
END add_location;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MAJCOM" (
   majcomin                  majcoms.majcom%TYPE,
   majcomnarrativein         majcoms.majcomnarrative%TYPE,
   comidin                   majcoms.comid%TYPE,
   comcodein                 majcoms.comcode%TYPE,
   camsinitflag              INTEGER,
   lastupdatebyin            INTEGER,
   majcomid            OUT   majcoms.majcomid%TYPE
)
AS
BEGIN
   SELECT seq_majcoms.NEXTVAL
     INTO majcomid
     FROM DUAL;

   INSERT INTO majcoms
               (majcomid, majcom, majcomnarrative, comid, comcode,
                lastupdateby, lastupdate, mocid
               )
        VALUES (majcomid, majcomin, majcomnarrativein, comidin, comcodein,
                lastupdatebyin, SYSDATE, 0
               );

   IF (camsinitflag = 1)
   THEN
      UPDATE majcoms
         SET camsinit = SYSDATE
       WHERE majcomid = majcomid;
   END IF;
END add_majcom;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MISSION" (
   mission                    missions.mission%TYPE,
   missiondescription         missions.missiondescription%TYPE,
   missionid            OUT   missions.missionid%TYPE
)
AS
BEGIN
   SELECT seq_missions.NEXTVAL
     INTO missionid
     FROM DUAL;

   INSERT INTO missions
               (missionid, mission, missiondescription
               )
        VALUES (missionid, mission, missiondescription
               );
END add_mission;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MISSION_FROM_USER" (
   mission           missions.mission%TYPE,
   mocid    missions.mocid%TYPE,
   missionid   OUT   missions.missionid%TYPE
)
/******************************************************************************
   NAME:       ADD_MISSION_FROM_EXCEL
   PURPOSE:    Inserts an MISSION found in an Excel schedule line not
               already in the db.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        6/17/03      A.Mitchell       1. Created this procedure.

   PARAMETERS:
   INPUT:
   *MISSION
   OUTPUT:
   *MISSIONID
   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/
AS
   newmissionid   NUMBER;
BEGIN
   --INCREMENT
   SELECT seq_missions.NEXTVAL
     INTO newmissionid
     FROM DUAL;

   INSERT INTO missions
               (missionid, mission, mocid
               )
        VALUES (newmissionid, mission, mocid
               );

   missionid := newmissionid;
END add_mission_from_user;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC" (
   moctitlein             moc.moctitle%TYPE,
   isactivein             INTEGER,
   lastupdatebyin         INTEGER,
   mocidout         OUT   moc.mocid%TYPE
)
AS
   v_defaultmoc   NUMBER (10) := 0;
BEGIN
   SELECT seq_mocs.NEXTVAL
     INTO mocidout
     FROM DUAL;

   INSERT INTO moc
               (mocid, moctitle, isactive, lastupdated
               )
        VALUES (mocidout, moctitlein, isactivein, SYSDATE
               );

   COMMIT;
   copy_emocconfig (mocidout, v_defaultmoc);
   copy_acftmdstypes (mocidout, v_defaultmoc);
   copy_aircraftmds (mocidout);
   copy_messages (mocidout);
   copy_colors (mocidout);
   copy_fuel (mocidout);
   copy_statuscode (mocidout);
   copy_statusicons (mocidout);
   copy_ranks (mocidout);
   copy_firesymbol (mocidout);
   copy_hqcodes (mocidout);
   copy_landingcodes (mocidout);
   copy_weaponsclass (mocidout);
   copy_weapontypes (mocidout);
   copy_wx (mocidout);
   copy_colorrules (mocidout);
   copy_statusrule (mocidout);
   copy_conditionstatus (mocidout);
   copy_conditioncodes (mocidout);
   copy_symbols (mocidout);
   copy_joap (mocidout);
   copy_semedx (mocidout);
   copy_deviationcodes (mocidout);
   copy_possessioncodes (mocidout);
   copy_interfaceitems(mocidout);

END add_moc;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOCUSER" (
   mocidin               moc.mocid%TYPE,
   useridin              users.userid%TYPE,
   mocuseridout   OUT    mocusers.mocuserid%TYPE
)
AS
   recid   INTEGER := 0;
BEGIN
   SELECT Count(*)
     INTO recid
     FROM mocusers
    WHERE mocid = mocidin AND userid = useridin;

   IF (recid = 0)
   THEN
      SELECT seq_mocusers.NEXTVAL
        INTO mocuseridout
        FROM DUAL;

      INSERT INTO mocusers
                  (mocuserid, mocid, userid
                  )
           VALUES (mocuseridout, mocidin, useridin
                  );
   ELSE
      mocuseridout := recid;
   END IF;
END add_mocuser;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_AIRCRAFT" (
   tailnumberin     VARCHAR,
   squadronnamein   VARCHAR,
   mocidin          NUMBER
)
AS
   counter       INTEGER;
   new_id        INTEGER;
   squadron_id   INTEGER;
BEGIN
   SELECT COUNT (aircraftid)
     INTO counter
     FROM aircraft, squadrons
    WHERE (    (aircraft.squadronid = squadrons.squadronid)
           AND (UPPER (squadrons.squadronname) = UPPER (squadronnamein))
           AND (aircraft.tailnumber = tailnumberin)
          );

   SELECT seq_aircraft.NEXTVAL
     INTO new_id
     FROM aircraft;

   SELECT squadronid
     INTO squadron_id
     FROM squadrons
    WHERE squadrons.squadronname = squadronnamein;

   IF (counter = 0)
   THEN
      INSERT INTO aircraft
                  (aircraftid, tailnumber, squadronid, mocid
                  )
           VALUES (new_id, tailnumberin, squadron_id, mocidin
                  );
   END IF;
END add_moc_aircraft;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_AIRCRAFTMDS" (
   aircraftmds              aircraftmds.aircraftmds%TYPE,
   numberofstations         aircraftmds.numberofstations%TYPE,
   numberofengines          aircraftmds.numberofengines%TYPE,
   timebetweenphase         aircraftmds.timebetweenphase%TYPE,
   defaultmds               aircraftmds.defaultaircrafttype%TYPE,
   phaseunit                aircraftmds.phaseunit%TYPE,
   blocknumber              aircraftmds.blocknumber%TYPE,
   acftmdstypecdin          aircraftmds.acftmdstypecd%TYPE,
   mocidin                  aircraftmds.mocid%TYPE,
   aircraftmdsid      OUT   aircraftmds.aircraftmdsid%TYPE
)
AS
BEGIN
   SELECT seq_aircraftmds.NEXTVAL
     INTO aircraftmdsid
     FROM DUAL;

   INSERT INTO aircraftmds
               (aircraftmdsid, aircraftmds, numberofstations,
                numberofengines, timebetweenphase, defaultaircrafttype,
                blocknumber, phaseunit, acftmdstypecd, mocid
               )
        VALUES (aircraftmdsid, aircraftmds, numberofstations,
                numberofengines, timebetweenphase, defaultmds,
                blocknumber, phaseunit, acftmdstypecdin, mocidin
               );
END add_moc_aircraftmds;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_AREA" (
   area                    areas.area%TYPE,
   areadescription         areas.areadescription%TYPE,
   mocidin                 areas.mocid%TYPE,
   areaid            OUT   areas.areaid%TYPE
)
AS
BEGIN
   SELECT seq_areas.NEXTVAL
     INTO areaid
     FROM DUAL;

   INSERT INTO areas
               (areaid, area, areadescription, mocid
               )
        VALUES (areaid, area, areadescription, mocidin
               );
END add_moc_area;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_ARMAMENT" (
   station               armament.station%TYPE,
   aircraftmdsid         armament.aircraftmdsid%TYPE,
   ordnanceid            armament.ordnanceid%TYPE,
   mocidin     armament.mocid%TYPE,
   armamentid      OUT   armament.armamentid%TYPE
)
AS
BEGIN
   SELECT seq_armament.NEXTVAL
     INTO armamentid
     FROM DUAL;

   INSERT INTO armament
               (armamentid, station, aircraftmdsid, ordnanceid, mocid
               )
        VALUES (armamentid, station, aircraftmdsid, ordnanceid, mocidin
               );
END add_moc_armament;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_ASSIGNMENT" (
   assignmentcode                assignmentcodes.assignmentcode%TYPE,
   assignmentdescription         assignmentcodes.assignmentdescription%TYPE,
   defaultassignment             assignmentcodes.defaultassignment%TYPE,
   mocidin                       assignmentcodes.mocid%TYPE,
   assignmentid            OUT   assignmentcodes.assignmentcodeid%TYPE
)
AS
BEGIN
   SELECT seq_assignments.NEXTVAL
     INTO assignmentid
     FROM DUAL;

   INSERT INTO assignmentcodes
               (assignmentcodeid, assignmentcode, assignmentdescription,
                defaultassignment, mocid
               )
        VALUES (assignmentid, assignmentcode, assignmentdescription,
                defaultassignment, mocidin
               );
END add_moc_assignment;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_CAUSECODE" (
   causecode             causecodes.causecode%TYPE,
   description           causecodes.description%TYPE,
   causecodetype         causecodes.causecodetype%TYPE,
   camsinitflag          INTEGER,
   mocidin               causecodes.mocid%TYPE,
   causecodeid     OUT   causecodes.causecodeid%TYPE
)
AS
BEGIN
   SELECT seq_causecodes.NEXTVAL
     INTO causecodeid
     FROM DUAL;

   INSERT INTO causecodes
               (causecodeid, causecode, description, causecodetype, mocid, defaultcausecode
               )
        VALUES (causecodeid, causecode, description, causecodetype, mocidin, 0
               );

   IF (camsinitflag = 1)
   THEN
      UPDATE causecodes
         SET camsinit = SYSDATE
       WHERE causecodeid = causecodeid;
   END IF;
END add_moc_causecode;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_COLOR" (
   colorname          colors.colorname%TYPE,
   colorvalue         colors.colorvalue%TYPE,
   fontcolor          colors.fontcolor%TYPE,
   mocidin            colors.mocid%TYPE,
   colorid      OUT   colors.colorid%TYPE
)
AS
BEGIN
   SELECT seq_colors.NEXTVAL
     INTO colorid
     FROM DUAL;

   INSERT INTO colors
               (colorid, colorname, colorvalue, fontcolor, mocid
               )
        VALUES (colorid, colorname, colorvalue, fontcolor, mocidin
               );
END add_moc_color;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_COLORRULE" (
   codetype             colorrules.codetype%TYPE,
   colorrank            colorrules.colorrank%TYPE,
   colorid              colorrules.colorid%TYPE,
   mocidin              colorrules.mocid%TYPE,
   colorrulesid   OUT   colorrules.colorrulesid%TYPE
)
AS
BEGIN
   SELECT seq_colorrules.NEXTVAL
     INTO colorrulesid
     FROM DUAL;

   INSERT INTO colorrules
               (colorrulesid, codetype, colorrank, colorid, mocid
               )
        VALUES (colorrulesid, codetype, colorrank, colorid, mocidin
               );
END add_moc_colorrule;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_COMBATSCL" (
   combatscl           combatscls.combatscl%TYPE,
   mocidin             combatscls.mocid%TYPE,
   combatsclid   OUT   combatscls.combatsclid%TYPE
)
AS
BEGIN
   SELECT seq_combatscls.NEXTVAL
     INTO combatsclid
     FROM DUAL;

   INSERT INTO combatscls
               (combatsclid, combatscl, mocid
               )
        VALUES (combatsclid, combatscl, mocidin
               );
END add_moc_combatscl;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_COMBATSCLRULE" (
   combatsclid           combatsclrules.combatsclid%TYPE,
   aircraftmdsid         combatsclrules.aircraftmdsid%TYPE,
   mocidin               combatsclrules.mocid%TYPE,
   sclrulesid      OUT   combatsclrules.sclrulesid%TYPE
)
AS
BEGIN
   SELECT seq_combatsclrules.NEXTVAL
     INTO sclrulesid
     FROM DUAL;

   INSERT INTO combatsclrules
               (sclrulesid, combatsclid, aircraftmdsid, mocid
               )
        VALUES (sclrulesid, combatsclid, aircraftmdsid, mocidin
               );
END add_moc_combatsclrule;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_CONDITIONCODE" (
   conditioncode                conditioncodes.conditioncode%TYPE,
   conditiondescription         conditioncodes.conditiondescription%TYPE,
   defaultconditioncode         conditioncodes.defaultconditioncode%TYPE,
   condstatid                   conditioncodes.condstatid%TYPE,
   mocidin                      conditioncodes.mocid%TYPE,
   condcodeid             OUT   conditioncodes.condcodeid%TYPE
)
AS
BEGIN
   SELECT seq_conditioncodes.NEXTVAL
     INTO condcodeid
     FROM DUAL;

   INSERT INTO conditioncodes
               (condcodeid, conditioncode, conditiondescription,
                defaultconditioncode, condstatid, mocid
               )
        VALUES (condcodeid, conditioncode, conditiondescription,
                defaultconditioncode, condstatid, mocidin
               );
END add_moc_conditioncode;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_CONDITIONSTATUS" (
   conditionstatus         conditionstatus.conditionstatus%TYPE,
   conditionlevel          conditionstatus.conditionlevel%TYPE,
   flyable                 conditionstatus.flyable%TYPE,
   colorid                 conditionstatus.colorid%TYPE,
   mocidin                 conditionstatus.mocid%TYPE,
   condstatid        OUT   conditionstatus.condstatid%TYPE
)
AS
BEGIN
   SELECT seq_conditionstatus.NEXTVAL
     INTO condstatid
     FROM DUAL;

   INSERT INTO conditionstatus
               (condstatid, conditionstatus, conditionlevel, flyable,
                colorid, mocid
               )
        VALUES (condstatid, conditionstatus, conditionlevel, flyable,
                colorid, mocidin
               );
END add_moc_conditionstatus;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_CREWCHIEF" (
   crewchiefin                crewchiefs.crewchief%TYPE,
   defaultcrewchiefin         crewchiefs.defaultcrewchief%TYPE,
   picturein                  crewchiefs.picture%TYPE,
   rankidin                   crewchiefs.rankid%TYPE,
   mocidin                    crewchiefs.mocid%TYPE,
   crewchiefid          OUT   crewchiefs.crewchiefid%TYPE
)
AS
BEGIN
   SELECT seq_crewchiefs.NEXTVAL
     INTO crewchiefid
     FROM DUAL;

   INSERT INTO crewchiefs
               (crewchiefid, crewchief, defaultcrewchief, picture,
                rankid, mocid
               )
        VALUES (crewchiefid, crewchiefin, defaultcrewchiefin, picturein,
                rankidin, mocidin
               );
END add_moc_crewchief;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_CUSTOMDATA" (
   labelin               customdata.customdatalabel%TYPE,
   descriptionin         customdata.customdatadescription%TYPE,
   typein                customdata.customdatatype%TYPE,
   widthin               customdata.customdatawidth%TYPE,
   bgcolorin             customdata.bgcolorvalue%TYPE,
   fontcolorin           customdata.fontcolor%TYPE,
   mocidin               customdata.mocid%TYPE,
   idout           OUT   customdata.customdataid%TYPE
)
AS
BEGIN
   SELECT seq_customdata.NEXTVAL
     INTO idout
     FROM DUAL;

   INSERT INTO customdata
               (customdataid, customdatalabel, customdatadescription,
                customdatatype, customdatawidth, bgcolorvalue, fontcolor,
                mocid
               )
        VALUES (idout, labelin, descriptionin,
                typein, widthin, bgcolorin, fontcolorin,
                mocidin
               );
END add_moc_customdata;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_DEVIATIONCODE" (
   deviationcode                deviationcodes.deviationcode%TYPE,
   deviationdescription         deviationcodes.deviationdescription%TYPE,
   defaultdeviationcode         deviationcodes.defaultdeviationcode%TYPE,
   colorid                      deviationcodes.colorid%TYPE,
   camsinitflag                 INTEGER,
   mocidin                      deviationcodes.mocid%TYPE,
   deviationcodeid        OUT   deviationcodes.deviationcodeid%TYPE
)
AS
   coloridin   INTEGER;
BEGIN
   SELECT seq_deviationcodes.NEXTVAL
     INTO deviationcodeid
     FROM DUAL;

   IF (colorid IS NULL)
   THEN
      SELECT MIN (colorid)
        INTO coloridin
        FROM colors
       WHERE mocid = mocidin;
   ELSE
      coloridin := colorid;
   END IF;

   INSERT INTO deviationcodes
               (deviationcodeid, deviationcode, deviationdescription,
                defaultdeviationcode, colorid, mocid
               )
        VALUES (deviationcodeid, deviationcode, deviationdescription,
                defaultdeviationcode, coloridin, mocidin
               );

   IF (camsinitflag = 1)
   THEN
      UPDATE deviationcodes
         SET camsinit = SYSDATE
       WHERE deviationcodeid = deviationcodeid;
   END IF;
END add_moc_deviationcode;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_EMOCCONFIG" (
   mocidin                 emocconfig.mocid%TYPE,
   emocconfigidout   OUT   emocconfig.emocconfigid%TYPE
)
AS
BEGIN
   SELECT seq_emocconfig.NEXTVAL
     INTO emocconfigidout
     FROM DUAL;

   INSERT INTO emocconfig
               (mocid, emocconfigid
               )
        VALUES (mocidin, emocconfigidout
               );
END add_moc_emocconfig;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_FIRESYMBOL" (
   firesymbolin          firesymbols.firesymbol%TYPE,
   descriptionin         firesymbols.description%TYPE,
   defaultvalin          firesymbols.defaultval%TYPE,
   rankingin             firesymbols.ranking%TYPE,
   mocidin               firesymbols.mocid%TYPE,
   firesymbolid    OUT   firesymbols.firesymbolid%TYPE
)
AS
BEGIN
   SELECT seq_firesymbols.NEXTVAL
     INTO firesymbolid
     FROM DUAL;

   IF defaultvalin = 1
   THEN
      UPDATE firesymbols
         SET defaultval = 0
       WHERE mocid = mocidin;
   END IF;

   INSERT INTO firesymbols
               (firesymbolid, firesymbol, description, defaultval,
                ranking, mocid
               )
        VALUES (firesymbolid, firesymbolin, descriptionin, defaultvalin,
                rankingin, mocidin
               );
END add_moc_firesymbol;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_FUEL" (
   fuelstatus                fuel.fuelstatus%TYPE,
   fueldescription           fuel.fueldescription%TYPE,
   landing                   fuel.landing%TYPE,
   colorid                   fuel.colorid%TYPE,
   defaultfuel               fuel.defaultfuel%TYPE,
   fuelstatuslabel           fuel.fuelstatuslabel%TYPE,
   allowsortieupdate         fuel.allowsortieupdate%TYPE,
   mocidin                   fuel.mocid%TYPE,
   fuelstatusid        OUT   fuel.fuelstatusid%TYPE
)
AS
BEGIN
   SELECT seq_fuels.NEXTVAL
     INTO fuelstatusid
     FROM DUAL;

   INSERT INTO fuel
               (fuelstatusid, fuelstatus, fueldescription, landing, colorid,
                defaultfuel, fuelstatuslabel, allowsortieupdate, mocid
               )
        VALUES (fuelstatusid, fuelstatus, fueldescription, landing, colorid,
                defaultfuel, fuelstatuslabel, allowsortieupdate, mocidin
               );
END add_moc_fuel;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_HQCODE" (
   hqcodein                hanger_queen_code.hqcode%TYPE,
   hqdescriptionin         hanger_queen_code.hqdescription%TYPE,
   hqlevelin               hanger_queen_code.hqlevel%TYPE,
   hqdefaultin             hanger_queen_code.hqdefault%TYPE,
   mocidin                 hanger_queen_code.mocid%TYPE,
   hqcodeid          OUT   hanger_queen_code.hqcodeid%TYPE
)
AS
   hq_level     INTEGER;
   hqlevelmax   INTEGER;
BEGIN
   IF hqlevelin = -1
   THEN
      hq_level := 0;

      SELECT MAX (hqlevel) + 1
        INTO hq_level
        FROM hanger_queen_code;
   ELSE
      hq_level := hqlevelin;
   END IF;

   IF hq_level > 99
   THEN
      hq_level := 0;
   END IF;

   SELECT seq_hangarqueen.NEXTVAL
     INTO hqcodeid
     FROM DUAL;

   INSERT INTO hanger_queen_code
               (hqcodeid, hqcode, hqdescription, hqlevel, hqdefault,
                mocid
               )
        VALUES (hqcodeid, hqcodein, hqdescriptionin, hq_level, hqdefaultin,
                mocidin
               );
END add_moc_hqcode;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_INTERFACECONTROL" (interfacenamein    interfacecontrol.interfacename%TYPE,
                                                     lastupdatebyin     interfacecontrol.lastupdateby%TYPE,
              interfaceuseridin           interfacecontrol.interfaceuserid%TYPE,
                 interfacepasswordin         interfacecontrol.interfacepassword%TYPE,
                                                     interfacecontrolid OUT interfacecontrol.interfacecontrolid%TYPE,
                                                     mocidin            interfacecontrol.mocid%TYPE) AS

BEGIN
  SELECT seq_icontrol.NEXTVAL INTO interfacecontrolid FROM DUAL;

  INSERT INTO interfacecontrol
    (interfacecontrolid, interfacename, lastupdateby, mocid,interfaceuserid)
  VALUES
    (seq_icontrol.NEXTVAL, interfacenamein, lastupdatebyin, mocidin,interfaceuseridin);


END add_moc_interfacecontrol;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_JOAP" (
   joapcode                joap.joapcode%TYPE,
   joapdescription         joap.joapdescription%TYPE,
   landing                 joap.landing%TYPE,
   redcapstatus            joap.redcapstatus%TYPE,
   defaultjoap             joap.defaultjoap%TYPE,
   colorrulesid            joap.colorrulesid%TYPE,
   mocidin                 joap.mocid%TYPE,
   joapid            OUT   joap.joapid%TYPE
)
AS
BEGIN
   SELECT seq_joaps.NEXTVAL
     INTO joapid
     FROM DUAL;

   INSERT INTO joap
               (joapid, joapcode, joapdescription, landing, redcapstatus,
                defaultjoap, colorrulesid, mocid
               )
        VALUES (joapid, joapcode, joapdescription, landing, redcapstatus,
                defaultjoap, colorrulesid, mocidin
               );
END add_moc_joap;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_LANDINGCODE" (
   landingcode                    landingcodes.landingcode%TYPE,
   landingcodedescription         landingcodes.landingcodedescription%TYPE,
   writeupneeded                  landingcodes.writeupneeded%TYPE,
   mocidin                        landingcodes.mocid%TYPE,
   landingcodeid            OUT   landingcodes.landingcodeid%TYPE
)
AS
BEGIN
   SELECT seq_landingcodes.NEXTVAL
     INTO landingcodeid
     FROM DUAL;

   INSERT INTO landingcodes
               (landingcodeid, landingcode, landingcodedescription,
                writeupneeded, mocid
               )
        VALUES (landingcodeid, landingcode, landingcodedescription,
                writeupneeded, mocidin
               );
END add_moc_landingcode;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_LINK" (
   linktitlein               links.linktitle%TYPE,
   linkurlin                 links.linkurl%TYPE,
   linkdescriptionin         links.linkdescription%TYPE,
   enteredbyin               links.enteredby%TYPE,
   linkorderin               links.linkorder%TYPE,
   mocidin                   links.mocid%TYPE,
   linkid              OUT   links.linkid%TYPE
)
AS
BEGIN
   SELECT seq_links.NEXTVAL
     INTO linkid
     FROM DUAL;

   INSERT INTO links
               (linkid, linktitle, linkurl, linkdescription,
                enteredby, linkorder, mocid
               )
        VALUES (linkid, linktitlein, linkurlin, linkdescriptionin,
                enteredbyin, linkorderin, mocidin
               );
END add_moc_link;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_LOCATION" (
   locationcode             locations.locationcode%TYPE,
   locationname             locations.locationname%TYPE,
   maximumoccupancy         locations.maximumoccupancy%TYPE,
   defaultlocation          locations.defaultlocation%TYPE,
   elcin                    locations.elc%TYPE,
   camsinitin               INTEGER,
   mocidin                  locations.mocid%TYPE,
   locationid         OUT   locations.locationid%TYPE
)
AS
BEGIN
   SELECT seq_locations.NEXTVAL
     INTO locationid
     FROM DUAL;

   INSERT INTO locations
               (locationid, locationcode, locationname, maximumoccupancy,
                defaultlocation, mocid, elc, camsinit
               )
        VALUES (locationid, locationcode, locationname, maximumoccupancy,
                defaultlocation, mocidin, elcin, SYSDATE
               );


END add_moc_location;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_MAJCOM" (
   majcomin                  majcoms.majcom%TYPE,
   majcomnarrativein         majcoms.majcomnarrative%TYPE,
   comidin                   majcoms.comid%TYPE,
   comcodein                 majcoms.comcode%TYPE,
   camsinitflag              INTEGER,
   lastupdatebyin            INTEGER,
   mocidin                   majcoms.mocid%TYPE,
   majcomid            OUT   majcoms.majcomid%TYPE
)
AS
BEGIN
   SELECT seq_majcoms.NEXTVAL
     INTO majcomid
     FROM DUAL;

   INSERT INTO majcoms
               (majcomid, majcom, majcomnarrative, comid, comcode,
                lastupdateby, lastupdate, mocid
               )
        VALUES (majcomid, majcomin, majcomnarrativein, comidin, comcodein,
                lastupdatebyin, SYSDATE, mocidin
               );

   IF (camsinitflag = 1)
   THEN
      UPDATE majcoms
         SET camsinit = SYSDATE
       WHERE majcomid = majcomid;
   END IF;
END add_moc_majcom;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_MISSION" (
   mission                    missions.mission%TYPE,
   missiondescription         missions.missiondescription%TYPE,
   mocidin                    missions.mocid%TYPE,
   missionid            OUT   missions.missionid%TYPE
)
AS
BEGIN
   SELECT seq_missions.NEXTVAL
     INTO missionid
     FROM DUAL;

   INSERT INTO missions
               (missionid, mission, missiondescription, mocid
               )
        VALUES (missionid, mission, missiondescription, mocidin
               );
END add_moc_mission;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_ORDNANCE" (
   ordnance              ordnance.ordnance%TYPE,
   configuration         ordnance.configuration%TYPE,
   weaponstypeid         ordnance.weaponstypeid%TYPE,
   mocidin               ordnance.mocid%TYPE,
   ordnanceid      OUT   ordnance.ordnanceid%TYPE
)
AS
BEGIN
   SELECT seq_ordnance.NEXTVAL
     INTO ordnanceid
     FROM DUAL;

   INSERT INTO ordnance
               (ordnanceid, ordnance, configuration, weaponstypeid, mocid
               )
        VALUES (ordnanceid, ordnance, configuration, weaponstypeid, mocidin
               );
END add_moc_ordnance;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_ORG" (
   orgnamein                       organizations.orgname%TYPE,
   orgidin                         organizations.orgid%TYPE,
   station_location_codein         organizations.station_location_code%TYPE,
   camsinitflag                    INTEGER,
   unit_idin                       organizations.unit_id%TYPE,
   lastupdatebyin                  organizations.lastupdateby%TYPE,
   mocidin                         organizations.mocid%TYPE,
   organizationsid           OUT   organizations.organizationsid%TYPE
)
AS
   wingidin   INTEGER;
BEGIN
   SELECT seq_organizations.NEXTVAL
     INTO organizationsid
     FROM DUAL;

   SELECT wingid
     INTO wingidin
     FROM wings
    WHERE unitid = unit_idin AND mocid = mocidin;

   INSERT INTO organizations
               (organizationsid, orgname, orgid, station_location_code,
                camsinit, unit_id, wingid, lastupdateby, lastupdate, mocid
               )
        VALUES (organizationsid, orgnamein, orgidin, station_location_codein,
                SYSDATE, unit_idin, wingidin, lastupdatebyin, SYSDATE, mocidin
               );
END add_moc_org;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_ORG2" (
   orgnamein                       organizations.orgname%TYPE,
   orgidin                         organizations.orgid%TYPE,
   station_location_codein         organizations.station_location_code%TYPE,
   camsinitflag                    INTEGER,
   unit_idin                       organizations.unit_id%TYPE,
   lastupdatebyin                  organizations.lastupdateby%TYPE,
   wingidin                        organizations.wingid%TYPE,
   mocidin                         organizations.mocid%TYPE,
   organizationsid           OUT   organizations.organizationsid%TYPE
)
AS
BEGIN
   SELECT seq_organizations.NEXTVAL
     INTO organizationsid
     FROM DUAL;

   INSERT INTO organizations
               (organizationsid, orgname, orgid, station_location_code,
                camsinit, unit_id, wingid, lastupdateby, lastupdate, mocid
               )
        VALUES (organizationsid, orgnamein, orgidin, station_location_codein,
                SYSDATE, unit_idin, wingidin, lastupdatebyin, SYSDATE, mocidin
               );
END add_moc_org2;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_PILOT" (
   pilotname          pilot.pilotname%TYPE,
   rankid             pilot.rankid%TYPE,
   squadronid         pilot.squadronid%TYPE,
   mocidin            pilot.mocid%TYPE,
   pilotid      OUT   pilot.pilotid%TYPE
)
AS
BEGIN
   SELECT seq_pilots.NEXTVAL
     INTO pilotid
     FROM DUAL;

   INSERT INTO pilot
               (pilotid, pilotname, rankid, squadronid, mocid
               )
        VALUES (pilotid, pilotname, rankid, squadronid, mocidin
               );
END add_moc_pilot;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_POSSESSION" (
   possessioncode                possessions.possessioncode%TYPE,
   possessiondescription         possessions.possessiondescription%TYPE,
   defaultpossession             possessions.defaultpossession%TYPE,
   mocidin                       possessions.mocid%TYPE,
   possessionid            OUT   possessions.possessionid%TYPE
)
AS
BEGIN
   SELECT seq_possessions.NEXTVAL
     INTO possessionid
     FROM DUAL;

   INSERT INTO possessions
               (possessionid, possessioncode, possessiondescription,
                defaultpossession, mocid
               )
        VALUES (possessionid, possessioncode, possessiondescription,
                defaultpossession, mocidin
               );
END add_moc_possession;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_RANGE" (
   RANGE                    VARCHAR2,
   rangedescription         ranges.rangedescription%TYPE,
   mocidin                  ranges.mocid%TYPE,
   rangeid            OUT   ranges.rangeid%TYPE
)
AS
BEGIN
   SELECT seq_ranges.NEXTVAL
     INTO rangeid
     FROM DUAL;

   INSERT INTO ranges
               (rangeid, RANGE, rangedescription, mocid
               )
        VALUES (rangeid, RANGE, rangedescription, mocidin
               );
END add_moc_range;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_RANK" (
   rankcode                ranks.rankcode%TYPE,
   rankdescription         ranks.rankdescription%TYPE,
   defaultrank             ranks.defaultrank%TYPE,
   mocidin                 ranks.mocid%TYPE,
   rankid            OUT   ranks.rankid%TYPE
)
AS
BEGIN
   SELECT seq_ranks.NEXTVAL
     INTO rankid
     FROM DUAL;

   INSERT INTO ranks
               (rankid, rankcode, rankdescription, defaultrank, mocid
               )
        VALUES (rankid, rankcode, rankdescription, defaultrank, mocidin
               );
END add_moc_rank;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_SEMEDX" (
   semedx                    semedx.semedx%TYPE,
   semedxdescription         semedx.semedxdescription%TYPE,
   defaultval                semedx.defaultval%TYPE,
   colorrulesid              semedx.colorrulesid%TYPE,
   mocidin                   semedx.mocid%TYPE,
   semedxid            OUT   semedx.semedxid%TYPE
)
AS
BEGIN
   SELECT seq_semedx.NEXTVAL
     INTO semedxid
     FROM DUAL;

   INSERT INTO semedx
               (semedxid, semedx, semedxdescription, defaultval,
                colorrulesid, mocid
               )
        VALUES (semedxid, semedx, semedxdescription, defaultval,
                colorrulesid, mocidin
               );
END add_moc_semedx;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_SQUADRON" (
   squadronnamein            squadrons.squadronname%TYPE,
   shortnamein               squadrons.shortname%TYPE,
   wingidin                  squadrons.wingid%TYPE,
   coloridin                 squadrons.colorid%TYPE,
   organizationsidin         squadrons.organizationsid%TYPE,
   camsinitflag              INTEGER,
   mocidin                   squadrons.mocid%TYPE,
   squadronid          OUT   squadrons.squadronid%TYPE
)
AS
BEGIN
   SELECT seq_squadrons.NEXTVAL
     INTO squadronid
     FROM DUAL;

   INSERT INTO squadrons
               (squadronid, squadronname, shortname, wingid, colorid,
                organizationsid, mocid
               )
        VALUES (squadronid, squadronnamein, shortnamein, wingidin, coloridin,
                organizationsidin, mocidin
               );

   IF (camsinitflag = 1)
   THEN
      UPDATE squadrons
         SET camsinit = SYSDATE
       WHERE squadronid = squadronid;
   END IF;
END add_moc_squadron;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_STATLOC" (
   stationlocin              stationloccodes.stationloc%TYPE,
   stalocnarrativein         stationloccodes.stalocnarrative%TYPE,
   camsinitflag              INTEGER,
   startdatein               stationloccodes.startdate%TYPE,
   stopdatein                stationloccodes.stopdate%TYPE,
   mocidin                   stationloccodes.mocid%TYPE,
   staloccodeid        OUT   stationloccodes.staloccodeid%TYPE
)
AS
BEGIN
   SELECT seq_stationlocs.NEXTVAL
     INTO staloccodeid
     FROM DUAL;

   INSERT INTO stationloccodes
               (staloccodeid, stationloc, stalocnarrative, mocid,
                startdate, stopdate
               )
        VALUES (staloccodeid, stationlocin, stalocnarrativein, mocidin,
                startdatein, stopdatein
               );

   IF (camsinitflag = 1)
   THEN
      UPDATE stationloccodes
         SET camsinit = SYSDATE
       WHERE staloccodeid = staloccodeid;
   END IF;
END add_moc_statloc;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_STATUSCODE" (
   statuscodein                statuscode.statuscode%TYPE,
   ordernumberin               statuscode.ordernumber%TYPE,
   iconnamein                  statuscode.iconname%TYPE,
   defaultstatuscodein         statuscode.defaultstatuscode%TYPE,
   lastflownin                 statuscode.lastflown%TYPE,
   flyingin                    statuscode.flying%TYPE,
   takeoffin                   statuscode.takeoff%TYPE,
   statuscodelabelin           statuscode.statuscodelabel%TYPE,
   allowsortieupdatein         statuscode.allowsortieupdate%TYPE,
   mocidin                     statuscode.mocid%TYPE,
   statuscodeid          OUT   statuscode.statuscodeid%TYPE
)
AS
BEGIN
   SELECT seq_statuscode.NEXTVAL
     INTO statuscodeid
     FROM DUAL;

   INSERT INTO statuscode
               (statuscodeid, statuscode, ordernumber, iconname,
                defaultstatuscode, lastflown, flying, takeoff,
                statuscodelabel, allowsortieupdate, mocid
               )
        VALUES (statuscodeid, statuscodein, ordernumberin, iconnamein,
                defaultstatuscodein, lastflownin, flyingin, takeoffin,
                statuscodelabelin, allowsortieupdatein, mocidin
               );
END add_moc_statuscode;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_STATUSRULE" (
   statuscodeidin          statustransitionrule.statuscodeid%TYPE,
   transition2idin         statustransitionrule.transition2id%TYPE,
   mocidin                 statustransitionrule.mocid%TYPE,
   statruleid        OUT   statustransitionrule.statruleid%TYPE
)
AS
BEGIN
   SELECT seq_statusrule.NEXTVAL
     INTO statruleid
     FROM DUAL;

   INSERT INTO statustransitionrule
               (statruleid, statuscodeid, transition2id, mocid
               )
        VALUES (statruleid, statuscodeidin, transition2idin, mocidin
               );
END add_moc_statusrule;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_SYMBOL" (
   symbol                    symbols.symbol%TYPE,
   symboldescription         symbols.symboldescription%TYPE,
   condcodeid                symbols.condcodeid%TYPE,
   mocidin                   symbols.mocid%TYPE,
   symbolid            OUT   symbols.symbolid%TYPE
)
AS
BEGIN
   SELECT seq_symbols.NEXTVAL
     INTO symbolid
     FROM DUAL;

   INSERT INTO symbols
               (symbolid, symbol, symboldescription, condcodeid, mocid
               )
        VALUES (symbolid, symbol, symboldescription, condcodeid, mocidin
               );
END add_moc_symbol;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_WDC" (
   wdcin                    whendiscoveredcodes.wdc%TYPE,
   wdcnarrativein           whendiscoveredcodes.wdcnarrative%TYPE,
   startdatein              whendiscoveredcodes.startdate%TYPE,
   stopdatein               whendiscoveredcodes.stopdate%TYPE,
   camsinitflag             INTEGER,
   mocidin                  whendiscoveredcodes.mocid%TYPE,
   whendiscoveredid   OUT   whendiscoveredcodes.whendiscoveredid%TYPE
)
AS
BEGIN
   SELECT seq_whendisccodes.NEXTVAL
     INTO whendiscoveredid
     FROM DUAL;

   INSERT INTO whendiscoveredcodes
               (whendiscoveredid, wdc, wdcnarrative, mocid,
                startdate, stopdate
               )
        VALUES (whendiscoveredid, wdcin, wdcnarrativein, mocidin,
                startdatein, stopdatein
               );

   IF (camsinitflag = 1)
   THEN
      UPDATE whendiscoveredcodes
         SET camsinit = SYSDATE
       WHERE whendiscoveredid = whendiscoveredid;
   END IF;
END add_moc_wdc;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_WEAPONSCLASS" (
   weaponsclass           weaponsclass.weaponsclass%TYPE,
   defaultval             weaponsclass.defaultval%TYPE,
   mocidin                weaponsclass.mocid%TYPE,
   weaponsclassid   OUT   weaponsclass.weaponsclassid%TYPE
)
AS
BEGIN
   SELECT seq_weaponsclass.NEXTVAL
     INTO weaponsclassid
     FROM DUAL;

   INSERT INTO weaponsclass
               (weaponsclassid, weaponsclass, defaultval, mocid
               )
        VALUES (weaponsclassid, weaponsclass, defaultval, mocidin
               );
END add_moc_weaponsclass;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_WEAPONTYPE" (
   weapontype           weapontypes.weapontype%TYPE,
   mocidin              weapontypes.mocid%TYPE,
   weapontypeid   OUT   weapontypes.weaponstypeid%TYPE
)
AS
BEGIN
   SELECT seq_weapontypes.NEXTVAL
     INTO weapontypeid
     FROM DUAL;

   INSERT INTO weapontypes
               (weaponstypeid, weapontype, mocid
               )
        VALUES (weapontypeid, weapontype, mocidin
               );
END add_moc_weapontype;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_WING" (
   wingnamein                wings.wingname%TYPE,
   unitidin                  wings.unitid%TYPE,
   commandcodein             wings.commandcode%TYPE,
   elcin                     wings.elc%TYPE,
   defaultwingin             INTEGER,
   lastupdatebyin            INTEGER,
   mocidin                   wings.mocid%TYPE,
   wingidout           OUT   wings.wingid%TYPE,
   scheduledowin             wings.scheduledow%TYPE,
   scheduletimein            wings.scheduletime%TYPE,
   timezonefactorin          wings.timezonefactor%TYPE,
   timezonehoursin           wings.timezonehours%TYPE,
   gmtfactorin               wings.gmtfactor%TYPE,
   gmthoursin                wings.gmthours%TYPE,
   imdsinterfaceonin         wings.imdsinterfaceon%TYPE
)
AS
BEGIN
   SELECT seq_wings.NEXTVAL
     INTO wingidout
     FROM DUAL;

   INSERT INTO wings
               (wingid, wingname, unitid, commandcode, elc,
                lastupdate, lastupdateby, mocid, scheduledow,
                scheduletime, timezonefactor, timezonehours,
                gmtfactor, gmthours, imdsinterfaceon
               )
        VALUES (wingidout, wingnamein, unitidin, commandcodein, elcin,
                SYSDATE, lastupdatebyin, mocidin, scheduledowin,
                scheduletimein, timezonefactorin, timezonehoursin,
                gmtfactorin, gmthoursin, imdsinterfaceonin
               );
END add_moc_wing;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_WORKCENTER" (
   workcenternamein         workcenters.workcentername%TYPE,
   workcentercodein         workcenters.workcentercode%TYPE,
   organizationidin         workcenters.porgid%TYPE,
   wingidin                 workcenters.wingid%TYPE,
   camsinitflag             INTEGER,
   lastupdatebyin           INTEGER,
   mocidin                  workcenters.mocid%TYPE,
   workcenterid       OUT   workcenters.workcenterid%TYPE
)
AS
BEGIN
   SELECT seq_workcenters.NEXTVAL
     INTO workcenterid
     FROM DUAL;

   INSERT INTO workcenters
               (workcenterid, workcentername, workcentercode,
                porgid, wingid, lastupdateby, lastupdate, mocid
               )
        VALUES (workcenterid, workcenternamein, workcentercodein,
                organizationidin, wingidin, lastupdatebyin, SYSDATE, mocidin
               );

   IF (camsinitflag = 1)
   THEN
      UPDATE workcenters
         SET camsinit = SYSDATE
       WHERE workcenterid = workcenterid;
   END IF;
END add_moc_workcenter;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_WUC" (
   wuccodein                wuc.wuccode%TYPE,
   wucdescriptionin         wuc.wucdescription%TYPE,
   wucstartdatein           wuc.wucstartdate%TYPE,
   wucstopdatein            wuc.wucstopdate%TYPE,
   lastupdatebyin           INTEGER,
   wucid              OUT   wuc.wucid%TYPE,
   mdsin                    wuc.missiondesignseries%TYPE,
   blocknumberin            wuc.blocknumber%TYPE,
   newwucin                 wuc.newwuc%TYPE
)
AS
BEGIN
   SELECT NVL (MAX (wuc.wucid), 0) + 1
     INTO wucid
     FROM wuc;

   INSERT INTO wuc
               (wucid, wuccode, wucdescription, wucstartdate,
                wucstopdate, lastupdateby, lastupdate, missiondesignseries,
                blocknumber, newwuc
               )
        VALUES (wucid, wuccodein, wucdescriptionin, wucstartdatein,
                wucstopdatein, lastupdatebyin, SYSDATE, mdsin,
                blocknumberin, newwucin
               );
END add_moc_wuc;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_MOC_WX" (
   weathercode                wx.weathercode%TYPE,
   weatherdescription         wx.weatherdescription%TYPE,
   defaultweathercode         wx.defaultweathercode%TYPE,
   mocidin                    wx.mocid%TYPE,
   wxcodeid             OUT   wx.wxcodeid%TYPE
)
AS
BEGIN
   SELECT seq_wx.NEXTVAL
     INTO wxcodeid
     FROM DUAL;

   INSERT INTO wx
               (wxcodeid, weathercode, weatherdescription,
                defaultweathercode, mocid
               )
        VALUES (wxcodeid, weathercode, weatherdescription,
                defaultweathercode, mocidin
               );
END add_moc_wx;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_ORDNANCE" (
   ordnance              ordnance.ordnance%TYPE,
   configuration         ordnance.configuration%TYPE,
   weaponstypeid         ordnance.weaponstypeid%TYPE,
   ordnanceid      OUT   ordnance.ordnanceid%TYPE
)
AS
BEGIN
   SELECT seq_ordnance.NEXTVAL
     INTO ordnanceid
     FROM DUAL;

   INSERT INTO ordnance
               (ordnanceid, ordnance, configuration, weaponstypeid
               )
        VALUES (ordnanceid, ordnance, configuration, weaponstypeid
               );
END add_ordnance;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_ORG" (
   orgnamein                       organizations.orgname%TYPE,
   orgidin                         organizations.orgid%TYPE,
   station_location_codein         organizations.station_location_code%TYPE,
   camsinitflag                    INTEGER,
   unit_idin                       organizations.unit_id%TYPE,
   lastupdatebyin                  organizations.lastupdateby%TYPE,
   organizationsid           OUT   organizations.organizationsid%TYPE
)
AS
   wingidin   INTEGER;
BEGIN
   SELECT seq_organizations.NEXTVAL
     INTO organizationsid
     FROM DUAL;

   SELECT wingid
     INTO wingidin
     FROM wings
    WHERE unitid = unit_idin;

   INSERT INTO organizations
               (organizationsid, orgname, orgid, station_location_code,
                camsinit, unit_id, wingid, lastupdateby, lastupdate
               )
        VALUES (organizationsid, orgnamein, orgidin, station_location_codein,
                SYSDATE, unit_idin, wingidin, lastupdatebyin, SYSDATE
               );
END add_org;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_ORG2" (
   orgnamein                       organizations.orgname%TYPE,
   orgidin                         organizations.orgid%TYPE,
   station_location_codein         organizations.station_location_code%TYPE,
   camsinitflag                    INTEGER,
   unit_idin                       organizations.unit_id%TYPE,
   lastupdatebyin                  organizations.lastupdateby%TYPE,
   wingidin                        organizations.wingid%TYPE,
   organizationsid           OUT   organizations.organizationsid%TYPE
)
AS
BEGIN
   SELECT seq_organizations.NEXTVAL
     INTO organizationsid
     FROM DUAL;

   INSERT INTO organizations
               (organizationsid, orgname, orgid, station_location_code,
                camsinit, unit_id, wingid, lastupdateby, lastupdate
               )
        VALUES (organizationsid, orgnamein, orgidin, station_location_codein,
                SYSDATE, unit_idin, wingidin, lastupdatebyin, SYSDATE
               );
END add_org2;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_PERMISSION" (
   useridin             permissions.userid%TYPE,
   squadronidin         permissions.squadronid%TYPE,
   emocrolein           permissions.emocrole%TYPE,
   permissionid   OUT   permissions.permissionid%TYPE
)
AS
BEGIN
   SELECT seq_permissions.NEXTVAL
     INTO permissionid
     FROM DUAL;

   INSERT INTO permissions
               (permissionid, userid, squadronid, emocrole
               )
        VALUES (permissionid, useridin, squadronidin, emocrolein
               );
END add_permission;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_PILOT" (
   pilotname          pilot.pilotname%TYPE,
   rankid             pilot.rankid%TYPE,
   squadronid         pilot.squadronid%TYPE,
   pilotid      OUT   pilot.pilotid%TYPE
)
AS
BEGIN
   SELECT seq_pilots.NEXTVAL
     INTO pilotid
     FROM DUAL;

   INSERT INTO pilot
               (pilotid, pilotname, rankid, squadronid
               )
        VALUES (pilotid, pilotname, rankid, squadronid
               );
END add_pilot;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_PILOT_FROM_EXCEL" (
PILOTNAME      PILOT.PILOTNAME%TYPE,
SQUADRONID    PILOT.SQUADRONID%TYPE,
MOCIDIN     PILOT.MOCID%TYPE,
PILOTID OUT      PILOT.PILOTID%TYPE
)
/******************************************************************************
   NAME:       ADD_PILOT_FROM_EXCEL
   PURPOSE:    Inserts an PILOT found in an Excel schedule line not
         already in the db.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        5/27/03      A.Mitchell       1. Created this procedure.

   PARAMETERS:
   INPUT:
   *PILOT
   OUTPUT:
   *PILOTID
   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/
AS

NEWPILOTID NUMBER;
DEFRANK NUMBER;

BEGIN
  --INCREMENT
   SELECT SEQ_PILOTS.NEXTVAL INTO NEWPILOTID FROM DUAL;
   SELECT RANKID
   INTO DEFRANK
   FROM RANKS
   WHERE DEFAULTRANK = 1
   AND MOCID = MOCIDIN;

  INSERT INTO PILOT (
  PILOTID,
  SQUADRONID,
  PILOTNAME,
  MOCID,
  RANKID
  )
    VALUES
 ( NEWPILOTID,
  SQUADRONID,
  PILOTNAME,
  MOCIDIN,
  DEFRANK

 );
 PILOTID := NEWPILOTID;
END ADD_PILOT_FROM_EXCEL;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_PORTALUSER" (
   portaluseridin         users.portaluserid%TYPE
)
AS
newuserid Integer;
BEGIN
   SELECT seq_users.NEXTVAL
     INTO newuserid
     FROM DUAL;

   INSERT INTO users
               (userid, username, portaluserid, isonline, badattempts
               )
        VALUES (newuserid, portaluseridin, portaluseridin, 0,0
               );
   commit;
END add_portaluser;



 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_POSSESSION" (
   possessioncode                possessions.possessioncode%TYPE,
   possessiondescription         possessions.possessiondescription%TYPE,
   defaultpossession             possessions.defaultpossession%TYPE,
   possessionid            OUT   possessions.possessionid%TYPE
)
AS
BEGIN
   SELECT seq_possessions.NEXTVAL
     INTO possessionid
     FROM DUAL;

   INSERT INTO possessions
               (possessionid, possessioncode, possessiondescription,
                defaultpossession
               )
        VALUES (possessionid, possessioncode, possessiondescription,
                defaultpossession
               );
END add_possession;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_RANGE" (
   RANGE                    VARCHAR2,
   rangedescription         ranges.rangedescription%TYPE,
   rangeid            OUT   ranges.rangeid%TYPE
)
AS
BEGIN
   SELECT seq_ranges.NEXTVAL
     INTO rangeid
     FROM DUAL;

   INSERT INTO ranges
               (rangeid, RANGE, rangedescription
               )
        VALUES (rangeid, RANGE, rangedescription
               );
END add_range;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_RANGE_FROM_EXCEL" (
RANGE       RANGES.RANGE%TYPE,
MOCID     RANGES.MOCID%TYPE,
RANGEID OUT      RANGES.RANGEID%TYPE
)
/******************************************************************************
   NAME:       ADD_RANGE_FROM_EXCEL
   PURPOSE:    Inserts an RANGE found in an Excel schedule line not
         already in the db.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        5/27/03      A.Mitchell       1. Created this procedure.

   PARAMETERS:
   INPUT:
   *RANGE
   OUTPUT:
   *RANGEID
   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/
AS

NEWRANGEID NUMBER;

BEGIN
  --INCREMENT
  SELECT SEQ_RANGES.NEXTVAL INTO NEWRANGEID FROM DUAL;

  INSERT INTO RANGES (
  RANGEID,
  RANGE,
  MOCID
  )
    VALUES
 ( NEWRANGEID,
  RANGE,
  MOCID

 );
 RANGEID := NEWRANGEID;
END ADD_RANGE_FROM_EXCEL;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_RANK" (
   rankcode                ranks.rankcode%TYPE,
   rankdescription         ranks.rankdescription%TYPE,
   defaultrank             ranks.defaultrank%TYPE,
   rankid            OUT   ranks.rankid%TYPE
)
AS
BEGIN
   SELECT seq_ranks.NEXTVAL
     INTO rankid
     FROM DUAL;

   INSERT INTO ranks
               (rankid, rankcode, rankdescription, defaultrank
               )
        VALUES (rankid, rankcode, rankdescription, defaultrank
               );
END add_rank;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_REMARKS" (
REMARKSID		  REMARKS.REMARKSID%TYPE,
REMARKS			  REMARKS.REMARKS%TYPE

)
/******************************************************************************
   NAME:       ADD_REMARKS
   PURPOSE:    Inserts the REMARKS record

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        6/30/03      A.Mitchell       1. Created this procedure.

   PARAMETERS:
   INPUT:
   *REMARKSID
   OUTPUT:
   *REMARKS
   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/

AS

BEGIN

	 INSERT INTO REMARKS
	 (REMARKSID, REMARKS)
	 VALUES
	 (REMARKSID, REMARKS);

END ADD_REMARKS;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_SCHED_STATUS" (
SCHEDULEID		  SCHEDULE.SCHEDULEID%TYPE,
STATUSCODEID	  SCHEDULESTATUS.STATUSCODEID%TYPE,
STATUSTYPE	  	  SCHEDULESTATUS.STATUSTYPE%TYPE,
STATUSTIME	  	  SCHEDULESTATUS.STATUSTIME%TYPE
--USERID 			  USERS.USERID%TYPE

)
/******************************************************************************
   NAME:       ADD_SCHED_STATUS
   PURPOSE:    Inserts default status record for a newly entered plane

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        7/1/03      A.Mitchell       1. Created this procedure.

   PARAMETERS:
   INPUT:
   *SCHEDULEID
   *STATUSCODEID
   *STATUSTYPE
   *STATUSTIME
   *USERID
   OUTPUT:
   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/

AS

NEWSCHEDULESTATUSID NUMBER;

BEGIN

	 --INCREMENT
	 SELECT SEQ_SCHEDULESTATUS.NEXTVAL
	 INTO   NEWSCHEDULESTATUSID
	 FROM   DUAL;

	 IF STATUSTYPE = '0' THEN
	 	INSERT INTO SCHEDULESTATUS
		(
	 	 	   SCHEDULESTATUSID,
	 		   SCHEDULEID,
			   STATUSCODEID,
			   STATUSTYPE,
			   STATUSTIME
			   --USERID
		)
		VALUES
		(	NEWSCHEDULESTATUSID,
	 		SCHEDULEID,
			STATUSCODEID,
			STATUSTYPE,
			STATUSTIME
			--USERID
		);
	 ELSE --IF STATUSTYPE = '1' THEN
	 	 INSERT INTO SCHEDULESTATUS
		(
	 	 	   SCHEDULESTATUSID,
	 		   SCHEDULEID,
			   FUELSTATUSID,
			   STATUSTYPE,
			   STATUSTIME
			   --USERID
		)
		VALUES
		(	NEWSCHEDULESTATUSID,
	 		SCHEDULEID,
			STATUSCODEID,
			STATUSTYPE,
			STATUSTIME
			--USERID
		);
	END IF;

END ADD_SCHED_STATUS;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_SEMEDX" (
   semedx                    semedx.semedx%TYPE,
   semedxdescription         semedx.semedxdescription%TYPE,
   defaultval                semedx.defaultval%TYPE,
   colorrulesid              semedx.colorrulesid%TYPE,
   semedxid            OUT   semedx.semedxid%TYPE
)
AS
BEGIN
   SELECT seq_semedx.NEXTVAL
     INTO semedxid
     FROM DUAL;

   INSERT INTO semedx
               (semedxid, semedx, semedxdescription, defaultval, colorrulesid
               )
        VALUES (semedxid, semedx, semedxdescription, defaultval, colorrulesid
               );
END add_semedx;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_SQUADRON" (
   squadronnamein            squadrons.squadronname%TYPE,
   shortnamein               squadrons.shortname%TYPE,
   wingidin                  squadrons.wingid%TYPE,
   coloridin                 squadrons.colorid%TYPE,
   organizationsidin         squadrons.organizationsid%TYPE,
   camsinitflag              INTEGER,
   squadronid          OUT   squadrons.squadronid%TYPE
)
AS
BEGIN
   SELECT seq_squadrons.NEXTVAL
     INTO squadronid
     FROM DUAL;

   INSERT INTO squadrons
               (squadronid, squadronname, shortname, wingid, colorid,
                organizationsid
               )
        VALUES (squadronid, squadronnamein, shortnamein, wingidin, coloridin,
                organizationsidin
               );

   IF (camsinitflag = 1)
   THEN
      UPDATE squadrons
         SET camsinit = SYSDATE
       WHERE squadronid = squadronid;
   END IF;
END add_squadron;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_STATLOC" (
   stationlocin              stationloccodes.stationloc%TYPE,
   stalocnarrativein         stationloccodes.stalocnarrative%TYPE,
   camsinitflag              INTEGER,
   startdatein               stationloccodes.startdate%TYPE,
   stopdatein                stationloccodes.stopdate%TYPE,
   staloccodeid        OUT   stationloccodes.staloccodeid%TYPE
)
AS
BEGIN
   SELECT seq_stationlocs.NEXTVAL
     INTO staloccodeid
     FROM DUAL;

   INSERT INTO stationloccodes
               (staloccodeid, stationloc, stalocnarrative, startdate,
                stopdate, mocid
               )
        VALUES (staloccodeid, stationlocin, stalocnarrativein, startdatein,
                stopdatein, 0
               );

   IF (camsinitflag = 1)
   THEN
      UPDATE stationloccodes
         SET camsinit = SYSDATE
       WHERE staloccodeid = staloccodeid;
   END IF;
END add_statloc;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_STATUSCODE" (
   statuscodein                statuscode.statuscode%TYPE,
   ordernumberin               statuscode.ordernumber%TYPE,
   iconnamein                  statuscode.iconname%TYPE,
   defaultstatuscodein         statuscode.defaultstatuscode%TYPE,
   lastflownin                 statuscode.lastflown%TYPE,
   flyingin                    statuscode.flying%TYPE,
   takeoffin                   statuscode.takeoff%TYPE,
   statuscodelabelin           statuscode.statuscodelabel%TYPE,
   allowsortieupdatein         statuscode.allowsortieupdate%TYPE,
   statuscodeid          OUT   statuscode.statuscodeid%TYPE
)
AS
BEGIN
   SELECT seq_statuscode.NEXTVAL
     INTO statuscodeid
     FROM DUAL;

   INSERT INTO statuscode
               (statuscodeid, statuscode, ordernumber, iconname,
                defaultstatuscode, lastflown, flying, takeoff,
                statuscodelabel, allowsortieupdate
               )
        VALUES (statuscodeid, statuscodein, ordernumberin, iconnamein,
                defaultstatuscodein, lastflownin, flyingin, takeoffin,
                statuscodelabelin, allowsortieupdatein
               );
END add_statuscode;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_STATUSRULE" (
   statuscodeidin          statustransitionrule.statuscodeid%TYPE,
   transition2idin         statustransitionrule.transition2id%TYPE,
   statruleid        OUT   statustransitionrule.statruleid%TYPE
)
AS
BEGIN
   SELECT seq_statusrule.NEXTVAL
     INTO statruleid
     FROM DUAL;

   INSERT INTO statustransitionrule
               (statruleid, statuscodeid, transition2id
               )
        VALUES (statruleid, statuscodeidin, transition2idin
               );
END add_statusrule;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_SYMBOL" (
   symbol                    symbols.symbol%TYPE,
   symboldescription         symbols.symboldescription%TYPE,
   condcodeid                symbols.condcodeid%TYPE,
   symbolid            OUT   symbols.symbolid%TYPE
)
AS
BEGIN
   SELECT seq_symbols.NEXTVAL
     INTO symbolid
     FROM DUAL;

   INSERT INTO symbols
               (symbolid, symbol, symboldescription, condcodeid
               )
        VALUES (symbolid, symbol, symboldescription, condcodeid
               );
END add_symbol;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_USER" (
   usernamein             users.username%TYPE,
   userpasswordin         users.userpassword%TYPE,
   fullnamein             users.fullname%TYPE,
   emailin                users.email%TYPE,
   rankcodein             users.rankcode%TYPE,
   userid           OUT   users.userid%TYPE
)
AS
BEGIN
   SELECT seq_users.NEXTVAL
     INTO userid
     FROM DUAL;

   INSERT INTO users
               (userid, username, userpassword, fullname, email,
                rankcode
               )
        VALUES (userid, usernamein, userpasswordin, fullnamein, emailin,
                rankcodein
               );
END add_user;



 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_WDC" (
   wdcin                    whendiscoveredcodes.wdc%TYPE,
   wdcnarrativein           whendiscoveredcodes.wdcnarrative%TYPE,
   startdatein              whendiscoveredcodes.startdate%TYPE,
   stopdatein               whendiscoveredcodes.stopdate%TYPE,
   camsinitflag             INTEGER,
   whendiscoveredid   OUT   whendiscoveredcodes.whendiscoveredid%TYPE
)
AS
BEGIN
   SELECT seq_whendisccodes.NEXTVAL
     INTO whendiscoveredid
     FROM DUAL;

   INSERT INTO whendiscoveredcodes
               (whendiscoveredid, wdc, wdcnarrative, startdate,
                stopdate, mocid
               )
        VALUES (whendiscoveredid, wdcin, wdcnarrativein, startdatein,
                stopdatein, 0
               );

   IF (camsinitflag = 1)
   THEN
      UPDATE whendiscoveredcodes
         SET camsinit = SYSDATE
       WHERE whendiscoveredid = whendiscoveredid;
   END IF;
END add_wdc;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_WEAPONSCLASS" (
   weaponsclass           weaponsclass.weaponsclass%TYPE,
   defaultval             weaponsclass.defaultval%TYPE,
   weaponsclassid   OUT   weaponsclass.weaponsclassid%TYPE
)
AS
BEGIN
   SELECT seq_weaponsclass.NEXTVAL
     INTO weaponsclassid
     FROM DUAL;

   INSERT INTO weaponsclass
               (weaponsclassid, weaponsclass, defaultval
               )
        VALUES (weaponsclassid, weaponsclass, defaultval
               );
END add_weaponsclass;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_WEAPONTYPE" (
   weapontype           weapontypes.weapontype%TYPE,
   weapontypeid   OUT   weapontypes.weaponstypeid%TYPE
)
AS
BEGIN
   SELECT seq_weapontypes.NEXTVAL
     INTO weapontypeid
     FROM DUAL;

   INSERT INTO weapontypes
               (weaponstypeid, weapontype
               )
        VALUES (weapontypeid, weapontype
               );
END add_weapontype;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_WING" (
   wingnamein             wings.wingname%TYPE,
   unitidin               wings.unitid%TYPE,
   commandcodein          wings.commandcode%TYPE,
   elcin                  wings.elc%TYPE,
   defaultwingin          INTEGER,
   lastupdatebyin         INTEGER,
   scheduledowin          wings.scheduledow%TYPE,
   scheduletimein         wings.scheduletime%TYPE,
   wingidout        OUT   wings.wingid%TYPE
)
AS
BEGIN
   SELECT seq_wings.NEXTVAL
     INTO wingidout
     FROM DUAL;

   INSERT INTO wings
               (wingid, wingname, unitid, commandcode, elc,
                lastupdate, lastupdateby, scheduledow, scheduletime
               )
        VALUES (wingidout, wingnamein, unitidin, commandcodein, elcin,
                SYSDATE, lastupdatebyin, scheduledowin, scheduletimein
               );
END add_wing;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_WORKCENTER" (
   workcenternamein         workcenters.workcentername%TYPE,
   workcentercodein         workcenters.workcentercode%TYPE,
   organizationidin         workcenters.porgid%TYPE,
   wingidin                 workcenters.wingid%TYPE,
   camsinitflag             INTEGER,
   lastupdatebyin           INTEGER,
   workcenterid       OUT   workcenters.workcenterid%TYPE
)
AS
BEGIN
   SELECT seq_workcenters.NEXTVAL
     INTO workcenterid
     FROM DUAL;

   INSERT INTO workcenters
               (workcenterid, workcentername, workcentercode,
                porgid, wingid, lastupdateby, lastupdate
               )
        VALUES (workcenterid, workcenternamein, workcentercodein,
                organizationidin, wingidin, lastupdatebyin, SYSDATE
               );

   IF (camsinitflag = 1)
   THEN
      UPDATE workcenters
         SET camsinit = SYSDATE
       WHERE workcenterid = workcenterid;
   END IF;
END add_workcenter;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ADD_WX" (
   weathercode                wx.weathercode%TYPE,
   weatherdescription         wx.weatherdescription%TYPE,
   defaultweathercode         wx.defaultweathercode%TYPE,
   wxcodeid             OUT   wx.wxcodeid%TYPE
)
AS
BEGIN
   SELECT seq_wx.NEXTVAL
     INTO wxcodeid
     FROM DUAL;

   INSERT INTO wx
               (wxcodeid, weathercode, weatherdescription, defaultweathercode
               )
        VALUES (wxcodeid, weathercode, weatherdescription, defaultweathercode
               );
END add_wx;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."AIRCRAFT_CHANGE_SQUADRON" (
   aircraftidin   aircraft.aircraftid%TYPE,
   squadronidin   aircraft.squadronid%TYPE
)
AS
BEGIN
   UPDATE aircraft
      SET squadronid = squadronidin,
          flightid = NULL
    WHERE aircraft.aircraftid = aircraftidin;
END aircraft_change_squadron;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_AIRCRAFTEXTRACTTRX" 
AS
   /******************************************************************************
   NAME:       ARCH_AIRCRAFTEXTRACTTRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        1/10/2007  GMR            1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     ARCH_AIRCRAFTEXTRACTTRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       AIRCRAFTEXTRACTTRX)

******************************************************************************/
BEGIN

     INSERT INTO EMOCAUX.AIRCRAFTEXTRACTTRX
  SELECT 
   AIRCRAFTEXTRACTTRXID, FROMENTERPRISELOCATIONCODE, FROMUNITID, 
   EQUIPMENTID, MISSIONDESIGNSERIES, MISSIONDESIGNSERIESBLOCK, 
   AIRCRAFTSERIALNUMBER, MAINTENANCESTATUSCODE, CONDITIONSTATUSCODE, 
   STARTDATE, STARTTIME, WORKUNITCODE, 
   JOBCONTROLNUMBER, ESTIMATEDTIMEINCOMMISSION, STATUSNARRATIVE, 
   LOCATIONCODE, EQUIPMENTORGANIZATIONFLIGHTID, MAINTENANCEREPAIRPRIORITY, 
   ARMED, MULTIPLECONFIGURATIONID, LOCALOPTION, 
   ASSIGNMENTSTATUSCODE, POSSESSIONID, GEOLOCCODE, 
   OWNINGMAJCOM, LASTFLYDATE, DEDICATEDCREWCHIEF, 
   DATEPROCESSED, OWNINGWORKCENTER, SYSDATE AS archivedate
FROM EMOC3.AIRCRAFTEXTRACTTRX
WHERE DATEPROCESSED < SYSDATE - 7;

DELETE FROM EMOC3.AIRCRAFTEXTRACTTRX
WHERE DATEPROCESSED < SYSDATE - 7;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END ARCH_AIRCRAFTEXTRACTTRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_CAUSECODETRX" 
AS
   /******************************************************************************
   NAME:       ARCH_CAUSECODETRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2/16/2007  GMR            1. Created this procedure.

   NOTES:



******************************************************************************/
BEGIN

     INSERT INTO EMOCAUX.CAUSECODETRX
 SELECT 
CAUSECODETRXID, HOMEENTERPRISELOCATIONCODE, CURRENTENTERPRISELOCATIONCODE, 
   UNITID, CAUSECODE, CAUSECODENARRATIVE, 
   CAUSECODETYPEINDICATOR, HOSTUNITDATEANDTIME, TRANSACTIONORDINALDATE, 
   RECORDDATETIME, APPLICATIONNOTE, DATEPROCESSED, 
   DEFERCODETYPEINDICATOR, TRANSACTIONTYPE, SYSDATE AS ARCHIVEDATE
FROM EMOC3.CAUSECODETRX
WHERE DATEPROCESSED < SYSDATE - 7;

DELETE FROM EMOC3.CAUSECODETRX
WHERE DATEPROCESSED < SYSDATE - 7;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END ARCH_CAUSECODETRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_DEVIATIONABORTTRX" 
AS
   /******************************************************************************
   NAME:       ARCH_DEVIATIONABORTTRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     ARCH_DEVIATIONABORTTRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       deviationaborttrx)

******************************************************************************/
BEGIN

     INSERT INTO EMOCAUX.DEVIATIONABORTTRX
      SELECT DEVIATIONABORTTRXID, HOMEENTERPRISELOCATIONCODE,
    CURRENTENTERPRISELOCATIONCODE, UNITID, SORTIEDATE, EQUIPMENTID,
       SORTIENUMBER, SORTIEMODIFIER, MAINTENANCEEVENTID, SCHEDULINGBLOCKNUMBER,
       DEVIATIONCODE, DEVIATIONCAUSECODE, CHARGEABLEINDICATOR,
       STARTDATE, STARTTIME, STOPDATE, STOPTIME, DEVIATIONREMARKS,
    DATEPROCESSED,  SYSDATE AS archivedate
  FROM EMOC3.DEVIATIONABORTTRX
WHERE DATEPROCESSED < SYSDATE - 7;

DELETE FROM EMOC3.DEVIATIONABORTTRX
WHERE DATEPROCESSED < SYSDATE - 7;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END ARCH_DEVIATIONABORTTRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_DEVIATIONCODETRX" 
AS
   /******************************************************************************
   NAME:       ARCH_DEVIATIONCODETRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        1/10/2007  GMR            1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     ARCH_DEVIATIONCODETRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       DEVIATIONCODETRX)

******************************************************************************/
BEGIN

     INSERT INTO EMOCAUX.DEVIATIONCODETRX
  SELECT 
DEVIATIONCODETRXID, HOMEENTERPRISELOCATIONCODE, UNITID, 
   DEVIATIONCODE, DEVIATIONCODENARRATIVE, RECORDDATETIME, 
   DATEPROCESSED, APPLICATIONNOTE,  SYSDATE AS archivedate
FROM EMOC3.DEVIATIONCODETRX
WHERE DATEPROCESSED < SYSDATE - 7;

DELETE FROM EMOC3.DEVIATIONCODETRX
WHERE DATEPROCESSED < SYSDATE - 7;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END ARCH_DEVIATIONCODETRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_DEVIATIONCORRECTIONTRX" 
AS
   /******************************************************************************
   NAME:       ARCH_DEVIATIONCORRECTIONTRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     ARCH_DEVIATIONCORRECTIONTRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       deviationcorrectiontrx)

******************************************************************************/
BEGIN

     INSERT INTO EMOCAUX.DEVIATIONCORRECTIONTRX
      SELECT DEVIATIONCORRECTTRXID, HOMEENTERPRISELOCATIONCODE,
    CURRENTENTERPRISELOCATIONCODE, UNITID, SORTIEDATE, SCHEDULINGBLOCKNUMBER,
    EQUIPMENTID, SORTIENUMBER, SORTIEMODIFIER, MAINTENANCEEVENTID,
       DEVIATIONCODE, DEVIATIONCAUSECODE, NEWDEVIATIONCAUSECODE, CHARGEABLEINDICATOR,
       STARTDATE, STARTTIME, STOPDATE, STOPTIME, DEVIATIONREMARKS,
    DATEPROCESSED,  SYSDATE AS archivedate
   FROM EMOC3.DEVIATIONCORRECTIONTRX
WHERE DATEPROCESSED < SYSDATE - 7;

DELETE FROM EMOC3.DEVIATIONCORRECTIONTRX
WHERE DATEPROCESSED < SYSDATE - 7;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END ARCH_DEVIATIONCORRECTIONTRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_DEVIATIONDELETETRX" 
AS
   /******************************************************************************
   NAME:       ARCH_DEVIATIONDELETETRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     ARCH_DEVIATIONDELETETRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       deviationdeletetrx)

******************************************************************************/
BEGIN

     INSERT INTO EMOCAUX.DEVIATIONDELETETRX
      SELECT DEVIATIONDELETETRXID, HOMEENTERPRISELOCATIONCODE,
    CURRENTENTERPRISELOCATIONCODE, UNITID, SORTIEDATE, SCHEDULINGBLOCKNUMBER,
    EQUIPMENTID, SORTIENUMBER, SORTIEMODIFIER, MAINTENANCEEVENTID,
       DEVIATIONCODE, DEVIATIONCAUSECODE, CHARGEABLEINDICATOR, DATEPROCESSED,
   SYSDATE AS archivedate
   FROM EMOC3.DEVIATIONDELETETRX
WHERE DATEPROCESSED < SYSDATE - 7;

DELETE FROM EMOC3.DEVIATIONDELETETRX
WHERE DATEPROCESSED < SYSDATE - 7;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END ARCH_DEVIATIONDELETETRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_DEVIATIONSTARTSTOPTRX" 
AS
   tmpvar   NUMBER;
   /******************************************************************************
   NAME:       ARCH_DEVIATIONSTARTSTOPTRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     ARCH_DEVIATIONSTARTSTOPTRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       deviationstartstoptrx)

******************************************************************************/
BEGIN

     INSERT INTO EMOCAUX.DEVIATIONSTARTSTOPTRX
      SELECT DEVIATIONSTARTSTOPTRXID, HOMEENTERPRISELOCATIONCODE,
    CURRENTENTERPRISELOCATIONCODE, UNITID, SORTIEDATE,
    EQUIPMENTID, SORTIENUMBER, SORTIEMODIFIER, MAINTENANCEEVENTID,
       SCHEDULINGBLOCKNUMBER, DEVIATIONCODE, DEVIATIONCAUSECODE, CHARGEABLEINDICATOR,
       STARTDATE, STARTTIME, STOPDATE, STOPTIME, DEVIATIONREMARKS,
    DATEPROCESSED,  SYSDATE AS archivedate
  FROM EMOC3.DEVIATIONSTARTSTOPTRX
WHERE DATEPROCESSED < SYSDATE - 7;

DELETE FROM EMOC3.DEVIATIONSTARTSTOPTRX
WHERE DATEPROCESSED < SYSDATE - 7;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END ARCH_DEVIATIONSTARTSTOPTRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_ENGINERUNLOG" (archdate DATE)
AS
BEGIN
--Archive record if older than cutoff date.
   INSERT INTO emocaux.enginerunlog
      SELECT enginelogid, moccontroller, runperson, employeenumber, rundate,
             qualchecked, standbyfiretruck, reason, idlestart, idlestop,
             milstart, milstop, abstart, abstop, misupdated, spapproval,
             towerrunclearance, enginedataid, lastupdate, lastupdateby,
             SYSDATE AS archivedate
        FROM enginerunlog
       WHERE lastupdate < archdate;

--Then delete
   DELETE      enginerunlog
         WHERE lastupdate < archdate;

--Commit only if both successful
   COMMIT;
END;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_EQUIPMENTLOCUPDTRX" 
AS
   /******************************************************************************
   NAME:       ARCH_EQUIPMENTLOCATIONUPDATETRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        1/10/2007  GMR            1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     ARCH_EQUIPMENTLOCATIONUPDATETRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       EQUIPMENTLOCATIONUPDATETRX)

******************************************************************************/
BEGIN

     INSERT INTO EMOCAUX.EQUIPMENTLOCATIONUPDATETRX
  SELECT 
   EQUIPMENTLOCATIONUPDATETRXID, HOMEENTERPRISELOCATIONCODE, CURRENTENTERPRISELOCATIONCODE, 
   UNITID, EQUIPMENTID, LOCATIONCODE, 
   HOSTUNITDATEANDTIME, TRANSACTIONORDINALDATE, RECORDDATETIME, 
   APPLICATIONNOTE, DATEPROCESSED,  SYSDATE AS archivedate
FROM EMOC3.EQUIPMENTLOCATIONUPDATETRX
WHERE recorddatetime < SYSDATE - 7;

DELETE FROM EMOC3.EQUIPMENTLOCATIONUPDATETRX
WHERE recorddatetime < SYSDATE - 7;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END ARCH_EQUIPMENTLOCUPDTRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_EVENTLOG" (archdate DATE, mocidin moc.mocid%TYPE)
AS
BEGIN
--Archive record if older than cutoff date.
   INSERT INTO emocaux.eventlog
      SELECT logid, datetimeentered, eventtype, eventnarrative,
             shorttailnumber, userid, SYSDATE AS archivedate, mocid
        FROM eventlog
       WHERE datetimeentered < archdate
	     AND mocid = mocidin;

--Then delete
   DELETE      eventlog
         WHERE datetimeentered < archdate
		   AND mocid = mocidin;

--Commit only if both successful
   COMMIT;
END;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_GAINLOSSSTATUSUPDATETRX" 
AS
   /******************************************************************************
   NAME:       ARCH_GAINLOSSSTATUSUPDATETRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        1/10/2007  GMR            1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     ARCH_GAINLOSSSTATUSUPDATETRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       GAINLOSSSTATUSUPDATETRX)

******************************************************************************/
BEGIN

     INSERT INTO EMOCAUX.GAINLOSSSTATUSUPDATETRX
  SELECT 
GAINLOSSSTATUSUPDATETRXID, CURRENTENTERPRISELOCATIONCODE, UNITID, 
   EQUIPMENTID, MAINTENANCESTATUSCODE, CONDITIONSTATUSCODE, 
   OCCURANCEDATE, OCCURANCETIME, GAINLOSSACTIONCODE, 
   INSTALLATIONCODE, MAJORCOMMANDABBREVIATION, GAINLOSSTRANSFEROPTION, 
   TRANSFERTYPE, EVENTID, WORKCENTEREVENT, 
   WORKUNITCODE, REQUESTAPPROVEDCONFIGURATION, REQUESTACTUALCONFIGURATION, 
   HOSTUNITDATEANDTIME, TRANSACTIONORDINALDATE, RECORDDATETIME, 
   APPLICATIONNOTE, DATEPROCESSED, HOMEENTERPRISELOCATIONCODE,  SYSDATE AS archivedate
FROM EMOC3.GAINLOSSSTATUSUPDATETRX
WHERE recorddatetime < SYSDATE - 7;

DELETE FROM EMOC3.GAINLOSSSTATUSUPDATETRX
WHERE recorddatetime < SYSDATE - 7;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END ARCH_GAINLOSSSTATUSUPDATETRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_GEOLOCCODETRX" 
AS
   /******************************************************************************
   NAME:       ARCH_GEOLOCTRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2/16/2007  GMR            1. Created this procedure.

   NOTES:


******************************************************************************/
BEGIN

     INSERT INTO EMOCAUX.GEOLOCCODETRX
  SELECT 
GEOLOCCODETRXID, FROMENTERPRISELOCATIONCODE, FROMUNITID, 
   GEOLOCCODE, GEOLOCCODENARRATIVE, STARTDATE, 
   STOPDATE, TRANSACTIONCODE, DATEPROCESSED, 
   SYSDATE AS ARCHIVEDATE
FROM EMOC3.GEOLOCCODETRX
WHERE DATEPROCESSED < SYSDATE - 7;

DELETE FROM EMOC3.GEOLOCCODETRX
WHERE DATEPROCESSED < SYSDATE - 7;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END ARCH_GEOLOCcodeTRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_HISTORY" (archdate DATE)
AS
BEGIN
--Archive record if older than cutoff date.
   INSERT INTO emocaux.history
      SELECT historyid, eventdate, elementvalue, userid, aircraftid, ELEMENT,
             transactionid, SYSDATE AS archivedate
        FROM history
       WHERE eventdate < archdate;

--Then delete
   DELETE      history
         WHERE eventdate < archdate;

--Commit only if both successful
   COMMIT;
END;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_INTERFACEHISTORY" (archdate DATE)
AS
BEGIN
--Archive record if older than cutoff date.
   INSERT INTO emocaux.interfacehistory
      SELECT statuschangetime, statuschangeby, currentstatus,
             interfacecontrolid, currentenabled, SYSDATE AS archivedate
        FROM interfacehistory
       WHERE statuschangetime < archdate;

--Then delete
   DELETE      interfacehistory
         WHERE statuschangetime < archdate;

--Commit only if both successful
   COMMIT;
END;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_INTERFACEITEMSHISTORY" (archdate DATE)
AS
BEGIN
--Archive record if older than cutoff date.
   INSERT INTO emocaux.interfaceitemshistory
      SELECT statuschangetime, statuschangeby, currentstatus,
             interfacecontrolid, preenabled, interfaceitemid,
             SYSDATE AS archivedate
        FROM interfaceitemshistory
       WHERE statuschangetime < archdate;

--Then delete
   DELETE      interfaceitemshistory
         WHERE statuschangetime < archdate;

--Commit only if both successful
   COMMIT;
END;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_INTERFACELOG" (
ARCHDATE DATE
)
AS
BEGIN


--Archive record if older than cutoff date.
INSERT INTO EMOCAUX.INTERFACELOG

SELECT INTERFACELOGID,
    INTERFACECONTROLID,
    TRANSACTIONTYPE,
    TIMEOFINSERT,
    EXPIRATION,
    CAMSVALIDATED,
    CANCELFLAG,
    USERID,
    null,
    null,
    AIRCRAFTID,
    null,
    null,
    null,
    XMLIN,
    XMLOUT,
    null,
    PARSED,
    SYSDATE AS ARCHIVEDATE

FROM INTERFACELOG
WHERE TIMEOFINSERT < ARCHDATE;

--Then delete
DELETE INTERFACELOG
WHERE TIMEOFINSERT < ARCHDATE;

--Commit only if both successful
COMMIT;

end;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_INVENTORYSTATUSUPDATETRX" 
AS
   /******************************************************************************
   NAME:       ARCH_INVENTORYSTATUSUPDATETRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        1/10/2007  GMR            1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     ARCH_INVENTORYSTATUSUPDATETRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       INVENTORYSTATUSUPDATETRX)

******************************************************************************/
BEGIN

     INSERT INTO EMOCAUX.INVENTORYSTATUSUPDATETRX
SELECT 
   INVENTORYSTATUSUPDATETRXID, TRANSACTIONORDINALDATE, CURRENTENTERPRISELOCATIONCODE, 
   UNITID, EQUIPMENTID, GAINLOSSACTIONCODE, 
   CHANGEDATE, CHANGETIME, POSSESSIONID, 
   ASSIGNMENTSTATUSCODE, ASSIGNMENTCOMMANDABBR, AIRCRAFTCONFIGID, 
   TRAINERREPORTINGDESIGNATOR, MISSIONDESIGNSERIES, MAJORCOMMANDABBR, 
   HOSTUNITDATEANDTIME, RECORDDATETIME, APPLICATIONNOTE, 
   DATEPROCESSED, HOMEENTERPRISELOCATIONCODE,  SYSDATE AS archivedate
FROM EMOC3.INVENTORYSTATUSUPDATETRX
WHERE recorddatetime < SYSDATE - 7;

DELETE FROM EMOC3.INVENTORYSTATUSUPDATETRX
WHERE recorddatetime < SYSDATE - 7;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END ARCH_INVENTORYSTATUSUPDATETRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_JOAPDATA" (archdate DATE)
AS
BEGIN
--Archive record if older than cutoff date.
   INSERT INTO emocaux.joapdata
      SELECT joapdataid, (SELECT joapcode
                            FROM joap
                           WHERE joapid = joapdata.joapid) AS joap,
             enginedataid, moccontroller, sampledate, reason, hoursrequired,
             hoursremaining, notifiedby, expediternotified, joaplastupdated,
             scheduleid, SYSDATE AS archivedate
        FROM joapdata
       WHERE sampledate < archdate;

--Then delete
   DELETE      joapdata
         WHERE sampledate < archdate;

--Commit only if both successful
   COMMIT;
END;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_LOCATIONCODETRX" 
AS
   /******************************************************************************
   NAME:       ARCH_LOCATIONCODETRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        1/10/2007  GMR            1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     ARCH_LOCATIONCODETRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       LOCATIONCODETRX)

******************************************************************************/
BEGIN

     INSERT INTO EMOCAUX.LOCATIONCODETRX
SELECT 
   LOCATIONCODETRXID, HOMEENTERPRISELOCATIONCODE, CURRENTENTERPRISELOCATIONCODE, 
   LOCATIONCODE, LOCATIONRESTRICTIONCODE, ALLOWABLEQUANTITY, 
   HOSTUNITDATEANDTIME, TRANSACTIONORDINALDATE, RECORDDATETIME, 
   APPLICATIONNOTE, DATEPROCESSED, TRANSACTIONTYPE, 
   NEWLOCATIONCODE,  SYSDATE AS archivedate
FROM EMOC3.LOCATIONCODETRX
WHERE recorddatetime < SYSDATE - 7;


DELETE FROM EMOC3.LOCATIONCODETRX
WHERE recorddatetime < SYSDATE - 7;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END ARCH_LOCATIONCODETRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_MAIN" 
IS
  CURSOR moccur IS
    SELECT mocid FROM moc;

  mocrec moccur%ROWTYPE;

   archdate   DATE;
   dom        NUMBER (2);
BEGIN
  OPEN moccur;

    FETCH moccur
     INTO mocrec;

  WHILE moccur%FOUND LOOP
   SELECT archivedom
     INTO dom
     FROM emocconfig
 WHERE mocid = mocrec.mocid;

--Define the archive cutoff date. Cutoff defined as (1 previous month) and (Day of Month).
   archdate := (ADD_MONTHS (SYSDATE, -1)) - dom;
   arch_eventlog (archdate,mocrec.mocid);
   FETCH moccur
      INTO mocrec;
  END LOOP;

  CLOSE moccur;
  ARCH_WRITEUPS(archdate);
  arch_joapdata (archdate);
  arch_semedxdata (archdate);
  arch_shopdispatch (archdate);
  arch_enginerunlog (archdate);
  arch_MICAP(archdate);
  arch_history (archdate);
  arch_maintenanceevents (archdate);
  arch_interfacehistory (archdate);
  arch_interfaceitemshistory (archdate);
-- Must keep live schedule data for 90 days for deviations.
   archdate := (SYSDATE - 90);
   arch_schedulestatus (archdate);
   arch_scheduledeviations (archdate);
   arch_schedule (archdate);
--new
   arch_schedule (archdate);
   arch_AIRCRAFTEXTRACTTRX;
   ARCH_CAUSECODETRX;
   arch_DEVIATIONABORTTRX;
   arch_DEVIATIONCODETRX;
   arch_DEVIATIONCORRECTIONTRX;
   arch_DEVIATIONDELETETRX;
   arch_DEVIATIONSTARTSTOPTRX;
   ARCH_GEOLOCCODETRX;
   arch_GAINLOSSSTATUSUPDATETRX;
   arch_equipmentlocupdtrx;
   arch_INVENTORYSTATUSUPDATETRX;
   arch_LOCATIONCODETRX;
   arch_MAJORCOMMANDCODETRX;
   arch_MICAPTRX ;
   arch_MDSEQUIPMENTTRX;
   arch_OPERATIONALEVENTLOADTRX;
   arch_OPEREVENTDELETETRX;
   arch_OPEREVENTUPDATETRX;
   arch_OPEREVENTREPLACEMENTTRX;
   arch_ORGANIZATIONTRX;
   arch_STATUSCORRECTIONTRX;
   arch_STATUSUPDATETRX;
   arch_UTILIZATIONCODETRX;
   arch_UVRCHANGETRX;
   arch_WORKCENTERTRX;
   arch_WORKUNITCODETRX;
   arch_WHENDISCOVEREDCODETRX;
-- added mar 26 2007
   ARCH_USERALERT;

END arch_main;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_MAINTENANCEEVENTS" (archdate DATE)
AS
BEGIN
--Archive record if older than cutoff date.
   INSERT INTO emocaux.maintenanceevents
      SELECT maintenanceeventid, unit, eventid, pwc, equipid, cp, wuclcn, wd,
             priority, symbol, tssch, jobdur, discrepancy, wcenarrative,
             empid, entry781, defer, wcesymbol, jobfollow, partsrequired,
             aircraftid, entered, SYSDATE AS archivedate
        FROM maintenanceevents
       WHERE entered < archdate;

--Then delete
   DELETE      maintenanceevents
         WHERE entered < archdate;

--Commit only if both successful
   COMMIT;
END;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_MAJORCOMMANDCODETRX" 
AS
   /******************************************************************************
   NAME:       ARCH_MAJORCOMMANDCODETRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        1/10/2007  GMR            1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     ARCH_MAJORCOMMANDCODETRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       MAJORCOMMANDCODETRX)

******************************************************************************/
BEGIN

     INSERT INTO EMOCAUX.MAJORCOMMANDCODETRX
SELECT 
MAJORCOMMANDCODETRXID, FROMENTERPRISELOCATIONCODE, FROMUNITID, 
   MAJORCOMMANDCODE, MAJORCOMMANDCODENARRATIVE, RECORDDATETIME, 
   TRANSACTIONCODE,  SYSDATE AS archivedate
FROM EMOC3.MAJORCOMMANDCODETRX
WHERE DATEPROCESSED < SYSDATE - 7;

DELETE FROM EMOC3.MAJORCOMMANDCODETRX
WHERE DATEPROCESSED < SYSDATE - 7;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END ARCH_MAJORCOMMANDCODETRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_MDSEQUIPMENTTRX" 
AS
   /******************************************************************************
   NAME:       ARCH_MDSEQUIPMENTTRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        1/10/2007  GMR            1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     ARCH_MDSEQUIPMENTTRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       MDSEQUIPMENTTRX)

******************************************************************************/
BEGIN

     INSERT INTO EMOCAUX.MDSEQUIPMENTTRX
SELECT 
MDSEQUIPTRXID, HOMEENTERPRISELOCATIONCODE, CURRENTENTERPRISELOCATIONCODE, 
   UNITID, EQUIPMENTID, SERIALNUMBER, 
   STANDARDREPORTINGDESIGNATOR, AFI21103SELECTIONINDICATOR, POSSESSIONID, 
   ASSIGNMENTSTATUSCODE, ASSIGNMENTCOMMANDABBREVIATION, AIRCRAFTCONFIGURATIONID, 
   PROGRAMELEMENTCODE, MAINTENANCETYPEINTERVAL, OPERATINGTIME, 
   PREVIOUSOPERATINGTIME, TOTALSORTIES, TOTALLANDINGS, 
   FULLSTOPLANDINGS, CREATEAUTOHISTORYEH, ITEMMANUFACTURER, 
   EQUIPMENTACCEPTANCEDATE, TYPEOFREPAIR, REPAIRFREQUENCY, 
   REPAIRTYPEINTERVAL, LASTOVERHAULDATE, LASTOVERHAULTIME, 
   PRIMEREMOTETERMINALID, SECONDARYREMOTETERMINALID, LOCALOPTION, 
   OWNINGWORKCENTER, SUPPORTGENERALREPORTABLE, SUPPLYFACTOR, 
   TRANSACTIONORDINALDATE, HOSTUNITDATEANDTIME, RECORDDATETIME, 
   APPLICATIONNOTE, DATEPROCESSED, TRANSACTIONTYPE, 
   EQUIPMENTDESIGNATOR, PRODUCTIONBLOCKNUMBER,  SYSDATE AS archivedate
FROM EMOC3.MDSEQUIPMENTTRX
WHERE recorddatetime < SYSDATE - 7;

DELETE FROM EMOC3.MDSEQUIPMENTTRX
WHERE recorddatetime < SYSDATE - 7;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END ARCH_MDSEQUIPMENTTRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_MICAP" (archdate DATE)

AS

   /******************************************************************************
   NAME:       ARCH_MICAP
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2/23/2007  GMR            1. Created this procedure.

   NOTES:

******************************************************************************/
BEGIN

     INSERT INTO EMOCAUX.MICAP 
SELECT 
MICAPID, DOCUMENTNUMBER, CAMSINIT, 
   AIRCRAFTID, ENTERPRISELOCATIONCODE, UNITID, 
   EQUIPMENTID, JOBCONTROLNUMBER, NOMENCLATURE, 
   ESTIMATEDDELIVERYDATE, ISSUEDATE, URGENCYJUSTIFICATIONCODE, 
   WORKUNITCODE, USERCOMMENT, DELETEDFLAG, 
   DELETEDDATE, sysdate
FROM EMOC3.MICAP
WHERE LASTUPDATED < archdate;

DELETE EMOC3.MICAP
WHERE LASTUPDATED < archdate;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END ARCH_MICAP;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_MICAPTRX" 
AS
   /******************************************************************************
   NAME:       ARCH_MICAPTRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        1/10/2007  GMR            1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     ARCH_MICAPTRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       MICAPTRX)

******************************************************************************/
BEGIN

     INSERT INTO EMOCAUX.MICAPTRX
SELECT 
MICAPTRXID, FROMENTERPRISELOCATIONCODE, FROMUNITID, 
   EQUIPMENTID, JOBCONTROLNUMBER, DOCUMENTNUMBER, 
   NOMENCLATURE, ESTIMATEDDELIVERYDATE, ISSUEDATE, 
   URGENCYJUSTIFICATIONCODE, WORKUNITCODE, DATEPROCESSED, 
   TRANSACTIONCODE,  SYSDATE AS archivedate
FROM EMOC3.MICAPTRX
WHERE DATEPROCESSED < SYSDATE - 7;

DELETE FROM EMOC3.MICAPTRX
WHERE DATEPROCESSED < SYSDATE - 7;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END ARCH_MICAPTRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_OPERATIONALEVENTLOADTRX" 
AS
   /******************************************************************************
   NAME:       ARCH_OPERATIONALEVENTLOADTRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     ARCH_OPERATIONALEVENTLOADTRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       operationaleventloadtrx)

******************************************************************************/
BEGIN

     INSERT INTO EMOCAUX.OPERATIONALEVENTLOADTRX
      SELECT OPERATIONALEVENTLOADTRXID, OELTRANSACTIONID, HOMEENTERPRISELOCATIONCODE, 
       CURRENTENTERPRISELOCATIONCODE, UNITID, SORTIEDATE, 
       DURATIONEXCEEDS24HOURS, OPERATIONALEVENTTYPEEVENT, ASSIGNTOONESCHEDULEINGBLOCK, 
       ESTIMATEDFUELLOAD, EQUIPMENTID, SORTIENUMBER, STARTTIME, STOPTIME, 
    MISSIONNUMBER, DEVIATIONCAUSECODE, CHARGEABLEINDICATOR, DATEPROCESSED, SCHEDULINGBLOCKNUMBER,
   SYSDATE AS archivedate
     FROM EMOC3.OPERATIONALEVENTLOADTRX
WHERE DATEPROCESSED < SYSDATE - 7;

DELETE FROM EMOC3.OPERATIONALEVENTLOADTRX
WHERE DATEPROCESSED < SYSDATE - 7;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END ARCH_OPERATIONALEVENTLOADTRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_OPEREVENTDELETETRX" 
AS
   /******************************************************************************
   NAME:       ARCH_OPEREVENTDELETETRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     ARCH_OPEREVENTDELETETRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       operationaleventdeletetrx)

******************************************************************************/
BEGIN

     INSERT INTO EMOCAUX.OPERATIONALEVENTDELETETRX
      SELECT OPERATIONALEVENTDELETETRXID, HOMEENTERPRISELOCATIONCODE,
       CURRENTENTERPRISELOCATIONCODE, UNITID, EQUIPMENTID, SORTIEDATE,
    SORTIENUMBER, DATEPROCESSED,  SYSDATE AS archivedate
   FROM EMOC3.OPERATIONALEVENTDELETETRX
WHERE DATEPROCESSED < SYSDATE - 7;

DELETE FROM EMOC3.OPERATIONALEVENTDELETETRX
WHERE DATEPROCESSED < SYSDATE - 7;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END ARCH_OPEREVENTDELETETRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_OPEREVENTREPLACEMENTTRX" 
AS
   /******************************************************************************
   NAME:       ARCH_OPEREVENTREPLACEMENTTRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     ARCH_OPEREVENTREPLACEMENTTRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       operationaleventreplacementtrx)

******************************************************************************/
BEGIN

     INSERT INTO EMOCAUX.OPERATIONALEVENTREPLACEMENTTRX
      SELECT OPERATEVENTREPLACEMENTTRXID, HOMEENTERPRISELOCATIONCODE,
       CURRENTENTERPRISELOCATIONCODE, UNITID, SORTIEDATE, SORTIENUMBER,
       UNDOREPLACEMENT, EQUIPMENTID, DEVIATIONCODE, DEVIATIONCAUSECODE,
    CHARGEABLEINDICATOR, NEWEQUIPMENTID, MAINTENANCEEVENTID,
    DEVIATIONREMARKS, DATEPROCESSED, SYSDATE AS archivedate
     FROM EMOC3.OPERATIONALEVENTREPLACEMENTTRX
WHERE DATEPROCESSED < SYSDATE - 7;

DELETE FROM EMOC3.OPERATIONALEVENTREPLACEMENTTRX
WHERE DATEPROCESSED < SYSDATE - 7;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END ARCH_OPEREVENTREPLACEMENTTRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_OPEREVENTUPDATETRX" 
AS
   /******************************************************************************
   NAME:       ARCH_OPEREVENTUPDATETRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     ARCH_OPEREVENTUPDATETRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       operationaleventupdatetrx)

******************************************************************************/
BEGIN

     INSERT INTO EMOCAUX.OPERATIONALEVENTUPDATETRX
      SELECT OPERATIONALEVENTUPDATETRXID, OEUTRANSACTIONID, HOMEENTERPRISELOCATIONCODE,
       CURRENTENTERPRISELOCATIONCODE, UNITID, SORTIEDATE, SCHEDULINGBLOCKNUMBER,
       EQUIPMENTID, SORTIENUMBER, STARTDATE, STARTTIME, STOPDATE, STOPTIME,
    FUELLOAD, MISSIONNUMBER, OPERATIONALEVENTTYPEEVENT, DATEPROCESSED, SYSDATE AS archivedate
     FROM EMOC3.OPERATIONALEVENTUPDATETRX
   WHERE DATEPROCESSED < SYSDATE - 7;

DELETE FROM EMOC3.OPERATIONALEVENTUPDATETRX
WHERE DATEPROCESSED < SYSDATE - 7;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END ARCH_OPEREVENTUPDATETRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_ORGANIZATIONTRX" 
AS
   /******************************************************************************
   NAME:       ARCH_ORGANIZATIONTRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        1/10/2007  GMR            1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     ARCH_ORGANIZATIONTRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       ORGANIZATIONTRX)

******************************************************************************/
BEGIN

     INSERT INTO EMOCAUX.ORGANIZATIONTRX
SELECT 
ORGANIZATIONLOADTRXID, CURRENTENTERPRISELOCATIONCODE, UNITID, 
   ORGANIZATIONID, ORGANIZATIONNUMBER, ORGANIZATIONKIND, 
   ORGANIZATIONTYPE, NOMENCLATURE, INSTALLTIONCODE, 
   AFI21103ORGANIZATIONNUMBER, AFI21103ORGANIZATIONKIND, AFI21103ORGANIZATIONTYPE, 
   DETACHMENTNUMBER, OVERSEASINDICATOR, CELASTREPORTINGDATE, 
   HOSTUNITDATEANDTIME, TRANSACTIONORDINALDATE, RECORDDATETIME, 
   APPLICATIONNOTE, DATEPROCESSED, HOMEENTERPRISELOCATIONCODE, 
   TRANSACTIONTYPE, NEWORGANIZATIONID, NEWORGANIZATIONNUMBER, 
   NEWORGANIZATIONKIND, NEWORGANIZATIONTYPE,  SYSDATE AS archivedate
FROM EMOC3.ORGANIZATIONTRX
WHERE DATEPROCESSED < SYSDATE - 7;

DELETE FROM EMOC3.ORGANIZATIONTRX
WHERE DATEPROCESSED < SYSDATE - 7;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END ARCH_ORGANIZATIONTRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_SCHEDULE" (archdate DATE)
AS
BEGIN
--Archive record if older than cutoff date.
   INSERT INTO emocaux.schedule
      SELECT   scheduleid, go, scheduledtakeoff, scheduledlanding,
               actualtakeoff, actuallanding, spare, adjtakeoff, adjlanding,
               areaarrivetime, arealeavetime, landingcode, RANGE,
               deviationcode, causecode, weathercode, mission, area,
               aircraftid, pilotname, sortienum, sortiemod, sortiedate,
               blocknumber, published_flag, schedday, callsign, transient,
               durationscheduled, durationactual, configcode,
               rem1.remarksid scheduleremarks, rem2.remarksid maintremarks,
               sortie_joap, sortie_semedx, squadronname, utilizationcode,
               schedulesource, interfacelogid, SYSDATE AS archivedate
          FROM schedule LEFT JOIN landingcodes ON landingcodes.landingcodeid =
                                                                schedule.landingcodeid
               LEFT JOIN ranges ON ranges.rangeid =
                                                       schedule.rangeid
               LEFT JOIN deviationcodes ON deviationcodes.deviationcodeid =
                                                   schedule.deviationcodeid
               LEFT JOIN causecodes ON causecodes.causecodeid =
                                                   schedule.causecodeid
               LEFT JOIN wx ON wx.wxcodeid =
                                                      schedule.wxcodeid
               LEFT JOIN missions ON missions.missionid =
                                                     schedule.missionid
               LEFT JOIN areas ON areas.areaid =
                                                        schedule.areaid
               LEFT JOIN pilot ON pilot.pilotid =
                                                       schedule.pilotid
               LEFT JOIN utilizationcodes ON utilizationcodes.utilcodeid =
                                                     schedule.utilcodeid
               LEFT JOIN remarks rem1 ON rem1.remarksid =
                                                 schedule.scheduleremarks
               LEFT JOIN remarks rem2 ON rem2.remarksid =
                                                  schedule.maintremarks
               JOIN squadrons ON squadrons.squadronid =
                                                    schedule.squadronid
         WHERE schedule.schedday < archdate
      ORDER BY schedule.scheduleid;

--Then delete
   DELETE      schedule
         WHERE schedday < archdate;

--Commit only if both successful
   COMMIT;
END;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_SCHEDULEDEVIATIONS" (archdate DATE)
AS
BEGIN
--Archive record if older than cutoff date.
   INSERT INTO emocaux.scheduledeviations
      SELECT   scheduledeviationid, scheduledeviations.scheduleid,
               deviationcode, cc.causecode, cc2.causecode newcausecode,
               scheduledeviations.sortienum,
               scheduledeviations.sortiedate,
               scheduledeviations.sortiemod, actionoptions, chargeable,
               startdatetime, stopdatetime, maintenanceeventid,
               remarks.remarksid deviationsremarks,
               scheduledeviations.interfacelogid,
               SYSDATE AS archivedate
          FROM scheduledeviations JOIN schedule ON schedule.scheduleid =
                                                                 scheduledeviations.scheduleid
               LEFT JOIN deviationcodes ON deviationcodes.deviationcodeid =
                                                   scheduledeviations.deviationcodeid
               LEFT JOIN causecodes cc ON cc.causecodeid =
                                                  scheduledeviations.causecodeid
               LEFT JOIN causecodes cc2 ON cc2.causecodeid =
                                                   scheduledeviations.newcausecode
               LEFT JOIN remarks ON remarks.remarksid =
                                            scheduledeviations.deviationsremarks
         WHERE schedule.schedday < archdate
      ORDER BY scheduledeviations.scheduledeviationid;

--Then delete
   DELETE      scheduledeviations
         WHERE startdatetime < archdate;

--Commit only if both successful
   COMMIT;
END;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_SCHEDULESTATUS" (archdate DATE)
AS
   CURSOR pcursor
   IS
      SELECT   schedulestatusid, schedulestatus.scheduleid, statuscodeid,
               statustime, statustype, userid, fuelstatusid, SYSDATE AS archivedate
          FROM schedulestatus JOIN schedule ON schedule.scheduleid =
                                                             schedulestatus.scheduleid
         WHERE schedday < archdate
      ORDER BY schedulestatus.schedulestatusid;

   prec     pcursor%ROWTYPE;
   status   VARCHAR2 (50);
BEGIN
   OPEN pcursor;

   FETCH pcursor
    INTO prec;

   WHILE pcursor%FOUND
   LOOP
      IF prec.statustype = 0
      THEN
         BEGIN
            SELECT statuscode
              INTO status
              FROM statuscode
             WHERE statuscodeid = prec.statuscodeid;
         END;
      ELSE
         BEGIN
            SELECT fuelstatus
              INTO status
              FROM fuel
             WHERE fuelstatusid = prec.fuelstatusid;
         END;
      END IF;

      INSERT INTO emocaux.schedulestatus
                  (userid, statustype, statustime, statuscode,
                   schedulestatusid, scheduleid, archivedate
                  )
           VALUES (prec.userid, prec.statustype, prec.statustime, status,
                   prec.schedulestatusid, prec.scheduleid, SYSDATE
                  );

      DELETE FROM schedulestatus
            WHERE schedulestatusid = prec.schedulestatusid;

      FETCH pcursor
       INTO prec;
   END LOOP;

   CLOSE pcursor;

--Commit only if both successful
   COMMIT;
END;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_SEMEDXDATA" (archdate DATE)
AS
BEGIN
--Archive record if older than cutoff date.
   INSERT INTO emocaux.semedxdata
      SELECT semdataid, enginedataid,
             (SELECT semedx
                FROM semedx
               WHERE semedxid = semedxdata.semedxid) AS semedx,
             moccontroller, sampledate, reason, hoursrequired,
             hoursremaining, notifiedby, expediternotified,
             semedxlastupdated, scheduleid, SYSDATE AS archivedate
        FROM semedxdata
       WHERE sampledate < archdate;

--Then delete
   DELETE      semedxdata
         WHERE sampledate < archdate;

--Commit only if both successful
   COMMIT;
END;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_SHOPDISPATCH" (archdate DATE)
AS
BEGIN
--Archive record if older than cutoff date.
   INSERT INTO emocaux.history
      SELECT historyid, eventdate, elementvalue, userid, aircraftid, ELEMENT,
             transactionid, SYSDATE AS archivedate
        FROM history
       WHERE eventdate < archdate;

--Then delete
   DELETE      history
         WHERE eventdate < archdate;

--Commit only if both successful
   COMMIT;
END;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_STATUSCORRECTIONTRX" 
AS
   /******************************************************************************
   NAME:       ARCH_STATUSCORRECTIONTRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        1/10/2007  GMR            1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     ARCH_STATUSCORRECTIONTRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       STATUSCORRECTIONTRX)

******************************************************************************/
BEGIN

     INSERT INTO EMOCAUX.STATUSCORRECTIONTRX
SELECT 
STATUSCORRECTIONID, CURRENTENTERPRISELOCATIONCODE, UNITID, 
   EQUIPMENTID, MAINTENANCESTATUSCODE, CONDITIONSTATUSCODE, 
   STARTDATE, STARTTIME, STOPDATE, 
   STOPTIME, WORKUNITCODE, GEOLOCCODE, 
   TRANSACTIONORDINALDATE, HOSTUNITDATEANDTIME, RECORDDATETIME, 
   APPLICATIONNOTE, DATEPROCESSED, HOMEENTERPRISELOCATIONCODE, 
   UTCSTARTDATEANDTIME,  SYSDATE AS archivedate
FROM EMOC3.STATUSCORRECTIONTRX
WHERE recorddatetime < SYSDATE - 7;


DELETE FROM EMOC3.STATUSCORRECTIONTRX
WHERE recorddatetime < SYSDATE - 7;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END ARCH_STATUSCORRECTIONTRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_STATUSUPDATETRX" 
AS
   /******************************************************************************
   NAME:       ARCH_STATUSUPDATETRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        1/10/2007  GMR            1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     ARCH_STATUSUPDATETRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       STATUSUPDATETRX)

******************************************************************************/
BEGIN

     INSERT INTO EMOCAUX.STATUSUPDATETRX 
SELECT 
STATUSUPDATETRXID, CURRENTENTERPRISELOCATIONCODE, UNITID, 
   EQUIPMENTID, MAINTENANCESTATUSCODE, CONDITIONSTATUSCODE, 
   STARTDATE, STARTTIME, WORKUNITCODE, 
   EVENTID, WORKCENTEREVENT, ESTIMATEDTIMEINCOMMISSION, 
   PARTSPLUS, GEOLOCCODE, STATUSNARRATIVE, 
   LOCATIONCODE, EQUIPMENTORGANIZATIONFLIGHTID, MAINTENANCEREPAIRPRIORITY, 
   ARMED, MULTIPLECONFIGURATIONID, LOCALOPTION, 
   RECEIVEMAINTENANCELIMITREPORT, HOSTUNITDATEANDTIME, TRANSACTIONORDINALDATE, 
   RECORDDATETIME, APPLICATIONNOTE, DATEPROCESSED, 
   HOMEENTERPRISELOCATIONCODE, UTCSTARTDATEANDTIME,  SYSDATE AS archivedate
FROM EMOC3.STATUSUPDATETRX
WHERE recorddatetime < SYSDATE - 7;

DELETE FROM EMOC3.STATUSUPDATETRX
WHERE recorddatetime < SYSDATE - 7;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END ARCH_STATUSUPDATETRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_USERALERT" IS
/******************************************************************************
   NAME:       ARCH_USERALERT
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        03/26/2006  GMR             1. Created this procedure.

   NOTES:

******************************************************************************/

BEGIN

--Delete all rows older than the cutoff date.
DELETE EMOC3.USERALERT
WHERE RECEIVED < SYSDATE - 7;

--Commit if successful.
COMMIT;

END;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_UTILIZATIONCODETRX" 
AS
   /******************************************************************************
   NAME:       ARCH_UTILIZATIONCODETRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        1/10/2007  GMR            1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     ARCH_UTILIZATIONCODETRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       UTILIZATIONCODETRX)

******************************************************************************/
BEGIN

     INSERT INTO EMOCAUX.UTILIZATIONCODETRX 
SELECT 
UTILIZATIONCODETRXID, FROMENTERPRISELOCATIONCODE, FROMUNITID, 
   AIRCRAFTUTILIZATIONCODE, AUCNARRATIVE, MISSIONDESIGNSERIES, 
   PROGRAMELEMENTCODE, DATEPROCESSED, APPLICATIONNOTE,  SYSDATE AS archivedate
FROM EMOC3.UTILIZATIONCODETRX
WHERE DATEPROCESSED < SYSDATE - 7;

DELETE FROM EMOC3.UTILIZATIONCODETRX
WHERE DATEPROCESSED < SYSDATE - 7;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END ARCH_UTILIZATIONCODETRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_UVRCHANGETRX" 
AS
   /******************************************************************************
   NAME:       ARCH_UVRCHANGETRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        1/10/2007  GMR            1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     ARCH_UVRCHANGETRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       UVRCHANGETRX)

******************************************************************************/
BEGIN

     INSERT INTO EMOCAUX.UVRCHANGETRX 
SELECT 
UVRCHANGETRXID, HOMEENTERPRISELOCATIONCODE, CURRENTENTERPRISELOCATIONCODE, 
   UNITID, TIMEZONEFACTOR, TIMEZONEHOURS, 
   GMTFACTOR, GMTHOURS, HOSTTIMEZONEFACTOR, 
   HOSTTIMEZONEHOURS, HOSTUNITDATEANDTIME, TRANSACTIONORDINALDATE, 
   RECORDDATETIME, APPLICATIONNOTE, DATEPROCESSED, 
   REMOTEPRINTINDICATOR,  SYSDATE AS archivedate
FROM EMOC3.UVRCHANGETRX
WHERE DATEPROCESSED < SYSDATE - 7;

DELETE FROM EMOC3.UVRCHANGETRX
WHERE DATEPROCESSED < SYSDATE - 7;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END ARCH_UVRCHANGETRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_WHENDISCOVEREDCODETRX" 
AS
   /******************************************************************************
   NAME:       ARCH_WHENDISCOVEREDCODETRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        1/10/2007  GMR            1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     ARCH_WHENDISCOVEREDCODETRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       WHENDISCOVEREDCODETRX)

******************************************************************************/
BEGIN

     INSERT INTO EMOCAUX.WHENDISCOVEREDCODETRX 
SELECT 
WHENDISCOVEREDCODETRXID, FROMENTERPRISELOCATIONCODE, FROMUNITID, 
   WHENDISCOVEREDCODE, WHENDISCOVEREDCODENARRATIVE, STARTDATE, 
   STOPDATE, DATEPROCESSED, TRANSACTIONCODE,  SYSDATE AS archivedate
FROM EMOC3.WHENDISCOVEREDCODETRX
WHERE DATEPROCESSED < SYSDATE - 7;

DELETE FROM EMOC3.WHENDISCOVEREDCODETRX
WHERE DATEPROCESSED < SYSDATE - 7;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END ARCH_WHENDISCOVEREDCODETRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_WORKCENTERTRX" 
AS
   /******************************************************************************
   NAME:       ARCH_WORKCENTERTRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        1/10/2007  GMR            1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     ARCH_WORKCENTERTRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       WORKCENTERTRX)

******************************************************************************/
BEGIN

     INSERT INTO EMOCAUX.WORKCENTERTRX
SELECT 
WORKCENTERTRXID, ENTERPRISELOCATIONCODE, UNITID, 
   WORKCENTER, NEWWORKCENTER, WORKCENTERNARRATIVE, 
   ORGANIZATIONID, HOSTUNITDATEANDTIME, TRANSACTIONORDINALDATE, 
   RECORDDATETIME, APPLICATIONNOTE, DATEPROCESSED, 
   TRANSACTIONTYPE,  SYSDATE AS archivedate
FROM EMOC3.WORKCENTERTRX
WHERE DATEPROCESSED < SYSDATE - 7;

DELETE FROM EMOC3.WORKCENTERTRX
WHERE DATEPROCESSED < SYSDATE - 7;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END ARCH_WORKCENTERTRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_WORKUNITCODETRX" 
AS
   /******************************************************************************
   NAME:       ARCH_WORKUNITCODETRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        1/10/2007  GMR            1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     ARCH_WORKUNITCODETRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:      WORKUNITCODETRX)

******************************************************************************/
BEGIN

     INSERT INTO EMOCAUX.WORKUNITCODETRX
SELECT 
WORKUNITCODETRXID, FROMENTERPRISELOCATIONCODE, FROMUNITID, 
   WORKUNITCODE, WORKUNITCODENARRATIVE, STARTDATE, 
   STOPDATE, MISSIONDESIGNSERIES, BLOCKNUMBERTYPE, 
   NEWWORKUNITCODE, DATEPROCESSED, TRANSACTIONCODE,  SYSDATE AS archivedate
FROM EMOC3.WORKUNITCODETRX
WHERE DATEPROCESSED < SYSDATE - 7;

DELETE FROM EMOC3.WORKUNITCODETRX
WHERE DATEPROCESSED < SYSDATE - 7;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END ARCH_WORKUNITCODETRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ARCH_WRITEUPS" (archdate DATE)
AS
   CURSOR pcursor
   IS
      SELECT writeupid, writeuptime, jcn, corrected, correctedtime, pacer,
             etic, aircraftid,
             (SELECT symbol
                FROM symbols
               WHERE symbolid = writeups.symbolid) AS symbol,
             (SELECT wuccode
                FROM wuc
               WHERE wucid = writeups.wucid) AS wuc, discrepancy,
             correctiveaction
        FROM writeups
       WHERE correctedtime < archdate;

   prec   pcursor%ROWTYPE;
BEGIN
   OPEN pcursor;

   FETCH pcursor
    INTO prec;

   WHILE pcursor%FOUND
   LOOP
      INSERT INTO emocaux.writeups
                  (writeupid, writeuptime, jcn,
                   corrected, correctedtime, pacer,
                   etic, aircraftid, symbol, wuc,
                   discrepancy, correctiveaction
                  )
           VALUES (prec.writeupid, prec.writeuptime, prec.jcn,
                   prec.corrected, prec.correctedtime, prec.pacer,
                   prec.etic, prec.aircraftid, prec.symbol, prec.wuc,
                   prec.discrepancy, prec.correctiveaction
                  );

/*
      INSERT INTO emocaux.micap
         SELECT micapid, writeupid, documentnumber, part, eta, aircraftid,
                SYSDATE AS archivedate
           FROM micap
          WHERE writeupid = prec.writeupid;

      DELETE FROM micap
            WHERE writeupid = prec.writeupid;*/
      DELETE FROM writeups
            WHERE writeupid = prec.writeupid;

      FETCH pcursor
       INTO prec;
   END LOOP;

   CLOSE pcursor;

--Commit only if both successful
   COMMIT;
END;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."CAUSECODECHANGE" (
   p_homeelc                  VARCHAR2,
   p_currentelc               VARCHAR2,
   p_unitid                   VARCHAR2,
   p_causecode                VARCHAR2,
   p_causecodenarrative       VARCHAR2,
   p_causecodetypeindicator   VARCHAR2,
   p_defercodetypeindicator   VARCHAR2,
   p_hostunitdateandtime      VARCHAR2,
   p_transactionordinaldate   VARCHAR2,
   p_transactiontype          VARCHAR2
)
IS
   tmpvar      NUMBER;
   mocidvar    NUMBER;
   wingidvar   NUMBER;
 /******************************************************************************
   NAME:       CauseCodeChange
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/18/2006  r mcbride        1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     CauseCodeChange
      Sysdate:         12/18/2006
      Date and Time:   12/18/2006, 3:57:14 PM, and 12/18/2006 3:57:14 PM
      Username:         (EMOC3)
      Table Name:       (CausecodeTrx)

******************************************************************************/
BEGIN
   insertcausecodetrx (p_homeelc,
                       p_currentelc,
                       p_unitid,
                       p_causecode,
                       p_causecodenarrative,
                       p_causecodetypeindicator,
                       p_defercodetypeindicator,
                       p_hostunitdateandtime,
                       p_transactionordinaldate,
                       p_transactiontype
                      );

   IF (p_causecode IS NOT NULL)
   THEN
      get_mocid_by_elcunitid (p_currentelc, p_unitid, mocidvar);

      IF (mocidvar IS NOT NULL)
      THEN
         UPDATE causecodes
            SET description = RTRIM (p_causecodenarrative)
          WHERE causecodes.mocid = mocidvar
            AND causecodes.causecode = RTRIM (p_causecode)
            AND causecodes.causecodetype =
                                   RTRIM (NVL (p_causecodetypeindicator, 'O'));

         COMMIT;
      END IF;
   END IF;
END causecodechange;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."CAUSECODEDELETE" (
   p_homeelc                  VARCHAR2,
   p_currentelc               VARCHAR2,
   p_unitid                   VARCHAR2,
   p_causecode                VARCHAR2,
   p_causecodenarrative       VARCHAR2,
   p_causecodetypeindicator   VARCHAR2,
   p_defercodetypeindicator   VARCHAR2,
   p_hostunitdateandtime      VARCHAR2,
   p_transactionordinaldate   VARCHAR2,
   p_transactiontype          VARCHAR2
)
IS
   tmpvar      NUMBER;
   mocidvar    NUMBER;
   wingidvar   NUMBER;
 /******************************************************************************
   NAME:       CauseCodeDelete
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/18/2006  r mcbride        1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     CauseCodeDelete
      Sysdate:         12/18/2006
      Date and Time:   12/18/2006, 3:57:14 PM, and 12/18/2006 3:57:14 PM
      Username:         (EMOC3)
      Table Name:       (CausecodeTrx)

******************************************************************************/
BEGIN
   insertcausecodetrx (p_homeelc,
                       p_currentelc,
                       p_unitid,
                       p_causecode,
                       p_causecodenarrative,
                       p_causecodetypeindicator,
                       p_defercodetypeindicator,
                       p_hostunitdateandtime,
                       p_transactionordinaldate,
                       p_transactiontype
                      );
   COMMIT;

   IF (p_causecode IS NOT NULL)
   THEN
      get_mocid_by_elcunitid (p_currentelc, p_unitid, mocidvar);

      IF (mocidvar IS NOT NULL)
      THEN
         delete_moc_causecode (mocidvar,
                               p_causecode,
                               NVL (p_causecodetypeindicator, 'O')
                              );
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END causecodedelete;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."CAUSECODELOAD" (
   p_homeelc                  VARCHAR2,
   p_currentelc               VARCHAR2,
   p_unitid                   VARCHAR2,
   p_causecode                VARCHAR2,
   p_causecodenarrative       VARCHAR2,
   p_causecodetypeindicator   VARCHAR2,
   p_defercodetypeindicator   VARCHAR2,
   p_hostunitdateandtime      VARCHAR2,
   p_transactionordinaldate   VARCHAR2,
   p_transactiontype          VARCHAR2
)
IS
   tmpvar      NUMBER;
   mocidvar    NUMBER;
   wingidvar   NUMBER;
 /******************************************************************************
   NAME:       CauseCodeLoad
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/18/2006  r mcbride        1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     CauseCodeLoad
      Sysdate:         12/18/2006
      Date and Time:   12/18/2006, 3:57:14 PM, and 12/18/2006 3:57:14 PM
      Username:         (EMOC3)
      Table Name:       (CausecodeTrx)

******************************************************************************/
BEGIN
   insertcausecodetrx (p_homeelc,
                       p_currentelc,
                       p_unitid,
                       p_causecode,
                       p_causecodenarrative,
                       p_causecodetypeindicator,
                       p_defercodetypeindicator,
                       p_hostunitdateandtime,
                       p_transactionordinaldate,
                       p_transactiontype
                      );

   IF (p_causecode IS NOT NULL)
   THEN
      get_mocid_by_elcunitid (p_currentelc, p_unitid, mocidvar);

      IF (mocidvar IS NOT NULL)
      THEN
         SELECT COUNT (*)
           INTO tmpvar
           FROM causecodes
          WHERE causecodes.mocid = mocidvar
            AND causecodes.causecode = p_causecode
            AND causecodes.causecodetype = NVL(p_causecodetypeindicator,'O');

         IF (tmpvar = 0)
         THEN
            INSERT INTO causecodes
                        (causecodeid, causecode,
                         description, causecodetype, defaultcausecode,
                         camsinit, mocid
                        )
                 VALUES (seq_causecodes.NEXTVAL, p_causecode,
                         p_causecodenarrative, NVL(p_causecodetypeindicator,'O'), 0,
                         SYSDATE, mocidvar
                        );

            COMMIT;
         END IF;
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END causecodeload;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."CHANGEMDS" (
   aircraftidin     aircraft.aircraftid%TYPE,
   currentmdsidin   INTEGER,
   newmdsidin       INTEGER
)
AS
   CURSOR enginecur
   IS
      SELECT enginedataid, enginenumber
        FROM aircraftenginedata
       WHERE aircraftid = aircraftidin;

   enginerec   enginecur%ROWTYPE;
   engines1    INTEGER             := 0;
   engines2    INTEGER             := 0;
   stations1   INTEGER             := 0;
   stations2   INTEGER             := 0;
   loops       INTEGER             := 0;
   newrowid    INTEGER             := 0;
   enginecnt   INTEGER             := 0;
BEGIN
   SELECT numberofengines, numberofstations
     INTO engines1, stations1
     FROM aircraftmds
    WHERE aircraftmdsid = currentmdsidin;

   SELECT numberofengines, numberofstations
     INTO engines2, stations2
     FROM aircraftmds
    WHERE aircraftmdsid = newmdsidin;

   SELECT COUNT (*)
     INTO enginecnt
     FROM aircraftenginedata
    WHERE aircraftid = aircraftidin;

   IF (enginecnt = 0)
   THEN
      loops := 0;

      WHILE loops < engines1
      LOOP
         SELECT NVL (MAX (aircraftenginedata.enginedataid), 0)
           INTO newrowid
           FROM aircraftenginedata;

         INSERT INTO aircraftenginedata
                     (enginedataid, aircraftid, enginenumber
                     )
              VALUES (newrowid + 1, aircraftidin, loops + 1
                     );

         loops := loops + 1;
         COMMIT;
      END LOOP;
   END IF;

   IF (engines1 <> engines2)
   THEN
      BEGIN
         IF (engines1 > engines2)
         THEN
            BEGIN
               OPEN enginecur;

               FETCH enginecur
                INTO enginerec;

               WHILE enginecur%FOUND
               LOOP
                  IF (enginerec.enginenumber > engines2)
                  THEN
                     BEGIN
                        DELETE FROM semedxdata
                              WHERE enginedataid = enginerec.enginedataid;

                        DELETE FROM joapdata
                              WHERE enginedataid = enginerec.enginedataid;

                        DELETE FROM aircraftenginedata
                              WHERE enginedataid = enginerec.enginedataid;
                     END;
                  END IF;

                  FETCH enginecur
                   INTO enginerec;
               END LOOP;

               CLOSE enginecur;
            END;
         END IF;

         IF (engines1 < engines2)
         THEN
            loops := engines1;

            WHILE loops < engines2
            LOOP
               SELECT NVL (MAX (aircraftenginedata.enginedataid), 0)
                 INTO newrowid
                 FROM aircraftenginedata;

               INSERT INTO aircraftenginedata
                           (enginedataid, aircraftid, enginenumber
                           )
                    VALUES (newrowid + 1, aircraftidin, loops + 1
                           );

               loops := loops + 1;
            END LOOP;
         END IF;
      END;
   END IF;

   IF (currentmdsidin <> newmdsidin)
   THEN
      BEGIN
         DELETE FROM weaponsload
               WHERE aircraftid = aircraftidin;
      END;
   END IF;

   UPDATE aircraft
      SET aircraftwucid = NULL
    WHERE aircraftid = aircraftidin;

   UPDATE writeups
      SET wucid = NULL
    WHERE aircraftid = aircraftidin AND corrected = 0;

   DELETE FROM weaponsload
         WHERE aircraftid = aircraftidin AND station > stations2;
END changemds;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."CHANGENUMBEROFENGINES" (
   aircraftidin   aircraft.aircraftid%TYPE,
   currnoe        INTEGER,
   newnoe         INTEGER
)
AS
   CURSOR enginecur
   IS
      SELECT enginedataid, enginenumber
        FROM aircraftenginedata
       WHERE aircraftid = aircraftidin;

   enginerec   enginecur%ROWTYPE;
   loops       INTEGER             := 0;
   newrowid    INTEGER             := 0;
   enginecnt   INTEGER             := 0;
BEGIN
   SELECT COUNT (*)
     INTO enginecnt
     FROM aircraftenginedata
    WHERE aircraftid = aircraftidin;

   IF (enginecnt = 0)
   THEN
      loops := 0;

      WHILE loops < currnoe
      LOOP
         SELECT NVL (MAX (aircraftenginedata.enginedataid), 0)
           INTO newrowid
           FROM aircraftenginedata;

         INSERT INTO aircraftenginedata
                     (enginedataid, aircraftid, enginenumber
                     )
              VALUES (newrowid + 1, aircraftidin, loops + 1
                     );

         loops := loops + 1;
         COMMIT;
      END LOOP;
   END IF;

   IF (currnoe <> newnoe)
   THEN
      BEGIN
         IF (currnoe > newnoe)
         THEN
            BEGIN
               OPEN enginecur;

               FETCH enginecur
                INTO enginerec;

               WHILE enginecur%FOUND
               LOOP
                  IF (enginerec.enginenumber > newnoe)
                  THEN
                     BEGIN
                        DELETE FROM semedxdata
                              WHERE enginedataid = enginerec.enginedataid;

                        DELETE FROM joapdata
                              WHERE enginedataid = enginerec.enginedataid;

                        DELETE FROM aircraftenginedata
                              WHERE enginedataid = enginerec.enginedataid;
                     END;
                  END IF;

                  FETCH enginecur
                   INTO enginerec;
               END LOOP;

               CLOSE enginecur;
            END;
         END IF;

         IF (currnoe < newnoe)
         THEN
            loops := currnoe;

            WHILE loops < newnoe
            LOOP
               SELECT NVL (MAX (aircraftenginedata.enginedataid), 0)
                 INTO newrowid
                 FROM aircraftenginedata;

               INSERT INTO aircraftenginedata
                           (enginedataid, aircraftid, enginenumber
                           )
                    VALUES (newrowid + 1, aircraftidin, loops + 1
                           );

               loops := loops + 1;
               COMMIT;
            END LOOP;
         END IF;
      END;
   END IF;

   COMMIT;
END changenumberofengines;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."CHECK_FOR_DUP_SCHEDULELINE" (
   squadin                     	 NUMBER,
   sortiedatein					 VARCHAR2,
   sortienumberin				 VARCHAR2,
   acidin						 NUMBER,
   schedcnt				OUT		 NUMBER
)
AS

   /******************************************************************************
   NAME:       CHECK_FOR_DUP_SCHEDULELINE
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     CHECK_FOR_DUP_SCHEDULELINE
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       wings)

******************************************************************************/
BEGIN
   /*GET SCHEDEULID*/
   SELECT COUNT(*)
	   INTO schedcnt
	   FROM SCHEDULE
	  WHERE SQUADRONID = squadin
	    AND SORTIEDATE = sortiedatein
		AND SORTIENUM = sortienumberin
		AND AIRCRAFTID = acidin;


--EXCEPTION
 --  WHEN NO_DATA_FOUND
  -- THEN
  --    NULL;
 --  WHEN OTHERS
 --  THEN
      -- Consider logging the error and then re-raise
 --     RAISE;
END CHECK_FOR_DUP_SCHEDULELINE;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."CHECK_FOR_FLIGHT_OVERLAP" (
   sortiedatein					 VARCHAR2,
   startdatein					 DATE,
   stopdatein					 DATE,
   acidin						 NUMBER,
   schedcnt				OUT		 NUMBER
)
AS
   /******************************************************************************
   NAME:       CHECK_FOR_FLIGHT_OVERLAP
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     CHECK_FOR_FLIGHT_OVERLAP
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       wings)

******************************************************************************/
BEGIN
   /*GET SCHEDEULID*/
   SELECT COUNT(*)
   INTO schedcnt
   FROM schedule
   WHERE sortiedate = sortiedatein
   AND aircraftid = acidin
   AND ((scheduledtakeoff >= TO_DATE(startdatein, 'MM/DD/YYYY HH24:MI:SS')
   AND scheduledtakeoff <= TO_DATE(stopdatein, 'MM/DD/YYYY HH24:MI:SS'))
   OR (scheduledlanding >= TO_DATE(startdatein, 'MM/DD/YYYY HH24:MI:SS')
   AND scheduledlanding <= TO_DATE(stopdatein, 'MM/DD/YYYY HH24:MI:SS')));


--EXCEPTION
 --  WHEN NO_DATA_FOUND
  -- THEN
  --    NULL;
 --  WHEN OTHERS
 --  THEN
      -- Consider logging the error and then re-raise
 --     RAISE;
END CHECK_FOR_FLIGHT_OVERLAP;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."CHECK_FOR_FLIGHT_OVERLAPTS" (
   sortiedatein					 VARCHAR2,
   schedidin					 NUMBER,
   acidin						 NUMBER,
   schedcnt				OUT		 NUMBER
)
AS
   /******************************************************************************
   NAME:       CHECK_FOR_FLIGHT_OVERLAPTS
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     CHECK_FOR_FLIGHT_OVERLAPTS
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       wings)

******************************************************************************/
BEGIN
   /*GET SCHEDEULID*/
   SELECT COUNT(*)
   INTO schedcnt
   FROM schedule
   WHERE sortiedate = sortiedatein
   AND aircraftid = acidin
   AND ((scheduledtakeoff >= (SELECT scheduledtakeoff FROM schedule WHERE scheduleid = schedidin)
   AND scheduledtakeoff <= (SELECT scheduledlanding FROM schedule WHERE scheduleid = schedidin))
   OR (scheduledlanding >= (SELECT scheduledtakeoff FROM schedule WHERE scheduleid = schedidin)
   AND scheduledlanding <= (SELECT scheduledlanding FROM schedule WHERE scheduleid = schedidin)));



--EXCEPTION
 --  WHEN NO_DATA_FOUND
  -- THEN
  --    NULL;
 --  WHEN OTHERS
 --  THEN
      -- Consider logging the error and then re-raise
 --     RAISE;
END CHECK_FOR_FLIGHT_OVERLAPTS;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."CLEARUSERALERT" (
   alertidin   useralert.alertid%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   UPDATE useralert
      SET acknowledged = SYSDATE
    WHERE alertid = alertidin;

   COMMIT;
END clearuseralert;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."CLEAR_AIRCRAFT_JOAPDATA" (
   aircraftidin   aircraftenginedata.aircraftid%TYPE
)
AS
   CURSOR enginecur
   IS
      SELECT enginedataid, enginenumber, aircraftid
        FROM aircraftenginedata
       WHERE aircraftid = aircraftidin;

   enginerec   enginecur%ROWTYPE;
BEGIN
   OPEN enginecur;

   FETCH enginecur
    INTO enginerec;

   WHILE enginecur%FOUND
   LOOP
      UPDATE joapdata
         SET datecleared = SYSDATE
       WHERE enginedataid = enginerec.enginedataid;

	  UPDATE semedxdata
         SET datecleared = SYSDATE
       WHERE enginedataid = enginerec.enginedataid;

      FETCH enginecur
       INTO enginerec;
   END LOOP;

   CLOSE enginecur;
END clear_aircraft_joapdata;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."COPY_ACFTMDSTYPES" (
   newmocid       moc.mocid%TYPE,
   defaultmocid   moc.mocid%TYPE
)
AS
   CURSOR mycur
   IS
      SELECT acftmdstypecd, acftmdstypenm
        FROM acftmdstypes
       WHERE mocid = defaultmocid;

   myrec   mycur%ROWTYPE;
BEGIN
   OPEN mycur;

   FETCH mycur
    INTO myrec;

   WHILE mycur%FOUND
   LOOP
      INSERT INTO acftmdstypes
                  (acftmdstypecd, acftmdstypenm, mocid
                  )
           VALUES (myrec.acftmdstypecd, myrec.acftmdstypenm, newmocid
                  );

      FETCH mycur
       INTO myrec;
   END LOOP;

   CLOSE mycur;
  /* Formatted on 2005/06/24 11:56 (Formatter Plus v4.8.5) */
COMMIT ;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END copy_acftmdstypes;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."COPY_AIRCRAFTMDS" (mocidin moc.mocid%TYPE)
AS
   CURSOR mycur
   IS
      SELECT aircraftmds, numberofstations, numberofengines,
             timebetweenphase, defaultaircrafttype, blocknumber, phaseunit,
             camsinit, acftmdstypecd
        FROM aircraftmds
       WHERE mocid = 0;

   myrec   mycur%ROWTYPE;
BEGIN
   OPEN mycur;

   FETCH mycur
    INTO myrec;

   WHILE mycur%FOUND
   LOOP
      INSERT INTO aircraftmds
                  (aircraftmdsid, aircraftmds,
                   blocknumber, numberofengines,
                   numberofstations, timebetweenphase,
                   defaultaircrafttype, phaseunit,
                   camsinit, acftmdstypecd, mocid
                  )
           VALUES (seq_aircraftmds.NEXTVAL, myrec.aircraftmds,
                   myrec.blocknumber, myrec.numberofengines,
                   myrec.numberofstations, myrec.timebetweenphase,
                   myrec.defaultaircrafttype, myrec.phaseunit,
                   myrec.camsinit, myrec.acftmdstypecd, mocidin
                  );

      FETCH mycur
       INTO myrec;
   END LOOP;

   CLOSE mycur;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END copy_aircraftmds;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."COPY_COLORRULES" (mocidin moc.mocid%TYPE)
AS
   CURSOR mycur
   IS
      SELECT colorid, colorrank, codetype
        FROM colorrules
       WHERE mocid = 0;

   myrec          mycur%ROWTYPE;
   v_colorname    VARCHAR2 (50);
   v_colorvalue   VARCHAR2 (7);
   v_colorid      NUMBER (10);
BEGIN
   OPEN mycur;

   FETCH mycur
    INTO myrec;

   WHILE mycur%FOUND
   LOOP
      SELECT colorname, colorvalue
        INTO v_colorname, v_colorvalue
        FROM colors
       WHERE colorid = myrec.colorid;

      SELECT colorid
        INTO v_colorid
        FROM colors
       WHERE colorname = v_colorname
         AND colorvalue = v_colorvalue
         AND mocid = mocidin;

      INSERT INTO colorrules
                  (colorrulesid, colorid, colorrank,
                   codetype, mocid
                  )
           VALUES (seq_colorrules.NEXTVAL, v_colorid, myrec.colorrank,
                   myrec.codetype, mocidin
                  );

      FETCH mycur
       INTO myrec;
   END LOOP;

   CLOSE mycur;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END copy_colorrules;



 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."COPY_COLORS" (mocidin moc.mocid%TYPE)
AS
   CURSOR mycur
   IS
      SELECT colorname, colorvalue, fontcolor
        FROM colors
       WHERE mocid = 0;

   myrec   mycur%ROWTYPE;
BEGIN
   OPEN mycur;

   FETCH mycur
    INTO myrec;

   WHILE mycur%FOUND
   LOOP
      INSERT INTO colors
                  (colorid, colorname, colorvalue,
                   fontcolor, mocid
                  )
           VALUES (seq_colors.NEXTVAL, myrec.colorname, myrec.colorvalue,
                   myrec.fontcolor, mocidin
                  );

      FETCH mycur
       INTO myrec;
   END LOOP;

   CLOSE mycur;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END copy_colors;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."COPY_CONDITIONCODES" (mocidin moc.mocid%TYPE)
AS
   CURSOR mycur
   IS
      SELECT conditioncode, conditiondescription, defaultconditioncode,
             condstatid
        FROM conditioncodes
       WHERE mocid = 0;

   myrec               mycur%ROWTYPE;
   v_conditionstatus   VARCHAR2 (50);
   v_condstatid        NUMBER (10);
BEGIN
   OPEN mycur;

   FETCH mycur
    INTO myrec;

   WHILE mycur%FOUND
   LOOP
      SELECT conditionstatus
        INTO v_conditionstatus
        FROM conditionstatus
       WHERE condstatid = myrec.condstatid;

      SELECT condstatid
        INTO v_condstatid
        FROM conditionstatus
       WHERE conditionstatus = v_conditionstatus AND mocid = mocidin;

      INSERT INTO conditioncodes
                  (condcodeid, conditioncode,
                   conditiondescription, defaultconditioncode,
                   condstatid, mocid
                  )
           VALUES (seq_conditioncodes.NEXTVAL, myrec.conditioncode,
                   myrec.conditiondescription, myrec.defaultconditioncode,
                   v_condstatid, mocidin
                  );

      FETCH mycur
       INTO myrec;
   END LOOP;

   CLOSE mycur;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END copy_conditioncodes;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."COPY_CONDITIONSTATUS" (mocidin moc.mocid%TYPE)
AS
   CURSOR mycur
   IS
      SELECT conditionstatus, conditionlevel, flyable, colorid
        FROM conditionstatus
       WHERE mocid = 0;

   myrec          mycur%ROWTYPE;
   v_colorname    VARCHAR2 (50);
   v_colorvalue   VARCHAR2 (7);
   v_colorid      NUMBER (10);
BEGIN
   OPEN mycur;

   FETCH mycur
    INTO myrec;

   WHILE mycur%FOUND
   LOOP
      SELECT colorname, colorvalue
        INTO v_colorname, v_colorvalue
        FROM colors
       WHERE colorid = myrec.colorid;

      SELECT colorid
        INTO v_colorid
        FROM colors
       WHERE colorname = v_colorname
         AND colorvalue = v_colorvalue
         AND mocid = mocidin;

      INSERT INTO conditionstatus
                  (condstatid, conditionstatus,
                   conditionlevel, flyable, colorid, mocid
                  )
           VALUES (seq_conditionstatus.NEXTVAL, myrec.conditionstatus,
                   myrec.conditionlevel, myrec.flyable, v_colorid, mocidin
                  );

      FETCH mycur
       INTO myrec;
   END LOOP;

   CLOSE mycur;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END copy_conditionstatus;



 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."COPY_DEVIATIONCODES" (mocidin moc.mocid%TYPE)
AS
   CURSOR mycur
   IS
      SELECT deviationcode, deviationdescription, defaultdeviationcode,
             colorid
        FROM deviationcodes
       WHERE mocid = 0
    AND   deviationcode IN ('TS','SP','NONE');

   myrec   mycur%ROWTYPE;
BEGIN
   OPEN mycur;

   FETCH mycur
    INTO myrec;

   WHILE mycur%FOUND
   LOOP
      INSERT INTO deviationcodes
                  (deviationcodeid, deviationcode, deviationdescription,
                   defaultdeviationcode, colorid, camsinit, mocid
                  )
           VALUES (seq_deviationcodes.NEXTVAL, myrec.deviationcode, myrec.deviationdescription,
                   myrec.defaultdeviationcode, myrec.colorid, NULL, mocidin
                  );

      FETCH mycur
       INTO myrec;
   END LOOP;

   CLOSE mycur;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END copy_deviationcodes;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."COPY_EMOCCONFIG" (
   mocidin          moc.mocid%TYPE,
   emocconfigidin   emocconfig.emocconfigid%TYPE
)
AS
/******************************************************************************
   NAME:       CopyEmocConfig
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        5/15/2005   R.McBride       Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     CopyEmocConfig
      Sysdate:         5/15/2005
      Date and Time:   5/15/2005, 4:57:53 PM, and 5/15/2005 4:57:53 PM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
   v_timezonefactor   emocconfig.timezonefactor%TYPE;
   v_timezonehours    emocconfig.timezonehours%TYPE;
   v_gmtfactor        emocconfig.gmtfactor%TYPE;
   v_gmthours         emocconfig.gmthours%TYPE;
   v_version          emocconfig.VERSION%TYPE;
   v_basename         emocconfig.basename%TYPE;
   v_etictimer        emocconfig.etictimer%TYPE;
   v_archivedom       emocconfig.archivedom%TYPE;
   v_archivepurgemo   emocconfig.archivepurgemo%TYPE;
   v_scheduledow      emocconfig.scheduledow%TYPE;
   v_scheduletime     emocconfig.scheduletime%TYPE;
   v_updatedby        emocconfig.lastupdatedby%TYPE;
   v_schedulepath     emocconfig.schedulepath%TYPE;
   v_templatepath     emocconfig.templatepath%TYPE;
   v_archivepath      emocconfig.archivepath%TYPE;
   v_headercolor      emocconfig.headercolor%TYPE;
   v_smtpserver       emocconfig.smtpserver%TYPE;
   v_docspath         emocconfig.docspath%TYPE;
   v_proxyurl         emocconfig.proxyurl%TYPE;
   v_proxyuserid      emocconfig.proxyuserid%TYPE;
   v_proxypassword    emocconfig.proxypassword%TYPE;
   v_proxyenabled     emocconfig.proxyenabled%TYPE;
   v_emochtml1        emocconfig.emochtml1%TYPE;
   emocconfigidnew    emocconfig.emocconfigid%TYPE;
BEGIN
   SELECT timezonefactor, timezonehours, gmtfactor, gmthours,
          VERSION, basename, etictimer, archivedom,
          archivepurgemo, scheduledow, scheduletime, schedulepath,
          templatepath, archivepath, docspath, headercolor,
          smtpserver, proxyurl, proxyuserid, proxypassword,
          proxyenabled, emochtml1
     INTO v_timezonefactor, v_timezonehours, v_gmtfactor, v_gmthours,
          v_version, v_basename, v_etictimer, v_archivedom,
          v_archivepurgemo, v_scheduledow, v_scheduletime, v_schedulepath,
          v_templatepath, v_archivepath, v_docspath, v_headercolor,
          v_smtpserver, v_proxyurl, v_proxyuserid, v_proxypassword,
          v_proxyenabled, v_emochtml1
     FROM emocconfig
    WHERE emocconfigid = emocconfigidin;

   SELECT seq_emocconfig.NEXTVAL
     INTO emocconfigidnew
     FROM DUAL;

   INSERT INTO emoc3.emocconfig
               (timezonefactor, timezonehours, gmtfactor, gmthours,
                VERSION, basename, etictimer, archivedom,
                archivepurgemo, scheduledow, scheduletime,
                schedulepath, templatepath, archivepath, docspath,
                headercolor, smtpserver, proxyurl, proxyuserid,
                proxypassword, proxyenabled, emochtml1, mocid,
                emocconfigid
               )
        VALUES (v_timezonefactor, v_timezonehours, v_gmtfactor, v_gmthours,
                v_version, v_basename, v_etictimer, v_archivedom,
                v_archivepurgemo, v_scheduledow, v_scheduletime,
                v_schedulepath, v_templatepath, v_archivepath, v_docspath,
                v_headercolor, v_smtpserver, v_proxyurl, v_proxyuserid,
                v_proxypassword, v_proxyenabled, v_emochtml1, mocidin,
                emocconfigidnew
               );

   COMMIT;
END copy_emocconfig;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."COPY_FIRESYMBOL" (mocidin moc.mocid%TYPE)
AS
   CURSOR mycur
   IS
      SELECT firesymbol, ranking, defaultval, description
        FROM firesymbols
       WHERE mocid = 0;

   myrec   mycur%ROWTYPE;
BEGIN
   OPEN mycur;

   FETCH mycur
    INTO myrec;

   WHILE mycur%FOUND
   LOOP
      INSERT INTO firesymbols
                  (firesymbolid, firesymbol, ranking,
                   defaultval, description, mocid
                  )
           VALUES (seq_firesymbols.NEXTVAL, myrec.firesymbol, myrec.ranking,
                   myrec.defaultval, myrec.description, mocidin
                  );

      FETCH mycur
       INTO myrec;
   END LOOP;

   CLOSE mycur;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END copy_firesymbol;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."COPY_FUEL" (mocidin moc.mocid%TYPE)
AS
   CURSOR mycur
   IS
      SELECT colorid, fuelstatus, fueldescription, landing, defaultfuel,
             allowsortieupdate, fuelstatuslabel
        FROM fuel
       WHERE mocid = 0;

   myrec   mycur%ROWTYPE;
BEGIN
   OPEN mycur;

   FETCH mycur
    INTO myrec;

   WHILE mycur%FOUND
   LOOP
      INSERT INTO fuel
                  (fuelstatusid, colorid, fuelstatus,
                   fueldescription, landing, defaultfuel,
                   allowsortieupdate, fuelstatuslabel, mocid
                  )
           VALUES (seq_fuels.NEXTVAL, myrec.colorid, myrec.fuelstatus,
                   myrec.fueldescription, myrec.landing, myrec.defaultfuel,
                   myrec.allowsortieupdate, myrec.fuelstatuslabel, mocidin
                  );

      FETCH mycur
       INTO myrec;
   END LOOP;

   CLOSE mycur;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END copy_fuel;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."COPY_HQCODES" (mocidin moc.mocid%TYPE)
AS
   CURSOR mycur
   IS
      SELECT hqcode, hqdescription, hqlevel, hqdefault
        FROM hanger_queen_code
       WHERE mocid = 0;

   myrec   mycur%ROWTYPE;
BEGIN
   OPEN mycur;

   FETCH mycur
    INTO myrec;

   WHILE mycur%FOUND
   LOOP
      INSERT INTO hanger_queen_code
                  (hqcodeid, hqcode,
                   hqdescription, hqlevel, hqdefault,
                   mocid
                  )
           VALUES (seq_hangarqueen.NEXTVAL, myrec.hqcode,
                   myrec.hqdescription, myrec.hqlevel, myrec.hqdefault,
                   mocidin
                  );

      FETCH mycur
       INTO myrec;
   END LOOP;

   CLOSE mycur;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END copy_hqcodes;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."COPY_INTERFACEITEMS" (
   mocidout                     interfacecontrol.mocid%TYPE
)
AS
   row_id   INTEGER;

   CURSOR mycur
   IS
      SELECT *
        FROM interfaceitems
       WHERE mocid = 0;

   myrec    mycur%ROWTYPE;
BEGIN
         OPEN mycur;

         FETCH mycur
          INTO myrec;

         WHILE mycur%FOUND
         LOOP
            SELECT NVL (MAX (interfaceitems.interfaceitemid), 0)
              INTO row_id
              FROM interfaceitems;

            INSERT INTO interfaceitems
                        (interfaceitemid, interfacecontrolid, itemname,
                         itemenabled, lastupdatedby, tric,
                         itemdescription, mocid
                        )
                 VALUES (row_id + 1, 0, myrec.itemname,
                         myrec.itemenabled, 0, myrec.tric,
                         myrec.itemdescription, mocidout
                        );

            COMMIT;

            FETCH mycur
             INTO myrec;
         END LOOP;

         CLOSE mycur;
END COPY_INTERFACEITEMS;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."COPY_JOAP" (mocidin moc.mocid%TYPE)
AS
   CURSOR mycur
   IS
      SELECT joapcode, joapdescription, landing, redcapstatus, defaultjoap,
             colorrulesid
        FROM joap
       WHERE mocid = 0;

   myrec   mycur%ROWTYPE;
BEGIN
   OPEN mycur;

   FETCH mycur
    INTO myrec;

   WHILE mycur%FOUND
   LOOP
      INSERT INTO joap
                  (joapid, joapcode, joapdescription,
                   landing, redcapstatus, defaultjoap,
                   colorrulesid, mocid
                  )
           VALUES (seq_joaps.NEXTVAL, myrec.joapcode, myrec.joapdescription,
                   myrec.landing, myrec.redcapstatus, myrec.defaultjoap,
                   myrec.colorrulesid, mocidin
                  );

      FETCH mycur
       INTO myrec;
   END LOOP;

   CLOSE mycur;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END copy_joap;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."COPY_LANDINGCODES" (mocidin moc.mocid%TYPE)
AS
   CURSOR mycur
   IS
      SELECT landingcode, landingcodedescription, writeupneeded
        FROM landingcodes
       WHERE mocid = 0;

   myrec   mycur%ROWTYPE;
BEGIN
   OPEN mycur;

   FETCH mycur
    INTO myrec;

   WHILE mycur%FOUND
   LOOP
      INSERT INTO landingcodes
                  (landingcodeid, landingcode,
                   landingcodedescription, writeupneeded, mocid
                  )
           VALUES (seq_landingcodes.NEXTVAL, myrec.landingcode,
                   myrec.landingcodedescription, myrec.writeupneeded, mocidin
                  );

      FETCH mycur
       INTO myrec;
   END LOOP;

   CLOSE mycur;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END copy_landingcodes;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."COPY_MESSAGES" (mocidin moc.mocid%TYPE)
AS
   CURSOR mycur
   IS
      SELECT messagetype, messagetitle, MESSAGE, lastupdate, lastupdateby
        FROM messages
       WHERE mocid = 0;

   myrec   mycur%ROWTYPE;
BEGIN
   OPEN mycur;

   FETCH mycur
    INTO myrec;

   WHILE mycur%FOUND
   LOOP
      INSERT INTO messages
                  (messageid, messagetype,
                   messagetitle, MESSAGE, lastupdate,
                   lastupdateby, mocid
                  )
           VALUES (seq_messages.NEXTVAL, myrec.messagetype,
                   myrec.messagetitle, myrec.MESSAGE, myrec.lastupdate,
                   myrec.lastupdateby, mocidin
                  );

      FETCH mycur
       INTO myrec;
   END LOOP;

   CLOSE mycur;
   COMMIT ;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END copy_messages;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."COPY_POSSESSIONCODES" (mocidin moc.mocid%TYPE)
AS
   CURSOR mycur
   IS
      SELECT *
        FROM possessions
       WHERE mocid = 0;

   myrec   mycur%ROWTYPE;
BEGIN
   OPEN mycur;

   FETCH mycur
    INTO myrec;

   WHILE mycur%FOUND
   LOOP
      INSERT INTO possessions
                  (possessionid, possessioncode,
                   possessiondescription, defaultpossession,
                   mocid
                  )
           VALUES (seq_possessions.NEXTVAL, myrec.possessioncode,
                   myrec.possessiondescription, myrec.defaultpossession,
                   mocidin
                  );

      FETCH mycur
       INTO myrec;
   END LOOP;

   CLOSE mycur;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END copy_possessioncodes;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."COPY_RANKS" (mocidin moc.mocid%TYPE)
AS
   CURSOR mycur
   IS
      SELECT rankcode, rankdescription, defaultrank, gradecode
        FROM ranks
       WHERE mocid = 0;

   myrec   mycur%ROWTYPE;
BEGIN
   OPEN mycur;

   FETCH mycur
    INTO myrec;

   WHILE mycur%FOUND
   LOOP
      INSERT INTO ranks
                  (rankid, rankcode, rankdescription,
                   defaultrank, gradecode, mocid
                  )
           VALUES (seq_ranks.NEXTVAL, myrec.rankcode, myrec.rankdescription,
                   myrec.defaultrank, myrec.gradecode, mocidin
                  );

      FETCH mycur
       INTO myrec;
   END LOOP;

   CLOSE mycur;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END copy_ranks;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."COPY_SEMEDX" (mocidin moc.mocid%TYPE)
AS
   CURSOR mycur
   IS
      SELECT semedx, semedxdescription, defaultval, colorrulesid
        FROM semedx
       WHERE mocid = 0;

   myrec   mycur%ROWTYPE;
BEGIN
   OPEN mycur;

   FETCH mycur
    INTO myrec;

   WHILE mycur%FOUND
   LOOP
      INSERT INTO semedx
                  (semedxid, semedx,
                   semedxdescription, defaultval,
                   colorrulesid, mocid
                  )
           VALUES (seq_semedx.NEXTVAL, myrec.semedx,
                   myrec.semedxdescription, myrec.defaultval,
                   myrec.colorrulesid, mocidin
                  );

      FETCH mycur
       INTO myrec;
   END LOOP;

   CLOSE mycur;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END copy_semedx;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."COPY_STATUSCODE" (mocidin moc.mocid%TYPE)
AS
   CURSOR mycur
   IS
      SELECT statuscode, ordernumber, iconname, defaultstatuscode, lastflown,
             flying, takeoff, statuscodelabel, allowsortieupdate, isrequired
        FROM statuscode
       WHERE mocid = 0;

   myrec   mycur%ROWTYPE;
BEGIN
   OPEN mycur;

   FETCH mycur
    INTO myrec;

   WHILE mycur%FOUND
   LOOP
      INSERT INTO statuscode
                  (statuscodeid, statuscode,
                   ordernumber, iconname,
                   defaultstatuscode, lastflown, flying,
                   takeoff, statuscodelabel,
                   allowsortieupdate, isrequired, mocid
                  )
           VALUES (seq_statuscode.NEXTVAL, myrec.statuscode,
                   myrec.ordernumber, myrec.iconname,
                   myrec.defaultstatuscode, myrec.lastflown, myrec.flying,
                   myrec.takeoff, myrec.statuscodelabel,
                   myrec.allowsortieupdate, myrec.isrequired, mocidin
                  );

      FETCH mycur
       INTO myrec;
   END LOOP;

   CLOSE mycur;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END copy_statuscode;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."COPY_STATUSICONS" (mocidin moc.mocid%TYPE)
AS
   CURSOR mycur
   IS
      SELECT statusimageid, missiondesignseries, statuscode, icon_type
        FROM mocstatusicons
       WHERE mocid = 0;

   myrec   mycur%ROWTYPE;
BEGIN
   DELETE FROM mocstatusicons
         WHERE mocid = mocidin;

   COMMIT;

   OPEN mycur;

   FETCH mycur
    INTO myrec;

   WHILE mycur%FOUND
   LOOP
      INSERT INTO mocstatusicons
                  (statusimageid, missiondesignseries,
                   statuscode, icon_type, mocid
                  )
           VALUES (myrec.statusimageid, myrec.missiondesignseries,
                   myrec.statuscode, myrec.icon_type, mocidin
                  );

      FETCH mycur
       INTO myrec;
   END LOOP;

   CLOSE mycur;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END copy_statusicons;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."COPY_STATUSRULE" (mocidin moc.mocid%TYPE)
AS
   CURSOR mycur
   IS
      SELECT statuscodeid, transition2id,
             (SELECT statuscode
                FROM statuscode
               WHERE statuscode.statuscodeid =
                             statustransitionrule.statuscodeid)
                                                              AS statuscode1,
             (SELECT statuscode
                FROM statuscode
               WHERE statuscode.statuscodeid =
                            statustransitionrule.transition2id)
                                                              AS statuscode2
        FROM statustransitionrule
       WHERE mocid = 0;

   myrec             mycur%ROWTYPE;
   v_statuscodeid1   NUMBER;
   v_statuscodeid2   NUMBER;
BEGIN
   OPEN mycur;

   FETCH mycur
    INTO myrec;

   WHILE mycur%FOUND
   LOOP
      SELECT statuscodeid
        INTO v_statuscodeid1
        FROM statuscode
       WHERE statuscode = myrec.statuscode1 AND mocid = mocidin;

      SELECT statuscodeid
        INTO v_statuscodeid2
        FROM statuscode
       WHERE statuscode = myrec.statuscode2 AND mocid = mocidin;

      INSERT INTO statustransitionrule
                  (statruleid, statuscodeid, transition2id,
                   mocid
                  )
           VALUES (seq_statusrule.NEXTVAL, v_statuscodeid1, v_statuscodeid2,
                   mocidin
                  );

      FETCH mycur
       INTO myrec;
   END LOOP;

   CLOSE mycur;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END copy_statusrule;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."COPY_SYMBOLS" (mocidin moc.mocid%TYPE)
AS
   CURSOR mycur
   IS
      SELECT condcodeid, symbol, symboldescription
        FROM symbols
       WHERE mocid = 0;

   myrec             mycur%ROWTYPE;
   v_conditioncode   VARCHAR2 (5);
   v_condcodeid      NUMBER (10);
BEGIN
   OPEN mycur;

   FETCH mycur
    INTO myrec;

   WHILE mycur%FOUND
   LOOP
      SELECT conditioncode
        INTO v_conditioncode
        FROM conditioncodes
       WHERE condcodeid = myrec.condcodeid;

      SELECT condcodeid
        INTO v_condcodeid
        FROM conditioncodes
       WHERE conditioncode = v_conditioncode AND mocid = mocidin;

      INSERT INTO symbols
                  (symbolid, symbol,
                   symboldescription, condcodeid, mocid
                  )
           VALUES (seq_symbols.NEXTVAL, myrec.symbol,
                   myrec.symboldescription, v_condcodeid, mocidin
                  );

      FETCH mycur
       INTO myrec;
   END LOOP;

   CLOSE mycur;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END copy_symbols;



 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."COPY_WEAPONSCLASS" (mocidin moc.mocid%TYPE)
AS
   CURSOR mycur
   IS
      SELECT weaponsclass, defaultval
        FROM weaponsclass
       WHERE mocid = 0;

   myrec   mycur%ROWTYPE;
BEGIN
   OPEN mycur;

   FETCH mycur
    INTO myrec;

   WHILE mycur%FOUND
   LOOP
      INSERT INTO weaponsclass
                  (weaponsclassid, weaponsclass,
                   defaultval, mocid
                  )
           VALUES (seq_weaponsclass.NEXTVAL, myrec.weaponsclass,
                   myrec.defaultval, mocidin
                  );

      FETCH mycur
       INTO myrec;
   END LOOP;

   CLOSE mycur;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END copy_weaponsclass;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."COPY_WEAPONTYPES" (mocidin moc.mocid%TYPE)
AS
   CURSOR mycur
   IS
      SELECT weapontype
        FROM weapontypes
       WHERE mocid = 0;

   myrec   mycur%ROWTYPE;
BEGIN
   OPEN mycur;

   FETCH mycur
    INTO myrec;

   WHILE mycur%FOUND
   LOOP
      INSERT INTO weapontypes
                  (weaponstypeid, weapontype, mocid
                  )
           VALUES (seq_weapontypes.NEXTVAL, myrec.weapontype, mocidin
                  );

      FETCH mycur
       INTO myrec;
   END LOOP;

   CLOSE mycur;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END copy_weapontypes;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."COPY_WX" (mocidin moc.mocid%TYPE)
AS
   CURSOR mycur
   IS
      SELECT weathercode, weatherdescription, defaultweathercode
        FROM wx
       WHERE mocid = 0;

   myrec   mycur%ROWTYPE;
BEGIN
   OPEN mycur;

   FETCH mycur
    INTO myrec;

   WHILE mycur%FOUND
   LOOP
      INSERT INTO wx
                  (wxcodeid, weathercode,
                   weatherdescription, defaultweathercode,
                   mocid
                  )
           VALUES (seq_wx.NEXTVAL, myrec.weathercode,
                   myrec.weatherdescription, myrec.defaultweathercode,
                   mocidin
                  );

      FETCH mycur
       INTO myrec;
   END LOOP;

   CLOSE mycur;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END copy_wx;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."DELETEBLKDEVIATIONFROMIMDS" (
   homeelcin                     VARCHAR2,
   currentelcin                  VARCHAR2,
   unitidin                      VARCHAR2,
   isortiedatein				 VARCHAR2,
   sortiedatein                  VARCHAR2,
   schedblknumin				 VARCHAR2,
   equipidin   					 VARCHAR2,
   sortienumberin 				 VARCHAR2,
   sortiemodifierin              VARCHAR2,
   mainteventidin                VARCHAR2,
   devcodein                     VARCHAR2,
   devcausecodein                VARCHAR2,
   chargeindin                   VARCHAR2
)
AS
   mocvar   NUMBER;
   acidvar  NUMBER;
   devidvar NUMBER;
   causevar NUMBER;
   /*chargevar NUMBER;*/
   /******************************************************************************
   NAME:       DELETEBLKDEVIATIONFROMIMDS
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     DELETEBLKDEVIATIONFROMIMDS
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       deviationdeletetrx)

******************************************************************************/
BEGIN
   	 /*GET MOCID for gathering code ids*/
	 GET_MOCID_BY_ELCUNITID(currentelcin,unitidin,mocvar);

	 IF mocvar IS NULL THEN
	 	/*Get Deviationid*/
		GET_DEVID_BY_MOCDEVCODE(mocvar,devcodein,devidvar);

		IF devidvar IS NOT NULL THEN
	 	/*GET CauseCodeid*/
			  GET_CAUSEID_BY_MOCCAUSECODE(mocvar,devcausecodein,causevar);

			  IF causevar IS NOT NULL THEN

		   	 	 DELETE FROM EMOC3.SCHEDULEDEVIATIONS
			 	 WHERE scheduleid IN (SELECT scheduleid
			   	   			  	 	FROM SCHEDULE
			  						WHERE SQUADRONID IN
										  (SELECT squadronid FROM squadrons WHERE mocid = mocvar)
			    					AND SORTIEDATE = sortiedatein
									AND BLOCKNUMBER = schedblknumin)
			 	 AND deviationcodeid = devidvar
			 	 AND causecodeid = causevar;
			  END IF;
		END IF;
	END IF;

--EXCEPTION
--   WHEN NO_DATA_FOUND
--   THEN
--      NULL;
--   WHEN OTHERS
--   THEN
      -- Consider logging the error and then re-raise
--      RAISE;
END DELETEBLKDEVIATIONFROMIMDS;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."DELETEDEVIATIONFROMIMDS"
  (
    homeelcin        VARCHAR2,
    currentelcin     VARCHAR2,
    unitidin         VARCHAR2,
    isortiedatein    VARCHAR2,
    sortiedatein     VARCHAR2,
    schedblknumin    VARCHAR2,
    equipidin        VARCHAR2,
    sortienumberin   VARCHAR2,
    sortiemodifierin VARCHAR2,
    mainteventidin   VARCHAR2,
    devcodein        VARCHAR2,
    devcausecodein   VARCHAR2,
    chargeindin      VARCHAR2 )
AS
  mocvar     NUMBER;
  acidvar    NUMBER;
  schedidvar NUMBER;
  devidvar   NUMBER;
  causevar   NUMBER;
  squadvar   NUMBER;
  /*chargevar NUMBER;*/
  /******************************************************************************
  NAME:       DELETEDEVIATIONFROMIMDS
  PURPOSE:
  REVISIONS:
  Ver        Date        Author           Description
  ---------  ----------  ---------------  ------------------------------------
  1.0        12/15/2006  jwc             1. Created this procedure.
  2.0        08/15/2012  J.Long          1. QC - 367 check causevar against old/new
  NOTES:
  Automatically available Auto Replace Keywords:
  Object Name:     DELETEDEVIATIONFROMIMDS
  Sysdate:         12/15/2006
  Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
  Username:         emoc3)
  Table Name:       deviationdeletetrx)
  ******************************************************************************/
BEGIN
  /*GET MOCID for gathering code ids*/
  GET_MOCID_BY_ELCUNITID(currentelcin,unitidin,mocvar);
  IF mocvar IS NOT NULL THEN
    /*Get Aircraftid to make sure correct schedule line*/
    GET_AIRCRAFTID_BY_MOCEQUIPID(mocvar,equipidin,acidvar);
    IF acidvar IS NOT NULL THEN
      /*Get Squadronid */
      GET_SQUADID_BY_AIRCRAFTID(acidvar,squadvar);
      IF squadvar IS NOT NULL THEN
        /*GetScheduleid to apply deviation to*/
        GET_SCHEDID_BY_SQUADSORTIEACID(squadvar,sortiedatein,sortienumberin,acidvar,schedidvar);
        IF schedidvar IS NOT NULL THEN
          /*Get Deviationid*/
          GET_DEVID_BY_MOCDEVCODE(mocvar,devcodein,devidvar);
          IF devidvar IS NOT NULL THEN
            /*GET CauseCodeid*/
            GET_CAUSEID_BY_MOCCAUSECODE(mocvar,devcausecodein,causevar);
            IF causevar IS NOT NULL THEN
              DELETE
              FROM EMOC3.SCHEDULEDEVIATIONS
              WHERE scheduleid    = schedidvar
              AND deviationcodeid = devidvar
              AND (causecodeid    = causevar
              OR newcausecode     = causevar);
            END IF;
          END IF;
        END IF;
      END IF;
    END IF;
  END IF;
  --EXCEPTION
  --   WHEN NO_DATA_FOUND
  --   THEN
  --      NULL;
  --   WHEN OTHERS
  --   THEN
  -- Consider logging the error and then re-raise
  --      RAISE;
END DELETEDEVIATIONFROMIMDS;

CREATE PROCEDURE         "EMOC3"."DELETEIMDSCDBMICAP" ( 
   equipidin              VARCHAR2, 
   elcin                  VARCHAR2, 
   unitidin               VARCHAR2, 
   jcnin                  VARCHAR2, 
   docnumberin            VARCHAR2 
) 
AS 
   mid        INTEGER; 
   micapid    INTEGER; 
   mocidvar   INTEGER; 
   acidvar    INTEGER; 
BEGIN 
   /*GET MOCID */ 
   SELECT mocid 
     INTO mocidvar 
     FROM wings 
            WHERE elc = elcin AND unitid = unitidin; 
 
   /*Get Aircraftid */ 
   SELECT aircraftid 
     INTO acidvar 
     FROM aircraft 
            WHERE mocid = mocidvar AND misequipid = equipidin; 
 
   SELECT COUNT (*) 
     INTO mid 
     FROM micap 
    WHERE equipmentid = equipidin 
      AND enterpriselocationcode = elcin 
      AND unitid = unitidin 
   AND jobcontrolnumber = jcnin 
   AND documentnumber = docnumberin; 
 
   IF (mid > 0) 
   THEN 
        UPDATE micap 
            SET deletedflag = 1, 
    deleteddate = SYSDATE() 
          WHERE equipmentid = equipidin 
            AND enterpriselocationcode = elcin 
            AND unitid = unitidin 
            AND jobcontrolnumber = jcnin 
            AND documentnumber = docnumberin; 
 
         COMMIT; 
 
   END IF; 
         emoc_cache.updatechangenotification('aircraft'||to_char(acidvar), 0); 
   EXCEPTION 
   WHEN NO_DATA_FOUND 
   THEN 
      NULL; 
   WHEN OTHERS 
   THEN 
      -- Consider logging the error and then re-raise 
      RAISE; 
END deleteimdscdbmicap;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."DELETEOPEREVENTDELETEFROMIMDS" (
   homeelcin                     VARCHAR2,
   currentelcin                  VARCHAR2,
   unitidin                      VARCHAR2,
   equipidin                     VARCHAR2,
   isortiedatein				 VARCHAR2,
   sortiedatein     			 VARCHAR2,
   sortienumberin   			 VARCHAR2
)
AS
   mocvar   NUMBER;
   acidvar  NUMBER;
   squadvar NUMBER;
   /******************************************************************************
   NAME:       DELETEOPEREVENTDELETEFROMIMDS
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     DELETEOPEREVENTDELETEFROMIMDS
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       operationaleventdeletetrx)

******************************************************************************/
BEGIN
    /*GET MOCID for gathering code ids*/
	 GET_MOCID_BY_ELCUNITID(currentelcin,unitidin,mocvar);

	 IF mocvar IS NOT NULL THEN
	 /*Get Aircraftid to make sure correct schedule line*/
	 	   GET_AIRCRAFTID_BY_MOCEQUIPID(mocvar,equipidin,acidvar);

		   IF acidvar IS NOT NULL THEN
	 	   /*Get Squadronid for Aircraft*/
	 	   		 GET_SQUADID_BY_AIRCRAFTID(acidvar,squadvar);

				 IF squadvar IS NOT NULL THEN

				   	 DELETE FROM EMOC3.SCHEDULE
					 WHERE SORTIEDATE = sortiedatein
					   AND SORTIENUM = sortienumberin
					   AND AIRCRAFTID = acidvar
					   AND SQUADRONID = squadvar;
				 END IF;
			END IF;
	 END IF;

--EXCEPTION
--   WHEN NO_DATA_FOUND
 --  THEN
--     NULL;
--   WHEN OTHERS
--   THEN
      -- Consider logging the error and then re-raise
--      RAISE;
END DELETEOPEREVENTDELETEFROMIMDS;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."DELETE_FLYING_SCHEDULE" (
   MESSAGE        OUT   remarks.remarks%TYPE,
   rcount         OUT   remarks.remarksid%TYPE,
   squadronidin         schedule.squadronid%TYPE,
   sortiedatein         schedule.sortiedate%TYPE
)
/******************************************************************************
   NAME:       DELETE_FLYING_SCHEDULE
   PURPOSE:    DELETES schedule records as long as no aircraft have flown or have deviaitons

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        8/1/03      A.Mitchell       1. Created this procedure.
   1.1        2/27/04     A.Mitchell      2. Modified to use cursor to remove recs
   PARAMETERS:
   INPUT:
   *SQUADRONID
   *SORTIEDATE
   OUTPUT:
   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/
AS
   reccount   NUMBER             := 0;
   msg        VARCHAR2 (500);

   CURSOR schedcur
   IS
      SELECT schedule.scheduleid, schedule.scheduleremarks,
             schedule.maintremarks, scheduledeviations.deviationsremarks
        FROM schedule LEFT JOIN scheduledeviations ON schedule.scheduleid =
                                                        scheduledeviations.scheduleid
       WHERE squadronid = squadronidin AND schedule.sortiedate = sortiedatein;

   schedrec   schedcur%ROWTYPE;
BEGIN
   SELECT COUNT (schedule.scheduleid)
     INTO reccount
     FROM schedule LEFT JOIN scheduledeviations ON schedule.scheduleid =
                                                     scheduledeviations.scheduleid
          LEFT JOIN schedulestatus ON schedulestatus.scheduleid =
                                                           schedule.scheduleid
          JOIN statuscode ON statuscode.statuscodeid =
                                                   schedulestatus.statuscodeid
    WHERE schedule.sortiedate = sortiedatein
      AND squadronid = squadronidin
      AND (   LENGTH (actualtakeoff) > 0
           OR LENGTH (scheduledeviations.deviationcodeid) > 0
           OR (statustype = 0 AND flying = 1)
          );

   IF reccount > 0
   THEN
      BEGIN
         msg :=
               'The Schedule records could not be deleted because '
            || 'one of the Aircraft has been flown or has deviation(s) against it';
      END;
   ELSE
      BEGIN
         OPEN schedcur;

         FETCH schedcur
          INTO schedrec;

         WHILE schedcur%FOUND
         LOOP
            DELETE FROM semedxdata
                  WHERE scheduleid = schedrec.scheduleid;

            DELETE FROM joapdata
                  WHERE scheduleid = schedrec.scheduleid;

            DELETE FROM schedulestatus
                  WHERE scheduleid = schedrec.scheduleid;

            UPDATE schedule
               SET scheduleremarks = NULL,
                   maintremarks = NULL
             WHERE scheduleid = schedrec.scheduleid;

            UPDATE scheduledeviations
               SET deviationsremarks = NULL
             WHERE scheduleid = schedrec.scheduleid;

            DELETE FROM remarks
                  WHERE remarksid = schedrec.scheduleremarks;

            DELETE FROM remarks
                  WHERE remarksid = schedrec.maintremarks;

            DELETE FROM remarks
                  WHERE remarksid = schedrec.deviationsremarks;

            DELETE FROM scheduledeviations
                  WHERE scheduleid = schedrec.scheduleid;

            DELETE FROM schedule
                  WHERE scheduleid = schedrec.scheduleid;

            FETCH schedcur
             INTO schedrec;
         END LOOP;

         CLOSE schedcur;

         COMMIT;
         msg :=
               'All Sortie records of this squadron for Sortie Date '
            || sortiedatein
            || ' were deleted.';
      END;
   END IF;

   rcount := reccount;
   MESSAGE := msg;
END delete_flying_schedule;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."DELETE_MOC" (mocidin moc.mocid%TYPE) AS
  CURSOR wingcur IS
    SELECT wingid FROM wings WHERE mocid = mocidin;

  wingrec wingcur%ROWTYPE;
BEGIN
  OPEN wingcur;

  FETCH wingcur
    INTO wingrec;

  WHILE wingcur%FOUND LOOP
    delete_wing(wingrec.wingid);
  
    FETCH wingcur
      INTO wingrec;
  END LOOP;

  CLOSE wingcur;

  delete_moc_aircraftmds(mocidin);

  DELETE areas WHERE mocid = mocidin;

  COMMIT;

  DELETE acftmdstypes WHERE mocid = mocidin;

  COMMIT;

  DELETE assignmentcodes WHERE mocid = mocidin;

  COMMIT;

  DELETE causecodes WHERE mocid = mocidin;

  COMMIT;

  DELETE colorrules WHERE mocid = mocidin;

  COMMIT;

  DELETE conditionstatus WHERE mocid = mocidin;

  COMMIT;

  DELETE deviationcodes WHERE mocid = mocidin;

  COMMIT;

  DELETE fuel WHERE mocid = mocidin;

  COMMIT;

  DELETE colors WHERE mocid = mocidin;

  COMMIT;

  DELETE symbols WHERE mocid = mocidin;

  COMMIT;

  DELETE conditioncodes WHERE mocid = mocidin;

  COMMIT;

  DELETE crewchiefs WHERE mocid = mocidin;

  COMMIT;

  DELETE pilot WHERE mocid = mocidin;

  COMMIT;

  DELETE ranks WHERE mocid = mocidin;

  COMMIT;
  delete_moc_customdata(mocidin);
  delete_moc_statusimage(mocidin);

  DELETE emocconfig WHERE mocid = mocidin;

  COMMIT;

  DELETE eventlog WHERE mocid = mocidin;

  COMMIT;

  DELETE firesymbols WHERE mocid = mocidin;

  COMMIT;
  /* DELETE GENERATIONFLOW */
  delete_moc_genflow(mocidin);

  DELETE hanger_queen_code WHERE mocid = mocidin;

  COMMIT;

  DELETE hotspots WHERE mocid = mocidin;

  COMMIT;

  DELETE joap WHERE mocid = mocidin;

  COMMIT;

  DELETE landingcodes WHERE mocid = mocidin;

  COMMIT;

  DELETE links WHERE mocid = mocidin;

  COMMIT;

  DELETE locations WHERE mocid = mocidin;

  COMMIT;

  DELETE majcoms WHERE mocid = mocidin;

  COMMIT;

  DELETE messages WHERE mocid = mocidin;

  COMMIT;

  DELETE missions WHERE mocid = mocidin;

  COMMIT;

  DELETE organizations WHERE mocid = mocidin;

  COMMIT;

  DELETE possessions WHERE mocid = mocidin;

  COMMIT;

  DELETE ranges WHERE mocid = mocidin;

  COMMIT;

  /* DELETE REPORTS  */
  DELETE Reportcriteria where mocid = mocidin;
  COMMIT;

  DELETE Reports where mocid = mocidin;
  COMMIT;

  DELETE semedx WHERE mocid = mocidin;
  COMMIT;

  DELETE statustransitionrule WHERE mocid = mocidin;

  COMMIT;

  DELETE statuscode WHERE mocid = mocidin;

  COMMIT;

  DELETE stationloccodes WHERE mocid = mocidin;

  COMMIT;

  DELETE utilizationcodes WHERE mocid = mocidin;

  COMMIT;

  DELETE weaponsclass WHERE mocid = mocidin;

  COMMIT;

  DELETE whendiscoveredcodes WHERE mocid = mocidin;

  COMMIT;

  DELETE workcenters WHERE mocid = mocidin;

  COMMIT;
  delete_moc_wx(mocidin);
  COMMIT;

  /* DELETE INTERFACECONTROL */
  DELETE interfacelog WHERE mocid = mocidin;

  COMMIT;

  DELETE tbmcsinterfacelog WHERE mocid = mocidin;

  COMMIT;

  DELETE interfaceitems WHERE mocid = mocidin;

  COMMIT;

  DELETE interfacecontrol WHERE mocid = mocidin;

  COMMIT;

  DELETE mocusers WHERE mocid = mocidin;

  COMMIT;

  DELETE mocadmins WHERE mocid = mocidin;

  COMMIT;

  DELETE changenotification WHERE mocid = mocidin;

  COMMIT;
    DELETE basemaps where basemaps.mocid = mocidin;
  COMMIT;

  DELETE checklist WHERE mocid = mocidin;

  COMMIT;
    DELETE Changenotification where mocid = mocidin;
  COMMIT;

  DELETE moc WHERE mocid = mocidin;

  COMMIT;


END delete_moc;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."DELETE_MOCADMIN" (
   useridin   users.userid%TYPE,
   mocidin    moc.mocid%TYPE
)
AS
BEGIN
   DELETE      mocadmins
         WHERE mocid = mocidin AND userid = useridin;

   COMMIT;
END delete_mocadmin;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."DELETE_MOCADMINS" (
   mocidin    moc.mocid%TYPE
)
AS
BEGIN
   DELETE      mocadmins
         WHERE mocid = mocidin;

   COMMIT;
END delete_mocadmins;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."DELETE_MOCUSER" (
   useridin   users.userid%TYPE,
   mocidin    moc.mocid%TYPE
)
AS
BEGIN
   DELETE      mocusers
         WHERE mocid = mocidin AND userid = useridin;

   COMMIT;
END delete_mocuser;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."DELETE_MOCUSERS" (
   mocidin    moc.mocid%TYPE
)
AS
BEGIN
   DELETE      mocusers
         WHERE mocid = mocidin;

   COMMIT;
END delete_mocusers;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."DELETE_MOC_AIRCRAFTMDS" (mocidin moc.mocid%TYPE)
AS
   CURSOR mdscur
   IS
      SELECT aircraftmdsid
        FROM aircraftmds
       WHERE mocid = mocidin;

   mdsrec   mdscur%ROWTYPE;
BEGIN
   OPEN mdscur;

   FETCH mdscur
    INTO mdsrec;

   WHILE mdscur%FOUND
   LOOP
      DELETE      armament
            WHERE aircraftmdsid = mdsrec.aircraftmdsid;

      DELETE      combatsclrules
            WHERE aircraftmdsid = mdsrec.aircraftmdsid;

      DELETE      customdatamds
            WHERE aircraftmdsid = mdsrec.aircraftmdsid;

      /*
   DELETE      statusimage
            WHERE aircraftmdsid = mdsrec.aircraftmdsid;

       DELETE      wuc
            WHERE aircraftmdsid = mdsrec.aircraftmdsid; 
   */
      FETCH mdscur
       INTO mdsrec;
   END LOOP;

   CLOSE mdscur;

   DELETE      combatscls
         WHERE mocid = mocidin;

   DELETE      weaponsinfo
         WHERE mocid = mocidin;

   DELETE      ordnance
         WHERE mocid = mocidin;

   DELETE      weapontypes
         WHERE mocid = mocidin;

   DELETE      aircraftmds
         WHERE mocid = mocidin;

   COMMIT;
END delete_moc_aircraftmds;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."DELETE_MOC_CAUSECODE" (
   p_mocid           moc.mocid%TYPE,
   p_causecode       causecodes.causecode%TYPE,
   p_causecodetype   causecodes.causecodetype%TYPE
)
AS
   CURSOR cau_cur
   IS
      SELECT causecodeid, causecodetype
        FROM causecodes
       WHERE mocid = p_mocid AND causecode = p_causecode;

   cau_rec      cau_cur%ROWTYPE;
   oktodelete   BOOLEAN;
BEGIN
   oktodelete := FALSE;

   OPEN cau_cur;

   FETCH cau_cur
    INTO cau_rec;

   WHILE cau_cur%FOUND
   LOOP
      oktodelete := TRUE;
      IF (p_causecodetype IS NOT NULL)
      THEN
         IF (cau_rec.causecodetype = p_causecodetype)
         THEN
            oktodelete := TRUE;
         ELSE
            oktodelete := FALSE;
         END IF;
      ELSE
         oktodelete := TRUE;
      END IF;

      IF (oktodelete)
      THEN
         UPDATE schedule
            SET causecodeid = NULL
          WHERE causecodeid = cau_rec.causecodeid;

         COMMIT;

         UPDATE scheduledeviations
            SET causecodeid = NULL
          WHERE causecodeid = cau_rec.causecodeid;

         UPDATE scheduledeviations
            SET newcausecode = NULL
          WHERE newcausecode = cau_rec.causecodeid;

         COMMIT;

         DELETE FROM causecodes
               WHERE causecodeid = cau_rec.causecodeid;

         COMMIT;
      END IF;

      FETCH cau_cur
       INTO cau_rec;
   END LOOP;

   CLOSE cau_cur;
END delete_moc_causecode;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."DELETE_MOC_CUSTOMDATA" (mocidin moc.mocid%TYPE)
AS
   CURSOR cdcur
   IS
      SELECT customdataid
        FROM customdata
       WHERE mocid = mocidin;

   cdrec   cdcur%ROWTYPE;
BEGIN
   OPEN cdcur;

   FETCH cdcur
    INTO cdrec;

   WHILE cdcur%FOUND
   LOOP
      DELETE FROM customdatalistitem
            WHERE customdataid = cdrec.customdataid;

      DELETE FROM customdatamds
            WHERE customdataid = cdrec.customdataid;

      FETCH cdcur
       INTO cdrec;
   END LOOP;

   CLOSE cdcur;

   COMMIT;

   DELETE FROM customdata
         WHERE mocid = mocidin;

   COMMIT;
END delete_moc_customdata;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."DELETE_MOC_GENFLOW" (mocidin moc.mocid%TYPE)
AS
   CURSOR gfcur
   IS
      SELECT generationflowname
        FROM generationflow
       WHERE mocid = mocidin;

   gfrec   gfcur%ROWTYPE;
BEGIN
   OPEN gfcur;

   FETCH gfcur
    INTO gfrec;

   WHILE gfcur%FOUND
   LOOP
      DELETE      generationflowsteps
            WHERE generationflowname = gfrec.generationflowname;

      DELETE      generationflowitems
            WHERE generationflowname = gfrec.generationflowname;

      DELETE      generationflowprogress
            WHERE generationflowname = gfrec.generationflowname;

      FETCH gfcur
       INTO gfrec;
   END LOOP;

   CLOSE gfcur;

   COMMIT;

   DELETE      generationflow
         WHERE mocid = mocidin;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      NULL;
END delete_moc_genflow;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."DELETE_MOC_STATUSIMAGE" (mocidin moc.mocid%TYPE)
AS
BEGIN
   DELETE FROM mocstatusicons
            WHERE mocid = mocidin;

   COMMIT;
END delete_moc_STATUSIMAGE;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."DELETE_MOC_WX" (mocidin moc.mocid%TYPE)
AS
   CURSOR wxcur
   IS
      SELECT wxcodeid
        FROM wx
       WHERE mocid = mocidin;

   wxrec   wxcur%ROWTYPE;
BEGIN
   OPEN wxcur;

   FETCH wxcur
    INTO wxrec;

   WHILE wxcur%FOUND
   LOOP
      UPDATE schedule
         SET wxcodeid = NULL
       WHERE wxcodeid = wxrec.wxcodeid;

      FETCH wxcur
       INTO wxrec;
   END LOOP;

   CLOSE wxcur;

   DELETE      wx
         WHERE mocid = mocidin;

   COMMIT;
END delete_moc_wx;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."DELETE_SCHED_STATUS" (
SCHEDULEIDIN	  SCHEDULE.SCHEDULEID%TYPE,
STATUSCODEIDIN	  SCHEDULESTATUS.STATUSCODEID%TYPE,
STATUSTYPEIN  	  SCHEDULESTATUS.STATUSTYPE%TYPE,
STATUSTIMEIN  	  SCHEDULESTATUS.STATUSTIME%TYPE

)
/******************************************************************************
   NAME:       DELETE_SCHED_STATUS
   PURPOSE:    DELETEs status record for a previously entered plane

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        7/31/03      A.Mitchell       1. Created this procedure.

   PARAMETERS:
   INPUT:
   *SCHEDULEID
   *STATUSCODEID
   *STATUSTYPE
   *STATUSTIME
   OUTPUT:
   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/

AS

BEGIN

IF STATUSTYPEIN = '0' THEN
	DELETE SCHEDULESTATUS
	WHERE SCHEDULEID = SCHEDULEIDIN
	AND STATUSCODEID = STATUSCODEIDIN
	AND STATUSTYPE = STATUSTYPEIN
	AND STATUSTIME = STATUSTIMEIN;
ELSE --IF STATUSTYPE = '1' THEN
	DELETE SCHEDULESTATUS
	WHERE SCHEDULEID = SCHEDULEIDIN
	AND FUELSTATUSID = STATUSCODEIDIN
	AND STATUSTYPE = STATUSTYPEIN
	AND STATUSTIME = STATUSTIMEIN;
END IF;
  COMMIT;
END DELETE_SCHED_STATUS;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."DELETE_SORTIE_LINE" (
   scheduleidin         schedule.scheduleid%TYPE,
   camsloaded     OUT   interfacelog.interfacelogid%TYPE
)
/******************************************************************************
   NAME:       DELETE_SORTIE_LINE
   PURPOSE:    DELETEs status record for a previously entered line, deviations, status

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        8/1/03      A.Mitchell       1. Created this procedure.

   PARAMETERS:
   INPUT:
   *SCHEDULEID
   OUTPUT:
   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/
AS
   cams_loaded_schedule   NUMBER   := 0;
   schedsource            CHAR (3);
   remarkstemp            NUMBER;
BEGIN
   /*
   SELECT SCHEDULESOURCE
   INTO SCHEDSOURCE
   FROM SCHEDULE
   WHERE SCHEDULEID = SCHEDULEIDIN;

   IF SCHEDSOURCE = '174' THEN
    BEGIN
      CAMS_LOADED_SCHEDULE := 1;
    END;
   ELSE
    BEGIN
    */
   SELECT scheduleremarks
     INTO remarkstemp
     FROM schedule
    WHERE scheduleid = scheduleidin;

   IF remarkstemp IS NOT NULL
   THEN
      BEGIN
         UPDATE schedule
            SET scheduleremarks = NULL
          WHERE scheduleid = scheduleidin;

         DELETE FROM remarks
               WHERE remarksid = remarkstemp;
      END;
   END IF;

   SELECT maintremarks
     INTO remarkstemp
     FROM schedule
    WHERE scheduleid = scheduleidin;

   IF remarkstemp IS NOT NULL
   THEN
      BEGIN
         UPDATE schedule
            SET maintremarks = NULL
          WHERE scheduleid = scheduleidin;

         DELETE FROM remarks
               WHERE remarksid = remarkstemp;
      END;
   END IF;

   remove_deviation_remarks (scheduleidin);

   DELETE      schedulestatus
         WHERE scheduleid = scheduleidin;

   DELETE      scheduledeviations
         WHERE scheduleid = scheduleidin;

   --Added next 3 for version 2.1 - noticed deficiency
   UPDATE joapdata
      SET scheduleid = NULL
    WHERE scheduleid = scheduleidin;

   UPDATE semedxdata
      SET scheduleid = NULL
    WHERE scheduleid = scheduleidin;

   DELETE      schedule
         WHERE scheduleid = scheduleidin;

   COMMIT;

   cams_loaded_schedule := 0;
    /*
     END;
   END IF;
   */
   camsloaded := cams_loaded_schedule;
END delete_sortie_line;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."DELETE_SQUADRON" (
   squadronidin   squadrons.squadronid%TYPE
)
/******************************************************************************
   NAME:       DELETE_SQUADRON
   PURPOSE:    DELETES all records for a squadron (Used when deleting a squadron)

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/18/03      R.McBride     1. Created this procedure.

   PARAMETERS:
   INPUT:
   *SQUADRONID
   OUTPUT:
   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/
AS
   CURSOR sqaircraftcur
   IS
      SELECT aircraftid
        FROM aircraft
       WHERE squadronid = squadronidin;

   sqaircraftrec   sqaircraftcur%ROWTYPE;
BEGIN
   OPEN sqaircraftcur;

   FETCH sqaircraftcur
    INTO sqaircraftrec;

   WHILE sqaircraftcur%FOUND
   LOOP
      delete_aircraft (sqaircraftrec.aircraftid);

      FETCH sqaircraftcur
       INTO sqaircraftrec;
   END LOOP;

   COMMIT;

   CLOSE sqaircraftcur;

   DELETE      brief_aircraft_status
         WHERE squadronid = squadronidin;

   COMMIT;

   DELETE      brief_deviations
         WHERE squadronid = squadronidin;

   COMMIT;

   DELETE      brief_flying_schedule
         WHERE squadronid = squadronidin;

   COMMIT;

   DELETE      brief_flying_status
         WHERE squadronid = squadronidin;

   COMMIT;

   DELETE      brief_hangar_queen
         WHERE squadronid = squadronidin;

   COMMIT;

   DELETE      brief_micaps
         WHERE squadronid = squadronidin;

   COMMIT;

   DELETE      brief_next_weeks_plan
         WHERE squadronid = squadronidin;

   COMMIT;

   DELETE      brief_pot_hangar_queen
         WHERE squadronid = squadronidin;

   COMMIT;

   DELETE      brief_schedule_overview
         WHERE squadronid = squadronidin;

   COMMIT;

   DELETE      brief_wing_status
         WHERE squadronid = squadronidin;

   COMMIT;

   DELETE      permissions
         WHERE squadronid = squadronidin;

   COMMIT;

   DELETE      interfacelog
         WHERE squadronid = squadronidin;

   COMMIT;

   DELETE      flights
         WHERE squadronid = squadronidin;

   COMMIT;
   remove_squadron_schedulerecs (squadronidin);
   remove_squadron_pilots (squadronidin);

   DELETE      squadron_sort_order
         WHERE squadronid = squadronidin;

   COMMIT;

   DELETE      squadrons
         WHERE squadronid = squadronidin;

   COMMIT;
END delete_squadron;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."DELETE_SQUAD_SCHEDULE_RECORDS" (
SQUADRONIDIN	  SCHEDULE.SQUADRONID%TYPE
)
/******************************************************************************
   NAME:       DELETE_SQUAD_SCHEDULE_RECORDS
   PURPOSE:    DELETES all records for a squadron (Used when deleting a squadron)

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/12/03      A.Mitchell       1. Created this procedure.

   PARAMETERS:
   INPUT:
   *SQUADRONID
   OUTPUT:
   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/

AS

BEGIN

	 DELETE JOAPDATA
     WHERE SCHEDULEID IN (
     SELECT SCHEDULEID
     FROM SCHEDULE
     WHERE SQUADRONID = SQUADRONIDIN);

	 DELETE SEMEDXDATA
     WHERE SCHEDULEID IN (
     SELECT SCHEDULEID
     FROM SCHEDULE
     WHERE SQUADRONID = SQUADRONIDIN);

	 DELETE SCHEDULESTATUS
     WHERE SCHEDULEID IN (
     SELECT SCHEDULEID
     FROM SCHEDULE
     WHERE SQUADRONID = SQUADRONIDIN);

     DELETE SCHEDULEDEVIATIONS
	 WHERE SCHEDULEID IN (
     SELECT SCHEDULEID
     FROM SCHEDULE
     WHERE SQUADRONID = SQUADRONIDIN);

	 DELETE REMARKS
	 WHERE REMARKSID IN (
     SELECT MAINTREMARKS
     FROM SCHEDULE
     WHERE SQUADRONID = SQUADRONIDIN);

	 DELETE REMARKS
	 WHERE REMARKSID IN (
     SELECT SCHEDULEREMARKS
     FROM SCHEDULE
     WHERE SQUADRONID = SQUADRONIDIN);

     DELETE SCHEDULE
	 WHERE SQUADRONID = SQUADRONIDIN;

	 COMMIT;

END Delete_Squad_Schedule_Records;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."DELETE_WING" (wingidin wings.wingid%TYPE)
AS
   CURSOR sqcur
   IS
      SELECT squadronid
        FROM squadrons
       WHERE wingid = wingidin;

   sqrec   sqcur%ROWTYPE;
BEGIN
   OPEN sqcur;

   FETCH sqcur
    INTO sqrec;

   WHILE sqcur%FOUND
   LOOP
      delete_squadron (sqrec.squadronid);

      FETCH sqcur
       INTO sqrec;
   END LOOP;

   CLOSE sqcur;

   COMMIT;

   DELETE      imdslogins
         WHERE wingid = wingidin;

   COMMIT;

   DELETE      wings
         WHERE wingid = wingidin;

   COMMIT;
END delete_wing;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."DEL_AREA" (areaidin areas.areaid%TYPE)
AS
BEGIN
   UPDATE schedule
      SET areaid = NULL
    WHERE areaid = areaidin;

   DELETE      areas
         WHERE areaid = areaidin;
END del_area;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."DEL_HELPTOPIC" (helpidin emochelp.helpid%TYPE)
AS
BEGIN
   UPDATE emochelp
      SET parentid = NULL
    WHERE parentid = helpidin;

   DELETE      emochelp
         WHERE helpid = helpidin;
END del_helptopic;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."DEL_IMDSLOGIN" (
   loginidin   imdslogins.imdsloginid%TYPE
)
AS
BEGIN
   DELETE      imdslogins
         WHERE imdsloginid = loginidin;
END del_imdslogin;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."DEL_OLDPASSWORDS" (
   useridin   IN   oldpasswords.userid%TYPE
)
AS
BEGIN
   DELETE FROM oldpasswords
         WHERE chgdate < (SYSDATE - 200);

   UPDATE users
      SET isonline = 0
    WHERE lastlogin < (SYSDATE - 1);
END del_oldpasswords;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."DEL_ORG" (
   orgidin   organizations.organizationsid%TYPE
)
AS
BEGIN
   DELETE      workcenters
         WHERE porgid IN (SELECT orgid
                            FROM organizations
                           WHERE organizationsid = orgidin);

   UPDATE squadrons
      SET organization_id = NULL
    WHERE organization_id IN (SELECT orgid
                                FROM organizations
                               WHERE organizationsid = orgidin);

   UPDATE squadrons
      SET organizationsid = NULL
    WHERE organizationsid = orgidin;

   DELETE      organizations
         WHERE organizationsid = orgidin;
END del_org;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."DEPGETUSERRECBYPORTALUSERID" (
   portaluseridin       IN       users.portaluserid%TYPE,
   username             OUT      users.username%TYPE,
   userid               OUT      users.userid%TYPE,
   userpassword         OUT      users.userpassword%TYPE,
   badattempts          OUT      users.badattempts%TYPE,
   emocadmin            OUT      users.emocadmin%TYPE,
   isexpired            OUT      NUMBER,
   defaultmoc           OUT      users.defaultmoc%TYPE
)
AS
   recid         NUMBER;
   newrec        NUMBER;
   defaultrank   VARCHAR2 (10);
BEGIN
   recid := 0;



   SELECT COUNT (*)
     INTO recid
     FROM users
    WHERE LOWER (portaluserid) = LOWER (portaluseridin)
       OR LOWER (username) = LOWER (portaluseridin);



   IF (recid = 0)
   THEN
      BEGIN
         SELECT seq_users.NEXTVAL
           INTO newrec
           FROM DUAL;



         SELECT rankcode
           INTO defaultrank
           FROM ranks
          WHERE ranks.mocid = 0 AND ranks.defaultrank = 1;



         INSERT INTO users
                     (userid, username, fullname, portaluserid,
                      isonline, badattempts, userstatus, defaultmoc, rankcode
                     )
              VALUES (newrec, portaluseridin, portaluseridin, portaluseridin,
                      1, 0, 'Approved', '0', defaultrank
                     );



         COMMIT;
      END;
   END IF;



   SELECT username, userid, userpassword,
          badattempts, emocadmin, NVL (defaultmoc, '0')
     INTO username, userid, userpassword,
          badattempts, emocadmin, defaultmoc
     FROM users
    WHERE LOWER (portaluserid) = LOWER (portaluseridin)
       OR LOWER (username) = LOWER (portaluseridin);
END DEPGETUSERRECBYPORTALUSERID;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."DEPLOYEDADDUSER" (
   usernamein             users.username%TYPE,
   userpasswordin         users.userpassword%TYPE,
   userid           OUT   users.userid%TYPE
)
AS
BEGIN
   SELECT seq_users.NEXTVAL
     INTO userid
     FROM DUAL;

   INSERT INTO users
               (userid, username, userpassword, portaluserid, userstatus, defaultmoc)
        VALUES (userid, usernamein, userpasswordin, usernamein, 'Approved',0);
END DEPLOYEDADDUSER;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."DEVIATIONCODELOAD" (
   p_homeelc                  VARCHAR2,
   p_unitid                   VARCHAR2,
   p_deviationcode            VARCHAR2,
   p_deviationcodenarrative   VARCHAR2
)
IS
   tmpvar       NUMBER;
   mocidvar     NUMBER;
   wingidvar    NUMBER;
   coloridvar   NUMBER;
 /******************************************************************************
   NAME:       DeviationCodeLoad
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/18/2006  r mcbride        1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     DeviationCodeLoad
      Sysdate:         12/18/2006
      Date and Time:   12/18/2006, 3:57:14 PM, and 12/18/2006 3:57:14 PM
      Username:         (EMOC3)
      Table Name:       (DeviationcodeTrx)

******************************************************************************/
BEGIN
   INSERT INTO deviationcodetrx
               (deviationcodetrxid, homeenterpriselocationcode, unitid,
                deviationcode, deviationcodenarrative
               )
        VALUES (seq_deviationcodetrx.NEXTVAL, p_homeelc, p_unitid,
                p_deviationcode, p_deviationcodenarrative
               );

   COMMIT;

   SELECT wings.mocid, wingid
     INTO mocidvar, wingidvar
     FROM wings
    WHERE wings.elc = p_homeelc AND wings.unitid = p_unitid;

   SELECT MIN (colorid)
     INTO coloridvar
     FROM colors
    WHERE mocid = mocidvar;

   IF (mocidvar IS NOT NULL)
   THEN
      SELECT COUNT (*)
        INTO tmpvar
        FROM deviationcodes
       WHERE deviationcodes.mocid = mocidvar
         AND deviationcodes.deviationcode = p_deviationcode;

      IF (tmpvar = 0)
      THEN
         INSERT INTO deviationcodes
                     (deviationcodeid, deviationcode,
                      deviationdescription, defaultdeviationcode, camsinit,
                      mocid, colorid
                     )
              VALUES (seq_deviationcodes.NEXTVAL, p_deviationcode,
                      p_deviationcodenarrative, 0, SYSDATE,
                      mocidvar, coloridvar
                     );

         COMMIT;
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END deviationcodeload;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."DT_DROPUSEROBJECTBYID" ( PARAM_ID IN NUMBER ) AS BEGIN DELETE FROM MICROSOFTDTPROPERTIES WHERE OBJECTID = PARAM_ID; END DT_DROPUSEROBJECTBYID; 
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."DT_SETPROPERTYBYID" ( PARAM_ID   IN NUMBER, PARAM_PROPERTY IN VARCHAR2, PARAM_VALUE  IN VARCHAR2, PARAM_LVALUE  IN LONG RAW ) AS BEGIN DECLARE X NUMBER(38); BEGIN SELECT COUNT(*) INTO X FROM MICROSOFTDTPROPERTIES WHERE OBJECTID=PARAM_ID AND PROPERTY=PARAM_PROPERTY; IF X = 0 THEN INSERT INTO MICROSOFTDTPROPERTIES (ID, PROPERTY, OBJECTID, VALUE, LVALUE, VERSION) VALUES (MICROSOFTSEQDTPROPERTIES.NEXTVAL, PARAM_PROPERTY, PARAM_ID, PARAM_VALUE, PARAM_LVALUE, 0); ELSE UPDATE MICROSOFTDTPROPERTIES SET VALUE=PARAM_VALUE, LVALUE=PARAM_LVALUE, VERSION=VERSION+1 WHERE OBJECTID=PARAM_ID AND PROPERTY=PARAM_PROPERTY; END IF; END; END DT_SETPROPERTYBYID;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GETAIRCRAFTBYEQUIPID" (
   p_cursor    OUT   emoc_types.emoc_cursor,
   equipidin         VARCHAR2,
   unitidin          VARCHAR2
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT aircraft.tailnumber, aircraft.shorttailnumber,
             aircraft.misequipid, squadrons.squadronname,
             squadrons.squadronid, squadrons.shortname, squadrons.wingid,
             wings.wingname, wings.unitid, wings.elc
        FROM aircraft, squadrons, wings
       WHERE aircraft.squadronid = squadrons.squadronid(+)
         AND squadrons.wingid = wings.wingid(+)
         AND aircraft.misequipid = equipidin
         AND wings.unitid = unitidin;
END getaircraftbyequipid;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GETUSERHTML" (
USERIDIN  USERS.USERID%TYPE,
USERHTML OUT   CLOB
)
AS
BEGIN

   SELECT USERHOMEHTML
   INTO USERHTML
   FROM USERS
   WHERE USERID = USERIDIN;

END GETUSERHTML;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GETUSERRECORDBYPORTALUSERID" (
   portaluseridin       IN       users.portaluserid%TYPE,
   username             OUT      users.username%TYPE,
   userid               OUT      users.userid%TYPE,
   fullname             OUT      users.fullname%TYPE,
   userpassword         OUT      users.userpassword%TYPE,
   userstatus           OUT      users.userstatus%TYPE,
   RANK                 OUT      ranks.rankcode%TYPE,
   badattempts          OUT      users.badattempts%TYPE,
   emocadmin            OUT      users.emocadmin%TYPE,
   aircraftsortorder1   OUT      users.aircraftsortorder1%TYPE,
   datepreference       OUT      users.datepreference%TYPE,
   timepreference       OUT      users.timepreference%TYPE,
   backgroundcolor      OUT      VARCHAR2,
   fontcolor            OUT      VARCHAR2,
   linkcolor            OUT      VARCHAR2,
   ipaddress            OUT      VARCHAR2,
   isonline             OUT      users.isonline%TYPE,
   aircraftsortorder2   OUT      users.aircraftsortorder2%TYPE,
   aircraftsortorder3   OUT      users.aircraftsortorder3%TYPE,
   email                OUT      users.email%TYPE,
   aircraftperrow       OUT      users.aircraftperrow%TYPE,
   refreshpref          OUT      users.refreshpref%TYPE,
   isexpired            OUT      NUMBER,
   viewablesquadrons    OUT      VARCHAR2,
   defaultmoc           OUT      users.defaultmoc%TYPE
)
AS
   recid         NUMBER;
   newrec        NUMBER;
   defaultrank   VARCHAR2 (10);
BEGIN
   recid := 0;

   SELECT COUNT (*)
     INTO recid
     FROM users
    WHERE LOWER (portaluserid) = LOWER (portaluseridin)
       OR LOWER (username) = LOWER (portaluseridin);

   IF (recid = 0)
   THEN
      BEGIN
         SELECT seq_users.NEXTVAL
           INTO newrec
           FROM DUAL;

         SELECT rankcode
           INTO defaultrank
           FROM ranks
          WHERE ranks.mocid = 0 AND ranks.defaultrank = 1;

         INSERT INTO users
                     (userid, username, fullname, portaluserid,
                      isonline, badattempts, userstatus, defaultmoc, rankcode
                     )
              VALUES (newrec, portaluseridin, portaluseridin, portaluseridin,
                      1, 0, 'Approved', '0', defaultrank
                     );

         COMMIT;
      END;
   END IF;

   SELECT username, userid, fullname, userpassword, userstatus, rankcode,
          badattempts, emocadmin, aircraftsortorder1, datepreference,
          timepreference, backgroundcolor, fontcolor, linkcolor, ipaddress,
          isonline, aircraftsortorder2, aircraftsortorder3, email,
          aircraftperrow, refreshpref, viewablesquadrons,
          NVL (defaultmoc, '0')
     INTO username, userid, fullname, userpassword, userstatus, RANK,
          badattempts, emocadmin, aircraftsortorder1, datepreference,
          timepreference, backgroundcolor, fontcolor, linkcolor, ipaddress,
          isonline, aircraftsortorder2, aircraftsortorder3, email,
          aircraftperrow, refreshpref, viewablesquadrons,
          defaultmoc
     FROM users
    WHERE LOWER (portaluserid) = LOWER (portaluseridin)
       OR LOWER (username) = LOWER (portaluseridin);
END getuserrecordbyportaluserid;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GETUSERRECORDBYUSERNAME" (
   usernamein           IN       users.username%TYPE,
   userid               OUT      users.userid%TYPE,
   fullname             OUT      users.fullname%TYPE,
   userpassword         OUT      users.userpassword%TYPE,
   userstatus           OUT      users.userstatus%TYPE,
   RANK                 OUT      ranks.rankcode%TYPE,
   badattempts          OUT      users.badattempts%TYPE,
   emocadmin            OUT      users.emocadmin%TYPE,
   aircraftsortorder1   OUT      users.aircraftsortorder1%TYPE,
   datepreference       OUT      users.datepreference%TYPE,
   timepreference       OUT      users.timepreference%TYPE,
   backgroundcolor      OUT      VARCHAR2,
   fontcolor            OUT      VARCHAR2,
   linkcolor            OUT      VARCHAR2,
   ipaddress            OUT      VARCHAR2,
   isonline             OUT      users.isonline%TYPE,
   aircraftsortorder2   OUT      users.aircraftsortorder2%TYPE,
   aircraftsortorder3   OUT      users.aircraftsortorder3%TYPE,
   email                OUT      users.email%TYPE,
   aircraftperrow       OUT      users.aircraftperrow%TYPE,
   refreshpref          OUT      users.refreshpref%TYPE,
   isexpired            OUT      NUMBER,
   viewablesquadrons    OUT      VARCHAR2
)
AS
   oldpws   INTEGER := 0;
BEGIN
   SELECT userid, fullname, userpassword, userstatus, rankcode, badattempts, emocadmin,
          aircraftsortorder1, datepreference, timepreference,
          backgroundcolor, fontcolor, linkcolor, ipaddress, isonline,
          aircraftsortorder2, aircraftsortorder3, email, aircraftperrow,
          refreshpref, viewablesquadrons
     INTO userid, fullname, userpassword, userstatus,
          RANK, badattempts, emocadmin,
          aircraftsortorder1, datepreference, timepreference,
          backgroundcolor, fontcolor, linkcolor, ipaddress, isonline,
          aircraftsortorder2, aircraftsortorder3, email, aircraftperrow,
          refreshpref, viewablesquadrons
     FROM users
    WHERE LOWER (username) = LOWER (usernamein) AND userstatus != 'Deleted';

   SELECT COUNT (*)
     INTO oldpws
     FROM oldpasswords
    WHERE chgdate > (SYSDATE - 90) AND oldpasswords.userid = userid;

   IF oldpws = 0
   THEN
      isexpired := 1;
   ELSE
      isexpired := 0;
   END IF;
END getuserrecordbyusername;



 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GETUSERSALERTS" (
   useridin         useralert.userid%TYPE,
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   alertid, TO_CHAR (received, 'MM/DD/YYYY') AS dreceived,
               TO_CHAR (received, 'HH24MI') AS treceived,
               (SELECT fullname
                  FROM users
                 WHERE users.userid = useralert.sentby) AS fromuser,
               alertmsg, priority, sentby
          FROM useralert
         WHERE userid = useridin AND acknowledged IS NULL
      ORDER BY priority DESC, dreceived DESC, treceived DESC;
END getusersalerts;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GETWORKUNITCODES" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT t.wuccode, t.wucdescription, t.wucstartdate, t.wucstopdate, t.missiondesignseries
          FROM wuc t
      ORDER BY t.wuccode;
END GetWorkUnitCodes;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_ACFTMDSTYPES" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   acftmdstypecd, acftmdstypenm
          FROM acftmdstypes
      ORDER BY acftmdstypenm;
END get_acftmdstypes;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_ACTIVE_MOCS" (p_cursor OUT emoc_types.emoc_cursor) AS
BEGIN
  -- RETURN THE CURSOR FOR THE RECORDSET
  OPEN p_cursor FOR
    SELECT mocid,
           REPLACE(moctitle, '''''', '''') AS moctitle,
           isactive,
           TO_CHAR(lastupdated, 'MM/DD/YYYY HH24:MI:SS') AS lastupdated
      FROM moc
     WHERE NVL(isactive, 0) = 1
     ORDER BY moctitle;
END get_active_mocs;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_AIRBORNE_BY_SQUADRON" 
(
AIRBORNE OUT 	  NUMBER,
SQUADRONIDIN 	  SQUADRONS.SQUADRONID%TYPE,
SORTIEDATEIN	  SCHEDULE.SORTIEDATE%TYPE
)
/******************************************************************************
   NAME:       GET_AIRBORNE_BY_SQUADRON
   PURPOSE:    Returns Schedules for the specified squadron with
   			   text values for codes (JOAP, Fuel, etc.) filled.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        7/11/03      A.Mitchell       1. Created this procedure.
   1.1        7/14/09      J.C.             2. Modified to prevent full table scans.
                                               (QC397)

   PARAMETERS:
   INPUT:
   *SQUADRONIDIN
   *SCHEDDAY
   OUTPUT:
   *AIRBORNE
   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/

AS

FLYCOUNT NUMBER;

BEGIN
SELECT COUNT(*) AIRBORNE
	INTO FLYCOUNT
	FROM SCHEDULE SCH
		WHERE ACTUALTAKEOFF IS NOT NULL
		AND SCH.SQUADRONID = SQUADRONIDIN
		AND SCH.SORTIEDATE <= SORTIEDATEIN
		AND ACTUALLANDING IS NULL;

	AIRBORNE := FLYCOUNT;

   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       Null;
     WHEN OTHERS THEN
       Null;
END GET_AIRBORNE_BY_SQUADRON;
 ;

CREATE PROCEDURE         "EMOC3"."GET_AIRCRAFT" (p_cursor OUT emoc_types.emoc_cursor)
AS
BEGIN
   OPEN p_cursor FOR
      SELECT   aircraftid, tailnumber, aircraftyear, aircraftmdsid,
               serialnumber, misequipid, flightid,
               (SELECT (RTRIM (aircraftmds) || ' / ' || LTRIM (blocknumber)
                       )
                  FROM aircraftmds
                 WHERE aircraftmds.aircraftmdsid = aircraft.aircraftmdsid)
                                                                AS mds_block,
               (SELECT flightname
                  FROM flights
                 WHERE flights.flightid = aircraft.flightid) AS flightname,
               locationcode, locationid
               squadronid
          FROM aircraft
      ORDER BY tailnumber;
END get_aircraft;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_AIRCRAFTCUSTOMDATA" (
   aircraftidin         aircraftcustomdata.aircraftid%TYPE,
   mdsid                aircraftmds.aircraftmdsid%TYPE,
   p_cursor       OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT DISTINCT customdata.customdataid, customdatalabel,
                      customdatadescription, customdatatype, customdatawidth,
                      bgcolorvalue, fontcolor,
                      (SELECT colors.colorname
                         FROM colors
                        WHERE colors.colorvalue =
                                         customdata.bgcolorvalue
                          AND customdata.mocid = colors.mocid) AS colorname,
                      (SELECT datavalue
                         FROM aircraftcustomdata
                        WHERE aircraftid = aircraftidin
                          AND customdataid = customdata.customdataid)
                                                                AS datavalue
                 FROM customdata LEFT JOIN customdatamds ON customdata.customdataid =
                                                              customdatamds.customdataid
                      LEFT JOIN aircraftcustomdata ON aircraftcustomdata.customdataid =
                                                        customdata.customdataid
                WHERE customdatamds.aircraftmdsid = mdsid
             ORDER BY customdatalabel;
END get_aircraftcustomdata;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_AIRCRAFTID_BY_MOCEQUIPID" (
   mocin                     	 NUMBER,
   equipidin                     VARCHAR2,
   acid   				OUT		 NUMBER
)
AS
accnt NUMBER;
   /******************************************************************************
   NAME:       GET_AIRCRAFTID_BY_MOCEQUIPID
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     GET_AIRCRAFTID_BY_MOCEQUIPID
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       wings)

******************************************************************************/
BEGIN
   /*GET AIRCRAFTID */
   SELECT COUNT(*)
     INTO accnt
	 FROM aircraft
	WHERE mocid = mocin
	  AND misequipid = equipidin;
   IF accnt > 0 THEN
	 SELECT aircraftid
	   INTO acid
	   FROM aircraft
	  WHERE mocid = mocin
	    AND misequipid = equipidin;
   ELSE
   	   acid := NULL;
   END IF;


--EXCEPTION
 --  WHEN NO_DATA_FOUND
  -- THEN
  --    NULL;
 --  WHEN OTHERS
 --  THEN
      -- Consider logging the error and then re-raise
 --     RAISE;
END GET_AIRCRAFTID_BY_MOCEQUIPID;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_AIRCRAFTMDS" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   aircraftmdsid, aircraftmds, numberofstations, numberofengines,
               timebetweenphase, defaultaircrafttype AS defaultmds,
               phaseunit, blocknumber,
               (RTRIM (aircraftmds) || ' / ' || LTRIM (blocknumber)
               ) AS mds_block,
               acftmdstypecd,
               (SELECT acftmdstypenm
                  FROM acftmdstypes
                 WHERE acftmdstypecd =
                                   aircraftmds.acftmdstypecd)
                                                            AS acftmdstypenm
          FROM aircraftmds
      ORDER BY aircraftmds;
END get_aircraftmds;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_AIRCRAFTSTATUSBRIEF" (
   mocidin          aircraft.mocid%TYPE,
   p_cursor   OUT   emoc_types.emoc_cursor
)
/******************************************************************************
   NAME:       GET_AIRCRAFTSTATUSBRIEF
   PURPOSE:
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        7/11/03      A.Mitchell       1. Created this procedure.
   1.1        7/20/09      J.C.             2. Modified to correct problem
                                               where aircraft were not being
                                               displayed properly. (QC398)
******************************************************************************/
AS

BEGIN
   OPEN p_cursor FOR
      SELECT ac.aircraftid AS aircraftid, am.aircraftmds AS aircraftmds,
             sq.shortname AS squadron, sq.squadronid AS squadronid,
             ps.possessioncode AS possession,
             ac.shorttailnumber AS tailnumber, cc.conditioncode AS status,
             TO_CHAR (ac.lastflowntime, 'DD_MON_YY') AS lastflydate,
             TO_CHAR (ac.lastflowntime, 'DDD') AS juliandate,
             TRUNC (SYSDATE - ac.lastflowntime) AS daysdown,
                        --daysdown, --calculated from last flown date - today
             ac.locationcode AS LOCATION, ac.STATUSWUCLCN AS wuc,
             TO_CHAR (ac.statuscodelastupdated,
                      'DD_MON_YY HH24:MI'
                     ) AS statustime,
             ac.etic AS etic, ac.statusnarrative AS primaryremark,
             rm.remarks AS secondaryremark, mc.nomenclature AS noun,
             mc.documentnumber AS docnumber, wu.writeuptime AS micapdate,
             NULL AS joap
        FROM aircraft ac LEFT JOIN aircraftmds am ON ac.aircraftmdsid =
                                                             am.aircraftmdsid
             LEFT JOIN squadrons sq ON ac.squadronid = sq.squadronid
             LEFT JOIN possessions ps ON ac.possessionid = ps.possessionid
             LEFT JOIN conditioncodes cc ON ac.conditioncodeid =
                                                                cc.condcodeid
             LEFT JOIN remarks rm ON ac.remarksid = rm.remarksid
             LEFT JOIN writeups wu ON ac.aircraftid = wu.aircraftid
    	     LEFT JOIN micap mc ON wu.jcn = mc.jobcontrolnumber
       WHERE (wu.writeupid = (SELECT MIN (writeupid)
                                   FROM writeups
                                  WHERE ac.aircraftid = aircraftid
          AND (pacer = 1 OR pacer IS NULL OR pacer = 0)
          AND (corrected = 0 OR corrected = 1))
           OR wu.writeupid IS NULL
             )
         AND (mc.micapid = (SELECT MIN (micapid)
                                 FROM micap
                                WHERE jobcontrolnumber = wu.jcn
        			AND deletedflag = 0)
              OR mc.micapid IS NULL
             )
         AND ac.mocid = mocidin;
END get_aircraftstatusbrief;

 ;

CREATE PROCEDURE         "EMOC3"."GET_AIRCRAFT_BY_ID" (
   aircraftidin         aircraft.aircraftid%TYPE,
   p_cursor       OUT   emoc_types.emoc_cursor
)
AS
BEGIN
   OPEN p_cursor FOR
      SELECT aircraftid, tailnumber, shorttailnumber, serialnumber,
             aircraftyear, misequipid, aircraft.squadronid, crewchiefid,
             lastflowntime, fuelstatustime, fuelstatusid, locationid,
             locationcode, phasedate, etic, fcf, ocf, qvi, firstofficial,
             secondofficial, statuscodeid, statuscodetime, possessionid,
             priority, conditioncodeid, flightid, conditioncodetime,
             arm_dearm, multiconfigid, statusnarrative, localoption,
             assignmentcmd, assignmentstatus, reportdesig, relatedmds,
             commandcode, hangerqueenstatus, aircraft.aircraftmdsid,
             crewchieflastupdated, serialnumberlastupdated,
             impoundslastupdated, hqstatuslastupdated, teststatuslastupdated,
             phasedatelastupdated, possessioncodelastupdated,
             eticlastupdated, prioritylastupdated, combatsclid, chaff, flare,
             hotguns, weaponsstatustime, sqpreselect, statuscodelastupdated,
             locationlastupdated, fuelstatuslastupdated, localconfigid,
             fuelrequestedtime, fueldeliverytime, phaseunits, aircraftwucid,
             weaponsstatuslastupdated, conditioncodelastupdated,
             acft_config_id, aircraft.camsinit, remarksid, fuelload,
             possdatetime, assignstatdatetime, assigncomdatetime,
             airconfigdatetime, repdesigndatetime, eticdatetime,
             assignstatuslastupdated, assigncommandlastupdated,
             squadronlastupdated, mdslastupdated, repdesignlastupdated,
             remarkslastupdated, staloccodeid, geoloccode, firesymbolid,
             airconfigidlastupdated, wuclastupdated, tmeflownsincephasedate,
             acftmdstypecd, squadrons.squadronname, aircraft.countrycode,
             aircraft.mocid
        FROM aircraft, aircraftmds, squadrons
       WHERE aircraft.aircraftid = aircraftidin
         AND aircraftmds.aircraftmdsid = aircraft.aircraftmdsid
         AND aircraft.squadronid = squadrons.squadronid;
END get_aircraft_by_id;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_AIRCRAFT_BY_LOCATION" (
LOCATIONIDIN   LOCATIONS.LOCATIONID%TYPE,
P_CURSOR  OUT EMOC_TYPES.EMOC_CURSOR
)
AS
BEGIN

	 OPEN P_CURSOR FOR
	 SELECT AIRCRAFT.AIRCRAFTID,
	 		AIRCRAFT.TAILNUMBER
	 FROM   AIRCRAFT
	 WHERE 	AIRCRAFT.LOCATIONID = LOCATIONIDIN
	 ORDER BY TAILNUMBER;

END GET_AIRCRAFT_BY_LOCATION;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_AIRCRAFT_BY_SQUADRON" (
   squadronidin         aircraft.squadronid%TYPE,
   p_cursor       OUT   emoc_types.emoc_cursor
)
AS
BEGIN
   OPEN p_cursor FOR
      SELECT aircraftid, tailnumber, aircraftyear, aircraftmdsid,
             serialnumber, misequipid, flightid, homeenterpriselocationcode,
             (SELECT (RTRIM (aircraftmds) || ' / ' || LTRIM (blocknumber)
                     )
                FROM aircraftmds
               WHERE aircraftmds.aircraftmdsid = ac.aircraftmdsid)
                                                                AS mds_block,
             (SELECT flightname
                FROM flights
               WHERE flights.flightid = ac.flightid) AS flightname,
             squadronid, countrycode, locationid,
             (SELECT locationcode
                FROM locations
               WHERE locationid = ac.locationid) AS locationcode
        FROM aircraft ac
       WHERE squadronid = squadronidin;
END get_aircraft_by_squadron;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_AIRCRAFT_FOR_TAILSWAP" (
   p_cursor       OUT   emoc_types.emoc_cursor,
   aircraftidin         aircraft.aircraftid%TYPE,
   squadronidin         squadrons.squadronid%TYPE,
   scheduleidin         schedule.scheduleid%TYPE
)
/******************************************************************************
   NAME:       GET_AIRCRAFT_FOR_SWAP
   PURPOSE:    Gets AIRCRAFTID of same MDS to use in a tail/spare swap.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        8/6/03      A.Mitchell       1. Created this procedure.
   1.1        8/9/04   A.Mitchell      2. Modified for EMOC2.1

   PARAMETERS:
   INPUT:
   *AIRCRAFTIDIN
   *SQUADRONIDIN
   OUTPUT:
   *P_CURSOR
   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/
AS
-- BLOCKNUM NUMBER(3);
   sdate   CHAR (7);
BEGIN
   SELECT sortiedate
     INTO sdate
     FROM schedule
    WHERE scheduleid = scheduleidin;

   OPEN p_cursor FOR
      SELECT DISTINCT aircraft.aircraftid, shorttailnumber, misequipid
                 FROM aircraft JOIN schedule ON aircraft.aircraftid =
                                                           schedule.aircraftid
                WHERE aircraft.aircraftid != aircraftidin
                  AND schedule.squadronid = squadronidin
                  AND schedule.sortiedate = sdate
             ORDER BY shorttailnumber;
/*    SELECT BLOCKNUMBER, SORTIEDATE
    INTO BLOCKNUM, SDATE
    FROM SCHEDULE
    WHERE SCHEDULEID = SCHEDULEIDIN;

    IF BLOCKNUM IS NULL THEN
    BEGIN
      OPEN P_CURSOR FOR
        SELECT AIRCRAFTID, SHORTTAILNUMBER, AIRCRAFTMDS
        FROM   AIRCRAFT JOIN AIRCRAFTMDS ON AIRCRAFT.AIRCRAFTMDSID = AIRCRAFTMDS.AIRCRAFTMDSID
        WHERE  AIRCRAFTID != AIRCRAFTIDIN AND SQUADRONID = SQUADRONIDIN
        AND AIRCRAFT.AIRCRAFTMDSID IN
        (SELECT AIRCRAFTMDSID FROM AIRCRAFT WHERE AIRCRAFTID = AIRCRAFTIDIN)
        ORDER BY SHORTTAILNUMBER;
    END;
    ELSE
    BEGIN
      OPEN P_CURSOR FOR
      SELECT AIRCRAFTID, SHORTTAILNUMBER, AIRCRAFTMDS
        FROM   AIRCRAFT JOIN AIRCRAFTMDS ON AIRCRAFT.AIRCRAFTMDSID = AIRCRAFTMDS.AIRCRAFTMDSID
        JOIN   SCHEDULE ON AIRCRAFT.AIRCRAFTID = SCHEDULE.AIRCRAFTID
        WHERE  AIRCRAFTID != AIRCRAFTIDIN  AND SQUADRONID = SQUADRONIDIN
      AND AIRCRAFT.AIRCRAFTMDSID IN
        (SELECT AIRCRAFTMDSID FROM AIRCRAFT WHERE AIRCRAFTID = AIRCRAFTIDIN)
        AND BLOCKNUMBER != BLOCKNUM AND SORTIEDATE = SDATE
        ORDER BY SHORTTAILNUMBER;
       END;
       END IF;
*/
END get_aircraft_for_tailswap;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_AREAID_BY_AREA" (
AREA	  		  AREAS.AREA%TYPE,
AREAID	OUT	  	  AREAS.AREAID%TYPE
)
/******************************************************************************
   NAME:       GET_AREAID_BY_AREA
   PURPOSE:    Gets an AREAID from the AREA text parameter.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        5/27/03      A.Mitchell       1. Created this procedure.

   PARAMETERS:
   INPUT:
   *AREA
   OUTPUT:
   *AREAID
   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/
AS

EXISTINGAREAID NUMBER;

BEGIN

	 SELECT AREAID
	 INTO   EXISTINGAREAID
	 FROM   AREAS
	 WHERE 	AREA = AREA;

	 AREAID := EXISTINGAREAID;

END GET_AREAID_BY_AREA;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_AREAS" (p_cursor OUT emoc_types.emoc_cursor)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   areaid, area, areadescription, mocid
          FROM areas
      ORDER BY area;
END get_areas;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_ARMAMENTS" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   armamentid, armament.aircraftmdsid, aircraftmds.aircraftmds,
               (aircraftmds || ' / ' || blocknumber) AS mds_block,
               armament.ordnanceid, ordnance.ordnance, station
          FROM armament, aircraftmds, ordnance
         WHERE armament.aircraftmdsid = aircraftmds.aircraftmdsid
           AND armament.ordnanceid = ordnance.ordnanceid
      ORDER BY station;
END get_armaments;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_ASSIGNMENTS" (
P_CURSOR OUT EMOC_TYPES.EMOC_CURSOR
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR
SELECT ASSIGNMENTCODEID,
       ASSIGNMENTCODE,
       ASSIGNMENTDESCRIPTION,
       NVL(DEFAULTASSIGNMENT,0) AS DEFAULTASSIGNMENT
FROM ASSIGNMENTCODES
ORDER BY ASSIGNMENTCODE;

END GET_ASSIGNMENTS;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_AUCS" (p_cursor OUT emoc_types.emoc_cursor)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   utilcodeid, utilizationcode, aucnarrative, programelementcode,
               utilizationcodes.camsinit, missiondesignseries
          FROM utilizationcodes
      ORDER BY utilizationcode ASC;
END get_aucs;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_AUCSBYMDS" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mdsin            utilizationcodes.missiondesignseries%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   utilcodeid, utilizationcode, aucnarrative, programelementcode,
               utilizationcodes.camsinit, missiondesignseries
          FROM utilizationcodes
         WHERE utilizationcodes.missiondesignseries = mdsin
      ORDER BY utilizationcode ASC;
END get_aucsbymds;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_CAMSCONTROL" (interfaceenabled OUT interfacecontrol.interfaceenabled%TYPE,
                                            lastupdated      OUT VARCHAR2,
                                            updatedby        OUT interfacecontrol.interfacename%TYPE) AS
BEGIN
  SELECT interfaceenabled,
         TO_CHAR(lastupdate, 'MM/DD/YYYY HH24:MI:SS'),
         (SELECT fullname
            FROM users
           WHERE users.userid = interfacecontrol.lastupdateby)
    INTO interfaceenabled, lastupdated, updatedby
    FROM interfacecontrol
   WHERE TRIM(interfacename) = 'CAMS';
END get_camscontrol;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_CAMS_TO_PROCESS" /******************************************************************************
   NAME:       GET_CAMS_TO_PROCESS
   PURPOSE:    This proc checks for transactions that have not been parsed yet
               and returns as a string those INTERFACELOGIDs that have not
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        9/15/03      A.Mitchell       1. Created this procedure.
   1.1        10/23/03     A.Mitchell       2. Added SQUADRONIDIN to delineate in log
   PARAMETERS:
   INPUT:
   *TRANSACTIONTYPEIN
   OUTPUT:
   *TRANSACTIONIDSOUT
   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/
(
TRANSACTIONTYPEIN  VARCHAR,
SQUADRONIDIN INTERFACELOG.SQUADRONID%TYPE,
TRANSACTIONIDSOUT OUT VARCHAR
)
AS
TRANSACTIONIDS CLOB;
CUR_TRANSACTIONS EMOC_TYPES.EMOC_CURSOR;
TYPE TRANSACTION_REC_TYPE IS RECORD (
  INTERFACELOGID  NUMBER(10));
REC_TID TRANSACTION_REC_TYPE;
BEGIN

-- RETURN THE TRANSACTIONS NOT PARSED
OPEN CUR_TRANSACTIONS
FOR SELECT INTERFACELOGID FROM INTERFACELOG
   WHERE PARSED != 1 AND TRANSACTIONTYPE = TRANSACTIONTYPEIN
   AND SQUADRONID = SQUADRONIDIN;

FETCH CUR_TRANSACTIONS INTO REC_TID;

WHILE CUR_TRANSACTIONS%FOUND LOOP
        IF LENGTH(TRANSACTIONIDS) > 0 THEN
          BEGIN
            TRANSACTIONIDS := TRANSACTIONIDS || ',' || TO_CHAR(REC_TID.INTERFACELOGID);
          END;
        ELSE
          BEGIN
            TRANSACTIONIDS := TO_CHAR(REC_TID.INTERFACELOGID);
          END;
        END IF;
   FETCH CUR_TRANSACTIONS INTO REC_TID;
END LOOP;
CLOSE CUR_TRANSACTIONS;
TRANSACTIONIDSOUT := TRANSACTIONIDS;
END GET_CAMS_TO_PROCESS;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_CAMS_VALIDATION_TIMEOUT" (
TBMCSTIMER OUT EMOCCONFIG.TBMCSTIMER%TYPE
)
AS
MINUTES NUMBER(3);
BEGIN

   SELECT
   TBMCSTIMER
   INTO MINUTES
   FROM EMOCCONFIG;

   TBMCSTIMER := MINUTES;

END GET_CAMS_VALIDATION_TIMEOUT;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_CAUSECODES" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   causecodes.causecodeid, causecodes.causecode,
               causecodes.description,
               NVL (defaultcausecode, 0) AS defaultcausecode,
               NVL (causecodes.causecodetype, 'M') AS causecodetype
          FROM causecodes
      ORDER BY causecodes.causecode ASC;
END get_causecodes;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_CAUSEDEFAULT_BY_MOC" (
   mocidin                     	 NUMBER,
   causeid				OUT		 NUMBER
)
AS
causecnt NUMBER;
   /******************************************************************************
   NAME:       GET_CAUSEDEFAULT_BY_MOC
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     GET_CAUSEDEFAULT_BY_MOC
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       wings)

******************************************************************************/
BEGIN
   /*GET Cause*/
   SELECT COUNT(*)
   INTO causecnt
   FROM CAUSECODES
  WHERE mocid = mocidin
    AND defaultcausecode = 1;
  IF causecnt > 0 THEN
	 SELECT causecodeid
	   INTO causeid
	   FROM CAUSECODES
	  WHERE mocid = mocidin
	    AND defaultcausecode = 1;
  ELSE
  	  causeid := NULL;
  END IF;

--EXCEPTION
 --  WHEN NO_DATA_FOUND
  -- THEN
  --    NULL;
 --  WHEN OTHERS
 --  THEN
      -- Consider logging the error and then re-raise
 --     RAISE;
END GET_CAUSEDEFAULT_BY_MOC;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_CAUSEID_BY_MOCCAUSECODE" (
   mocidin                     	 NUMBER,
   devcausecodein				 VARCHAR2,
   causeid				OUT		 NUMBER
)
AS
causecnt NUMBER;
   /******************************************************************************
   NAME:       GET_CAUSEID_BY_MOCCAUSECODE
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     GET_CAUSEID_BY_MOCCAUSECODE
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       wings)

******************************************************************************/
BEGIN
   /*GET CauseCodeid*/
   SELECT COUNT(*)
     INTO causecnt
     FROM CAUSECODES
    WHERE mocid = mocidin
      AND causecode = devcausecodein;
	IF causecnt > 0 THEN
	    SELECT causecodeid
	      INTO causeid
	      FROM CAUSECODES
	     WHERE mocid = mocidin
	       AND causecode = devcausecodein;
	ELSE
		causeid := NULL;
    END IF;

--EXCEPTION
 --  WHEN NO_DATA_FOUND
  -- THEN
  --    NULL;
 --  WHEN OTHERS
 --  THEN
      -- Consider logging the error and then re-raise
 --     RAISE;
END GET_CAUSEID_BY_MOCCAUSECODE;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_COLORRULES" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   colorrulesid, colorrules.colorrank, colorrules.codetype,
               colorrules.colorid,
               (SELECT colors.colorname
                  FROM colors
                 WHERE colorid = colorrules.colorid) AS colorname,
               (SELECT colors.colorvalue
                  FROM colors
                 WHERE colorid = colorrules.colorid) AS colorvalue
          FROM colorrules
      ORDER BY codetype, colorrank;
END get_colorrules;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_COLORS" (p_cursor OUT emoc_types.emoc_cursor)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   colorid, colorname, colorvalue, fontcolor
          FROM colors
      ORDER BY colorname;
END get_colors;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_COLUMNS_BY_VIEW" (
VIEWNAME  		  	  VARCHAR,
P_CURSOR  		  OUT EMOC_TYPES.EMOC_CURSOR
)
AS
BEGIN

open p_cursor for
select column_name, data_type, data_length, data_precision, data_scale, nullable
from ALL_TAB_COLUMNS
where table_name = VIEWNAME;

END GET_COLUMNS_BY_VIEW;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_COMBATSCLRULES" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   sclrulesid, combatsclrules.aircraftmdsid,
               combatsclrules.combatsclid, aircraftmds.aircraftmds,
               (aircraftmds || ' / ' || blocknumber) AS mds_block,
               combatscls.combatscl
          FROM combatsclrules, combatscls, aircraftmds
         WHERE combatsclrules.aircraftmdsid = aircraftmds.aircraftmdsid
           AND combatsclrules.combatsclid = combatscls.combatsclid
      ORDER BY aircraftmds, combatscl;
END get_combatsclrules;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_COMBATSCLS" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   combatsclid, combatscl
          FROM combatscls
      ORDER BY combatscl;
END get_combatscls;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_CONDITIONCODES" (
P_CURSOR OUT EMOC_TYPES.EMOC_CURSOR
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR
SELECT   CONDITIONCODES.CONDCODEID,
		 CONDITIONCODES.CONDITIONCODE,
		 CONDITIONCODES.CONDITIONDESCRIPTION,
		 NVL(CONDITIONCODES.DEFAULTCONDITIONCODE, 0) as DEFAULTCONDITIONCODE ,
		 CONDITIONCODES.CONDSTATID,
		 CONDITIONSTATUS.CONDITIONSTATUS
FROM CONDITIONCODES,CONDITIONSTATUS
WHERE CONDITIONCODES.CONDSTATID = CONDITIONSTATUS.CONDSTATID
ORDER BY CONDITIONCODES.CONDITIONCODE ASC;

END GET_CONDITIONCODES;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_CONDITIONSTATUS" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   conditionstatus.condstatid, conditionstatus.conditionstatus,
               conditionstatus.conditionlevel, conditionstatus.flyable,
               conditionstatus.colorid,
               (SELECT colors.colorname
                  FROM colors
                 WHERE colors.colorid = conditionstatus.colorid)
                                                                AS colorname,
               (SELECT colors.colorvalue
                  FROM colors
                 WHERE colors.colorid = conditionstatus.colorid)
                                                               AS colorvalue
          FROM conditionstatus
      ORDER BY conditionstatus.conditionstatus ASC;
END get_conditionstatus;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_CREWCHIEFS" (
P_CURSOR OUT EMOC_TYPES.EMOC_CURSOR
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR
SELECT CREWCHIEFID,
 CREWCHIEF,
 NVL(DEFAULTCREWCHIEF,0) AS DEFAULTCREWCHIEF,
 PICTURE,
 RANKID,
 (SELECT RANKS.RANKCODE FROM RANKS WHERE RANKS.RANKID=CREWCHIEFS.RANKID) AS RANKCODE
FROM CREWCHIEFS
ORDER BY CREWCHIEF;

END GET_CREWCHIEFS;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_CUSTOMDATA" (p_cursor OUT emoc_types.emoc_cursor)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT DISTINCT customdata.*, colors.colorname
                 FROM customdata LEFT JOIN colors ON customdata.bgcolorvalue =
                                                            colors.colorvalue
             ORDER BY customdata.customdatalabel ASC;
END get_customdata;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_DAILYFLYINGSCHEDULEBRIEF" (
P_CURSOR OUT    EMOC_TYPES.EMOC_CURSOR,
SORTIEDATEIN      SCHEDULE.SORTIEDATE%TYPE,
MOCIDIN     SQUADRONS.MOCID%TYPE
)
/******************************************************************************
   NAME:       GET_SCHEDULE_BY_SQUADRON_TOTAL
   PURPOSE:    Returns Schedules for the specified squadron with
         text values for codes (JOAP, Fuel, etc.) filled.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        5/14/03      A.Mitchell       1. Created this procedure.
   1.1    6/2/03    A.Mitchell  2. Changed SORTIEDATE to SCHEDDAY
   1.2    6/16/03    A.Mitchell  3. Added Schedule Deviations table support
   1.3    2/1/04    A.Mitchell  4. Added UNION used to show previous day's planes flying
   PARAMETERS:
   INPUT:
   *SQUADRONIDIN
   *SORTIEDATESTART
   OUTPUT:
   *P_CURSOR
   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/

AS

BEGIN

    OPEN P_CURSOR FOR
    SELECT SC.SCHEDULEID AS scheduleid,
     TO_CHAR(SC.SCHEDULEDTAKEOFF, 'DD_MON_YY HH24:MI') AS schto,
     TO_CHAR(SC.SCHEDULEDLANDING, 'DD_MON_YY HH24:MI') AS schland,
     TO_CHAR(SC.ACTUALTAKEOFF, 'DD_MON_YY HH24:MI') AS actto,
     TO_CHAR(SC.ACTUALLANDING, 'DD_MON_YY HH24:MI') AS actland,
     SC.CALLSIGN AS callsign,
     SQ.SHORTNAME AS squadron,
     SQ.SQUADRONID AS squadronid,
     LC.LANDINGCODE AS landingstatus,
     PO.POSSESSIONCODE AS possession,
     DC.DEVIATIONCODE AS deviation,
     CC.CAUSECODE AS causecode,
     SC.SORTIENUM AS linenumber,
     AC.SHORTTAILNUMBER AS tailnumber,
     ST.STATUSCODE AS statuscode,
     TO_CHAR(AC.FUELSTATUSTIME, 'DD_MON_YY HH24:MI') AS fueltime,
     JP.JOAPCODE AS joapcode,
     RM.REMARKS AS remarks
    FROM SCHEDULE SC
     LEFT JOIN AIRCRAFT AC ON SC.AIRCRAFTID = AC.AIRCRAFTID
     LEFT JOIN SQUADRONS SQ ON SC.SQUADRONID = SQ.SQUADRONID
     LEFT JOIN LANDINGCODES LC ON SC.LANDINGCODEID = LC.LANDINGCODEID
     LEFT JOIN DEVIATIONCODES DC ON SC.DEVIATIONCODEID = DC.DEVIATIONCODEID
     LEFT JOIN POSSESSIONS PO ON AC.POSSESSIONID = PO.POSSESSIONID
     LEFT JOIN CAUSECODES CC ON SC.CAUSECODEID = CC.CAUSECODEID
     LEFT JOIN WX ON SC.WXCODEID = WX.WXCODEID
     LEFT JOIN PILOT PT ON SC.PILOTID = PT.PILOTID
     LEFT JOIN CONDITIONCODES CD ON AC.CONDITIONCODEID = CD.CONDCODEID
     LEFT JOIN CONDITIONSTATUS CS ON CD.CONDSTATID = CS.CONDSTATID
     LEFT JOIN AIRCRAFTMDS MDS ON AC.AIRCRAFTMDSID = MDS.AIRCRAFTMDSID
     LEFT JOIN STATUSCODE ST ON AC.STATUSCODEID = ST.STATUSCODEID
     LEFT JOIN REMARKS RM ON SC.SCHEDULEREMARKS = RM.REMARKSID
     LEFT JOIN JOAPDATA JD ON SC.SCHEDULEID = JD.SCHEDULEID
     LEFT JOIN JOAP JP ON JP.JOAPID = JD.JOAPID
     JOIN WINGS WG ON SQ.WINGID = WG.WINGID
    WHERE SC.SORTIEDATE = SORTIEDATEIN
 AND SQ.MOCID = MOCIDIN;

   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       NULL;
END GET_DAILYFLYINGSCHEDULEBRIEF;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_DAILYFLYINGSTATUSBRIEF" (
P_CURSOR      OUT EMOC_TYPES.EMOC_CURSOR,
SORTIEDATEIN    SCHEDULE.SORTIEDATE%TYPE,
MOCIDIN   SQUADRONS.MOCID%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR
SELECT SQ.SQUADRONID AS squadronid,
    SQ.SHORTNAME AS squadron,
    WI.WINGNAME AS wing,
    COUNT(SCH.scheduleid) AS s,
    SUM(DECODE(trim(DC.DEVIATIONCODE),'CX',1,0)) AS cx,
    SUM(DECODE(trim(DC.DEVIATIONCODE),'GA',1,0)) AS ga,
    SUM(DECODE(trim(DC.DEVIATIONCODE),'AD',1,0)) AS ad,
 SUM(DECODE(SCH.ACTUALLANDING, NULL,0,1)) AS f,
    SUM(DECODE(trim(SCH.SPARE),'1',1,0)) AS spare,
    MIN(TO_CHAR(SCH.ACTUALTAKEOFF, 'DD_MON_YYYY HH24:MI')) AS takeoff,
    MAX(TO_CHAR(SCH.ACTUALLANDING, 'DD_MON_YYYY HH24:MI')) AS land
FROM SQUADRONS SQ
LEFT JOIN SCHEDULE SCH ON SCH.SQUADRONID = SQ.SQUADRONID
LEFT JOIN SCHEDULEDEVIATIONS SD ON SCH.SCHEDULEID = SD.SCHEDULEID
LEFT JOIN DEVIATIONCODES DC ON SD.DEVIATIONCODEID = DC.DEVIATIONCODEID
LEFT JOIN WINGS WI ON SQ.WINGID = WI.WINGID
WHERE SCH.SORTIEDATE = SORTIEDATEIN
AND SQ.MOCID = MOCIDIN
GROUP BY SQ.SQUADRONID, SQ.SHORTNAME, WI.WINGNAME;


END GET_DAILYFLYINGSTATUSBRIEF;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_DEVDEFAULT_BY_MOC" (
   mocidin                     	 NUMBER,
   devid				OUT		 NUMBER
)
AS
devcnt NUMBER;
   /******************************************************************************
   NAME:       GET_DEVDEFAULT_BY_MOC
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     GET_DEVDEFAULT_BY_MOC
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       wings)

******************************************************************************/
BEGIN
   /*GET Deviation*/
   SELECT COUNT(*)
   INTO devcnt
   FROM DEVIATIONCODES
  WHERE mocid = mocidin
    AND defaultdeviationcode = 1;
  IF devcnt > 0 THEN
	 SELECT deviationcodeid
	   INTO devid
	   FROM DEVIATIONCODES
	  WHERE mocid = mocidin
	    AND defaultdeviationcode = 1;
  ELSE
  	  devid := NULL;
  END IF;

--EXCEPTION
 --  WHEN NO_DATA_FOUND
  -- THEN
  --    NULL;
 --  WHEN OTHERS
 --  THEN
      -- Consider logging the error and then re-raise
 --     RAISE;
END GET_DEVDEFAULT_BY_MOC;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_DEVIATIONCODES" (
P_CURSOR OUT EMOC_TYPES.EMOC_CURSOR
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR
SELECT   DEVIATIONCODES.DEVIATIONCODEID,
		 DEVIATIONCODES.DEVIATIONCODE,
		 DEVIATIONCODES.DEVIATIONDESCRIPTION,
		 NVL(DEVIATIONCODES.DEFAULTDEVIATIONCODE, 0) as DEFAULTDEVIATIONCODE,
		 DEVIATIONCODES.COLORID,
		 COLORS.COLORNAME,
		 COLORS.COLORVALUE
FROM DEVIATIONCODES,COLORS
WHERE DEVIATIONCODES.COLORID = COLORS.COLORID
ORDER BY DEVIATIONCODES.DEVIATIONCODE ASC;

END GET_DEVIATIONCODES;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_DEVIATIONSBRIEF" (
P_CURSOR      OUT EMOC_TYPES.EMOC_CURSOR,
SORTIEDATEIN    SCHEDULE.SORTIEDATE%TYPE,
MOCIDIN   SQUADRONS.MOCID%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR
SELECT SD.SCHEDULEDEVIATIONID AS devid,
    SQ.SHORTNAME AS squadron,
 SQ.SQUADRONID AS squadronid,
    PO.POSSESSIONCODE AS possession,
    DC.DEVIATIONCODE AS deviationcode,
    CC.CAUSECODE AS causecode,
    AC.SHORTTAILNUMBER AS tailnumber,
    SCH.SORTIENUM AS linenumber,
    RM.REMARKS AS remarks,
    DECODE(TO_CHAR(SCH.SPARE), '1', 'Y', 'N') AS spare,
    NULL AS rr,
    NULL AS corrective
FROM SCHEDULEDEVIATIONS SD
LEFT JOIN SCHEDULE SCH ON SD.SCHEDULEID = SCH.SCHEDULEID
LEFT JOIN AIRCRAFT AC ON SCH.AIRCRAFTID = AC.AIRCRAFTID
LEFT JOIN SQUADRONS SQ ON SCH.SQUADRONID = SQ.SQUADRONID
LEFT JOIN POSSESSIONS PO ON AC.POSSESSIONID = PO.POSSESSIONID
LEFT JOIN DEVIATIONCODES DC ON SD.DEVIATIONCODEID = DC.DEVIATIONCODEID
LEFT JOIN CAUSECODES CC ON SD.CAUSECODEID = CC.CAUSECODEID
LEFT JOIN REMARKS RM ON SD.DEVIATIONSREMARKS = RM.REMARKSID
WHERE SD.SORTIEDATE = SORTIEDATEIN
AND SQ.MOCID = MOCIDIN;
--WHERE SD.SORTIEDATE = '2005110';

END GET_DEVIATIONSBRIEF;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_DEVIATIONS_BY_LINE" (
P_CURSOR OUT    EMOC_TYPES.EMOC_CURSOR,
SCHEDULEIDIN    SCHEDULE.SCHEDULEID%TYPE
)
/******************************************************************************
   NAME:       GET_DEVIATIONSBY_LINE
   PURPOSE:    Returns DEVIATIONS for the specified ID

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        7/3/03      A.Mitchell       1. Created this procedure.

   PARAMETERS:
   INPUT:
   *SCHEDULEIDIN
   OUTPUT:
   *P_CURSOR
   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/

AS
BEGIN
  OPEN P_CURSOR FOR
  SELECT
    SD.STOPDATETIME,
   SD.STARTDATETIME,
   SD.SORTIENUM,
      SD.SORTIEMOD,
   SD.SORTIEDATE,
   SD.SCHEDULEID,
      SD.SCHEDULEDEVIATIONID,
   SD.NEWCAUSECODE NEWCAUSECODEID,
   SD.MAINTENANCEEVENTID,
      RM.REMARKS,
   SD.DEVIATIONSREMARKS,
   SD.DEVIATIONCODEID,
     SD.CHARGEABLE,
   SD.CAUSECODEID,
   SD.ACTIONOPTIONS,
   DV.DEVIATIONCODE,
   CC.CAUSECODE,
   CC2.CAUSECODE NEWCAUSECODE,
   CO.FONTCOLOR,
   SC.AIRCRAFTID
 FROM SCHEDULEDEVIATIONS SD
 LEFT JOIN DEVIATIONCODES DV ON SD.DEVIATIONCODEID = DV.DEVIATIONCODEID
 LEFT JOIN CAUSECODES CC ON SD.CAUSECODEID = CC.CAUSECODEID
 LEFT JOIN CAUSECODES CC2 ON SD.NEWCAUSECODE = CC2.CAUSECODEID
 LEFT JOIN REMARKS RM ON RM.REMARKSID = SD.DEVIATIONSREMARKS
 LEFT JOIN COLORS CO ON CO.COLORID = DV.COLORID
 LEFT JOIN SCHEDULE SC ON SC.SCHEDULEID = SD.SCHEDULEID
 WHERE SD.SCHEDULEID = SCHEDULEIDIN
 ORDER BY SD.SCHEDULEDEVIATIONID;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        Null;
      WHEN OTHERS THEN
        Null;
END GET_DEVIATIONS_BY_LINE;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_DEVID_BY_MOCDEVCODE" (
   mocidin                     	 NUMBER,
   devcodein					 VARCHAR2,
   devid				OUT		 NUMBER
)
AS
devcnt NUMBER;
   /******************************************************************************
   NAME:       GET_DEVID_BY_MOCDEVCODE
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     GET_DEVID_BY_MOCDEVCODE
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       wings)

******************************************************************************/
BEGIN
   /*GET Deviation*/
   SELECT COUNT(*)
  	  INTO devcnt
     FROM DEVIATIONCODES
    WHERE mocid = mocidin
      AND deviationcode = devcodein;
   IF devcnt > 0 THEN
	 SELECT deviationcodeid
	   	  INTO devid
	      FROM DEVIATIONCODES
	     WHERE mocid = mocidin
	       AND deviationcode = devcodein;
	ELSE
		devid := NULL;
	END IF;

--EXCEPTION
 --  WHEN NO_DATA_FOUND
  -- THEN
  --    NULL;
 --  WHEN OTHERS
 --  THEN
      -- Consider logging the error and then re-raise
 --     RAISE;
END GET_DEVID_BY_MOCDEVCODE;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_ELC_ICONTROL_STATUS" (
   interfaceenabledout   OUT   NUMBER,
   mocidin                     wings.mocid%TYPE,
   elcin						wings.elc%TYPE
)
AS
   enabled   NUMBER (1);
BEGIN
   SELECT imdsinterfaceon
     INTO enabled
     FROM wings
    WHERE elc = elcin AND mocid = mocidin;

   interfaceenabledout := enabled;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      NULL;
END get_elc_icontrol_status;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_EMOCCONFIGDATA" (
   emocconfigidin   IN       emocconfig.emocconfigid%TYPE,
   timezonefactor   OUT      emocconfig.timezonefactor%TYPE,
   timezonehours    OUT      emocconfig.timezonehours%TYPE,
   gmtfactor        OUT      emocconfig.gmtfactor%TYPE,
   gmthours         OUT      emocconfig.gmthours%TYPE,
   VERSION          OUT      emocconfig.VERSION%TYPE,
   basename         OUT      emocconfig.basename%TYPE,
   etictimer        OUT      emocconfig.etictimer%TYPE,
   archivedom       OUT      emocconfig.archivedom%TYPE,
   archivepurgemo   OUT      emocconfig.archivepurgemo%TYPE,
   scheduledow      OUT      emocconfig.scheduledow%TYPE,
   scheduletime     OUT      emocconfig.scheduletime%TYPE,
   updated          OUT      emocconfig.basename%TYPE,
   updatedby        OUT      emocconfig.basename%TYPE,
   schedulepath     OUT      emocconfig.schedulepath%TYPE,
   templatepath     OUT      emocconfig.templatepath%TYPE,
   archivepath      OUT      emocconfig.archivepath%TYPE,
   headercolor      OUT      emocconfig.headercolor%TYPE,
   smtpserver       OUT      emocconfig.smtpserver%TYPE,
   docspath         OUT      emocconfig.docspath%TYPE,
   proxyurl         OUT      emocconfig.proxyurl%TYPE,
   proxyuserid      OUT      emocconfig.proxyuserid%TYPE,
   proxypassword    OUT      emocconfig.proxypassword%TYPE,
   proxyenabled     OUT      emocconfig.proxyenabled%TYPE
)
AS
BEGIN
   SELECT timezonefactor, timezonehours, gmtfactor, gmthours, VERSION,
          basename, etictimer, archivedom, archivepurgemo, scheduledow,
          scheduletime, TO_CHAR (lastupdated, 'MM/DD/YYYY HH24:MI:SS'),
          (SELECT fullname
             FROM users
            WHERE users.userid = emocconfig.lastupdatedby), schedulepath,
          templatepath, archivepath, docspath, headercolor, smtpserver,
          proxyurl, proxyuserid, emoc_security.decrypt(proxypassword), proxyenabled
     INTO timezonefactor, timezonehours, gmtfactor, gmthours, VERSION,
          basename, etictimer, archivedom, archivepurgemo, scheduledow,
          scheduletime, updated,
          updatedby, schedulepath,
          templatepath, archivepath, docspath, headercolor, smtpserver,
          proxyurl, proxyuserid, proxypassword, proxyenabled
     FROM emocconfig
    WHERE emocconfigid = emocconfigidin;
END get_emocconfigdata;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_EMOCHELP" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   emochelp.helpid, emochelp.parentid, emochelp.topic,
               emochelp.helphtml
          FROM emochelp
      ORDER BY topic ASC;
END get_emochelp;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_FIRESYMBOLS" (
P_CURSOR OUT EMOC_TYPES.EMOC_CURSOR
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR
SELECT FIRESYMBOLID,
 FIRESYMBOL,
 DESCRIPTION,
 NVL(DEFAULTVAL,0) as DEFAULTVAL,
 RANKING
FROM FIRESYMBOLS
ORDER BY FIRESYMBOL;

END GET_FIRESYMBOLS;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_FLIGHTS" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   flightid, flights.squadronid, flightname,
               flights.workcenterid,
               (SELECT workcenters.workcentercode
                  FROM workcenters
                 WHERE workcenters.workcenterid =
                                       flights.workcenterid)
                                                           AS workcentercode,
               (SELECT workcenters.porgid
                  FROM workcenters
                 WHERE workcenters.workcenterid =
                                                flights.workcenterid)
                                                                    AS orgid,
               (SELECT workcenters.unit_id
                  FROM workcenters
                 WHERE workcenters.workcenterid =
                                              flights.workcenterid)
                                                                  AS unit_id,
               (SELECT squadrons.squadronname
                  FROM squadrons
                 WHERE squadrons.squadronid =
                                           flights.squadronid)
                                                             AS squadronname,
               (SELECT wingid
                  FROM squadrons
                 WHERE squadronid = flights.squadronid) AS wingid
          FROM flights
      ORDER BY flightname;
END get_flights;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_FLYBOARD_JOAP_SEMEDX" (
   color_status   OUT   VARCHAR,
   scheduleidin         schedule.scheduleid%TYPE,
   codetype             NUMBER,
   mocidin    NUMBER
)

AS
   defaultrank   NUMBER;
   colorrankin   NUMBER;
   colorout      VARCHAR (7);
   enginecount   NUMBER;
   statusout     VARCHAR (100);
BEGIN
   IF codetype = 0                                                   --"JOAP"
   THEN
      BEGIN
         --default rank
         SELECT colorrank
           INTO defaultrank
           FROM colorrules cr JOIN joap j ON cr.colorrulesid = j.colorrulesid
          WHERE joapid = (SELECT joapid
                            FROM joap
                           WHERE defaultjoap = 1
         AND   mocid = mocidin);

         --get current rank
         SELECT NVL (MIN (colorrank), defaultrank)
           INTO colorrankin
           FROM schedule s JOIN joapdata jd ON s.scheduleid = jd.scheduleid
                JOIN joap j ON jd.joapid = j.joapid
                JOIN colorrules cr2 ON j.colorrulesid = cr2.colorrulesid
          WHERE jd.scheduleid = scheduleidin;

         --get current color
         SELECT colorvalue
           INTO colorout
           FROM colors c JOIN colorrules cr1 ON c.colorid = cr1.colorid
          WHERE cr1.colorrank = colorrankin AND cr1.codetype = 'JOAP' AND cr1.mocid = mocidin;

         SELECT COUNT (NVL (joapdataid, 0))
           INTO enginecount
           FROM schedule s JOIN joapdata jd ON s.scheduleid = jd.scheduleid
                JOIN joap j ON jd.joapid = j.joapid
                JOIN colorrules cr2 ON j.colorrulesid = cr2.colorrulesid
          WHERE jd.scheduleid = scheduleidin AND cr2.colorrank = colorrankin;

         IF enginecount = 1
         THEN
            BEGIN
               SELECT   joapcode
                   INTO statusout
                   FROM schedule s JOIN joapdata jd ON s.scheduleid =
                                                                 jd.scheduleid
                        JOIN joap j ON jd.joapid = j.joapid
                        JOIN colorrules cr2 ON j.colorrulesid =
                                                              cr2.colorrulesid
                  WHERE jd.scheduleid = scheduleidin
                    AND cr2.colorrank = colorrank
                    AND ROWNUM = 1
               ORDER BY colorrank;
            END;
         END IF;

         IF enginecount > 1
         THEN
            BEGIN
               statusout := enginecount;
            END;
         END IF;
      END;
   END IF;

   IF codetype = 1                                                  --"SEMEDX"
   THEN
      BEGIN
         --default rank
         SELECT colorrank
           INTO defaultrank
           FROM colorrules cr JOIN semedx sx ON cr.colorrulesid =
                                                               sx.colorrulesid
          WHERE semedxid = (SELECT semedxid
                              FROM semedx
                             WHERE defaultval = 1
          AND mocid = mocidin);

         --get current rank
         SELECT NVL (MIN (colorrank), defaultrank)
           INTO colorrankin
           FROM schedule s JOIN semedxdata sd ON s.scheduleid = sd.scheduleid
                JOIN semedx s ON sd.semedxid = s.semedxid
                JOIN colorrules cr2 ON s.colorrulesid = cr2.colorrulesid
          WHERE sd.scheduleid = scheduleidin;

         --get current color
         SELECT colorvalue
           INTO colorout
           FROM colors c JOIN colorrules cr1 ON c.colorid = cr1.colorid
          WHERE cr1.colorrank = colorrankin AND cr1.codetype = 'SEMEDX' AND cr1.mocid = mocidin;

         SELECT COUNT (NVL (semdataid, 0))
           INTO enginecount
           FROM schedule sc JOIN semedxdata sd ON sc.scheduleid =
                                                                 sd.scheduleid
                JOIN semedx s ON sd.semedxid = s.semedxid
                JOIN colorrules cr2 ON s.colorrulesid = cr2.colorrulesid
          WHERE sd.scheduleid = scheduleidin AND cr2.colorrank = colorrankin;

         IF enginecount = 1
         THEN
            BEGIN
               SELECT   semedx
                   INTO statusout
                   FROM schedule sc JOIN semedxdata sd ON sc.scheduleid =
                                                                 sd.scheduleid
                        JOIN semedx s ON sd.semedxid = s.semedxid
                        JOIN colorrules cr2 ON s.colorrulesid =
                                                              cr2.colorrulesid
                  WHERE sd.scheduleid = scheduleidin
                    AND cr2.colorrank = colorrank
                    AND ROWNUM = 1
               ORDER BY colorrank;
            END;
         END IF;

         IF enginecount > 1
         THEN
            BEGIN
               statusout := enginecount;
            END;
         END IF;
      END;
   END IF;

   color_status := colorout || '-' || statusout;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      NULL;
END get_flyboard_joap_semedx;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_FUELS" (
P_CURSOR OUT EMOC_TYPES.EMOC_CURSOR
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR
SELECT FUELSTATUSID,
  FUELSTATUS,
  FUELDESCRIPTION,
  LANDING,
  FUELSTATUSLABEL,
  ALLOWSORTIEUPDATE,
	NVL(DEFAULTFUEL,0) as DEFAULTFUEL,
	COLORID,
	(SELECT COLORNAME FROM COLORS WHERE COLORS.COLORID = FUEL.COLORID) AS COLORNAME,
	(SELECT COLORVALUE FROM COLORS WHERE COLORS.COLORID = FUEL.COLORID) AS COLORVALUE
  FROM FUEL
ORDER BY FUELSTATUS ASC;

END GET_FUELS;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_GENFLOW_DATA" (
   genflow          generationflow.generationflowname%TYPE,
   report     OUT   emoc_types.emoc_cursor,
   steps      OUT   emoc_types.emoc_cursor,
   aircraft   OUT   emoc_types.emoc_cursor,
   progress   OUT   emoc_types.emoc_cursor,
   countrs    OUT   emoc_types.emoc_cursor
)

AS
BEGIN
   OPEN report FOR
      SELECT generationflowstarttime, generationflowitemoffset
        FROM generationflow
       WHERE generationflowname = genflow;

   OPEN steps FOR
      SELECT   stepnumber, stepname, steplength
          FROM generationflowsteps
         WHERE generationflowname = genflow
      ORDER BY stepnumber;

   OPEN aircraft FOR
      SELECT   item, itemnumber
          FROM generationflowitems
         WHERE generationflowname = genflow
      ORDER BY itemnumber;

   OPEN progress FOR
      SELECT   itemnumber, stepnumber, started, completed
          FROM generationflowprogress
         WHERE generationflowname = genflow
      ORDER BY itemnumber, stepnumber;

   OPEN countrs FOR
      SELECT COUNT (stepnumber)
        FROM generationflowsteps
       WHERE generationflowname = genflow;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      NULL;
END get_genflow_data;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_HELP_BY_ID" (
HELPIDIN  EMOCHELP.HELPID%TYPE,
HELPBODY  OUT EMOCHELP.HELPHTML%TYPE
)
AS
BEGIN

	 SELECT HELPHTML INTO HELPBODY
	 FROM   EMOCHELP
	 WHERE 	HELPID = HELPIDIN;

END GET_HELP_BY_ID;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_HELP_BY_PARENTID" (
   p_cursor     OUT   emoc_types.emoc_cursor,
   parentidin         INTEGER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   emochelp.helpid, emochelp.parentid, emochelp.topic,
               emochelp.helphtml, emochelp.node
          FROM emochelp
         WHERE parentid = parentidin
      ORDER BY node, topic ASC;
END get_help_by_parentid;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_HELP_BY_TOPIC" (
TOPICIN  EMOCHELP.TOPIC%TYPE,
HELPBODY  OUT EMOCHELP.HELPHTML%TYPE
)
AS
BEGIN

	 SELECT HELPHTML INTO HELPBODY
	 FROM   EMOCHELP
	 WHERE 	TOPIC = TOPICIN;

END GET_HELP_BY_TOPIC;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_HQBRIEF" (
MOCIDIN     AIRCRAFT.MOCID%TYPE,
P_CURSOR OUT EMOC_TYPES.EMOC_CURSOR
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR
SELECT AC.AIRCRAFTID AS hqbriefid,
    NULL AS show,--show, --not db, userd entered
    AM.AIRCRAFTMDS AS mds,
    AC.SHORTTAILNUMBER AS tailnumber,
    SQ.SHORTNAME AS squadron,
    SQ.SQUADRONID AS squadronid,
    TO_CHAR(AC.LASTFLOWNTIME, 'DD_MON_YY') AS lastflowndate,
    NULL AS projected, --projected, -- user enters
    TO_CHAR(AC.LASTFLOWNTIME + 31, 'DD_MON_YY') AS hqdate, --h/q date, --Last flown + 31 days
    CC.CONDITIONCODE AS status,
    AC.ETIC AS etic,
    NULL AS estimatedflydate, --estimated fly date, --user entered
    TRUNC(SYSDATE - AC.LASTFLOWNTIME) AS daysdown, --daysdown, --calculated from last flown date - today
    RM.REMARKS AS remarks
FROM AIRCRAFT AC
LEFT JOIN HANGER_QUEEN_CODE HQ ON AC.HANGERQUEENSTATUS = HQ.HQCODEID
LEFT JOIN AIRCRAFTMDS AM ON AC.AIRCRAFTMDSID = AM.AIRCRAFTMDSID
LEFT JOIN SQUADRONS SQ ON AC.SQUADRONID = SQ.SQUADRONID
LEFT JOIN CONDITIONCODES CC ON AC.CONDITIONCODEID = CC.CONDCODEID
LEFT JOIN REMARKS RM ON AC.REMARKSID = RM.REMARKSID
LEFT JOIN POSSESSIONS PS ON AC.POSSESSIONID = PS.POSSESSIONID
WHERE (SYSDATE - AC.LASTFLOWNTIME) > 30
AND (PS.POSSESSIONCODE NOT LIKE 'P%' OR AC.POSSESSIONID IS NULL)
AND AC.MOCID = MOCIDIN;

END GET_HQBRIEF;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_HQCODES" (
P_CURSOR OUT EMOC_TYPES.EMOC_CURSOR
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR
SELECT HQCODEID, HQCODE, HQDESCRIPTION,HQLEVEL, NVL(HQDEFAULT,0) AS HQDEFAULT
FROM HANGER_QUEEN_CODE
ORDER BY HQCODE;

END GET_HQCODES;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_ICONTROL" (interfacenamein  interfacecontrol.interfacename%TYPE,
                                         interfaceenabled OUT interfacecontrol.interfaceenabled%TYPE,
                                         lastupdated      OUT VARCHAR2,
                                         updatedby        OUT interfacecontrol.interfacename%TYPE) AS
BEGIN
  SELECT interfaceenabled,
         TO_CHAR(lastupdate, 'MM/DD/YYYY HH24:MI:SS'),
         (SELECT fullname
            FROM users
           WHERE users.userid = interfacecontrol.lastupdateby)
    INTO interfaceenabled, lastupdated, updatedby
    FROM interfacecontrol
   WHERE trim(interfacename) = interfacenamein;
END get_icontrol;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_IMDSLOGINS" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   useridin         imdslogins.userid%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   imdsloginid, imdslogin,
               emoc_security.decrypt (imdspassword) AS imdspassword,
               imdsaccount, imdsprojectid, imdsterminalid, wingid,
               (SELECT (wingname || ', ' || unitid)
                  FROM wings
                 WHERE wingid = imdslogins.wingid) AS wingandunit,
               (SELECT mocid
                  FROM wings
                 WHERE wings.wingid = imdslogins.wingid) AS mocid
          FROM imdslogins
         WHERE userid = useridin
      ORDER BY imdslogin;
END get_imdslogins;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_INTERFACECONTROLREC" (interfacenamein  interfacecontrol.interfacename%TYPE,
                                                    tbmcsemail       OUT emocconfig.tbmcsemail%TYPE,
                                                    tbmcstimer       OUT emocconfig.tbmcstimer%TYPE,
                                                    interfaceenabled OUT interfacecontrol.interfaceenabled%TYPE,
                                                    lastupdated      OUT VARCHAR2,
                                                    updatedby        OUT interfacecontrol.interfacename%TYPE) AS
BEGIN
  SELECT tbmcsemail, tbmcstimer
    INTO tbmcsemail, tbmcstimer
    FROM emocconfig
   WHERE emocconfigid = 0;

  SELECT interfaceenabled,
         TO_CHAR(lastupdate, 'MM/DD/YYYY HH24:MI:SS'),
         (SELECT fullname
            FROM users
           WHERE users.userid = interfacecontrol.lastupdateby)
    INTO interfaceenabled, lastupdated, updatedby
    FROM interfacecontrol
   WHERE TRIM(interfacename) = TRIM(interfacenamein);
END get_interfacecontrolrec;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_INTERFACECONTROL_STATUS" (
   interfaceenabledout   OUT   NUMBER,
   interfacenamein             interfacecontrol.interfacename%TYPE
)
AS
   enabled   NUMBER (1);
BEGIN
   SELECT interfaceenabled
     INTO enabled
     FROM interfacecontrol
    WHERE interfacename = interfacenamein;

   interfaceenabledout := enabled;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      NULL;
END get_interfacecontrol_status;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_INTERFACEHISTORY" (
   p_cursor               OUT   emoc_types.emoc_cursor,
   interfacecontrolidin         interfacehistory.interfacecontrolid%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   statuschangetime,
               (SELECT fullname
                  FROM users
                 WHERE users.userid =
                             interfacehistory.statuschangeby)
                                                            AS statuschangby,
               currentstatus, currentenabled
          FROM interfacehistory
         WHERE interfacecontrolid = interfacecontrolidin
      ORDER BY statuschangetime DESC;
END get_interfacehistory;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_INTERFACEITEMS" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   interfacecontrolid, interfaceitemid, itemname,
               itemdescription, itemenabled, tric, lastupdate,
               (SELECT fullname
                  FROM users
                 WHERE userid = interfaceitems.lastupdatedby) AS updatedby
          FROM interfaceitems
      ORDER BY itemname;
END get_interfaceitems;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_INTERFACEITEMSHISTORY" (
   p_cursor            OUT   emoc_types.emoc_cursor,
   interfaceitemidin         interfaceitemshistory.interfaceitemid%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   statuschangetime,
               (SELECT fullname
                  FROM users
                 WHERE users.userid =
                          interfaceitemshistory.statuschangeby)
                                                            AS statuschangby,
               currentstatus
          FROM interfaceitemshistory
         WHERE interfaceitemid = interfaceitemidin
      ORDER BY statuschangetime DESC;
END get_interfaceitemshistory;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_INTERFACEITEM_STATUS" (
   itemstatus   OUT   interfaceitems.itemenabled%TYPE,
   tricin             interfaceitems.tric%TYPE,
   mocin			  interfaceitems.mocid%TYPE
)
AS
   status   NUMBER;
BEGIN
   SELECT itemenabled
     INTO status
     FROM interfaceitems
    WHERE tric = tricin
	  AND mocid = mocin;

   itemstatus := status;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      NULL;
END get_interfaceitem_status;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_INTERFACELOG" (
P_CURSOR OUT EMOC_TYPES.EMOC_CURSOR
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR
SELECT INTERFACELOGID,
    INTERFACELOG.INTERFACECONTROLID,
    INTERFACENAME,
    INTERFACEENABLED,
    TRANSACTIONTYPE,
    TO_CHAR(TIMEOFINSERT,'MM/DD/YY HH24:MI') "INSERTED",
    INTERFACELOG.AIRCRAFTID,
   (SELECT MISEQUIPID
    FROM AIRCRAFT
  WHERE AIRCRAFTID = INTERFACELOG.AIRCRAFTID) AS EquipId,
    XMLIN,
    XMLOUT,
    (SELECT FULLNAME
       FROM USERS
    WHERE USERS.USERID = INTERFACELOG.USERID) AS CONTROLLER
 FROM INTERFACELOG, INTERFACECONTROL
WHERE INTERFACELOG.INTERFACECONTROLID = INTERFACECONTROL.INTERFACECONTROLID
ORDER BY INTERFACELOGID DESC;

END GET_INTERFACELOG;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_INTERFACELOGRECBYID" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   logidin          interfacelog.interfacelogid%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT interfacelogid, interfacelog.interfacecontrolid,
             transactiontype,
             TO_CHAR (timeofinsert, 'MM/DD/YY HH24:MI') "INSERTED",
             interfacelog.aircraftid, interfacelog.userid,
             (SELECT misequipid
                FROM aircraft
               WHERE aircraftid = interfacelog.aircraftid) AS equipid, xmlin,
             xmlout, squadronid,
             (SELECT squadronname
                FROM squadrons
               WHERE squadrons.squadronid =
                                          interfacelog.squadronid)
                                                                 AS squadron,
             (SELECT fullname
                FROM users
               WHERE users.userid = interfacelog.userid) AS controller,
             parsed, rejected, corrected, correctiveaction, updateobject,
             (SELECT tric
                FROM interfaceitems
               WHERE itemname = interfacelog.transactiontype 
        AND mocid = interfacelog.MOCID) AS tric
        FROM interfacelog
       WHERE interfacelog.interfacelogid = logidin;
END get_interfacelogrecbyid;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_INTERFACES" (p_cursor OUT emoc_types.emoc_cursor) AS
BEGIN
  -- RETURN THE CURSOR FOR THE RECORDSET
  OPEN p_cursor FOR
    SELECT interfacecontrolid,
           interfacename,
           currentstatus,
           interfaceenabled,
           (SELECT fullname
              FROM users
             WHERE users.userid = interfacecontrol.lastupdateby) AS lastupdateby,
           lastupdate
      FROM interfacecontrol
     ORDER BY interfacename;
END get_interfaces;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_JOAPCOLORRULES" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   colorrulesid, colorrules.colorid, colors.colorname
          FROM colorrules, colors
         WHERE colorrules.colorid = colors.colorid
           AND colorrules.codetype = 'JOAP'
      ORDER BY colorname;
END get_joapcolorrules;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_JOAPS" (
P_CURSOR OUT EMOC_TYPES.EMOC_CURSOR
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR
SELECT JOAPID,
 JOAPCODE,
 JOAPDESCRIPTION,
 LANDING,
 REDCAPSTATUS,
 NVL(DEFAULTJOAP, 0) AS DEFAULTJOAP,
 JOAP.COLORRULESID,
 COLORRULES.COLORID,
 COLORS.COLORNAME,
 COLORS.COLORVALUE
FROM JOAP, COLORRULES, COLORS
WHERE JOAP.COLORRULESID = COLORRULES.COLORRULESID
	  AND COLORRULES.COLORID = COLORS.COLORID
ORDER BY JOAPCODE;

END GET_JOAPS;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_JOAP_DATA_BY_SCHEDULEID" (
   p_cursor       OUT   emoc_types.emoc_cursor,
   scheduleidin         schedule.scheduleid%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   joap.joapcode code, colors.colorvalue, colorrules.colorrank,
               aircraftenginedata.enginenumber, joapdata.scheduleid,
               schedule.scheduledtakeoff, joapdata.moccontroller,
               joapdata.sampledate, joapdata.reason, schedule.sortienum,
               schedule.sortiedate, joapdata.joapdataid,
               aircraftenginedata.enginedataid
          FROM aircraft,
               joap,
               colors,
               colorrules,
               aircraftenginedata,
               joapdata,
               schedule
         WHERE (    (aircraft.aircraftid = aircraftenginedata.aircraftid)
                AND (aircraftenginedata.enginedataid = joapdata.enginedataid
                    )
                AND (joap.joapid = joapdata.joapid)
                AND (joap.colorrulesid = colorrules.colorrulesid)
                AND (colorrules.codetype = 'JOAP')
                AND (colorrules.colorid = colors.colorid)
                AND (joapdata.scheduleid = schedule.scheduleid)
                AND (schedule.scheduleid = scheduleidin)
                AND (joapdata.datecleared IS NULL)
               )
      ORDER BY joapdata.sampledate,
               aircraftenginedata.enginenumber,
               schedule.scheduledtakeoff;
END get_joap_data_by_scheduleid;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_LANDINGCODES" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   landingcodes.landingcodeid, landingcodes.landingcode,
               landingcodes.landingcodedescription,
               landingcodes.writeupneeded
          FROM landingcodes
      ORDER BY landingcodes.landingcode ASC;
END get_landingcodes;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_LAST_SCHED_STATUS_CODE" (
STATUSCODEID OUT  SCHEDULESTATUS.STATUSCODEID%TYPE,
SCHEDULEIDIN 	  SCHEDULE.SCHEDULEID%TYPE,
STATUSTYPEIN	  SCHEDULESTATUS.STATUSTYPE%TYPE
)
/******************************************************************************
   NAME:       GET_LAST_SCHED_STATUS_CODE
   PURPOSE:    Returns Schedule statuses complete for the specified ID

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        7/1/03      A.Mitchell       1. Created this procedure.
   1.1		  1/19/04	   A.Mitchell	   2. Changed sort to DESC

   PARAMETERS:
   INPUT:
   *SCHEDULEIDIN
   *STATUSTYPEIN
   OUTPUT:
   *STATUSCODEID
   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/

AS

STATUSCODEOUT NUMBER;

BEGIN
	 SELECT STATUSCODEID
	 	INTO STATUSCODEOUT
	 	FROM (
	 	SELECT SC.STATUSCODEID
		FROM SCHEDULESTATUS SS JOIN STATUSCODE SC ON SS.STATUSCODEID = SC.STATUSCODEID
		WHERE SS.SCHEDULEID = SCHEDULEIDIN AND STATUSTYPE = STATUSTYPEIN
		ORDER BY SS.STATUSTIME DESC, SC.ORDERNUMBER DESC)
		WHERE ROWNUM=1;

	STATUSCODEID := STATUSCODEOUT;

	   EXCEPTION
	     WHEN NO_DATA_FOUND THEN
	       Null;
	     WHEN OTHERS THEN
	       Null;
END GET_LAST_SCHED_STATUS_CODE;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_LINKS" (p_cursor OUT emoc_types.emoc_cursor)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   linkid, linktitle, linkurl, linkdescription, enteredon,
               enteredby, lastupdated, linkorder
          FROM links
      ORDER BY linkorder, linkurl ASC;
END get_links;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_LOCATIONID" (
   codein         locations.locationcode%TYPE,
   elcin          locations.elc%TYPE,
   idout    OUT   locations.locationid%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   SELECT locationid
     INTO idout
     FROM locations
    WHERE locationcode = codein AND elc = elcin;
END get_locationid;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_LOCATIONS" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   locationid, locationcode, locationname, maximumoccupancy,
               NVL (defaultlocation, 0) AS defaultlocation, elc
          FROM locations
      ORDER BY locationcode;
END get_locations;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_LOCATIONSBYELC" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   elcin            locations.elc%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   IF (LENGTH (elcin) > 0)
   THEN
      OPEN p_cursor FOR
         SELECT   locationid, locationcode, locationname, maximumoccupancy,
                  NVL (defaultlocation, 0) AS defaultlocation, nvl(elc,'') as elc, mocid
             FROM locations
            WHERE elc = elcin
         ORDER BY locationcode;
   ELSE
      OPEN p_cursor FOR
         SELECT   locationid, locationcode, locationname, maximumoccupancy,
                  NVL (defaultlocation, 0) AS defaultlocation, nvl(elc,'') as elc, mocid
             FROM locations
            WHERE LENGTH (elc) = 0 or elc is null
         ORDER BY locationcode;
   END IF;
END get_locationsbyelc;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MAJCOMS" (p_cursor OUT emoc_types.emoc_cursor)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   majcomid, majcom, majcomnarrative, comid, comcode, camsinit
          FROM majcoms
         WHERE mocid = 0
      ORDER BY majcom;
END get_majcoms;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MICAPSBRIEF" (
   mocidin          aircraft.mocid%TYPE,
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT mc.micapid AS micapid, sq.shortname AS squadron,
             sq.squadronid AS squadronid,
             mc.documentnumber AS documentnumber, mc.nomenclature AS noun,
             ac.shorttailnumber AS tailnumber, mc.usercomment AS usercomment
        FROM micap mc LEFT JOIN aircraft ac ON mc.aircraftid = ac.aircraftid
             LEFT JOIN squadrons sq ON ac.squadronid = sq.squadronid
       WHERE ac.mocid = mocidin;
--ORDER BY AC.SHORTTAILNUMBER;
END get_micapsbrief;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MISSION" (
   missionidin                   missions.missionid%TYPE,
   missionout              OUT   missions.mission%TYPE,
   missiondescriptionout   OUT   missions.missiondescription%TYPE
)
AS
BEGIN
   SELECT mission, missiondescription
     INTO missionout, missiondescriptionout
     FROM missions
    WHERE missions.missionid = missionidin;
END get_mission;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MISSIONID_BY_MOCMISSION" (
   mocidin                     	 NUMBER,
   missionnumin 				 VARCHAR2,
   missid				OUT		 NUMBER
)
AS
miscount NUMBER;
   /******************************************************************************
   NAME:       GET_MISSIONID_BY_MOCMISSION
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     GET_MISSIONID_BY_MOCMISSION
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       wings)

******************************************************************************/
BEGIN
   /*GET MISSION*/
	    IF missionnumin IS NOT NULL THEN
		 	SELECT COUNT(*)
			  INTO miscount
			  FROM MISSIONS
			 WHERE mocid = mocidin
			   AND mission = missionnumin;
			IF miscount > 0 THEN
				SELECT missionid
				  INTO missid
				  FROM MISSIONS
				 WHERE mocid = mocidin
				   AND mission = missionnumin;
			ELSE
				missid := NULL;
			END IF;
		 ELSE
		 	 missid := NULL;
		 END IF;

--EXCEPTION
 --  WHEN NO_DATA_FOUND
  -- THEN
  --    NULL;
 --  WHEN OTHERS
 --  THEN
      -- Consider logging the error and then re-raise
 --     RAISE;
END GET_MISSIONID_BY_MOCMISSION;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MISSIONS" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   missionid, LPAD (mission, 10, ' ') AS mission,
               missiondescription
          FROM missions
      ORDER BY mission;
END get_missions;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOCADMINS" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          moc.mocid%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   mocadminid, mocadmins.userid, fullname, userstatus, email
          FROM mocadmins, users
         WHERE mocadmins.mocid = mocidin AND mocadmins.userid = users.userid
      ORDER BY fullname;
END get_mocadmins;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOCID_BY_ELCUNITID" (
   elcin                     	 VARCHAR2,
   unitidin                      VARCHAR2,
   mocid   				OUT		 NUMBER
)
AS
moccnt NUMBER;
   /******************************************************************************
   NAME:       GET_MOCID_BY_ELCUNITID
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     GET_MOCID_BY_ELCUNITID
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       wings)

******************************************************************************/
BEGIN
   /*GET MOCID */
    SELECT COUNT(*)
	   INTO moccnt
	   FROM WINGS
	  WHERE ELC = elcin
	    AND unitid = unitidin;
   IF moccnt > 0 THEN
	 SELECT mocid
	   INTO mocid
	   FROM WINGS
	  WHERE ELC = elcin
	    AND unitid = unitidin;
   ELSE
   	   mocid := NULL;
   END IF;


--EXCEPTION
 --  WHEN NO_DATA_FOUND
  -- THEN
  --    NULL;
 --  WHEN OTHERS
 --  THEN
      -- Consider logging the error and then re-raise
 --     RAISE;
END GET_MOCID_BY_ELCUNITID;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOCS" (p_cursor OUT emoc_types.emoc_cursor) AS
BEGIN
  -- RETURN THE CURSOR FOR THE RECORDSET
  OPEN p_cursor FOR
    SELECT mocid,
           REPLACE(moctitle, '''''', '''') AS moctitle,
           isactive,
           TO_CHAR(lastupdated, 'MM/DD/YYYY HH24:MI:SS') AS lastupdated
      FROM moc
     ORDER BY moctitle;
END get_mocs;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOCUSERS" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          moc.mocid%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   mocuserid, mocusers.userid, users.fullname, users.userstatus,
               users.email
          FROM mocusers, users
         WHERE mocusers.mocid = mocidin AND mocusers.userid = users.userid
      ORDER BY fullname;
END get_mocusers;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_ACFTMDSTYPES" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          INTEGER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   acftmdstypecd, acftmdstypenm
          FROM acftmdstypes
         WHERE mocid = mocidin
      ORDER BY acftmdstypenm;
END get_moc_acftmdstypes;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_AIRCRAFT" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          INTEGER
)
AS
BEGIN
   OPEN p_cursor FOR
      SELECT   aircraftid, tailnumber, aircraftyear, aircraftmdsid,
               serialnumber, misequipid, flightid,
               (SELECT (RTRIM (aircraftmds) || ' / ' || LTRIM (blocknumber)
                       )
                  FROM aircraftmds
                 WHERE aircraftmds.aircraftmdsid = aircraft.aircraftmdsid)
                                                                AS mds_block,
               (SELECT flightname
                  FROM flights
                 WHERE flights.flightid = aircraft.flightid) AS flightname,
               locationcode, locationid, squadronid, aircraft.countrycode,
               currententerpriselocationcode, unitid
          FROM aircraft
         WHERE mocid = mocidin
      ORDER BY tailnumber;
END get_moc_aircraft;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_AIRCRAFTMDS" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          INTEGER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   aircraftmdsid, aircraftmds,
        NVL (numberofstations, 0) AS numberofstations,
               NVL (numberofengines, 0) AS numberofengines,
      NVL (timebetweenphase, 0) AS timebetweenphase,
               NVL (defaultaircrafttype, 0) AS defaultmds,
      phaseunit,
               blocknumber,
               (RTRIM (aircraftmds) || ' / ' || LTRIM (blocknumber)
               ) AS mds_block,
               acftmdstypecd,
               (SELECT acftmdstypenm
                  FROM acftmdstypes
                 WHERE acftmdstypecd =
                                   aircraftmds.acftmdstypecd
                   AND mocid = mocidin) AS acftmdstypenm
          FROM aircraftmds
         WHERE mocid = mocidin
      ORDER BY aircraftmds;
END get_moc_aircraftmds;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_AREAS" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          INTEGER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   areaid, area, areadescription, mocid
          FROM areas
         WHERE mocid = mocidin
      ORDER BY area;
END get_moc_areas;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_ARMAMENTS" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          INTEGER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   armamentid, armament.aircraftmdsid, aircraftmds.aircraftmds,
               (aircraftmds || ' / ' || blocknumber) AS mds_block,
               armament.ordnanceid, ordnance.ordnance, station
          FROM armament, aircraftmds, ordnance
         WHERE armament.aircraftmdsid = aircraftmds.aircraftmdsid
           AND armament.ordnanceid = ordnance.ordnanceid
           AND armament.mocid = mocidin
      ORDER BY station;
END get_moc_armaments;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_ASSIGNMENTS" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          INTEGER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   assignmentcodeid, assignmentcode, assignmentdescription,
               NVL (defaultassignment, 0) AS defaultassignment, mocid
          FROM assignmentcodes
         WHERE mocid = mocidin
      ORDER BY assignmentcode;
END get_moc_assignments;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_AUCS" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          INTEGER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   utilcodeid, utilizationcode, aucnarrative, programelementcode,
               utilizationcodes.camsinit,
               utilizationcodes.missiondesignseries, utilizationcodes.mocid
          FROM utilizationcodes
         WHERE utilizationcodes.mocid = mocidin
      ORDER BY utilizationcode ASC;
END get_moc_aucs;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_CACHED_LISTS" (
   mocidin                        INTEGER,
   crewchiefs               OUT   emoc_types.emoc_cursor,
   conditioncodes           OUT   emoc_types.emoc_cursor,
   hangarqueenstatuscodes   OUT   emoc_types.emoc_cursor,
   possessioncodes          OUT   emoc_types.emoc_cursor,
   squadronnames            OUT   emoc_types.emoc_cursor,
   mdslist                  OUT   emoc_types.emoc_cursor,
   statuscodes              OUT   emoc_types.emoc_cursor,
   locations                OUT   emoc_types.emoc_cursor,
   joapcodes                OUT   emoc_types.emoc_cursor,
   semedxcodes              OUT   emoc_types.emoc_cursor,
   fuelcodes                OUT   emoc_types.emoc_cursor,
   symbolsconds             OUT   emoc_types.emoc_cursor,
   transitionrules          OUT   emoc_types.emoc_cursor,
   firesymbols              OUT   emoc_types.emoc_cursor,
   stationloccodes          OUT   emoc_types.emoc_cursor,
   weaponsclass             OUT   emoc_types.emoc_cursor,
   workcenters              OUT   emoc_types.emoc_cursor,
   wings                    OUT   emoc_types.emoc_cursor
)
AS
BEGIN
   OPEN crewchiefs FOR
      SELECT   crewchiefid, crewchief
          FROM crewchiefs
         WHERE mocid = mocidin
      ORDER BY crewchief;

   OPEN conditioncodes FOR
      SELECT   condcodeid, conditioncode
          FROM conditioncodes
         WHERE mocid = mocidin
      ORDER BY conditioncode;

   OPEN hangarqueenstatuscodes FOR
      SELECT   hqcodeid, hqcode, hqlevel
          FROM hanger_queen_code
         WHERE mocid = mocidin
      ORDER BY hqlevel;

   OPEN possessioncodes FOR
      SELECT   possessionid, possessioncode
          FROM possessions
         WHERE mocid = mocidin
      ORDER BY possessioncode;

   OPEN squadronnames FOR
      SELECT   wingid, squadronid, squadronname, shortname
          FROM squadrons
         WHERE mocid = mocidin
      ORDER BY squadronname;

   OPEN mdslist FOR
      SELECT   aircraftmdsid, aircraftmds, blocknumber, numberofstations,
               numberofengines
          FROM aircraftmds
         WHERE mocid = mocidin
      ORDER BY aircraftmds;

   OPEN statuscodes FOR
      SELECT   statuscodeid, statuscode, statuscodelabel, ordernumber,
               iconname, allowsortieupdate, takeoff, lastflown
          FROM statuscode
         WHERE mocid = mocidin
      ORDER BY ordernumber;

   OPEN locations FOR
      SELECT   locationid, locationcode
          FROM locations
         WHERE mocid = mocidin
      ORDER BY locationcode;

   OPEN joapcodes FOR
      SELECT   joapid, joapcode, joapdescription, redcapstatus
          FROM joap
         WHERE mocid = mocidin
      ORDER BY joapcode;

   OPEN semedxcodes FOR
      SELECT   semedxid, semedx
          FROM semedx
         WHERE mocid = mocidin
      ORDER BY semedx;

   OPEN fuelcodes FOR
      SELECT   fuelstatusid, fuelstatus, fueldescription, colorname,
               colorvalue, fontcolor, allowsortieupdate
          FROM fuel, colors
         WHERE fuel.colorid = colors.colorid AND fuel.mocid = mocidin
      ORDER BY fuelstatus;

   OPEN symbolsconds FOR
      SELECT   symbolid, symbols.condcodeid, conditioncode, symbol
          FROM symbols, conditioncodes
         WHERE symbols.condcodeid = conditioncodes.condcodeid
           AND symbols.mocid = mocidin
      ORDER BY symbolid;

   OPEN transitionrules FOR
      SELECT   statuscodeid, transition2id
          FROM statustransitionrule
         WHERE mocid = mocidin
      ORDER BY statuscodeid;

   OPEN firesymbols FOR
      SELECT   firesymbol, firesymbolid, ranking, defaultval
          FROM firesymbols
         WHERE mocid = mocidin
      ORDER BY ranking;

   OPEN stationloccodes FOR
      SELECT   staloccodeid, stationloc
          FROM stationloccodes
         WHERE mocid = mocidin
      ORDER BY stationloc;

   OPEN weaponsclass FOR
      SELECT   weaponsclassid, weaponsclass
          FROM weaponsclass
         WHERE mocid = mocidin
      ORDER BY weaponsclass;

   OPEN workcenters FOR
      SELECT   workcenterid, workcentercode, workcentername, wingid
          FROM workcenters
         WHERE mocid = mocidin
      ORDER BY workcentercode;

   OPEN wings FOR
      SELECT   wings.unitid, wings.wingname, elc
          FROM wings
         WHERE mocid = mocidin
      ORDER BY wings.wingname;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      NULL;
END get_moc_cached_lists;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_CAMSCONTROL" (interfaceenabled OUT interfacecontrol.interfaceenabled%TYPE,
                                                lastupdated      OUT VARCHAR2,
                                                updatedby        OUT interfacecontrol.interfacename%TYPE,
                                                mocidin          interfacecontrol.mocid%TYPE) AS
BEGIN
  SELECT interfaceenabled,
         TO_CHAR(lastupdate, 'MM/DD/YYYY HH24:MI:SS'),
         (SELECT fullname
            FROM users
           WHERE users.userid = interfacecontrol.lastupdateby)
    INTO interfaceenabled, lastupdated, updatedby
    FROM interfacecontrol
   WHERE TRIM(interfacename) = 'CAMS'
     AND mocid = mocidin;
END get_moc_camscontrol;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_CAUSECODES" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          INTEGER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   causecodes.causecodeid, causecodes.causecode,
               causecodes.description, mocid,
               NVL (defaultcausecode, 0) AS defaultcausecode,
               NVL (causecodes.causecodetype, 'O') AS causecodetype
          FROM causecodes
         WHERE mocid = mocidin
      ORDER BY causecodes.causecode ASC;
END get_moc_causecodes;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_COLORRULES" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          INTEGER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   colorrulesid, colorrules.colorrank, colorrules.codetype,
               colorrules.colorid,
               (SELECT colors.colorname
                  FROM colors
                 WHERE colorid = colorrules.colorid) AS colorname,
               (SELECT colors.colorvalue
                  FROM colors
                 WHERE colorid = colorrules.colorid) AS colorvalue
          FROM colorrules
         WHERE mocid = mocidin
      ORDER BY codetype, colorrank;
END get_moc_colorrules;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_COLORS" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          INTEGER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   colorid, colorname, colorvalue, fontcolor, mocid
          FROM colors
         WHERE mocid = mocidin
      ORDER BY colorname;
END get_moc_colors;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_COMBATSCLRULES" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          INTEGER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   sclrulesid, combatsclrules.aircraftmdsid,
               combatsclrules.combatsclid, aircraftmds.aircraftmds,
               (aircraftmds || ' / ' || blocknumber) AS mds_block,
               combatscls.combatscl
          FROM combatsclrules, combatscls, aircraftmds
         WHERE combatsclrules.aircraftmdsid = aircraftmds.aircraftmdsid
           AND combatsclrules.combatsclid = combatscls.combatsclid
           AND combatsclrules.mocid = mocidin
      ORDER BY aircraftmds, combatscl;
END get_moc_combatsclrules;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_COMBATSCLS" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          INTEGER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   combatsclid, combatscl, mocid
          FROM combatscls
         WHERE mocid = mocidin
      ORDER BY combatscl;
END get_moc_combatscls;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_CONDITIONCODES" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          INTEGER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   conditioncodes.condcodeid, conditioncodes.conditioncode,
               conditioncodes.conditiondescription,
               NVL(conditioncodes.defaultconditioncode,0) AS defaultconditioncode,
               conditioncodes.condstatid, conditionstatus.conditionstatus,
               conditioncodes.mocid
          FROM conditioncodes, conditionstatus
         WHERE conditioncodes.condstatid = conditionstatus.condstatid
           AND conditioncodes.mocid = mocidin
      ORDER BY conditioncodes.conditioncode ASC;
END get_moc_conditioncodes;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_CONDITIONSTATUS" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          INTEGER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   conditionstatus.condstatid, conditionstatus.conditionstatus,
               conditionstatus.conditionlevel, conditionstatus.flyable,
               conditionstatus.colorid,
               (SELECT colors.colorname
                  FROM colors
                 WHERE colors.colorid = conditionstatus.colorid)
                                                                AS colorname,
               (SELECT colors.colorvalue
                  FROM colors
                 WHERE colors.colorid = conditionstatus.colorid)
                                                               AS colorvalue,
               conditionstatus.mocid
          FROM conditionstatus
         WHERE conditionstatus.mocid = mocidin
      ORDER BY conditionstatus.conditionstatus ASC;
END get_moc_conditionstatus;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_CREWCHIEFS" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          INTEGER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   crewchiefid, crewchief, NVL(defaultcrewchief,0) AS defaultcrewchief, picture, rankid,
               (SELECT ranks.rankcode
                  FROM ranks
                 WHERE ranks.rankid = crewchiefs.rankid) AS rankcode, mocid
          FROM crewchiefs
         WHERE mocid = mocidin
      ORDER BY crewchief;
END get_moc_crewchiefs;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_CUSTOMDATA" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          INTEGER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT DISTINCT customdata.*, colors.colorname
                 FROM customdata LEFT JOIN colors ON customdata.bgcolorvalue =
                                                            colors.colorvalue
                WHERE customdata.mocid = mocidin
             ORDER BY customdata.customdatalabel ASC;
END get_moc_customdata;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_DEVIATIONCODES" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          INTEGER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   deviationcodes.deviationcodeid, deviationcodes.deviationcode,
               deviationcodes.deviationdescription,
               NVL(deviationcodes.defaultdeviationcode,0) as defaultdeviationcode, deviationcodes.colorid,
               colors.colorname, colors.colorvalue, deviationcodes.mocid
          FROM deviationcodes, colors
         WHERE deviationcodes.colorid = colors.colorid
           AND deviationcodes.mocid = mocidin
      ORDER BY deviationcodes.deviationcode ASC;
END get_moc_deviationcodes;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_EMOCCONFIGDATA" (
   mocidin          IN       emocconfig.mocid%TYPE,
   timezonefactor   OUT      emocconfig.timezonefactor%TYPE,
   timezonehours    OUT      emocconfig.timezonehours%TYPE,
   gmtfactor        OUT      emocconfig.gmtfactor%TYPE,
   gmthours         OUT      emocconfig.gmthours%TYPE,
   VERSION          OUT      emocconfig.VERSION%TYPE,
   basename         OUT      emocconfig.basename%TYPE,
   etictimer        OUT      emocconfig.etictimer%TYPE,
   archivedom       OUT      emocconfig.archivedom%TYPE,
   archivepurgemo   OUT      emocconfig.archivepurgemo%TYPE,
   scheduledow      OUT      emocconfig.scheduledow%TYPE,
   scheduletime     OUT      emocconfig.scheduletime%TYPE,
   updated          OUT      emocconfig.basename%TYPE,
   updatedby        OUT      emocconfig.basename%TYPE,
   schedulepath     OUT      emocconfig.schedulepath%TYPE,
   templatepath     OUT      emocconfig.templatepath%TYPE,
   archivepath      OUT      emocconfig.archivepath%TYPE,
   headercolor      OUT      emocconfig.headercolor%TYPE,
   smtpserver       OUT      emocconfig.smtpserver%TYPE,
   docspath         OUT      emocconfig.docspath%TYPE,
   proxyurl         OUT      emocconfig.proxyurl%TYPE,
   proxyuserid      OUT      emocconfig.proxyuserid%TYPE,
   proxypassword    OUT      emocconfig.proxypassword%TYPE,
   proxyenabled     OUT      emocconfig.proxyenabled%TYPE
)
AS
BEGIN
   SELECT timezonefactor, timezonehours, gmtfactor, gmthours, VERSION,
          basename, etictimer, archivedom, archivepurgemo, scheduledow,
          scheduletime, TO_CHAR (lastupdated, 'MM/DD/YYYY HH24:MI:SS'),
          (SELECT fullname
             FROM users
            WHERE users.userid = emocconfig.lastupdatedby), schedulepath,
          templatepath, archivepath, docspath, headercolor, smtpserver,
          proxyurl, proxyuserid, proxypassword, proxyenabled
     INTO timezonefactor, timezonehours, gmtfactor, gmthours, VERSION,
          basename, etictimer, archivedom, archivepurgemo, scheduledow,
          scheduletime, updated,
          updatedby, schedulepath,
          templatepath, archivepath, docspath, headercolor, smtpserver,
          proxyurl, proxyuserid, proxypassword, proxyenabled
     FROM emocconfig
    WHERE mocid = mocidin;

   IF LENGTH (NVL (proxypassword, '')) > 0
   THEN
      proxypassword := emoc_security.decrypt (proxypassword);
   ELSE
      proxypassword := '';
   END IF;
END get_moc_emocconfigdata;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_FIRESYMBOLS" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          INTEGER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   firesymbolid, firesymbol, description, NVL(defaultval,0) AS defaultval, ranking,
               mocid
          FROM firesymbols
         WHERE mocid = mocidin
      ORDER BY firesymbol;
END get_moc_firesymbols;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_FLIGHTS" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin integer
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   flightid, flights.squadronid, flightname,
               flights.workcenterid,
               (SELECT workcenters.workcentercode
                  FROM workcenters
                 WHERE workcenters.workcenterid =
                                       flights.workcenterid)
                                                           AS workcentercode,
               (SELECT workcenters.porgid
                  FROM workcenters
                 WHERE workcenters.workcenterid =
                                                flights.workcenterid)
                                                                    AS orgid,
               (SELECT workcenters.unit_id
                  FROM workcenters
                 WHERE workcenters.workcenterid =
                                              flights.workcenterid)
                                                                  AS unit_id,
               (SELECT squadrons.squadronname
                  FROM squadrons
                 WHERE squadrons.squadronid =
                                           flights.squadronid)
                                                             AS squadronname
          FROM flights
      ORDER BY flightname;
END get_moc_flights;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_FUELS" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          INTEGER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   fuelstatusid, fuelstatus, fueldescription, landing,
               fuelstatuslabel, allowsortieupdate, NVL(defaultfuel, 0) AS defaultfuel,
      colorid,fuel.mocid,
               (SELECT colorname
                  FROM colors
                 WHERE colors.colorid = fuel.colorid) AS colorname,
               (SELECT colorvalue
                  FROM colors
                 WHERE colors.colorid = fuel.colorid) AS colorvalue,
                (SELECT fontcolor
                  FROM colors
                 WHERE colors.colorid = fuel.colorid) AS fontcolor
          FROM fuel
         WHERE fuel.mocid = mocidin
      ORDER BY fuelstatus ASC;
END get_moc_fuels;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_HQCODES" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          INTEGER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   hqcodeid, hqcode, hqdescription, hqlevel, NVL(hqdefault, 0) AS hqdefault, mocid
          FROM hanger_queen_code
         WHERE mocid = mocidin
      ORDER BY hqcode;
END get_moc_hqcodes;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_ICONTROL" (interfacenamein  interfacecontrol.interfacename%TYPE,
                                             interfaceenabled OUT interfacecontrol.interfaceenabled%TYPE,
                                             lastupdated      OUT VARCHAR2,
                                             updatedby        OUT interfacecontrol.interfacename%TYPE,
                                             mocidin          interfacecontrol.MOCID%TYPE) AS
BEGIN
  SELECT interfaceenabled,
         TO_CHAR(lastupdate, 'MM/DD/YYYY HH24:MI:SS'),
         (SELECT fullname
            FROM users
           WHERE users.userid = interfacecontrol.lastupdateby)
    INTO interfaceenabled, lastupdated, updatedby
    FROM interfacecontrol
   WHERE trim(interfacename) = interfacenamein
     AND mocid = mocidin;
END get_moc_icontrol;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_ICONTROL_STATUS" (
   interfaceenabledout   OUT   NUMBER,
   interfacenamein             interfacecontrol.interfacename%TYPE,
   mocidin                     interfacecontrol.mocid%TYPE
)
AS
   enabled   NUMBER (1);
BEGIN
   SELECT interfaceenabled
     INTO enabled
     FROM interfacecontrol
    WHERE interfacename = interfacenamein AND mocid = mocidin;

   interfaceenabledout := enabled;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      NULL;
END get_moc_icontrol_status;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_INTERFACECONTROLREC" (interfacenamein  interfacecontrol.interfacename%TYPE,
                                                        tbmcsemail       OUT emocconfig.tbmcsemail%TYPE,
                                                        tbmcstimer       OUT emocconfig.tbmcstimer%TYPE,
                                                        interfaceenabled OUT interfacecontrol.interfaceenabled%TYPE,
                                                        lastupdated      OUT VARCHAR2,
                                                        updatedby        OUT interfacecontrol.interfacename%TYPE,
                                                        mocidin          interfacecontrol.mocid%TYPE) AS
BEGIN
  SELECT tbmcsemail, tbmcstimer
    INTO tbmcsemail, tbmcstimer
    FROM emocconfig
   WHERE emocconfigid = mocidin;

  SELECT interfaceenabled,
         TO_CHAR(lastupdate, 'MM/DD/YYYY HH24:MI:SS'),
         (SELECT fullname
            FROM users
           WHERE users.userid = interfacecontrol.lastupdateby)
    INTO interfaceenabled, lastupdated, updatedby
    FROM interfacecontrol
   WHERE TRIM(interfacename) = TRIM(interfacenamein)
     AND mocid = mocidin;
END get_moc_interfacecontrolrec;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_INTERFACECONTROLSTATUS" (
   interfaceenabledout   OUT   NUMBER,
   interfacenamein             interfacecontrol.interfacename%TYPE,
   mocidin                     NUMBER
)
AS
   enabled   NUMBER (1);
BEGIN
   SELECT interfaceenabled
     INTO enabled
     FROM interfacecontrol
    WHERE interfacename = interfacenamein AND mocid = mocidin;

   interfaceenabledout := enabled;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      NULL;
END get_moc_interfacecontrolstatus;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_INTERFACEITEMS" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          NUMBER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   interfacecontrolid, interfaceitemid, itemname,
               itemdescription, itemenabled, tric, lastupdate,
               (SELECT fullname
                  FROM users
                 WHERE userid = interfaceitems.lastupdatedby) AS updatedby,
               mocid
          FROM interfaceitems
         WHERE mocid = mocidin
      ORDER BY itemname;
END get_moc_interfaceitems;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_INTERFACEITEM_STATUS" (
   itemstatus   OUT   interfaceitems.itemenabled%TYPE,
   tricin             interfaceitems.tric%TYPE,
   mocidin            INTEGER
)
AS
   status   NUMBER;
BEGIN
   SELECT itemenabled
     INTO status
     FROM interfaceitems
    WHERE tric = tricin AND mocid = mocidin;

   itemstatus := status;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      NULL;
END get_moc_interfaceitem_status;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_INTERFACELOG" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          interfacelog.mocid%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   interfacelogid, interfacelog.interfacecontrolid,
               interfacename, interfaceenabled, transactiontype,
               TO_CHAR (timeofinsert, 'MM/DD/YY HH24:MI') "INSERTED",
               interfacelog.aircraftid,
               (SELECT misequipid
                  FROM aircraft
                 WHERE aircraftid = interfacelog.aircraftid) AS equipid,
               xmlin, xmlout,
               (SELECT fullname
                  FROM users
                 WHERE users.userid = interfacelog.userid) AS controller,
               (SELECT tric
                  FROM interfaceitems
                 WHERE itemname = interfacelog.transactiontype) AS tric
          FROM interfacelog, interfacecontrol
         WHERE interfacelog.mocid = mocidin
           AND interfacelog.interfacecontrolid =
                                           interfacecontrol.interfacecontrolid
      ORDER BY interfacelogid DESC;
END get_moc_interfacelog;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_INTERFACES" (p_cursor OUT emoc_types.emoc_cursor,
                                               mocidin  interfacecontrol.mocid%TYPE) AS
BEGIN
  -- RETURN THE CURSOR FOR THE RECORDSET
  OPEN p_cursor FOR
    SELECT interfacecontrolid,
           interfacename,
           currentstatus,
           interfaceenabled,
           (SELECT fullname
              FROM users
             WHERE users.userid = interfacecontrol.lastupdateby) AS lastupdateby,
           lastupdate
      FROM interfacecontrol
     WHERE mocid = mocidin
     ORDER BY interfacename;
END get_moc_interfaces;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_JOAPCOLORRULES" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          NUMBER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   colorrulesid, colorrules.colorid, colors.colorname
          FROM colorrules, colors
         WHERE colorrules.colorid = colors.colorid
           AND colorrules.codetype = 'JOAP'
           AND colorrules.mocid = mocidin
      ORDER BY colorname;
END get_moc_joapcolorrules;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_JOAPS" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          NUMBER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   joap.joapid, joap.joapcode, joap.joapdescription,
               joap.landing, joap.redcapstatus, joap.defaultjoap,
               joap.colorrulesid, joap.mocid, colorrules.colorid,
               colorrules.colorrank, colorrules.codetype, colors.colorname,
               colors.colorvalue, colors.fontcolor
          FROM joap, colorrules, colors
         WHERE (    (colors.colorid(+) = colorrules.colorid)
                AND (colorrules.colorrulesid(+) = joap.colorrulesid)
                AND (joap.mocid = mocidin)
               )
      ORDER BY joapcode;
END get_moc_joaps;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_LANDINGCODES" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          NUMBER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   landingcodes.landingcodeid, landingcodes.landingcode,
               landingcodes.landingcodedescription,
               landingcodes.writeupneeded, mocid
          FROM landingcodes
         WHERE mocid = mocidin
      ORDER BY landingcodes.landingcode ASC;
END get_moc_landingcodes;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_LOCATIONID" (
   codein          locations.locationcode%TYPE,
   elcin           locations.elc%TYPE,
   mocidin         locations.mocid%TYPE,
   idout     OUT   locations.locationid%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   SELECT locationid
     INTO idout
     FROM (SELECT locationid
             FROM locations
            WHERE locationcode = codein
              AND elc = elcin
              AND mocid = mocidin
              AND ROWNUM < 2);
END get_moc_locationid;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_LOCATIONS" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          NUMBER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   locationid, locationcode, locationname, maximumoccupancy,
               NVL (defaultlocation, 0) AS defaultlocation, nvl(elc,'') as elc, mocid
          FROM locations
         WHERE mocid = mocidin
      ORDER BY locationcode;
END get_moc_locations;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_MAJCOMS" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          NUMBER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   majcomid, majcom, majcomnarrative, comid, comcode, camsinit,
               mocid
          FROM majcoms
         WHERE mocid = mocidin
      ORDER BY majcom;
END get_moc_majcoms;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_MISSIONS" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          NUMBER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   missionid, LPAD (mission, 10, ' ') AS mission,
               missiondescription, mocid
          FROM missions
         WHERE mocid = mocidin
      ORDER BY mission;
END get_moc_missions;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_ORDNANCE" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          NUMBER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   ordnanceid, ordnance, configuration, ordnance.weaponstypeid,
               (SELECT weapontype
                  FROM weapontypes
                 WHERE weaponstypeid = ordnance.weaponstypeid) AS weapontype,
               mocid
          FROM ordnance
         WHERE mocid = mocidin
      ORDER BY ordnance;
END get_moc_ordnance;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_ORGANIZATIONS" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          NUMBER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   organizationsid, orgid, orgname,
               (orgname || ': ' || orgid) AS nameid, station_location_code,
               unit_id, wingid, camsinit, mocid
          FROM organizations
         WHERE mocid = mocidin
      ORDER BY orgname;
END get_moc_organizations;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_PILOTS" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          NUMBER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   pilotid, pilotname, pilot.rankid, pilot.squadronid,
               (SELECT ranks.rankcode
                  FROM ranks
                 WHERE ranks.rankid = pilot.rankid) AS rankcode,
               (SELECT squadrons.shortname
                  FROM squadrons
                 WHERE pilot.squadronid = squadrons.squadronid) AS shortname,
               (SELECT squadrons.squadronname
                  FROM squadrons
                 WHERE pilot.squadronid =
                                         squadrons.squadronid)
                                                             AS squadronname,
               mocid
          FROM pilot
         WHERE mocid = mocidin
      ORDER BY pilotname;
END get_moc_pilots;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_POSSESSIONCODES" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          NUMBER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   possessionid, possessioncode, possessiondescription,
               defaultpossession, mocid
          FROM possessions
         WHERE mocid = mocidin
      ORDER BY possessioncode;
END get_moc_possessioncodes;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_RANGES" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          NUMBER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   rangeid, RANGE, rangedescription, mocid
          FROM ranges
         WHERE mocid = mocidin
      ORDER BY RANGE;
END get_moc_ranges;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_RANKS" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          NUMBER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   rankid, rankcode, rankdescription, defaultrank, gradecode, mocid
          FROM ranks
         WHERE mocid = mocidin
      ORDER BY rankcode;
END get_moc_ranks;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_RANKS_DROPDOWN_LISTS" (
   crewchiefs               OUT   emoc_types.emoc_cursor,
   conditioncodes           OUT   emoc_types.emoc_cursor,
   hangarqueenstatuscodes   OUT   emoc_types.emoc_cursor,
   possessioncodes          OUT   emoc_types.emoc_cursor,
   squadronnames            OUT   emoc_types.emoc_cursor,
   mdslist                  OUT   emoc_types.emoc_cursor,
   statuscodes              OUT   emoc_types.emoc_cursor,
   locations                OUT   emoc_types.emoc_cursor,
   joapcodes                OUT   emoc_types.emoc_cursor,
   semedxcodes              OUT   emoc_types.emoc_cursor,
   fuelcodes                OUT   emoc_types.emoc_cursor,
   symbolsconds             OUT   emoc_types.emoc_cursor,
   transitionrules          OUT   emoc_types.emoc_cursor,
   firesymbols              OUT   emoc_types.emoc_cursor,
   stationloccodes          OUT   emoc_types.emoc_cursor,
   weaponsclass             OUT   emoc_types.emoc_cursor,
   workcenters              OUT   emoc_types.emoc_cursor,
   wings                    OUT   emoc_types.emoc_cursor,
   mocidin                        NUMBER
)
AS
BEGIN
   OPEN crewchiefs FOR
      SELECT   crewchiefid, crewchief
          FROM crewchiefs
         WHERE mocid = mocidin
      ORDER BY crewchief;

   OPEN conditioncodes FOR
      SELECT   condcodeid, conditioncode
          FROM conditioncodes
         WHERE mocid = mocidin
      ORDER BY conditioncode;

   OPEN hangarqueenstatuscodes FOR
      SELECT   hqcodeid, hqcode, hqlevel
          FROM hanger_queen_code
         WHERE mocid = mocidin
      ORDER BY hqlevel;

   OPEN possessioncodes FOR
      SELECT   possessionid, possessioncode
          FROM possessions
         WHERE mocid = mocidin
      ORDER BY possessioncode;

   OPEN squadronnames FOR
      SELECT   wingid, squadronid, squadronname, shortname
          FROM squadrons
         WHERE mocid = mocidin
      ORDER BY squadronname;

   OPEN mdslist FOR
      SELECT   aircraftmdsid, aircraftmds, blocknumber, numberofstations,
               numberofengines
          FROM aircraftmds
         WHERE mocid = mocidin
      ORDER BY aircraftmds;

   OPEN statuscodes FOR
      SELECT   statuscodeid, statuscode, statuscodelabel, ordernumber,
               iconname, allowsortieupdate, takeoff, lastflown
          FROM statuscode
         WHERE mocid = mocidin
      ORDER BY ordernumber;

   OPEN locations FOR
      SELECT   locationid, locationcode
          FROM locations
         WHERE mocid = mocidin
      ORDER BY locationcode;

   OPEN joapcodes FOR
      SELECT   joapid, joapcode, joapdescription, redcapstatus
          FROM joap
         WHERE mocid = mocidin
      ORDER BY joapcode;

   OPEN semedxcodes FOR
      SELECT   semedxid, semedx
          FROM semedx
         WHERE mocid = mocidin
      ORDER BY semedx;

   OPEN fuelcodes FOR
      SELECT   fuelstatusid, fuelstatus, fueldescription, colorname,
               colorvalue, fontcolor, allowsortieupdate
          FROM fuel, colors
         WHERE fuel.colorid = colors.colorid AND fuel.mocid = mocidin
      ORDER BY fuelstatus;

   OPEN symbolsconds FOR
      SELECT   symbolid, symbols.condcodeid, conditioncode, symbol
          FROM symbols, conditioncodes
         WHERE symbols.condcodeid = conditioncodes.condcodeid
           AND symbols.mocid = mocidin
      ORDER BY symbolid;

   OPEN transitionrules FOR
      SELECT   statuscodeid, transition2id
          FROM statustransitionrule
         WHERE mocid = mocidin
      ORDER BY statuscodeid;

   OPEN firesymbols FOR
      SELECT   firesymbol, firesymbolid, ranking, defaultval
          FROM firesymbols
         WHERE mocid = mocidin
      ORDER BY ranking;

   OPEN stationloccodes FOR
      SELECT   staloccodeid, stationloc
          FROM stationloccodes
         WHERE mocid = mocidin
      ORDER BY stationloc;

   OPEN weaponsclass FOR
      SELECT   weaponsclassid, weaponsclass
          FROM weaponsclass
         WHERE mocid = mocidin
      ORDER BY weaponsclass;

   OPEN workcenters FOR
      SELECT   workcenterid, workcentercode, workcentername, wingid
          FROM workcenters
         WHERE mocid = mocidin
      ORDER BY workcentercode;

   OPEN wings FOR
      SELECT   wings.unitid, wings.wingname, elc
          FROM wings
         WHERE mocid = mocidin
      ORDER BY wings.wingname;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      NULL;
END get_moc_ranks_dropdown_lists;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_SECURITYMESSAGE" (
   messageout   OUT   messages.MESSAGE%TYPE,
   mocidin            NUMBER
)
AS
BEGIN
   SELECT TRIM (MESSAGE)
     INTO messageout
     FROM messages
    WHERE messages.messagetype = 'SEC' AND mocid = mocidin;
END get_moc_securitymessage;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_SEMEDXCOLORRULES" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          NUMBER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   colorrulesid, colorrules.colorid, colors.colorname,
               colors.colorvalue, colorrules.mocid
          FROM colorrules, colors
         WHERE colorrules.colorid = colors.colorid
           AND colorrules.codetype = 'SEMEDX'
           AND colorrules.mocid = mocidin
      ORDER BY colorname;
END get_moc_semedxcolorrules;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_SEMEDXS" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          NUMBER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   colors.colorname, colors.colorvalue, colors.fontcolor,
               colorrules.colorrank, colorrules.codetype, colorrules.colorid,
               semedx.semedxid, semedx.semedx, semedx.defaultval,
               semedx.colorrulesid, semedx.semedxdescription, semedx.mocid
          FROM semedx, colorrules, colors
         WHERE (    (semedx.colorrulesid = colorrules.colorrulesid(+))
                AND (colors.colorid(+) = colorrules.colorid)
                AND (semedx.mocid = mocidin)
               )
      ORDER BY semedx;
END get_moc_semedxs;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_SQUADRONS" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          INTEGER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   squadronid, squadronname, shortname, squadrons.colorid,
               squadrons.wingid,
               (SELECT colors.colorname
                  FROM colors
                 WHERE colorid = squadrons.colorid) AS colorname,
               (SELECT colors.colorvalue
                  FROM colors
                 WHERE colorid = squadrons.colorid) AS colorvalue,
               (SELECT wingname
                  FROM wings
                 WHERE wings.wingid = squadrons.wingid) AS wingname,
               (SELECT orgid
                  FROM organizations
                 WHERE squadrons.organizationsid =
                                       organizations.organizationsid)
                                                                    AS orgid,
               squadrons.organizationsid,
               (SELECT orgname || ': ' || orgid
                  FROM organizations
                 WHERE squadrons.organizationsid =
                                      organizations.organizationsid)
                                                                   AS nameid,
               squadrons.timeoffsetfrommoc
          FROM squadrons
         WHERE mocid = mocidin
      ORDER BY squadronname;
END get_moc_squadrons;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_STATIONLOCS" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          NUMBER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   staloccodeid, stationloc, stalocnarrative, camsinit,
               TO_CHAR (startdate, 'MM/DD/YYYY') AS startdate,
               TO_CHAR (stopdate, 'MM/DD/YYYY') AS stopdate, mocid
          FROM stationloccodes
         WHERE mocid = mocidin
      ORDER BY stationloc;
END get_moc_stationlocs;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_STATUSCODES" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          NUMBER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   statuscodeid, statuscode, ordernumber, iconname,
               defaultstatuscode, lastflown, flying, takeoff,
               statuscodelabel, allowsortieupdate, isrequired, mocid
          FROM statuscode
         WHERE mocid = mocidin
      ORDER BY ordernumber, statuscode;
END get_moc_statuscodes;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_STATUSRULES" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          NUMBER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   statruleid, statustransitionrule.statuscodeid,
               statustransitionrule.transition2id,
               (SELECT statuscode
                  FROM statuscode
                 WHERE statuscodeid =
                              statustransitionrule.statuscodeid)
                                                               AS fromstatus,
               (SELECT statuscode
                  FROM statuscode
                 WHERE statuscodeid =
                               statustransitionrule.transition2id)
                                                                 AS tostatus,
               mocid
          FROM statustransitionrule
         WHERE mocid = mocidin
      ORDER BY fromstatus;
END get_moc_statusrules;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_SYMBOLS" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          NUMBER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   symbolid, symbol, symboldescription, condcodeid,
               (SELECT conditioncode
                  FROM conditioncodes
                 WHERE conditioncodes.condcodeid =
                                          symbols.condcodeid)
                                                            AS conditioncode,
               mocid
          FROM symbols
         WHERE mocid = mocidin
      ORDER BY symbol;
END get_moc_symbols;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_TBMCSCONTROL" (
   tbmcstimer          OUT   emocconfig.tbmcstimer%TYPE,
   interfaceenabled    OUT   interfacecontrol.interfaceenabled%TYPE,
   interfaceuserid     OUT   interfacecontrol.interfaceuserid%TYPE,
   interfacepassword   OUT   interfacecontrol.interfacepassword%TYPE,
   lastupdated         OUT   VARCHAR2,
   updatedby           OUT   interfacecontrol.interfacename%TYPE,
   mocidin                   NUMBER
)
AS
BEGIN
   SELECT tbmcstimer
     INTO tbmcstimer
     FROM emocconfig
    WHERE mocid = mocidin;

   SELECT interfaceenabled, TO_CHAR (lastupdate, 'MM/DD/YYYY HH24:MI:SS'),
          (SELECT fullname
             FROM users
            WHERE users.userid = interfacecontrol.lastupdateby),
          interfaceuserid, emoc_security.decrypt(interfacepassword)
     INTO interfaceenabled, lastupdated,
          updatedby,
          interfaceuserid, interfacepassword
     FROM interfacecontrol
    WHERE TRIM (interfacename) = 'TBMCS-UL' AND mocid = mocidin;
END get_moc_tbmcscontrol;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_TBMCS_TRANSACTIONS" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          NUMBER
)
AS
BEGIN
   OPEN p_cursor FOR
      SELECT   *
          FROM tbmcsinterfacelog
         WHERE mocid = mocidin
      ORDER BY tbmcsmsgsent DESC;
END get_moc_tbmcs_transactions;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_TRANSIENTAIRCRAFT" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          NUMBER
)
AS
BEGIN
   OPEN p_cursor FOR
      SELECT   aircraftid, tailnumber, aircraftyear, aircraftmdsid,
               serialnumber, misequipid, flightid,
               currententerpriselocationcode,
               (SELECT (RTRIM (aircraftmds) || ' / ' || LTRIM (blocknumber)
                       )
                  FROM aircraftmds
                 WHERE aircraftmds.aircraftmdsid = aircraft.aircraftmdsid)
                                                                AS mds_block,
               (SELECT flightname
                  FROM flights
                 WHERE flights.flightid = aircraft.flightid) AS flightname,
               locationid, locationcode, aircraft.squadronid,
               squadrons.shortname, wings.wingid, wings.wingname,
               squadrons.timeoffsetfrommoc, wings.elc, wings.unitid
          FROM aircraft, squadrons, wings
         WHERE aircraft.squadronid = squadrons.squadronid
           AND squadrons.wingid = wings.wingid
           AND (   squadrons.shortname = 'TRANS'
                OR squadrons.squadronname = 'TRANSIENT'
               )
           AND aircraft.mocid = mocidin
      ORDER BY tailnumber;
END get_moc_transientaircraft;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_USERPERMISSIONS" (
   useridin         permissions.userid%TYPE,
   mocidin          moc.mocid%TYPE,
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   permissionid, permissions.userid, users.username,
               permissions.squadronid, squadrons.squadronname,
               squadrons.shortname, emocrole
          FROM permissions, squadrons, users
         WHERE permissions.userid = useridin
           AND permissions.userid = users.userid
           AND permissions.squadronid = squadrons.squadronid
           AND squadrons.mocid = mocidin
      ORDER BY squadronname;
END get_moc_userpermissions;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_USERS" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          NUMBER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   mocusers.userid, users.rankcode , users.username,
               users.fullname, users.lastlogin, users.email,
               users.portaluserid
          FROM mocusers
		    LEFT JOIN users ON mocusers.userid = users.userid
			where mocid = mocidin
      ORDER BY username;
END get_moc_users;



 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_WEAPONSCLASSES" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          NUMBER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   weaponsclassid, weaponsclass, defaultval, mocid
          FROM weaponsclass
         WHERE mocid = mocidin
      ORDER BY weaponsclass;
END get_moc_weaponsclasses;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_WEAPONTYPES" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          NUMBER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   weaponstypeid, weapontype, mocid
          FROM weapontypes
         WHERE mocid = mocidin
      ORDER BY weapontype;
END get_moc_weapontypes;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_WHENDISCOVEREDCODES" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          NUMBER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   whendiscoveredid, wdc,
               TO_CHAR (startdate, 'MM/DD/YYYY') AS startdate,
               TO_CHAR (stopdate, 'MM/DD/YYYY') AS stopdate, wdcnarrative,
               camsinit, mocid
          FROM whendiscoveredcodes
         WHERE mocid = mocidin
      ORDER BY wdc;
END get_moc_whendiscoveredcodes;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_WINGS" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          NUMBER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   wingid, wingname, unitid, commandcode, elc, defaultwing,
               scheduledow, scheduletime, mocid,
      timezonefactor,
      timezonehours,
      gmtfactor,
      gmthours,
      imdsinterfaceon
          FROM wings
         WHERE mocid = mocidin
      ORDER BY wingname;
END get_moc_wings;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_WORKCENTERS" (p_cursor OUT emoc_types.emoc_cursor,
                                                  mocidin  NUMBER) AS
BEGIN
  -- RETURN THE CURSOR FOR THE RECORDSET
  OPEN p_cursor FOR
    SELECT workcenterid,
           workcentercode,
           workcentername,
           porgid,
           (SELECT distinct (organizations.orgname) as orgname
              FROM organizations
             WHERE TRIM(organizations.orgid) = TRIM(workcenters.porgid)
               and organizations.mocid = mocidin) AS orgname,
           workcenters.unit_id,
           wingid,
           mocid
      FROM workcenters
     WHERE mocid = mocidin
     ORDER BY workcentercode;
END get_moc_workcenters;



 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_MOC_WXCODES" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          NUMBER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   wxcodeid, weathercode, weatherdescription, defaultweathercode,
               mocid
          FROM wx
         WHERE mocid = mocidin
      ORDER BY weathercode;
END get_moc_wxcodes;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_ORDNANCE" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   ordnanceid, ordnance, configuration, ordnance.weaponstypeid,
               (SELECT weapontype
                  FROM weapontypes
                 WHERE weaponstypeid = ordnance.weaponstypeid) AS weapontype
          FROM ordnance
      ORDER BY ordnance;
END get_ordnance;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_ORGANIZATIONS" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor
    FOR
       SELECT   organizationsid, orgid, orgname,
                (orgname || ': ' || orgid) AS nameid, station_location_code,
                unit_id, wingid, camsinit
           FROM organizations
       ORDER BY orgname;
END get_organizations;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_ORGS_BY_UNITID" (
   unitidin         organizations.unit_id%TYPE,
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor
    FOR
       SELECT   organizationsid, orgid, orgname,
                (orgname || ': ' || orgid) AS nameid, station_location_code,
                unit_id, wingid, camsinit
           FROM organizations
          WHERE unit_id = unitidin
       ORDER BY nameid;
END get_orgs_by_unitid;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_ORGS_BY_WINGID" (
   wingidin         organizations.wingid%TYPE,
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor
    FOR
       SELECT   organizationsid, orgid, orgname,
                (orgname || ': ' || orgid) AS nameid, station_location_code,
                unit_id, wingid, camsinit
           FROM organizations
          WHERE wingid = wingidin
       ORDER BY nameid;
END get_orgs_by_wingid;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_PASSWORDCHGDATE" (
   useridin         IN       oldpasswords.userid%TYPE,
   userpasswordin   IN       oldpasswords.userpassword%TYPE,
   chgdateout       OUT      oldpasswords.chgdate%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   SELECT chgdate
     INTO chgdateout
     FROM oldpasswords
    WHERE userid = useridin AND userpassword = userpasswordin;
END get_passwordchgdate;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_PILOTS" (p_cursor OUT emoc_types.emoc_cursor)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   pilotid, pilotname, pilot.rankid, pilot.squadronid,
               (SELECT ranks.rankcode
                  FROM ranks
                 WHERE ranks.rankid = pilot.rankid) AS rankcode,
               (SELECT squadrons.shortname
                  FROM squadrons
                 WHERE pilot.squadronid = squadrons.squadronid) AS shortname,
               (SELECT squadrons.squadronname
                  FROM squadrons
                 WHERE pilot.squadronid =
                                         squadrons.squadronid)
                                                             AS squadronname
          FROM pilot
      ORDER BY pilotname;
END get_pilots;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_POSSESSIONCODES" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   possessionid, possessioncode, possessiondescription,
               defaultpossession
          FROM possessions
      ORDER BY possessioncode;
END get_possessioncodes;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_POTHQBRIEF" (
MOCIDIN     AIRCRAFT.MOCID%TYPE,
P_CURSOR OUT EMOC_TYPES.EMOC_CURSOR
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR
SELECT AC.AIRCRAFTID AS hqbriefid,
    NULL AS show,--show, --not db, userd entered
    AM.AIRCRAFTMDS AS mds,
    AC.SHORTTAILNUMBER AS tailnumber,
    SQ.SHORTNAME AS squadron,
 SQ.SQUADRONID AS squadronid,
    TO_CHAR(AC.LASTFLOWNTIME, 'DD_MON_YY') AS lastflowndate,
    NULL AS projected, --projected, -- user enters
    TO_CHAR(AC.LASTFLOWNTIME + 31, 'DD_MON_YY') AS hqdate, --h/q date, --Last flown + 31 days
    CC.CONDITIONCODE AS status,
    AC.ETIC AS etic,
    NULL AS estimatedflydate, --estimated fly date, --user entered
    TRUNC(SYSDATE - AC.LASTFLOWNTIME) AS daysdown, --daysdown, --calculated from last flown date - today
    RM.REMARKS AS remarks
FROM AIRCRAFT AC
LEFT JOIN HANGER_QUEEN_CODE HQ ON AC.HANGERQUEENSTATUS = HQ.HQCODEID
LEFT JOIN AIRCRAFTMDS AM ON AC.AIRCRAFTMDSID = AM.AIRCRAFTMDSID
LEFT JOIN SQUADRONS SQ ON AC.SQUADRONID = SQ.SQUADRONID
LEFT JOIN CONDITIONCODES CC ON AC.CONDITIONCODEID = CC.CONDCODEID
LEFT JOIN REMARKS RM ON AC.REMARKSID = RM.REMARKSID
LEFT JOIN POSSESSIONS PS ON AC.POSSESSIONID = PS.POSSESSIONID
WHERE (SYSDATE - AC.LASTFLOWNTIME) > 20
AND (SYSDATE - AC.LASTFLOWNTIME) < 31
AND (PS.POSSESSIONCODE NOT LIKE 'P%' OR AC.POSSESSIONID IS NULL)
AND AC.MOCID = MOCIDIN;

END GET_POTHQBRIEF;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_RANGES" (p_cursor OUT emoc_types.emoc_cursor)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   rangeid, RANGE, rangedescription
          FROM ranges
      ORDER BY RANGE;
END get_ranges;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_RANK" (
   rankidin         ranks.rankid%TYPE,
   RANK       OUT   ranks.rankcode%TYPE
)
AS
BEGIN
   SELECT rankcode
     INTO RANK
     FROM ranks
    WHERE ranks.rankid = rankidin;
END get_rank;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_RANKS" (p_cursor OUT emoc_types.emoc_cursor)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   rankid, rankcode, rankdescription, defaultrank
          FROM ranks
      ORDER BY rankcode;
END get_ranks;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_RANKS_DROPDOWN_LISTS" (
   crewchiefs               OUT   emoc_types.emoc_cursor,
   conditioncodes           OUT   emoc_types.emoc_cursor,
   hangarqueenstatuscodes   OUT   emoc_types.emoc_cursor,
   possessioncodes          OUT   emoc_types.emoc_cursor,
   squadronnames            OUT   emoc_types.emoc_cursor,
   mdslist                  OUT   emoc_types.emoc_cursor,
   statuscodes              OUT   emoc_types.emoc_cursor,
   locations                OUT   emoc_types.emoc_cursor,
   joapcodes                OUT   emoc_types.emoc_cursor,
   semedxcodes              OUT   emoc_types.emoc_cursor,
   fuelcodes                OUT   emoc_types.emoc_cursor,
   symbolsconds             OUT   emoc_types.emoc_cursor,
   transitionrules          OUT   emoc_types.emoc_cursor,
   firesymbols              OUT   emoc_types.emoc_cursor,
   stationloccodes          OUT   emoc_types.emoc_cursor,
   weaponsclass             OUT   emoc_types.emoc_cursor,
   workcenters              OUT   emoc_types.emoc_cursor,
   wings                    OUT   emoc_types.emoc_cursor
)
AS
BEGIN
   OPEN crewchiefs FOR
      SELECT   crewchiefid, crewchief
          FROM crewchiefs
      ORDER BY crewchief;

   OPEN conditioncodes FOR
      SELECT   condcodeid, conditioncode
          FROM conditioncodes
      ORDER BY conditioncode;

   OPEN hangarqueenstatuscodes FOR
      SELECT   hqcodeid, hqcode, hqlevel
          FROM hanger_queen_code
      ORDER BY hqlevel;

   OPEN possessioncodes FOR
      SELECT   possessionid, possessioncode
          FROM possessions
      ORDER BY possessioncode;

   OPEN squadronnames FOR
      SELECT   wingid, squadronid, squadronname, shortname
          FROM squadrons
      ORDER BY squadronname;

   OPEN mdslist FOR
      SELECT   aircraftmdsid, aircraftmds, blocknumber, numberofstations,
               numberofengines
          FROM aircraftmds
      ORDER BY aircraftmds;

   OPEN statuscodes FOR
      SELECT   statuscodeid, statuscode, statuscodelabel, ordernumber,
               iconname, allowsortieupdate, takeoff, lastflown
          FROM statuscode
      ORDER BY ordernumber;

   OPEN locations FOR
      SELECT   locationid, locationcode, elc
          FROM locations
      ORDER BY locationcode;

   OPEN joapcodes FOR
      SELECT   joapid, joapcode, joapdescription, redcapstatus
          FROM joap
      ORDER BY joapcode;

   OPEN semedxcodes FOR
      SELECT   semedxid, semedx
          FROM semedx
      ORDER BY semedx;

   OPEN fuelcodes FOR
      SELECT   fuelstatusid, fuelstatus, fueldescription, colorname,
               colorvalue, fontcolor, allowsortieupdate
          FROM fuel, colors
         WHERE fuel.colorid = colors.colorid
      ORDER BY fuelstatus;

   OPEN symbolsconds FOR
      SELECT   symbolid, symbols.condcodeid, conditioncode, symbol
          FROM symbols, conditioncodes
         WHERE symbols.condcodeid = conditioncodes.condcodeid
      ORDER BY symbolid;

   OPEN transitionrules FOR
      SELECT   statuscodeid, transition2id
          FROM statustransitionrule
      ORDER BY statuscodeid;

   OPEN firesymbols FOR
      SELECT   firesymbol, firesymbolid, ranking, defaultval
          FROM firesymbols
      ORDER BY ranking;

   OPEN stationloccodes FOR
      SELECT   staloccodeid, stationloc, startdate, stopdate
          FROM stationloccodes
         WHERE startdate <= SYSDATE
           AND ((stopdate >= SYSDATE) OR (stopdate IS NULL))
      ORDER BY stationloc;

   OPEN weaponsclass FOR
      SELECT   weaponsclassid, weaponsclass
          FROM weaponsclass
      ORDER BY weaponsclass;

   OPEN workcenters FOR
      SELECT   workcenterid, workcentercode, workcentername, wingid
          FROM workcenters
      ORDER BY workcentercode;

   OPEN wings FOR
      SELECT   wings.unitid, wings.wingname, elc
          FROM wings
      ORDER BY wings.wingname;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      NULL;
END get_ranks_dropdown_lists;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_REMARKS" (
REMARKSIDIN		  REMARKS.REMARKSID%TYPE,
REMARKS		OUT	  REMARKS.REMARKS%TYPE

)
/******************************************************************************
   NAME:       GET_REMARKS
   PURPOSE:    Gets the REMARKS record

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        7/30/03      A.Mitchell       1. Created this procedure.

   PARAMETERS:
   INPUT:
   *REMARKSID
   OUTPUT:
   *REMARKS
   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/

AS

REMARKTEXT VARCHAR(4000);

BEGIN

	 SELECT REMARKS
	 INTO   REMARKTEXT
	 FROM   REMARKS
	 WHERE REMARKSID = REMARKSIDIN;

	 REMARKS := REMARKTEXT;

END GET_REMARKS;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_SCHEDID_BY_SQUADSORTIEACID" (
   squadin                     	 NUMBER,
   sortiedatein					 VARCHAR2,
   sortienumberin				 VARCHAR2,
   acidin						 NUMBER,
   schedid 				OUT		 NUMBER
)
AS
schedcnt NUMBER;
   /******************************************************************************
   NAME:       GET_SCHEDID_BY_SQUADSORTIEAIRCRAFTID
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     GET_SCHEDID_BY_SQUADSORTIEAIRCRAFTID
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       wings)

******************************************************************************/
BEGIN
   /*GET SCHEDEULID*/
   SELECT COUNT(*)
	   INTO schedcnt
	   FROM SCHEDULE
	  WHERE SQUADRONID = squadin
	    AND SORTIEDATE = sortiedatein
		AND SORTIENUM = sortienumberin
		AND AIRCRAFTID = acidin;
   IF schedcnt > 0 THEN
	 SELECT scheduleid
	   INTO schedid
	   FROM SCHEDULE
	  WHERE SQUADRONID = squadin
	    AND SORTIEDATE = sortiedatein
		AND SORTIENUM = sortienumberin
		AND AIRCRAFTID = acidin;
	ELSE
		schedid := NULL;
	END IF;

--EXCEPTION
 --  WHEN NO_DATA_FOUND
  -- THEN
  --    NULL;
 --  WHEN OTHERS
 --  THEN
      -- Consider logging the error and then re-raise
 --     RAISE;
END GET_SCHEDID_BY_SQUADSORTIEACID;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_SCHEDULEID_BY_BLOCK" (
P_CURSOR OUT 	  EMOC_TYPES.EMOC_CURSOR,
SQUADRONIDIN 	  SQUADRONS.SQUADRONID%TYPE,
SORTIEDATEIN	  SCHEDULE.SORTIEDATE%TYPE,
BLOCK			  SCHEDULE.BLOCKNUMBER%TYPE
)
/******************************************************************************
   NAME:       GET_SCHEDULEID_BY_BLOCK
   PURPOSE:    Returns Schedules for the specified squadron with
   			   text values for codes (JOAP, Fuel, etc.) filled.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        7/22/03      A.Mitchell       1. Created this procedure.

   PARAMETERS:
   INPUT:
   *SQUADRONIDIN
   *SORTIEDATE
   *BLOCK
   OUTPUT:
   *P_CURSOR
   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/

AS
BEGIN
	 	BEGIN
			OPEN P_CURSOR FOR
			SELECT SCHEDULEID
			FROM SCHEDULE
			WHERE SQUADRONID = SQUADRONIDIN
			AND SORTIEDATE = SORTIEDATEIN
			AND BLOCKNUMBER = BLOCK;
		END;

   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       Null;
     WHEN OTHERS THEN
       Null;
END GET_SCHEDULEID_BY_BLOCK;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_SCHEDULEOVERVIEWBRIEF"
  (
    P_CURSOR OUT EMOC_TYPES.EMOC_CURSOR,
    SORTIEDATEIN SCHEDULE.SORTIEDATE%TYPE,
    MOCIDIN SQUADRONS.MOCID%TYPE )
  /******************************************************************************
  NAME:       GET_SCHEDULE_BY_SQUADRON_TOTAL
  PURPOSE:    Returns Schedules for the specified squadron with
  text values for codes (JOAP, Fuel, etc.) filled.
  REVISIONS:
  Ver        Date        Author           Description
  ---------  ----------  ---------------  ------------------------------------
  2.2.2      10/5/2005   Joe Chaplin    To get data for Schedule Overview Brief
  4.0.0.2    7/10/2012   J. Long        Update to Deviation Code for QC 408
  PARAMETERS:
  INPUT:
  *SQUADRONIDIN
  *SORTIEDATESTART
  OUTPUT:
  *P_CURSOR
  RETURNED VALUE:
  CALLED BY:
  CALLS:
  EXAMPLE USE:
  ASSUMPTIONS:
  LIMITATIONS:
  ALGORITHM:
  NOTES:
  ******************************************************************************/
AS
BEGIN
  OPEN P_CURSOR FOR SELECT SC.SCHEDULEID
AS
  schedid,
  TO_CHAR(SC.SCHEDULEDTAKEOFF, 'DD_MON_YY HH24:MI')
AS
  schedto,
  TO_CHAR(SC.ACTUALTAKEOFF, 'DD_MON_YY HH24:MI')
AS
  actto,
  DECODE(TO_CHAR(SC.SPARE), '1', 'Y', 'N')
AS
  spare,
  SQ.SHORTNAME
AS
  squadron,
  SQ.SQUADRONID
AS
  squadronid,
  MD.AIRCRAFTMDS
AS
  acmds,
  LC.LANDINGCODE
AS
  landstatus,
  DECODE(DC.DEVIATIONCODE, NULL, DC2.DEVIATIONCODE, 'NONE', DC2.DEVIATIONCODE, DC.DEVIATIONCODE)
AS
  devcode,
  --CC.CAUSECODE as causecode,
  WX.WEATHERCODE
AS
  weathercode,
  SC.AIRCRAFTID
AS
  aircraftid,
  SC.SORTIENUM
AS
  linenum,
  --to_char(SC.SORTIEDATE, 'DD_MON_YY') as sortiedate,
  AC.SHORTTAILNUMBER
AS
  tailnumber,
  --SC.SQUADRONID as squadid,
  CO.COLORVALUE
AS
  color, --ROW COLOR FOR CONDITIONSTATUS
  ST.STATUSCODE
AS
  status,
  CO2.COLORVALUE
AS
  devcolor, --ROW COLOR FOR DEVIATIONS
  RE.REMARKS
AS
  remarks,
  SC.SCHEDULEREMARKS
AS
  schedremarks,
  SC.MAINTREMARKS
AS
  maintremarks,
  CO.FONTCOLOR
AS
  STATUSFONTCOLOR,
  PS.POSSESSIONCODE
AS
  possession,
  CS.FLYABLE
AS
  flyable FROM SCHEDULE SC LEFT JOIN AIRCRAFT AC ON SC.AIRCRAFTID = AC.AIRCRAFTID LEFT JOIN SQUADRONS SQ ON SC.SQUADRONID = SQ.SQUADRONID LEFT JOIN POSSESSIONS PS ON AC.POSSESSIONID = PS.POSSESSIONID LEFT JOIN AIRCRAFTMDS MD ON AC.AIRCRAFTMDSID = MD.AIRCRAFTMDSID LEFT JOIN LANDINGCODES LC ON SC.LANDINGCODEID = LC.LANDINGCODEID LEFT JOIN SCHEDULEDEVIATIONS SD ON SC.SCHEDULEID = SD.SCHEDULEID LEFT JOIN DEVIATIONCODES DC ON SD.DEVIATIONCODEID = DC.DEVIATIONCODEID LEFT JOIN DEVIATIONCODES DC2 ON SC.DEVIATIONCODEID = DC2.DEVIATIONCODEID LEFT JOIN CAUSECODES CC ON SC.CAUSECODEID = CC.CAUSECODEID LEFT JOIN WX ON SC.WXCODEID = WX.WXCODEID LEFT JOIN CONDITIONCODES CD ON AC.CONDITIONCODEID = CD.CONDCODEID LEFT JOIN CONDITIONSTATUS CS ON CD.CONDSTATID = CS.CONDSTATID LEFT JOIN COLORS CO ON CS.COLORID = CO.COLORID LEFT JOIN COLORS CO2 ON DC.COLORID = CO2.COLORID LEFT JOIN STATUSCODE ST ON AC.STATUSCODEID = ST.STATUSCODEID LEFT JOIN REMARKS RE ON RE.REMARKSID = SCHEDULEREMARKS JOIN WINGS WG ON
  SQ.WINGID                                                       = WG.WINGID WHERE SC.SORTIEDATE = SORTIEDATEIN AND SQ.MOCID = MOCIDIN;
EXCEPTION
WHEN NO_DATA_FOUND THEN
  NULL;
WHEN OTHERS THEN
  NULL;
END GET_SCHEDULEOVERVIEWBRIEF;

CREATE PROCEDURE         "EMOC3"."GET_SCHEDULE_BY_SQUADRON_TOTAL" (
P_CURSOR OUT    EMOC_TYPES.EMOC_CURSOR,
SQUADRONIDIN    SQUADRONS.SQUADRONID%TYPE,
SORTIEDATEIN   SCHEDULE.SORTIEDATE%TYPE
)
/******************************************************************************
   NAME:       GET_SCHEDULE_BY_SQUADRON_TOTAL
   PURPOSE:    Returns Schedules for the specified squadron with
         text values for codes (JOAP, Fuel, etc.) filled.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        5/14/03      A.Mitchell       1. Created this procedure.
   1.1    6/2/03    A.Mitchell  2. Changed SORTIEDATE to SCHEDDAY
   1.2    6/16/03    A.Mitchell  3. Added Schedule Deviations table support
   1.3    2/1/04    A.Mitchell  4. Added UNION used to show previous day's planes flying
   PARAMETERS:
   INPUT:
   *SQUADRONIDIN
   *SORTIEDATESTART
   OUTPUT:
   *P_CURSOR
   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/

AS

BEGIN

    OPEN P_CURSOR FOR
    SELECT SC.SCHEDULEID,
      SC.GO,
     SC.SCHEDULEDTAKEOFF,
     SC.SCHEDULEDLANDING,
     SC.ACTUALTAKEOFF,
     SC.ACTUALLANDING,
     SC.SPARE,
     SC.ADJTAKEOFF,
     SC.ADJLANDING,
     SC.AREAARRIVETIME,
     SC.AREALEAVETIME,
     SC.CALLSIGN,
     SQ.SQUADRONNAME,
     LC.LANDINGCODE,
     RG.RANGE,
     DC.DEVIATIONCODE,
     CC.CAUSECODE,
     WX.WEATHERCODE,
     MI.MISSION,
     AR.AREA,
     SC.AIRCRAFTID,
     PT.PILOTNAME,
     SC.SORTIENUM,
     SC.SORTIEMOD,
     SC.SORTIEDATE,
     AC.SHORTTAILNUMBER,
     AC.TAILNUMBER,
     SC.SQUADRONID,
     AC.LOCATIONCODE,
     CO.COLORVALUE,        --ROW COLOR FOR CONDITIONSTATUS
     MDS.AIRCRAFTMDS,
     ST.ICONNAME,
     ST.STATUSCODE,
     CO2.COLORVALUE ROWCOLOR, --ROW COLOR FOR DEVIATIONS
     FU.FUELSTATUS,
     SC.CONFIGCODE,
     SC.SORTIE_JOAP,
     SC.SORTIE_SEMEDX,
     SC.SCHEDDAY,
     REM1.REMARKS MAINTENANCEREMARKS,
     REM2.REMARKS,
     SC.SCHEDULEREMARKS,
     SC.MAINTREMARKS,
     WG.WINGID,
     WG.UNITID,
     NVL(SC.PUBLISHED_FLAG, 0) PUBLISHED_FLAG,
     AC.LASTFLOWNTIME,
     CO2.FONTCOLOR,
     AC.CHAFF,
     AC.FLARE,
     AC.TMEFLOWNSINCEPHASEDATE,
     SC.BLOCKNUMBER,
     SC.TYPE_EVENT,
     SC.SCHEDULESOURCE,
     CO.FONTCOLOR STATUSFONTCOLOR,
     CS.FLYABLE,
     SC.SWAPPEDLINE,
     AC.MISEQUIPID
    FROM SCHEDULE SC
     LEFT JOIN AIRCRAFT AC ON SC.AIRCRAFTID = AC.AIRCRAFTID
     LEFT JOIN SQUADRONS SQ ON SC.SQUADRONID = SQ.SQUADRONID
     LEFT JOIN LANDINGCODES LC ON SC.LANDINGCODEID = LC.LANDINGCODEID
     LEFT JOIN RANGES RG ON SC.RANGEID = RG.RANGEID
     LEFT JOIN DEVIATIONCODES DC ON SC.DEVIATIONCODEID = DC.DEVIATIONCODEID
     LEFT JOIN CAUSECODES CC ON SC.CAUSECODEID = CC.CAUSECODEID
     LEFT JOIN WX ON SC.WXCODEID = WX.WXCODEID
     LEFT JOIN MISSIONS MI ON SC.MISSIONID = MI.MISSIONID
     LEFT JOIN AREAS AR ON SC.AREAID = AR.AREAID
     LEFT JOIN PILOT PT ON SC.PILOTID = PT.PILOTID
     LEFT JOIN CONDITIONCODES CD ON AC.CONDITIONCODEID = CD.CONDCODEID
     LEFT JOIN CONDITIONSTATUS CS ON CD.CONDSTATID = CS.CONDSTATID
     LEFT JOIN COLORS CO ON CS.COLORID = CO.COLORID
     LEFT JOIN AIRCRAFTMDS MDS ON AC.AIRCRAFTMDSID = MDS.AIRCRAFTMDSID
     LEFT JOIN STATUSCODE ST ON AC.STATUSCODEID = ST.STATUSCODEID
     LEFT JOIN COLORS CO2 ON DC.COLORID = CO2.COLORID
     LEFT JOIN FUEL FU ON AC.FUELSTATUSID = FU.FUELSTATUSID
     LEFT JOIN REMARKS REM1 ON REM1.REMARKSID = MAINTREMARKS
     LEFT JOIN REMARKS REM2 ON REM2.REMARKSID = SCHEDULEREMARKS
     JOIN WINGS WG ON SQ.WINGID = WG.WINGID
    WHERE SC.SQUADRONID = SQUADRONIDIN
    AND SC.SORTIEDATE = SORTIEDATEIN
	AND SC.SPARE = 0
   UNION ALL
   SELECT SC.SCHEDULEID,
      SC.GO,
     SC.SCHEDULEDTAKEOFF,
     SC.SCHEDULEDLANDING,
     SC.ACTUALTAKEOFF,
     SC.ACTUALLANDING,
     SC.SPARE,
     SC.ADJTAKEOFF,
     SC.ADJLANDING,
     SC.AREAARRIVETIME,
     SC.AREALEAVETIME,
     SC.CALLSIGN,
     SQ.SQUADRONNAME,
     LC.LANDINGCODE,
     RG.RANGE,
     DC.DEVIATIONCODE,
     CC.CAUSECODE,
     WX.WEATHERCODE,
     MI.MISSION,
     AR.AREA,
     SC.AIRCRAFTID,
     PT.PILOTNAME,
     SC.SORTIENUM,
     SC.SORTIEMOD,
     SC.SORTIEDATE,
     AC.SHORTTAILNUMBER,
     AC.TAILNUMBER,
     SC.SQUADRONID,
     AC.LOCATIONCODE,
     CO.COLORVALUE,        --ROW COLOR FOR CONDITIONSTATUS
     MDS.AIRCRAFTMDS,
     ST.ICONNAME,
     ST.STATUSCODE,
     CO2.COLORVALUE ROWCOLOR, --ROW COLOR FOR DEVIATIONS
     FU.FUELSTATUS,
     SC.CONFIGCODE,
     SC.SORTIE_JOAP,
     SC.SORTIE_SEMEDX,
     SC.SCHEDDAY,
     REM1.REMARKS MAINTENANCEREMARKS,
     REM2.REMARKS,
     SC.SCHEDULEREMARKS,
     SC.MAINTREMARKS,
     WG.WINGID,
     WG.UNITID,
     NVL(SC.PUBLISHED_FLAG, 0) PUBLISHED_FLAG,
     AC.LASTFLOWNTIME,
     CO2.FONTCOLOR,
     AC.CHAFF,
     AC.FLARE,
     AC.TMEFLOWNSINCEPHASEDATE,
     SC.BLOCKNUMBER,
     SC.TYPE_EVENT,
     SC.SCHEDULESOURCE,
     CO.FONTCOLOR STATUSFONTCOLOR,
     CS.FLYABLE,
     SC.SWAPPEDLINE,
     AC.MISEQUIPID
    FROM SCHEDULE SC
     LEFT JOIN AIRCRAFT AC ON SC.AIRCRAFTID = AC.AIRCRAFTID
     LEFT JOIN SQUADRONS SQ ON SC.SQUADRONID = SQ.SQUADRONID
     LEFT JOIN LANDINGCODES LC ON SC.LANDINGCODEID = LC.LANDINGCODEID
     LEFT JOIN RANGES RG ON SC.RANGEID = RG.RANGEID
     LEFT JOIN DEVIATIONCODES DC ON SC.DEVIATIONCODEID = DC.DEVIATIONCODEID
     LEFT JOIN CAUSECODES CC ON SC.CAUSECODEID = CC.CAUSECODEID
     LEFT JOIN WX ON SC.WXCODEID = WX.WXCODEID
     LEFT JOIN MISSIONS MI ON SC.MISSIONID = MI.MISSIONID
     LEFT JOIN AREAS AR ON SC.AREAID = AR.AREAID
     LEFT JOIN PILOT PT ON SC.PILOTID = PT.PILOTID
     LEFT JOIN CONDITIONCODES CD ON AC.CONDITIONCODEID = CD.CONDCODEID
     LEFT JOIN CONDITIONSTATUS CS ON CD.CONDSTATID = CS.CONDSTATID
     LEFT JOIN COLORS CO ON CS.COLORID = CO.COLORID
     LEFT JOIN AIRCRAFTMDS MDS ON AC.AIRCRAFTMDSID = MDS.AIRCRAFTMDSID
     LEFT JOIN STATUSCODE ST ON AC.STATUSCODEID = ST.STATUSCODEID
     LEFT JOIN COLORS CO2 ON DC.COLORID = CO2.COLORID
     LEFT JOIN FUEL FU ON AC.FUELSTATUSID = FU.FUELSTATUSID
     LEFT JOIN REMARKS REM1 ON REM1.REMARKSID = MAINTREMARKS
     LEFT JOIN REMARKS REM2 ON REM2.REMARKSID = SCHEDULEREMARKS
     JOIN WINGS WG ON SQ.WINGID = WG.WINGID,
    (SELECT DISTINCT SS.SCHEDULEID, SS.STATUSCODEID
       FROM SCHEDULESTATUS SS
       JOIN SCHEDULE S ON S.SCHEDULEID = SS.SCHEDULEID
       JOIN STATUSCODE SC ON SS.STATUSCODEID = SC.STATUSCODEID
       WHERE SS.STATUSTYPE = 0
       AND S.SORTIEDATE < SORTIEDATEIN
       AND S.SQUADRONID = SQUADRONIDIN
       AND SS.STATUSTIME IN --Correlated Subquery
        (SELECT MAX(STATUSTIME) FROM SCHEDULESTATUS WHERE

SCHEDULEID = S.SCHEDULEID)
    )  LAST
    WHERE (LAST.STATUSCODEID = ST.STATUSCODEID AND STATUSCODE = 'Airborne')
    AND LAST.SCHEDULEID = SC.SCHEDULEID
    AND SC.SQUADRONID = SQUADRONIDIN
    AND SC.SORTIEDATE < SORTIEDATEIN
	AND SC.SPARE = 0
    AND ACTUALLANDING IS NULL
    ORDER BY SORTIEDATE, SORTIENUM, SCHEDULEID;

   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       NULL;
END GET_SCHEDULE_BY_SQUADRON_TOTAL;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_SCHEDULE_DEVIATION_BY_ID" (
P_CURSOR OUT 	  			EMOC_TYPES.EMOC_CURSOR,
SCHEDULEDEVIATIONIDIN		SCHEDULEDEVIATIONS.SCHEDULEDEVIATIONID%TYPE
)
/******************************************************************************
   NAME:       GET_SCHEDULE_DEVIATION_BY_ID
   PURPOSE:    Returns DEVIATION for the specified ID

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        7/3/03      A.Mitchell       1. Created this procedure.

   PARAMETERS:
   INPUT:
   *SCHEDULEDEVIATIONIDIN
   OUTPUT:
   *P_CURSOR
   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/

AS
BEGIN
	 OPEN P_CURSOR FOR
	 SELECT
	 		SD.STOPDATETIME,
			SD.STARTDATETIME,
			SD.SORTIENUM,
   			SD.SORTIEMOD,
			SD.SORTIEDATE,
			SD.SCHEDULEID,
   			SD.SCHEDULEDEVIATIONID,
			SD.NEWCAUSECODE NEWCAUSECODEID,
			SD.MAINTENANCEEVENTID,
   			RM.REMARKS,
			SD.DEVIATIONCODEID,
  			SD.CHARGEABLE,
			SD.CAUSECODEID,
			SD.ACTIONOPTIONS,
			DV.DEVIATIONCODE,
			CC.CAUSECODE,
			CC2.CAUSECODE NEWCAUSECODE,
			AC.SHORTTAILNUMBER,
			SC.BLOCKNUMBER,
			RM.REMARKS DEVIATIONSREMARKS,
			RM.REMARKSID,
			WG.WINGID,
			WG.UNITID,
			SC.SQUADRONID,
			SD.INTERFACELOGID,
			AC.MISEQUIPID
	FROM SCHEDULEDEVIATIONS SD
	LEFT JOIN DEVIATIONCODES DV ON SD.DEVIATIONCODEID = DV.DEVIATIONCODEID
	LEFT JOIN CAUSECODES CC ON SD.CAUSECODEID = CC.CAUSECODEID
	LEFT JOIN CAUSECODES CC2 ON SD.NEWCAUSECODE = CC2.CAUSECODEID
	JOIN SCHEDULE SC ON SC.SCHEDULEID = SD.SCHEDULEID
	JOIN AIRCRAFT AC ON AC.AIRCRAFTID = SC.AIRCRAFTID
	JOIN SQUADRONS SQ ON SC.SQUADRONID = SQ.SQUADRONID
	LEFT JOIN REMARKS RM ON RM.REMARKSID = SD.DEVIATIONSREMARKS
	JOIN WINGS WG ON SQ.WINGID = WG.WINGID
	WHERE SD.SCHEDULEDEVIATIONID = SCHEDULEDEVIATIONIDIN
	ORDER BY SD.SCHEDULEDEVIATIONID;

	   EXCEPTION
	     WHEN NO_DATA_FOUND THEN
	       NULL;
	     WHEN OTHERS THEN
	       NULL;
END GET_SCHEDULE_DEVIATION_BY_ID;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_SCHED_STATUS_COMPLETE" (
P_CURSOR OUT 	  EMOC_TYPES.EMOC_CURSOR,
SCHEDULEIDIN 	  SCHEDULE.SCHEDULEID%TYPE,
STATUSTYPEIN	  SCHEDULESTATUS.STATUSTYPE%TYPE
)
/******************************************************************************
   NAME:       GET_SCHED_STATUS_COMPLETE
   PURPOSE:    Returns Schedule statuses complete for the specified ID

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        6/25/03      A.Mitchell       1. Created this procedure.
   1.1		  1/19/04	   A.Mitchell		2. Changed sort to DESC
   PARAMETERS:
   INPUT:
   *SCHEDULEIDIN
   *STATUSTYPE
   OUTPUT:
   *P_CURSOR
   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/

AS
BEGIN
	 IF STATUSTYPEIN = '0' THEN
	 	OPEN P_CURSOR FOR
	 	SELECT
	 		SS.STATUSCODEID STATUSCODEID,
			SCHEDULEID,
			STATUSTIME,
			STATUSCODE,
			STATUSCODELABEL
		FROM SCHEDULESTATUS SS
			RIGHT OUTER JOIN STATUSCODE SC ON SC.STATUSCODEID = SS.STATUSCODEID
		WHERE SS.SCHEDULEID = SCHEDULEIDIN
		AND SS.STATUSTYPE = STATUSTYPEIN
		ORDER BY SC.ORDERNUMBER, STATUSTIME DESC;
	ELSE --IF STATUSTYPEIN = '0' THEN
	 	OPEN P_CURSOR FOR
	 	SELECT
	 		SS.FUELSTATUSID STATUSCODEID,
			SCHEDULEID,
			STATUSTIME,
			FUELSTATUS as STATUSCODE,
			FUELSTATUSLABEL as STATUSCODELABEL
		FROM SCHEDULESTATUS SS
			RIGHT OUTER JOIN FUEL FL ON FL.FUELSTATUSID = SS.FUELSTATUSID
		WHERE SS.SCHEDULEID = SCHEDULEIDIN
		AND SS.STATUSTYPE = STATUSTYPEIN
		ORDER BY STATUSTIME DESC;
		--ORDER BY SC.ORDERNUMBER DESC;
	END IF;
	   EXCEPTION
	     WHEN NO_DATA_FOUND THEN
	       Null;
	     WHEN OTHERS THEN
	       Null;
END GET_SCHED_STATUS_COMPLETE;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_SECURITYMESSAGE" (
   messageout   OUT   messages.MESSAGE%TYPE
)
AS
BEGIN
   SELECT TRIM (MESSAGE)
     INTO messageout
     FROM messages
    WHERE messages.messagetype = 'SEC';
END get_securitymessage;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_SEMEDXCOLORRULES" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   colorrulesid, colorrules.colorid, colors.colorname,
               colors.colorvalue
          FROM colorrules, colors
         WHERE colorrules.colorid = colors.colorid
           AND colorrules.codetype = 'SEMEDX'
      ORDER BY colorname;
END get_semedxcolorrules;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_SEMEDXS" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   semedx.semedxid, semedx.semedx, semedx.semedxdescription,
               NVL (semedx.defaultval, 0) AS defaultval, semedx.colorrulesid,
               colorrules.colorid, colors.colorname, colors.colorvalue
          FROM semedx, colorrules, colors
         WHERE semedx.colorrulesid = colorrules.colorrulesid
           AND colorrules.colorid = colors.colorid
      ORDER BY semedx;
END get_semedxs;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_SEMEDX_DATA_BY_SCHEDULEID" (
   p_cursor       OUT   emoc_types.emoc_cursor,
   scheduleidin         schedule.scheduleid%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   semedx.semedx code, colors.colorvalue, colorrules.colorrank,
               aircraftenginedata.enginenumber, semedxdata.scheduleid,
               schedule.scheduledtakeoff, semedxdata.moccontroller,
               semedxdata.sampledate, semedxdata.reason, schedule.sortienum,
               schedule.sortiedate, semedxdata.semdataid,
               aircraftenginedata.enginedataid
          FROM aircraft,
               semedx,
               colors,
               colorrules,
               aircraftenginedata,
               semedxdata,
               schedule
         WHERE (    (aircraft.aircraftid = aircraftenginedata.aircraftid)
                AND (aircraftenginedata.enginedataid = semedxdata.enginedataid
                    )
                AND (semedx.semedxid = semedxdata.semedxid)
                AND (semedx.colorrulesid = colorrules.colorrulesid)
                AND (colorrules.codetype = 'SEMEDX')
                AND (colorrules.colorid = colors.colorid)
                AND (semedxdata.scheduleid = schedule.scheduleid)
                AND (schedule.scheduleid = scheduleidin)
               )
      ORDER BY semedxdata.sampledate,
               aircraftenginedata.enginenumber,
               schedule.scheduledtakeoff;
END get_semedx_data_by_scheduleid;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_SORTIENUM_BY_SORTIEDATE" (
P_CURSOR   OUT  EMOC_TYPES.EMOC_CURSOR,
SQUADRONIDIN    SQUADRONS.SQUADRONID%TYPE,
SORTIEDATEIN   SCHEDULE.SORTIEDATE%TYPE
)
/******************************************************************************
   NAME:       GET_SORTIENUM_BY_SORTIEDATE
   PURPOSE:    Gets a list of available sorties to update

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        9/4/03    A.Mitchell       1. Created this procedure

   PARAMETERS:
   INPUT:
   *SQUADRONIDIN
   *SORTIEDATE
   OUTPUT:
   *P_CURSOR
   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/

AS

BEGIN
     OPEN P_CURSOR FOR
     SELECT SCHEDULEID, SORTIENUM
     FROM SCHEDULE
           WHERE SQUADRONID = SQUADRONIDIN
     AND SORTIEDATE = SORTIEDATEIN
     ORDER BY SORTIENUM;

   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       Null;
     WHEN OTHERS THEN
       Null;
END GET_SORTIENUM_BY_SORTIEDATE;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_SORTIE_FOR_DUPLICATE" (
   sortieexists   OUT   schedule.scheduleid%TYPE,
   squadronidin         squadrons.squadronid%TYPE,
   sortiedatein         schedule.sortiedate%TYPE,
   sortienumin          schedule.sortienum%TYPE
)
AS
   sortie   NUMBER (10) := 0;
BEGIN
   SELECT MAX (scheduleid)
     INTO sortie
     FROM schedule sc
    WHERE squadronid = squadronidin
      AND sortiedate = sortiedatein
      AND sortienum = sortienumin;

   IF sortie IS NULL OR LENGTH (sortie) = 0
   THEN
      BEGIN
         sortieexists := 0;
      END;
   ELSE
      BEGIN
         sortieexists := sortie;
      END;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      NULL;
END get_sortie_for_duplicate;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_SPARES_BY_SORTIEDATE" (
P_CURSOR   OUT  EMOC_TYPES.EMOC_CURSOR,
SQUADRONIDIN    SQUADRONS.SQUADRONID%TYPE,
SORTIEDATEIN   SCHEDULE.SORTIEDATE%TYPE
)
/******************************************************************************
   NAME:       GET_SPARES_BY_SORTIEDATE
   PURPOSE:    Gets a list of available sorties to update

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        9/4/03    j.Chaplin  1. Created this procedure

   PARAMETERS:
   INPUT:
   *SQUADRONIDIN
   *SORTIEDATE
   OUTPUT:
   *P_CURSOR
   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/

AS

BEGIN
     OPEN P_CURSOR FOR
     SELECT TAILNUMBER
     FROM SCHEDULE
  JOIN AIRCRAFT ON AIRCRAFT.AIRCRAFTID = SCHEDULE.AIRCRAFTID
     WHERE SCHEDULE.SQUADRONID = SQUADRONIDIN
     AND SORTIEDATE = SORTIEDATEIN
  AND SPARE = 1
     ORDER BY TAILNUMBER;

   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       NULL;
END GET_SPARES_BY_SORTIEDATE;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_SQUADID_BY_AIRCRAFTID" (
   acidin                     	 NUMBER,
   squadid 				OUT		 NUMBER
)
AS
squadcnt NUMBER;
   /******************************************************************************
   NAME:       GET_SQUADID_BY_AIRCRAFTID
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     GET_SQUADID_BY_AIRCRAFTID
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       wings)

******************************************************************************/
BEGIN
   /*GET SQUADROND */
   SELECT COUNT(*)
	   INTO squadcnt
	   FROM aircraft
	  WHERE aircraftid = acidin;
   IF squadcnt > 0 THEN
	 SELECT squadronid
	   INTO squadid
	   FROM aircraft
	  WHERE aircraftid = acidin;
   ELSE
   	   squadid := NULL;
   END IF;


--EXCEPTION
 --  WHEN NO_DATA_FOUND
  -- THEN
  --    NULL;
 --  WHEN OTHERS
 --  THEN
      -- Consider logging the error and then re-raise
 --     RAISE;
END GET_SQUADID_BY_AIRCRAFTID;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_SQUADID_BY_OWC" (
   owcin           VARCHAR2,
   mocidin         NUMBER,
   squadid   OUT   NUMBER
)
AS
   porgidvar       VARCHAR2 (4);
   workcentervar   VARCHAR2 (50);
   tmpvar          NUMBER;
   /******************************************************************************
   NAME:       GET_SQUADID_BY_OWNINGWORKCENTER
   PURPOSE:

   REVISIONS:
   Ver        Date        Author  Description
   ---------  ----------  ------- ------------------------------------------------
   1.0        2/5/2007    RWM     1. Created this procedure.
   1.1        11/12/09    JWC     1. Fix for AC disappearing from MOC. QC 399
   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     GET_SQUADID_BY_OWNINGWORKCENTER
      Sysdate:         2/05/2007
      Date and Time:   2/05/2007
      Username:         emoc3)
      Table Name:       WORKCENTERS, SQUADRONS)

***********************************************************************************/
BEGIN
   SELECT COUNT (*)
     INTO tmpvar
     FROM workcenters
    WHERE workcentercode = owcin;

   IF tmpvar > 0
   THEN
      SELECT porgid, workcentername
        INTO porgidvar, workcentervar
        FROM (SELECT porgid, workcentername
                FROM workcenters
               WHERE workcentercode = owcin AND mocid = mocidin AND ROWNUM < 2);

      SELECT COUNT (*)
        INTO tmpvar
        FROM squadrons
       WHERE mocid = mocidin AND (organization_id = porgidvar
          OR squadronname = workcentervar
          OR shortname = owcin);

      IF tmpvar > 0
      THEN
         SELECT squadronid
           INTO squadid
           FROM (SELECT squadronid
                   FROM squadrons
                  WHERE mocid = mocidin AND (   organization_id = porgidvar
                         OR squadronname = workcentervar
                         OR shortname = owcin
                        )
                    AND ROWNUM < 2);
      ELSE
         squadid := NULL;
      END IF;
   ELSE
      squadid := NULL;
   END IF;
--EXCEPTION
 --  WHEN NO_DATA_FOUND
  -- THEN
  --    NULL;
 --  WHEN OTHERS
 --  THEN
      -- Consider logging the error and then re-raise
 --     RAISE;
END get_squadid_by_owc;
 ;

CREATE PROCEDURE         "EMOC3"."GET_SQUADRONNAMES" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor
    FOR
       SELECT   squadronid, shortname
           FROM squadrons
       ORDER BY shortname;
END get_squadronnames;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_SQUADRONS" (p_cursor OUT emoc_types.emoc_cursor)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   squadronid, squadronname, shortname, squadrons.colorid,
               squadrons.wingid,
               (SELECT colors.colorname
                  FROM colors
                 WHERE colorid = squadrons.colorid) AS colorname,
               (SELECT colors.colorvalue
                  FROM colors
                 WHERE colorid = squadrons.colorid) AS colorvalue,
               (SELECT wingname
                  FROM wings
                 WHERE wings.wingid = squadrons.wingid) AS wingname,
               (SELECT orgid
                  FROM organizations
                 WHERE squadrons.organizationsid =
                                       organizations.organizationsid)
                                                                    AS orgid,
               squadrons.organizationsid,
               (SELECT orgname || ': ' || orgid
                  FROM organizations
                 WHERE squadrons.organizationsid =
                                      organizations.organizationsid)
                                                                   AS nameid,
               squadrons.timeoffsetfrommoc
          FROM squadrons
      ORDER BY squadronname;
END get_squadrons;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_STATIONLOCS" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   staloccodeid, stationloc, stalocnarrative, camsinit,
               TO_CHAR (startdate, 'MM/DD/YYYY') AS startdate,
               TO_CHAR (stopdate, 'MM/DD/YYYY') AS stopdate
          FROM stationloccodes
         WHERE mocid = 0
      ORDER BY stationloc;
END get_stationlocs;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_STATUSCODES" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   statuscodeid, statuscode, ordernumber, iconname,
               defaultstatuscode, lastflown, flying, takeoff,
               statuscodelabel, allowsortieupdate, isrequired
          FROM statuscode
      ORDER BY ordernumber, statuscode;
END get_statuscodes;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_STATUSRULES" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   statruleid, statustransitionrule.statuscodeid,
               statustransitionrule.transition2id,
               (SELECT statuscode
                  FROM statuscode
                 WHERE statuscodeid =
                              statustransitionrule.statuscodeid)
                                                               AS fromstatus,
               (SELECT statuscode
                  FROM statuscode
                 WHERE statuscodeid =
                               statustransitionrule.transition2id)
                                                                 AS tostatus
          FROM statustransitionrule
      ORDER BY fromstatus;
END get_statusrules;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_SYMBOLS" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   symbolid, symbol, symboldescription, condcodeid,
               (SELECT conditioncode
                  FROM conditioncodes
                 WHERE conditioncodes.condcodeid =
                                          symbols.condcodeid)
                                                            AS conditioncode
          FROM symbols
      ORDER BY symbol;
END get_symbols;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_TBMCSCONTROL" (
   tbmcstimer          OUT   emocconfig.tbmcstimer%TYPE,
   interfaceenabled    OUT   interfacecontrol.interfaceenabled%TYPE,
   interfaceuserid     OUT   interfacecontrol.interfaceuserid%TYPE,
   interfacepassword   OUT   interfacecontrol.interfacepassword%TYPE,
   lastupdated         OUT   VARCHAR2,
   updatedby           OUT   interfacecontrol.interfacename%TYPE
)
AS
BEGIN
   SELECT tbmcstimer
     INTO tbmcstimer
     FROM emocconfig
    WHERE emocconfigid = 0;

   SELECT interfaceenabled, TO_CHAR (lastupdate, 'MM/DD/YYYY HH24:MI:SS'),
          (SELECT fullname
             FROM users
            WHERE users.userid = interfacecontrol.lastupdateby),
          interfaceuserid, emoc_security.decrypt(interfacepassword)
     INTO interfaceenabled, lastupdated,
          updatedby,
          interfaceuserid, interfacepassword
     FROM interfacecontrol
    WHERE TRIM (interfacename) = 'TBMCS-UL';
END get_tbmcscontrol;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_TBMCS_TRANSACTION" (
   interfacelogidin         tbmcsinterfacelog.interfacelogid%TYPE,
   p_cursor           OUT   emoc_types.emoc_cursor
)
AS
BEGIN
   OPEN p_cursor FOR
      SELECT interfacelogid, tbmcsresponserecv, messageid, camsvalidated,
             userid, tbmcsmsgsent, tbmcsresponse, updatemethod, messagebody,
             updateobject
        FROM tbmcsinterfacelog
       WHERE interfacelogid = interfacelogidin;
END get_tbmcs_transaction;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_TBMCS_TRANSACTIONS" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
   OPEN p_cursor FOR
      SELECT   *
          FROM tbmcsinterfacelog
      ORDER BY tbmcsmsgsent DESC;
END get_tbmcs_transactions;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_TRANSACTIONS" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   eventtime, tablename, tablerecordid, userid AS USER, action,
               remark, transactionlogid
          FROM emocaux.transactionlog
      ORDER BY eventtime DESC;
END get_transactions;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_TRANSIENTAIRCRAFT" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
   OPEN p_cursor FOR
      SELECT   aircraftid, tailnumber, aircraftyear, aircraftmdsid,
               serialnumber, misequipid, flightid,
               (SELECT (RTRIM (aircraftmds) || ' / ' || LTRIM (blocknumber)
                       )
                  FROM aircraftmds
                 WHERE aircraftmds.aircraftmdsid = aircraft.aircraftmdsid)
                                                                AS mds_block,
               (SELECT flightname
                  FROM flights
                 WHERE flights.flightid = aircraft.flightid) AS flightname,
               locationcode, locationid, aircraft.squadronid,
               squadrons.shortname, wings.wingid, wings.wingname,
               squadrons.timeoffsetfrommoc, wings.elc, wings.unitid
          FROM aircraft, squadrons, wings
         WHERE aircraft.squadronid = squadrons.squadronid
           AND squadrons.wingid = wings.wingid
           AND (   squadrons.shortname = 'TRANS'
                OR squadrons.squadronname = 'TRANSIENT'
               )
      ORDER BY tailnumber;
END get_transientaircraft;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_USERPERMISSIONS" (
   useridin         permissions.userid%TYPE,
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   permissionid, permissions.userid, users.username,
               permissions.squadronid, squadrons.squadronname,
               squadrons.shortname, emocrole
          FROM permissions, squadrons, users
         WHERE permissions.userid = useridin
           AND permissions.userid = users.userid
           AND permissions.squadronid = squadrons.squadronid
      ORDER BY squadronname;
END get_userpermissions;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_USERS" (p_cursor OUT emoc_types.emoc_cursor)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   userid, RANKcode as rank,
               username, fullname, userstatus, badattempts, lastlogin,
               emocadmin, email
          FROM users
         WHERE LOWER (userstatus) != 'deleted'
      ORDER BY username;
END get_users;



 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_WEAPONSCLASSES" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   weaponsclassid, weaponsclass, defaultval
          FROM weaponsclass
      ORDER BY weaponsclass;
END get_weaponsclasses;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_WEAPONTYPES" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   weaponstypeid, weapontype
          FROM weapontypes
      ORDER BY weapontype;
END get_weapontypes;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_WHENDISCOVEREDCODES" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   whendiscoveredid, wdc,
               TO_CHAR (startdate, 'MM/DD/YYYY') AS startdate,
               TO_CHAR (stopdate, 'MM/DD/YYYY') AS stopdate, wdcnarrative,
               camsinit
          FROM whendiscoveredcodes
         WHERE mocid = 0
      ORDER BY wdc;
END get_whendiscoveredcodes;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_WINGID_BY_ELCUNITID" (
   elcin                    VARCHAR2,
   unitidin                 VARCHAR2,
   wingid   	 OUT		 NUMBER
)
AS
wingcnt NUMBER;
   /******************************************************************************
   NAME:       GET_WINGID_BY_ELCUNITID
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        1/16/2007  rwm             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     GET_WINGID_BY_ELCUNITID
      Sysdate:         1/16/2007
      Date and Time:   1/16/2007
      Username:         emoc3)
      Table Name:       wings)

******************************************************************************/
BEGIN
   /*GET WINGID */
    SELECT COUNT(*)
	   INTO wingcnt
	   FROM WINGS
	  WHERE ELC = elcin
	    AND unitid = unitidin;
   IF wingcnt > 0 THEN
	 SELECT wingid
	   INTO wingid
	   FROM (SELECT wingid FROM WINGS
	  WHERE ELC = elcin
	    AND unitid = unitidin
		AND ROWNUM < 2);
   ELSE
   	   wingid := NULL;
   END IF;


--EXCEPTION
 --  WHEN NO_DATA_FOUND
  -- THEN
  --    NULL;
 --  WHEN OTHERS
 --  THEN
      -- Consider logging the error and then re-raise
 --     RAISE;
END GET_WINGID_BY_ELCUNITID;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_WINGS" (p_cursor OUT emoc_types.emoc_cursor)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   wingid, wingname, unitid, commandcode, elc, defaultwing,
               scheduledow, scheduletime
          FROM wings
      ORDER BY wingname;
END get_wings;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_WINGSTATUSBRIEF" (
MOCIDIN     BRIEF_WING_STATUS_VIEW.MOCID%TYPE,
P_CURSOR OUT EMOC_TYPES.EMOC_CURSOR
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR
SELECT wing AS wing,
    squadron AS squadron,
 squadronid AS squadronid,
    SUM(DECODE(trim(statuscode),'NMCBL',1,'NMCBB',1,'NMCBK',1,'NMCBA',1,'NMCMC',1,'NMCMD',1,'NMCMM',1,'NMCMN',1,'NMCSE',1,'NMCSP',1,'FMC',1,'FMCF',1,'PMCSH',1,'PMC',1,'PMCMG',1,'PMCBF',1,0)) AS commposs,
    SUM(DECODE(trim(possessioncode),'B',1,0)) AS noncommposs,
    SUM(DECODE(trim(possessioncode),'D',1,0)) AS nonposs,
    SUM(DECODE(trim(statuscode),'FMC',1,'FMCF',1,'PMCSH',1,'PMC',1,'PMCMG',1,'PMCBF',1,0)) AS mc,
    SUM(DECODE(trim(statuscode),'FMC',1,0)) AS fmc,
    SUM(DECODE(trim(statuscode),'NMCSE',1,'NMCSP',1,0)) AS ns,
    SUM(DECODE(trim(statuscode),'NMCMC',1,'NMCMD',1,'NMCMM',1,'NMCMN',1,0)) AS nm,
    SUM(DECODE(trim(statuscode),'NMCBL',1,'NMCBB',1,'NMCBK',1,'NMCBA',1,0)) AS nb,
    SUM(DECODE(trim(statuscode),'PMCSH',1,0)) AS ps,
    SUM(DECODE(trim(statuscode),'PMC',1,'PMCMG',1,0)) AS pm, --dong have this code
    SUM(DECODE(trim(statuscode),'PMCBF',1,0)) AS pb,
    SUM(DECODE(trim(possessioncode),'T',1,0)) AS TX
FROM BRIEF_WING_STATUS_VIEW
WHERE MOCID = MOCIDIN
GROUP BY wing, squadron, squadronid;


END GET_WINGSTATUSBRIEF;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_WING_ICONTROL_STATUS" (
   interfaceenabledout   OUT   NUMBER,
   wingidin                     wings.wingid%TYPE
)
AS
   enabled   NUMBER (1);
BEGIN
   SELECT imdsinterfaceon
     INTO enabled
     FROM wings
    WHERE wingid = wingidin;

   interfaceenabledout := enabled;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      NULL;
END get_wing_icontrol_status;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_WORKCENTERS" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   workcenterid, workcentercode, workcentername, porgid,
               (SELECT organizations.orgname
                  FROM organizations
                 WHERE TRIM (organizations.orgid) =
                                         TRIM (workcenters.porgid))
                                                                  AS orgname,
               workcenters.unit_id, wingid
          FROM workcenters
      ORDER BY workcentercode;
END get_workcenters;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_WORKCENTERSBYWINGID" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   wingidin         INTEGER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   workcenterid, workcentercode, workcentername, porgid,
               (SELECT DISTINCT organizations.orgname
                           FROM organizations
                          WHERE TRIM (organizations.orgid) =
                                         TRIM (workcenters.porgid)
                            AND organizations.wingid = wingidin) AS orgname,
               workcenters.unit_id, wingid
          FROM workcenters
         WHERE wingid = wingidin
      ORDER BY workcentercode;
END get_workcentersbywingid;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_WUCID_BY_WUCAIRCRAFTID" (
   wucin            VARCHAR2,
   acid             NUMBER,
   wucidout   OUT   NUMBER
)
AS
   tmpvar     NUMBER;
   mdsvar     VARCHAR2 (15);
   blkvar     VARCHAR2 (3);
   mdsidvar   NUMBER;
/******************************************************************************
   NAME:       GET_WUCID_BY_WUCAIRCRAFTID
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        1/18/2007   rwm              1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     GET_WUCID_BY_WUCAIRCRAFTID
      Sysdate:         1/18/2007
      Date and Time:   1/18/2007
      Username:         emoc3)
      Table Name:       wuc)

******************************************************************************/
BEGIN
   SELECT aircraftmdsid
     INTO mdsidvar
     FROM aircraft
    WHERE aircraftid = acid;

   SELECT aircraftmds, blocknumber
     INTO mdsvar, blkvar
     FROM aircraftmds
    WHERE aircraftmdsid = mdsidvar;

   SELECT COUNT (*)
     INTO tmpvar
     FROM wuc
    WHERE wuccode = wucin
      AND missiondesignseries = mdsvar
      AND blocknumber = blkvar;

   IF tmpvar > 0
   THEN
      SELECT wucid
        INTO wucidout
        FROM (SELECT wucid
                FROM wuc
               WHERE wuccode = wucin
                 AND missiondesignseries = mdsvar
                 AND blocknumber = blkvar
                 AND ROWNUM <= 1);
   ELSE
      wucidout := NULL;
   END IF;
--EXCEPTION
 --  WHEN NO_DATA_FOUND
  -- THEN
  --    NULL;
 --  WHEN OTHERS
 --  THEN
      -- Consider logging the error and then re-raise
 --     RAISE;
END get_wucid_by_wucaircraftid;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_WUCSBYMDS" (
   p_cursor      OUT   emoc_types.emoc_cursor,
   mdsin               wuc.missiondesignseries%TYPE,
   blknumberin         wuc.blocknumber%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   wucid, wuccode, wucdescription,
               TO_CHAR (wucstartdate, 'MM/DD/YYYY') AS startdate,
               TO_CHAR (wucstopdate, 'MM/DD/YYYY') AS stopdate,
               wuc.missiondesignseries, wuc.blocknumber,
               (wuc.missiondesignseries || ' / ' || wuc.blocknumber
               ) AS mds_block,
               wuc.camsinit
          FROM wuc
         WHERE wuc.missiondesignseries = mdsin
           AND wuc.blocknumber = blknumberin
      ORDER BY wuccode;
END get_wucsbymds;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_WXCODES" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   wxcodeid, weathercode, weatherdescription, defaultweathercode
          FROM wx
      ORDER BY weathercode;
END get_wxcodes;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."GET_WXDEFAULT_BY_MOC" (
   mocidin                     	 NUMBER,
   wxid				OUT		 NUMBER
)
AS
wxcnt NUMBER;
   /******************************************************************************
   NAME:       GET_WXDEFAULT_BY_MOC
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     GET_WXDEFAULT_BY_MOC
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       wings)

******************************************************************************/
BEGIN
   /*GET Weather Code*/
   SELECT COUNT(*)
	   INTO wxcnt
	   FROM WX
	  WHERE mocid = mocidin
	    AND defaultweathercode = 1;
   IF wxcnt > 0 THEN
	    SELECT weathercode
	   INTO wxid
	   FROM WX
	  WHERE mocid = mocidin
	    AND defaultweathercode = 1;
   ELSE
   	   wxid := NULL;
   END IF;

--EXCEPTION
 --  WHEN NO_DATA_FOUND
  -- THEN
  --    NULL;
 --  WHEN OTHERS
 --  THEN
      -- Consider logging the error and then re-raise
 --     RAISE;
END GET_WXDEFAULT_BY_MOC;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."IMDSINITCREWCHIEF" (crewchiefin crewchiefs.crewchief%TYPE,
                   gradecodein         ranks.gradecode%TYPE,
                                                mocidin     crewchiefs.mocid%TYPE,
                                                crewchiefid OUT crewchiefs.crewchiefid%TYPE) AS
  rankidin INTEGER;
BEGIN
  SELECT seq_crewchiefs.NEXTVAL INTO crewchiefid FROM DUAL;

  SELECT r.rankid
    INTO rankidin
    FROM ranks r
   WHERE r.gradecode = gradecodein
     AND mocid = mocidin;

  IF rankidin IS NULL THEN
    BEGIN
      SELECT rankid
        INTO rankidin
        FROM ranks
       WHERE defaultrank = 1
         AND mocid = mocidin;
    END;
  END IF;

  IF rankidin IS NULL THEN
    SELECT MIN(rankid) INTO rankidin FROM ranks WHERE mocid = mocidin;
  END IF;

  INSERT INTO crewchiefs
    (crewchiefid, crewchief, rankid, mocid)
  VALUES
    (crewchiefid, crewchiefin, rankidin, mocidin);
END imdsinitcrewchief;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."INSERTAUCTRX" (p_fromelc      VARCHAR2,
                                         p_fromunitid   VARCHAR2,
                                         p_auc          VARCHAR2,
                                         p_aucnarrative VARCHAR2,
                                         p_mds          VARCHAR2,
                                         p_pec          VARCHAR2) AS
  tmpvar NUMBER;
  /******************************************************************************
     NAME:       InsertAUCTrx
     PURPOSE:

     REVISIONS:
     Ver        Date        Author           Description
     ---------  ----------  ---------------  ------------------------------------
     1.0        12/24/2006  r mcbride        1. Created this procedure.

     NOTES:

     Automatically available Auto Replace Keywords:
        Object Name:     InsertAUCTrx
        Sysdate:         12/24/2006
        Date and Time:   12/24/2006, 10:38:46 AM, and 12/24/2006 10:38:46 AM
        Username:         (set in TOAD Options, Procedure Editor)
        Table Name:       (set in the "New PL/SQL Object" dialog)

  ******************************************************************************/
BEGIN
  INSERT INTO utilizationcodetrx
    (utilizationcodetrxid,
     fromenterpriselocationcode,
     fromunitid,
     aircraftutilizationcode,
     aucnarrative,
     missiondesignseries,
     programelementcode,
     dateprocessed)
  VALUES
    (seq_utilizationcodetrx.NEXTVAL,
     p_fromelc,
     p_fromunitid,
     p_auc,
     p_aucnarrative,
     p_mds,
     p_pec,
     SYSDATE);

  COMMIT;

  IF (LENGTH(p_auc) > 0) THEN
    SELECT COUNT(*)
      INTO tmpvar
      FROM utilizationcodes
     WHERE utilizationcode = p_auc;

    IF (tmpvar = 0) THEN
      INSERT INTO utilizationcodes
        (utilcodeid,
         utilizationcode,
         aucnarrative,
         programelementcode,
         camsinit,
         mocid,
         missiondesignseries)
      VALUES
        (seq_utilcodes.NEXTVAL,
         p_auc,
         p_aucnarrative,
         p_pec,
         SYSDATE,
         0,
         p_mds);

      COMMIT;
    ELSE
      SELECT utilcodeid
        INTO tmpvar
        FROM (SELECT utilcodeid
                FROM utilizationcodes
               WHERE utilizationcode = p_auc
                 AND missiondesignseries = p_mds
                 AND ROWNUM <= 1);

      IF tmpvar IS NOT NULL THEN
        emoc_utilizationcodes.UpdateACUtilCodeById(p_auc,
                                                   p_aucnarrative,
                                                   p_pec,
                                                   p_mds,
                                                   tmpvar);
      END IF;
    END IF;
  END IF;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    NULL;
  WHEN OTHERS THEN
    -- Consider logging the error and then re-raise
    RAISE;
END insertauctrx;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."INSERTBLKDEVABORTFROMIMDS" (
   homeelcin                     VARCHAR2,
   currentelcin                  VARCHAR2,
   unitidin                      VARCHAR2,
   isortiedatein				 VARCHAR2,
   sortiedatein                  VARCHAR2,
   equipidin 				 	 VARCHAR2,
   sortienumberin 				 VARCHAR2,
   sortiemodifierin              VARCHAR2,
   mainteventidin                VARCHAR2,
   schedblknumin                 VARCHAR2,
   devcodein                     VARCHAR2,
   devcausecodein                VARCHAR2,
   chargeindin                   VARCHAR2,
   istartdatein					 VARCHAR2,
   startdatein					 VARCHAR2,
   starttimein                   VARCHAR2,
   istopdatein					 VARCHAR2,
   stopdatein                    VARCHAR2,
   stoptimein					 VARCHAR2,
   devremarksin                  VARCHAR2
)
AS
   mocvar   NUMBER;
   devidvar NUMBER;
   causevar NUMBER;
   chargevar NUMBER;
   actionvar NUMBER;
   tmpvar NUMBER;
   remarksid NUMBER;
   startdate DATE;
   stopdate  DATE;
   /******************************************************************************
   NAME:       INSERTBLKDEVABORTFROMIMDS
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     INSERTBLKDEVABORTFROMIMDS
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       deviationaborttrx)

******************************************************************************/
BEGIN

   /*GET MOCID for gathering code ids*/
	 GET_MOCID_BY_ELCUNITID(currentelcin,unitidin,mocvar);

	 IF mocvar IS NOT NULL THEN
	 /*Get Deviationid*/
	 	   GET_DEVID_BY_MOCDEVCODE(mocvar,devcodein,devidvar);

		   IF devidvar IS NOT NULL THEN
	 	   /*GET CauseCodeid*/
	 	   		 GET_CAUSEID_BY_MOCCAUSECODE(mocvar,devcausecodein,causevar);

				 IF causevar IS NOT NULL THEN

					 IF chargeindin = 'Y' THEN
					 	chargevar := 1;
					 ELSE
					 	chargevar := 0;
					 END IF;
					 actionvar := 4;

					 IF devremarksin IS NOT NULL THEN
						 SELECT SEQ_REMARKS.NEXTVAL
					       INTO   REMARKSID
					       FROM   DUAL;
					       Add_Remarks (REMARKSID, devremarksin);
					 ELSE
					 	 remarksid := NULL;
					 END IF;

					  IF startdatein IS NOT NULL AND starttimein IS NOT NULL THEN
					  	 startdate := TO_DATE(startdatein || starttimein, 'mm/dd/yyyy hh24:MI:ss');
					  ELSE
					  	 startdate := NULL;
					  END IF;
					 IF stopdatein IS NOT NULL AND stoptimein IS NOT NULL THEN
					  	 stopdate := TO_DATE(stopdatein || stoptimein, 'mm/dd/yyyy hh24:MI:ss');
					  ELSE
					  	 stopdate := NULL;
					  END IF;

					 INSERTBLOCKDATAHANDLERFROMIMDS(schedblknumin,devidvar,causevar,NULL,
					 					sortiedatein,sortiemodifierin,actionvar,chargevar,
										startdate,stopdate,mainteventidin,remarksid,NULL,mocvar);
				 END IF;
		 END IF;
	END IF;


--EXCEPTION
--   WHEN NO_DATA_FOUND
 --  THEN
 --     NULL;
 --  WHEN OTHERS
  -- THEN
      -- Consider logging the error and then re-raise
 --     RAISE;
END INSERTBLKDEVABORTFROMIMDS;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."INSERTBLKDEVSTARTSTOPFROMIMDS" (
   homeelcin                     VARCHAR2,
   currentelcin                  VARCHAR2,
   unitidin                      VARCHAR2,
   isortiedatein				 VARCHAR2,
   sortiedatein                  VARCHAR2,
   equipidin 				     VARCHAR2,
   sortienumberin 				 VARCHAR2,
   sortiemodifierin              VARCHAR2,
   mainteventidin                VARCHAR2,
   schedblknumin                 VARCHAR2,
   devcodein                     VARCHAR2,
   devcausecodein                VARCHAR2,
   chargeindin                   VARCHAR2,
   istartdatein					 VARCHAR2,
   startdatein					 VARCHAR2,
   starttimein                   VARCHAR2,
   istopdatein					 VARCHAR2,
   stopdatein                    VARCHAR2,
   stoptimein					 VARCHAR2,
   devremarksin                  VARCHAR2
)
AS
   tmpvar     NUMBER;
   actionvar  NUMBER;
   mocvar     NUMBER;
   acidvar    NUMBER;
   chargevar  NUMBER;
   devidvar   NUMBER;
   causevar   NUMBER;
   schedidvar NUMBER;
   squadvar   NUMBER;
   remarksid  NUMBER;
   startdate  DATE;
   stopdate   DATE;
   /******************************************************************************
   NAME:       INSERTBLKDEVSTARTSTOPFROMIMDS
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     INSERTBLKDEVSTARTSTOPFROMIMDS
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       deviationstartstoptrx)

******************************************************************************/
BEGIN

	 /*GET MOCID for gathering code ids*/
	 GET_MOCID_BY_ELCUNITID(currentelcin,unitidin,mocvar);

	 IF mocvar IS NOT NULL THEN
	 /*Get Deviationid*/
	 	   GET_DEVID_BY_MOCDEVCODE(mocvar,devcodein,devidvar);

		   IF devidvar IS NOT NULL THEN
	 	   /*GET CauseCodeid*/
	 	   		 GET_CAUSEID_BY_MOCCAUSECODE(mocvar,devcausecodein,causevar);

				 IF causevar IS NOT NULL THEN

					 IF stopdatein IS NULL THEN
					 	actionvar :=1;/*Start*/
					 ELSE
					 	 actionvar := 2;/*Stop*/
					 END IF;
					 IF chargeindin = 'Y' THEN
					 	chargevar := 1;
					 ELSE
					 	chargevar := 0;
					 END IF;

					 IF devremarksin IS NOT NULL THEN
						 SELECT SEQ_REMARKS.NEXTVAL
					       INTO   REMARKSID
					       FROM   DUAL;
					       Add_Remarks (REMARKSID, devremarksin);
					 ELSE
					 	 remarksid := NULL;
					 END IF;

				   	 IF startdatein IS NOT NULL AND starttimein IS NOT NULL THEN
					  	 startdate := TO_DATE(startdatein || starttimein, 'mm/dd/yyyy hh24:MI:ss');
					  ELSE
					  	 startdate := NULL;
					  END IF;
					 IF stopdatein IS NOT NULL AND stoptimein IS NOT NULL THEN
					  	 stopdate := TO_DATE(stopdatein || stoptimein, 'mm/dd/yyyy hh24:MI:ss');
					  ELSE
					  	 stopdate := NULL;
					  END IF;

					 INSERTBLOCKDATAHANDLERFROMIMDS(schedblknumin,devidvar,causevar,NULL,
					 					sortiedatein,sortiemodifierin,actionvar,chargevar,
										startdate,stopdate,mainteventidin,remarksid,NULL,mocvar);
				 END IF;
		 END IF;
	END IF;

--EXCEPTION
 --  WHEN NO_DATA_FOUND
 --  THEN
--      NULL;
 --  WHEN OTHERS
 --  THEN
      -- Consider logging the error and then re-raise
 --     RAISE;
END INSERTBLKDEVSTARTSTOPFROMIMDS;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."INSERTBLOCKDATAHANDLERFROMIMDS" (
   schedblknumin       VARCHAR2,
   devidvar                      NUMBER,
   causevar                      NUMBER,
   newcuase                      NUMBER,
   sortiedatein         VARCHAR2,
   sortiemodifierin      VARCHAR2,
   actionvar         NUMBER,
   chargevar       VARCHAR2,
   startdate           DATE,
   stopdate           DATE,
   mainteventidin                VARCHAR2,
   remarksid                     NUMBER,
   opeventtypeeventin            VARCHAR2,
   mocvar       NUMBER

)
AS
   tmpvar   NUMBER;
   CURSOR mycur
   IS
      SELECT scheduleid, sortienum
        FROM SCHEDULE
       WHERE SQUADRONID IN (SELECT squadronid FROM squadrons WHERE mocid = mocvar)
     AND SORTIEDATE = sortiedatein
  AND BLOCKNUMBER = schedblknumin;

   myrec   mycur%ROWTYPE;

   /******************************************************************************
   NAME:       INSERTBLOCKDATAHANDLERFROMIMDS
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     INSERTBLOCKDATAHANDLERFROMIMDS
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       operationaleventupdatetrx)

******************************************************************************/
BEGIN
   SELECT seq_scheduledeviations.NEXTVAL
     INTO tmpvar
     FROM DUAL;

  OPEN mycur;

   FETCH mycur
    INTO myrec;

   WHILE mycur%FOUND
   LOOP
  INSERT INTO EMOC3.SCHEDULEDEVIATIONS (
       SCHEDULEDEVIATIONID, SCHEDULEID, DEVIATIONCODEID,
   CAUSECODEID, NEWCAUSECODE, SORTIENUM, SORTIEDATE,
   SORTIEMOD, ACTIONOPTIONS, CHARGEABLE, STARTDATETIME,
      STOPDATETIME, MAINTENANCEEVENTID, DEVIATIONSREMARKS,
      INTERFACELOGID)
  VALUES (tmpvar, myrec.scheduleid, devidvar, causevar, NULL,
     myrec.sortienum, sortiedatein, sortiemodifierin, actionvar,
    chargevar, startdate, stopdate, mainteventidin, remarksid, NULL);
 FETCH mycur
       INTO myrec;
   END LOOP;

   CLOSE mycur;


--EXCEPTION
--   WHEN NO_DATA_FOUND
 --  THEN
 --     NULL;
 --  WHEN OTHERS
 --  THEN
      -- Consider logging the error and then re-raise
 --     RAISE;
END INSERTBLOCKDATAHANDLERFROMIMDS;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."INSERTCAUSECODETRX" (
   p_homeelc                  VARCHAR2,
   p_currentelc               VARCHAR2,
   p_unitid                   VARCHAR2,
   p_causecode                VARCHAR2,
   p_causecodenarrative       VARCHAR2,
   p_causecodetypeindicator   VARCHAR2,
   p_defercodetypeindicator   VARCHAR2,
   p_hostunitdateandtime      VARCHAR2,
   p_transactionordinaldate   VARCHAR2,
   p_transactiontype          VARCHAR2
)
IS
   tmpvar   NUMBER;
/******************************************************************************
   NAME:       InsertCauseCodeTrx
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  r mcbride        1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     InsertCauseCodeTrx
      Sysdate:         12/18/2006
      Date and Time:   12/18/2006, 10:16:05 AM, and 12/18/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       CauseCodeTrx)

******************************************************************************/
BEGIN
   SELECT seq_causecodetrx.NEXTVAL
     INTO tmpvar
     FROM DUAL;

   INSERT INTO causecodetrx
               (causecodetrxid, homeenterpriselocationcode,
                currententerpriselocationcode, unitid, causecode,
                causecodenarrative, causecodetypeindicator,
                defercodetypeindicator, transactionordinaldate,
                hostunitdateandtime, transactiontype
               )
        VALUES (tmpvar, p_homeelc,
                p_currentelc, p_unitid, p_causecode,
                p_causecodenarrative, p_causecodetypeindicator,
                p_defercodetypeindicator, p_transactionordinaldate,
                p_hostunitdateandtime, p_transactiontype
               );
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END insertcausecodetrx;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."INSERTDEVABORTFROMIMDS" (
   homeelcin                     VARCHAR2,
   currentelcin                  VARCHAR2,
   unitidin                      VARCHAR2,
   isortiedatein				 VARCHAR2,
   sortiedatein                  VARCHAR2,
   equipidin 				 	 VARCHAR2,
   sortienumberin 				 VARCHAR2,
   sortiemodifierin              VARCHAR2,
   mainteventidin                VARCHAR2,
   schedblknumin                 VARCHAR2,
   devcodein                     VARCHAR2,
   devcausecodein                VARCHAR2,
   chargeindin                   VARCHAR2,
   istartdatein					 VARCHAR2,
   startdatein					 VARCHAR2,
   starttimein                   VARCHAR2,
   istopdatein					 VARCHAR2,
   stopdatein                    VARCHAR2,
   stoptimein					 VARCHAR2,
   devremarksin                  VARCHAR2
)
AS
   mocvar   NUMBER;
   acidvar  NUMBER;
   schedidvar NUMBER;
   devidvar NUMBER;
   causevar NUMBER;
   chargevar NUMBER;
   squadvar NUMBER;
   actionvar NUMBER;
   tmpvar NUMBER;
   remarksid NUMBER;
   startdate DATE;
   stopdate  DATE;
   /******************************************************************************
   NAME:       INSERTDEVABORTFROMIMDS
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     INSERTDEVIATIONABORTTRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       deviationaborttrx)

******************************************************************************/
BEGIN

   /*GET MOCID for gathering code ids*/
	GET_MOCID_BY_ELCUNITID(currentelcin,unitidin,mocvar);

	IF mocvar IS NOT NULL THEN
	 /*Get Aircraftid to make sure correct schedule line*/
	 	   GET_AIRCRAFTID_BY_MOCEQUIPID(mocvar,equipidin,acidvar);

		   IF acidvar IS NOT NULL THEN
	 	   /*Get Squadronid */
		   		 GET_SQUADID_BY_AIRCRAFTID(acidvar,squadvar);

				 IF squadvar IS NOT NULL THEN
	 			 /*GetScheduleid to apply deviation to*/
	 			 	GET_SCHEDID_BY_SQUADSORTIEACID(squadvar,sortiedatein,sortienumberin,acidvar,schedidvar);

					IF schedidvar IS NOT NULL THEN
	 				/*Get Deviationid*/
	 					  GET_DEVID_BY_MOCDEVCODE(mocvar,devcodein,devidvar);

						  IF devidvar IS NOT NULL THEN
	 					  /*GET CauseCodeid*/
	 					  		GET_CAUSEID_BY_MOCCAUSECODE(mocvar,devcausecodein,causevar);

								IF causevar IS NOT NULL THEN

									 IF chargeindin = 'Y' THEN
									 	chargevar := 1;
									 ELSE
									 	chargevar := 0;
									 END IF;
									 actionvar := 4;

									 IF devremarksin IS NOT NULL THEN
										 SELECT SEQ_REMARKS.NEXTVAL
									       INTO   REMARKSID
									       FROM   DUAL;
									       Add_Remarks (REMARKSID, devremarksin);
									 ELSE
									 	 remarksid := NULL;
									 END IF;
									 IF startdatein IS NOT NULL AND starttimein IS NOT NULL THEN
									  	 startdate := TO_DATE(startdatein || starttimein, 'mm/dd/yyyy hh24:MI:ss');
									  ELSE
									  	 startdate := NULL;
									  END IF;
									 IF stopdatein IS NOT NULL AND stoptimein IS NOT NULL THEN
									  	 stopdate := TO_DATE(stopdatein || stoptimein, 'mm/dd/yyyy hh24:MI:ss');
									  ELSE
									  	 stopdate := NULL;
									  END IF;

								      SELECT seq_scheduledeviations.NEXTVAL
									     INTO tmpvar
									     FROM DUAL;

									 INSERT INTO EMOC3.SCHEDULEDEVIATIONS (
								   	 		SCHEDULEDEVIATIONID, SCHEDULEID, DEVIATIONCODEID,
											CAUSECODEID, NEWCAUSECODE, SORTIENUM, SORTIEDATE,
											SORTIEMOD, ACTIONOPTIONS, CHARGEABLE, STARTDATETIME,
								   			STOPDATETIME, MAINTENANCEEVENTID, DEVIATIONSREMARKS,
								   			INTERFACELOGID)
									 VALUES (tmpvar, schedidvar, devidvar, causevar, NULL,
									 		 sortienumberin, sortiedatein, sortiemodifierin, actionvar,
											 chargevar, startdate, stopdate,
											 mainteventidin, remarksid, NULL);
								 END IF;
						  END IF;
					END IF;
				END IF;
			END IF;
		END IF;

--EXCEPTION
--   WHEN NO_DATA_FOUND
--   THEN
--      NULL;
--   WHEN OTHERS
 --  THEN
      -- Consider logging the error and then re-raise
 --     RAISE;
END INSERTDEVABORTFROMIMDS;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."INSERTDEVIATIONABORTTRX" (
   homeelcin                     VARCHAR2,
   currentelcin                  VARCHAR2,
   unitidin                      VARCHAR2,
   isortiedatein     VARCHAR2,
   sortiedatein                  VARCHAR2,
   equipidin        VARCHAR2,
   sortienumberin      VARCHAR2,
   sortiemodifierin              VARCHAR2,
   mainteventidin                VARCHAR2,
   schedblknumin                 VARCHAR2,
   devcodein                     VARCHAR2,
   devcausecodein                VARCHAR2,
   chargeindin                   VARCHAR2,
   istartdatein      VARCHAR2,
   startdatein      VARCHAR2,
   starttimein                   VARCHAR2,
   istopdatein      VARCHAR2,
   stopdatein                    VARCHAR2,
   stoptimein      VARCHAR2,
   devremarksin                  VARCHAR2
)
AS
   tmpvar   NUMBER;
   /******************************************************************************
   NAME:       INSERTDEVIATIONABORTTRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     INSERTDEVIATIONABORTTRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       deviationaborttrx)

******************************************************************************/
BEGIN
   SELECT seq_deviationabort.NEXTVAL
     INTO tmpvar
     FROM DUAL;

     INSERT INTO EMOC3.DEVIATIONABORTTRX (
       DEVIATIONABORTTRXID, HOMEENTERPRISELOCATIONCODE,
   CURRENTENTERPRISELOCATIONCODE, UNITID, SORTIEDATE, EQUIPMENTID,
      SORTIENUMBER, SORTIEMODIFIER, MAINTENANCEEVENTID, SCHEDULINGBLOCKNUMBER,
      DEVIATIONCODE, DEVIATIONCAUSECODE, CHARGEABLEINDICATOR,
      STARTDATE, STARTTIME, STOPDATE, STOPTIME, DEVIATIONREMARKS,
   DATEPROCESSED)
  VALUES (tmpvar, homeelcin, currentelcin, unitidin, isortiedatein,
     equipidin, sortienumberin, sortiemodifierin, mainteventidin, schedblknumin,
    devcodein, devcausecodein, chargeindin, istartdatein, starttimein,
    istopdatein, stoptimein, devremarksin, SYSDATE);

  IF schedblknumin IS NOT NULL THEN
   INSERTBLKDEVABORTFROMIMDS(homeelcin, currentelcin, unitidin, isortiedatein, sortiedatein,
     equipidin, sortienumberin, sortiemodifierin, mainteventidin, schedblknumin,
    devcodein, devcausecodein, chargeindin, istartdatein, startdatein, starttimein,
    istopdatein, stopdatein, stoptimein, devremarksin);
  ELSE
    INSERTDEVABORTFROMIMDS(homeelcin, currentelcin, unitidin, isortiedatein, sortiedatein,
     equipidin, sortienumberin, sortiemodifierin, mainteventidin, schedblknumin,
    devcodein, devcausecodein, chargeindin, istartdatein, startdatein, starttimein,
    istopdatein, stopdatein, stoptimein, devremarksin);
  END IF;

--EXCEPTION
--   WHEN NO_DATA_FOUND
--   THEN
 --     NULL;
  -- WHEN OTHERS
  -- THEN
      -- Consider logging the error and then re-raise
  --    RAISE;
END INSERTDEVIATIONABORTTRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."INSERTDEVIATIONCORRECTIONTRX" (
   homeelcin                     VARCHAR2,
   currentelcin                  VARCHAR2,
   unitidin                      VARCHAR2,
   isortiedatein     VARCHAR2,
   sortiedatein                  VARCHAR2,
   schedblknumin     VARCHAR2,
   equipidin        VARCHAR2,
   sortienumberin      VARCHAR2,
   sortiemodifierin              VARCHAR2,
   mainteventidin                VARCHAR2,
   devcodein                     VARCHAR2,
   devcausecodein                VARCHAR2,
   newdevcausecodein    VARCHAR2,
   chargeindin                   VARCHAR2,
   istartdatein      VARCHAR2,
   startdatein      VARCHAR2,
   starttimein                   VARCHAR2,
   istopdatein      VARCHAR2,
   stopdatein                    VARCHAR2,
   stoptimein      VARCHAR2,
   devremarksin                  VARCHAR2
)
AS
   tmpvar   NUMBER;
   /******************************************************************************
   NAME:       INSERTDEVIATIONCORRECTIONTRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     INSERTDEVIATIONCORRECTIONTRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       deviationcorrectiontrx)

******************************************************************************/
BEGIN
   SELECT seq_deviationcorrection.NEXTVAL
     INTO tmpvar
     FROM DUAL;

     INSERT INTO EMOC3.DEVIATIONCORRECTIONTRX (
       DEVIATIONCORRECTTRXID, HOMEENTERPRISELOCATIONCODE,
   CURRENTENTERPRISELOCATIONCODE, UNITID, SORTIEDATE, SCHEDULINGBLOCKNUMBER,
   EQUIPMENTID, SORTIENUMBER, SORTIEMODIFIER, MAINTENANCEEVENTID,
      DEVIATIONCODE, DEVIATIONCAUSECODE, NEWDEVIATIONCAUSECODE, CHARGEABLEINDICATOR,
      STARTDATE, STARTTIME, STOPDATE, STOPTIME, DEVIATIONREMARKS,
   DATEPROCESSED)
  VALUES (tmpvar, homeelcin, currentelcin, unitidin, isortiedatein, schedblknumin,
     equipidin, sortienumberin, sortiemodifierin, mainteventidin,
    devcodein, devcausecodein, newdevcausecodein, chargeindin, istartdatein,
    starttimein, istopdatein, stoptimein, devremarksin, SYSDATE);

  IF schedblknumin IS NOT NULL THEN
   UPDATEBLKDEVCORRECTIONFROMIMDS(homeelcin, currentelcin, unitidin, isortiedatein, sortiedatein,
     schedblknumin, equipidin, sortienumberin, sortiemodifierin, mainteventidin,
    devcodein, devcausecodein, newdevcausecodein, chargeindin, istartdatein, startdatein,
    starttimein, istopdatein, stopdatein, stoptimein, devremarksin);
  ELSE
    UPDATEDEVCORRECTIONFROMIMDS(homeelcin, currentelcin, unitidin, isortiedatein, sortiedatein,
     schedblknumin, equipidin, sortienumberin, sortiemodifierin, mainteventidin,
    devcodein, devcausecodein, newdevcausecodein, chargeindin, istartdatein, startdatein,
    starttimein, istopdatein, stopdatein, stoptimein, devremarksin);
  END IF;

--EXCEPTION
 --  WHEN NO_DATA_FOUND
 --  THEN
 --     NULL;
 --  WHEN OTHERS
 --  THEN
      -- Consider logging the error and then re-raise
 --     RAISE;
END INSERTDEVIATIONCORRECTIONTRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."INSERTDEVIATIONDELETETRX" (
   homeelcin                     VARCHAR2,
   currentelcin                  VARCHAR2,
   unitidin                      VARCHAR2,
   isortiedatein     VARCHAR2,
   sortiedatein                  VARCHAR2,
   schedblknumin     VARCHAR2,
   equipidin         VARCHAR2,
   sortienumberin      VARCHAR2,
   sortiemodifierin              VARCHAR2,
   mainteventidin                VARCHAR2,
   devcodein                     VARCHAR2,
   devcausecodein                VARCHAR2,
   chargeindin                   VARCHAR2
)
AS
   tmpvar   NUMBER;
   /******************************************************************************
   NAME:       INSERTDEVIATIONDELETETRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     INSERTDEVIATIONDELETETRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       deviationdeletetrx)

******************************************************************************/
BEGIN
   SELECT seq_deviationdelete.NEXTVAL
     INTO tmpvar
     FROM DUAL;

     INSERT INTO EMOC3.DEVIATIONDELETETRX (
       DEVIATIONDELETETRXID, HOMEENTERPRISELOCATIONCODE,
   CURRENTENTERPRISELOCATIONCODE, UNITID, SORTIEDATE, SCHEDULINGBLOCKNUMBER,
   EQUIPMENTID, SORTIENUMBER, SORTIEMODIFIER, MAINTENANCEEVENTID,
      DEVIATIONCODE, DEVIATIONCAUSECODE, CHARGEABLEINDICATOR, DATEPROCESSED)
  VALUES (tmpvar, homeelcin, currentelcin, unitidin, isortiedatein, schedblknumin,
     equipidin, sortienumberin, sortiemodifierin, mainteventidin,
    devcodein, devcausecodein, chargeindin, SYSDATE);

  IF schedblknumin IS NOT NULL THEN
   DELETEBLKDEVIATIONFROMIMDS(homeelcin, currentelcin, unitidin, isortiedatein, sortiedatein,
     schedblknumin, equipidin, sortienumberin, sortiemodifierin, mainteventidin,
    devcodein, devcausecodein, chargeindin);
  ELSE
    DELETEDEVIATIONFROMIMDS(homeelcin, currentelcin, unitidin, isortiedatein, sortiedatein,
     schedblknumin, equipidin, sortienumberin, sortiemodifierin, mainteventidin,
    devcodein, devcausecodein, chargeindin);
  END IF;

--EXCEPTION
 --  WHEN NO_DATA_FOUND
 --  THEN
 --     NULL;
 --  WHEN OTHERS
 --  THEN
      -- Consider logging the error and then re-raise
 --     RAISE;
END INSERTDEVIATIONDELETETRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."INSERTDEVIATIONSTARTSTOPTRX" (
   homeelcin                     VARCHAR2,
   currentelcin                  VARCHAR2,
   unitidin                      VARCHAR2,
   isortiedatein     VARCHAR2,
   sortiedatein                  VARCHAR2,
   equipidin        VARCHAR2,
   sortienumberin      VARCHAR2,
   sortiemodifierin              VARCHAR2,
   mainteventidin                VARCHAR2,
   schedblknumin                 VARCHAR2,
   devcodein                     VARCHAR2,
   devcausecodein                VARCHAR2,
   chargeindin                   VARCHAR2,
   istartdatein      VARCHAR2,
   startdatein      VARCHAR2,
   starttimein                   VARCHAR2,
   istopdatein      VARCHAR2,
   stopdatein                    VARCHAR2,
   stoptimein      VARCHAR2,
   devremarksin                  VARCHAR2
)
AS
   tmpvar   NUMBER;
   /******************************************************************************
   NAME:       INSERTDEVIATIONSTARTSTOPTRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     INSERTDEVIATIONSTARTSTOPTRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       deviationstartstoptrx)

******************************************************************************/
BEGIN
   SELECT seq_deviationstartstop.NEXTVAL
     INTO tmpvar
     FROM DUAL;

     INSERT INTO EMOC3.DEVIATIONSTARTSTOPTRX (
       DEVIATIONSTARTSTOPTRXID, HOMEENTERPRISELOCATIONCODE,
   CURRENTENTERPRISELOCATIONCODE, UNITID, SORTIEDATE,
   EQUIPMENTID, SORTIENUMBER, SORTIEMODIFIER, MAINTENANCEEVENTID,
      SCHEDULINGBLOCKNUMBER, DEVIATIONCODE, DEVIATIONCAUSECODE, CHARGEABLEINDICATOR,
      STARTDATE, STARTTIME, STOPDATE, STOPTIME, DEVIATIONREMARKS,
   DATEPROCESSED)
  VALUES (tmpvar, homeelcin, currentelcin, unitidin, isortiedatein,
     equipidin, sortienumberin, sortiemodifierin, mainteventidin,
    schedblknumin, devcodein, devcausecodein, chargeindin, istartdatein,
    starttimein, istopdatein, stoptimein, devremarksin, SYSDATE);

  IF schedblknumin IS NOT NULL THEN
   INSERTBLKDEVSTARTSTOPFROMIMDS(homeelcin, currentelcin, unitidin, isortiedatein,
     sortiedatein, equipidin, sortienumberin, sortiemodifierin, mainteventidin,
    schedblknumin, devcodein, devcausecodein, chargeindin, istartdatein,
    startdatein, starttimein, istopdatein, stopdatein, stoptimein, devremarksin);
  ELSE
   INSERTDEVSTARTSTOPFROMIMDS(homeelcin, currentelcin, unitidin, isortiedatein,
     sortiedatein, equipidin, sortienumberin, sortiemodifierin, mainteventidin,
    schedblknumin, devcodein, devcausecodein, chargeindin, istartdatein,
    startdatein, starttimein, istopdatein, stopdatein, stoptimein, devremarksin);
  END IF;

--EXCEPTION
 --  WHEN NO_DATA_FOUND
--   THEN
--      NULL;
--   WHEN OTHERS
--   THEN
      -- Consider logging the error and then re-raise
 --     RAISE;
END INSERTDEVIATIONSTARTSTOPTRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."INSERTDEVSTARTSTOPFROMIMDS" (
   homeelcin                     VARCHAR2,
   currentelcin                  VARCHAR2,
   unitidin                      VARCHAR2,
   isortiedatein				 VARCHAR2,
   sortiedatein                  VARCHAR2,
   equipidin 				     VARCHAR2,
   sortienumberin 				 VARCHAR2,
   sortiemodifierin              VARCHAR2,
   mainteventidin                VARCHAR2,
   schedblknumin                 VARCHAR2,
   devcodein                     VARCHAR2,
   devcausecodein                VARCHAR2,
   chargeindin                   VARCHAR2,
   istartdatein					 VARCHAR2,
   startdatein					 VARCHAR2,
   starttimein                   VARCHAR2,
   istopdatein					 VARCHAR2,
   stopdatein                    VARCHAR2,
   stoptimein					 VARCHAR2,
   devremarksin                  VARCHAR2
)
AS
   tmpvar     NUMBER;
   actionvar  NUMBER;
   mocvar     NUMBER;
   acidvar    NUMBER;
   chargevar  NUMBER;
   devidvar   NUMBER;
   causevar   NUMBER;
   schedidvar NUMBER;
   squadvar   NUMBER;
   remarksid  NUMBER;
   startdate  DATE;
   stopdate   DATE;
   /******************************************************************************
   NAME:       INSERTDEVSTARTSTOPFROMIMDS
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     INSERTDEVSTARTSTOPFROMIMDS
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       deviationstartstoptrx)

******************************************************************************/
BEGIN

	 /*GET MOCID for gathering code ids*/
	 GET_MOCID_BY_ELCUNITID(currentelcin,unitidin,mocvar);

	 IF mocvar IS NOT NULL THEN
	 /*Get Aircraftid to make sure correct schedule line*/
	 	   GET_AIRCRAFTID_BY_MOCEQUIPID(mocvar,equipidin,acidvar);

		   IF acidvar IS NOT NULL THEN
	 	   /*Get Squadronid */
		   		 GET_SQUADID_BY_AIRCRAFTID(acidvar,squadvar);

				 IF squadvar IS NOT NULL THEN
	 			 /*GetScheduleid to apply deviation to*/
	 			 	GET_SCHEDID_BY_SQUADSORTIEACID(squadvar,sortiedatein,sortienumberin,acidvar,schedidvar);

					IF schedidvar IS NOT NULL THEN
	 				/*Get Deviationid*/
	 					  GET_DEVID_BY_MOCDEVCODE(mocvar,devcodein,devidvar);

						  IF devidvar IS NOT NULL THEN
	 					  /*GET CauseCodeid*/
	 					  		GET_CAUSEID_BY_MOCCAUSECODE(mocvar,devcausecodein,causevar);

								IF causevar IS NOT NULL THEN

									 IF stopdatein IS NULL THEN
									 	actionvar :=1;/*Start*/
									 ELSE
									 	 actionvar := 2;/*Stop*/
									 END IF;
									 IF chargeindin = 'Y' THEN
									 	chargevar := 1;
									 ELSE
									 	chargevar := 0;
									 END IF;

									 IF devremarksin IS NOT NULL THEN
										 SELECT SEQ_REMARKS.NEXTVAL
									       INTO   REMARKSID
									       FROM   DUAL;
									       Add_Remarks (REMARKSID, devremarksin);
									 ELSE
									 	 remarksid := NULL;
									 END IF;

									 IF startdatein IS NOT NULL AND starttimein IS NOT NULL THEN
									  	 startdate := TO_DATE(startdatein || starttimein, 'mm/dd/yyyy hh24:MI:ss');
									  ELSE
									  	 startdate := NULL;
									  END IF;
									 IF stopdatein IS NOT NULL AND stoptimein IS NOT NULL THEN
									  	 stopdate := TO_DATE(stopdatein || stoptimein, 'mm/dd/yyyy hh24:MI:ss');
									  ELSE
									  	 stopdate := NULL;
									  END IF;

									    SELECT seq_scheduledeviations.NEXTVAL
									     INTO tmpvar
									     FROM DUAL;

								   	 INSERT INTO EMOC3.SCHEDULEDEVIATIONS (
								   	 		SCHEDULEDEVIATIONID, SCHEDULEID, DEVIATIONCODEID,
											CAUSECODEID, NEWCAUSECODE, SORTIENUM, SORTIEDATE,
											SORTIEMOD, ACTIONOPTIONS, CHARGEABLE, STARTDATETIME,
								   			STOPDATETIME, MAINTENANCEEVENTID, DEVIATIONSREMARKS,
								   			INTERFACELOGID)
									 VALUES (tmpvar, schedidvar, devidvar, causevar, NULL,
									 		 sortienumberin, sortiedatein, sortiemodifierin, actionvar,
											 chargevar, startdate, stopdate,
											 mainteventidin, remarksid, NULL);
								END IF;
							END IF;
					  END IF;
				 END IF;
			END IF;
		END IF;

--EXCEPTION
 --  WHEN NO_DATA_FOUND
 --  THEN
 --     NULL;
 --  WHEN OTHERS
 --  THEN
      -- Consider logging the error and then re-raise
--      RAISE;
END INSERTDEVSTARTSTOPFROMIMDS;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."INSERTEQUIPLOCATIONUPDATETRX" ( 
   p_homeelc                  VARCHAR2, 
   p_currentelc               VARCHAR2, 
   p_unitid                   VARCHAR2, 
   p_equipmentid              VARCHAR2, 
   p_locationcode             VARCHAR2, 
   p_hostunitdateandtime      VARCHAR2, 
   p_transactionordinaldate   VARCHAR2 
) 
AS 
/****************************************************************************** 
   NAME:       InsertEquipLocationUpdateTrx 
   PURPOSE: 
 
   REVISIONS: 
   Ver        Date        Author           Description 
   ---------  ----------  ---------------  ------------------------------------ 
   1.0        12/18/2006  mcbride        1. Created this procedure. 
 
   NOTES: 
 
   Automatically available Auto Replace Keywords: 
      Object Name:     InsertEquipLocationUpdateTrx 
      Sysdate:         12/18/2006 
      Date and Time:   12/18/2006, 9:52:49 AM, and 12/18/2006 9:52:49 AM 
      Username:         emoc3) 
      Table Name:       equipmentlocationupdatetrx) 
 
******************************************************************************/ 
   tmpvar      INTEGER := 0; 
   mocidvar    NUMBER; 
   wingidvar   NUMBER; 
   acidvar    NUMBER; 
BEGIN 
   SELECT seq_equiplocationupdate.NEXTVAL 
     INTO tmpvar 
     FROM DUAL; 
 
   INSERT INTO equipmentlocationupdatetrx 
               (equipmentlocationupdatetrxid, homeenterpriselocationcode, 
                currententerpriselocationcode, unitid, equipmentid, 
                locationcode, hostunitdateandtime, 
                transactionordinaldate 
               ) 
        VALUES (tmpvar, p_homeelc, 
                p_currentelc, p_unitid, p_equipmentid, 
                p_locationcode, p_hostunitdateandtime, 
                p_transactionordinaldate 
               ); 
 
   COMMIT; 
   get_mocid_by_elcunitid (p_currentelc, p_unitid, mocidvar); 
   get_aircraftid_by_mocequipid(mocidvar,p_equipmentid,acidvar); 
 
   IF (mocidvar IS NOT NULL) 
   THEN 
      IF (p_locationcode = '*') 
      THEN 
         UPDATE aircraft 
            SET locationcode = NULL, 
                locationid = NULL, 
                aircraft.locationlastupdated = SYSDATE 
          WHERE misequipid = p_equipmentid AND mocid = mocidvar; 
      ELSE 
         UPDATE aircraft 
            SET locationcode = p_locationcode, 
                locationid = 
                   (SELECT locationid 
                      FROM locations 
                     WHERE locationcode = p_locationcode 
                           AND elc = p_currentelc), 
                aircraft.locationlastupdated = SYSDATE 
          WHERE aircraft.misequipid = p_equipmentid 
            AND aircraft.mocid = mocidvar; 
      END IF; 
 
      COMMIT; 
   END IF; 
         emoc_cache.updatechangenotification('aircraft'||to_char(acidvar), 0); 
EXCEPTION 
   WHEN NO_DATA_FOUND 
   THEN 
      NULL; 
   WHEN OTHERS 
   THEN 
      -- Consider logging the error and then re-raise 
      RAISE; 
END insertequiplocationupdatetrx;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."INSERTGAINLOSSSTATUSUPDATETRX" ( 
   p_homeelc                        VARCHAR2, 
   p_currentelc                     VARCHAR2, 
   p_unitid                         VARCHAR2, 
   p_equipmentid                    VARCHAR2, 
   p_maintenancestatuscode          VARCHAR2, 
   p_conditionstatuscode            VARCHAR2, 
   p_occurancedate                  VARCHAR2, 
   p_occurancetime                  VARCHAR2, 
   p_gainlossactioncode             VARCHAR2, 
   p_installationcode               VARCHAR2, 
   p_majorcommandabbreviation       VARCHAR2, 
   p_gainlosstransferoption         VARCHAR2, 
   p_transfertype                   VARCHAR2, 
   p_eventid                        VARCHAR2, 
   p_workcenterevent                VARCHAR2, 
   p_workunitcode                   VARCHAR2, 
   p_requestapprovedconfiguration   VARCHAR2, 
   p_requestactualconfiguration     VARCHAR2, 
   p_hostunitdateandtime            VARCHAR2, 
   p_transactionordinaldate         VARCHAR2 
) 
AS 
/****************************************************************************** 
   NAME:       GAINLOSSSTATUSUPDATETRX 
   PURPOSE: 
 
   REVISIONS: 
   Ver        Date        Author           Description 
   ---------  ----------  ---------------  ------------------------------------ 
   1.0        12/15/2006  mcbride        1. Created this procedure. 
 
   NOTES: 
 
   Automatically available Auto Replace Keywords: 
      Object Name:     GAINLOSSSTATUSUPDATETRX 
      Sysdate:         12/15/2006 
      Date and Time:   12/15/2006, 9:52:49 AM, and 12/15/2006 9:52:49 AM 
      Username:         emoc3) 
      Table Name:       gainlossstatusupdatetrx) 
 
******************************************************************************/ 
   tmpvar      INTEGER     := 0; 
   acidvar     NUMBER; 
   mocidvar    NUMBER; 
   condidvar   NUMBER; 
   condstat    VARCHAR (5); 
BEGIN 
   SELECT seq_gainlossstatusupdate.NEXTVAL 
     INTO tmpvar 
     FROM DUAL; 
 
   INSERT INTO gainlossstatusupdatetrx 
               (gainlossstatusupdatetrxid, homeenterpriselocationcode, 
                currententerpriselocationcode, unitid, equipmentid, 
                maintenancestatuscode, conditionstatuscode, 
                occurancedate, occurancetime, gainlossactioncode, 
                installationcode, majorcommandabbreviation, 
                gainlosstransferoption, transfertype, eventid, 
                workcenterevent, workunitcode, 
                requestapprovedconfiguration, requestactualconfiguration, 
                hostunitdateandtime, transactionordinaldate 
               ) 
        VALUES (tmpvar, p_homeelc, 
                p_currentelc, p_unitid, p_equipmentid, 
                p_maintenancestatuscode, p_conditionstatuscode, 
                p_occurancedate, p_occurancetime, p_gainlossactioncode, 
                p_installationcode, p_majorcommandabbreviation, 
                p_gainlosstransferoption, p_transfertype, p_eventid, 
                p_workcenterevent, p_workunitcode, 
                p_requestapprovedconfiguration, p_requestactualconfiguration, 
                p_hostunitdateandtime, p_transactionordinaldate 
               ); 
 
   COMMIT; 
   get_mocid_by_elcunitid (p_currentelc, p_unitid, mocidvar); 
 
   IF (mocidvar IS NOT NULL) 
   THEN 
      get_aircraftid_by_mocequipid (mocidvar, p_equipmentid, acidvar); 
 
      IF (acidvar IS NOT NULL) 
      THEN 
         UPDATE aircraft 
            SET gainlossactioncode = p_gainlossactioncode, 
                occurancedate = p_occurancedate, 
                occurancetime = p_occurancetime, 
                commandcode = p_majorcommandabbreviation, 
                transfertype = p_transfertype, 
                gainlosstransferoption = p_gainlosstransferoption, 
                statuswuclcn = p_workunitcode, 
                openstatuseventjcn = p_eventid, 
                geoloccode = p_installationcode 
          WHERE aircraftid = acidvar; 
 
         COMMIT; 
 
         IF (p_conditionstatuscode = NULL OR LENGTH (p_conditionstatuscode) = 
                                                                             0 
            ) 
         THEN 
            condstat := NVL (p_maintenancestatuscode, ''); 
         ELSE 
            condstat := 
                    NVL (p_maintenancestatuscode, '') 
                    || p_conditionstatuscode; 
         END IF; 
 
         IF (LENGTH (condstat) > 1) 
         THEN 
            SELECT COUNT (*) 
              INTO tmpvar 
              FROM conditioncodes 
             WHERE TRIM (conditioncode) = condstat AND mocid = mocidvar; 
 
            IF (tmpvar > 0) 
            THEN 
               SELECT condcodeid 
                 INTO condidvar 
                 FROM conditioncodes 
                WHERE TRIM (conditioncode) = condstat AND mocid = mocidvar; 
 
               UPDATE aircraft 
                  SET conditioncodeid = condidvar, 
                      conditioncodetime = SYSDATE 
                WHERE aircraftid = acidvar; 
            END IF; 
         END IF; 
         emoc_cache.updatechangenotification('aircraft'||to_char(acidvar), 0); 
         COMMIT; 
      END IF; 
   END IF; 
END insertgainlossstatusupdatetrx;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."INSERTGEOLOCCODETRX" (
   p_fromelc           VARCHAR2,
   p_fromunitid        VARCHAR2,
   p_geoloccode        VARCHAR2,
   p_narrative         VARCHAR2,
   p_startdate         VARCHAR2,
   p_stopdate          VARCHAR2,
   p_transactioncode   VARCHAR2
)
AS
/******************************************************************************
   NAME:       InsertgeoloccodeTrx
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/24/2006  r mcbride        1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     InsertgeoloccodeTrx
      Sysdate:         12/24/2006
      Date and Time:   12/24/2006, 10:38:46 AM, and 12/24/2006 10:38:46 AM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
   geolocid   NUMBER;
   stopdt     DATE;
   tmpvar     NUMBER;
BEGIN
   geolocid := NULL;
   stopdt := NULL;

   INSERT INTO geoloccodetrx
               (geoloccodetrxid, fromenterpriselocationcode, fromunitid,
                geoloccode, geoloccodenarrative, startdate, stopdate,
                transactioncode, dateprocessed
               )
        VALUES (seq_geoloccodetrx.NEXTVAL, p_fromelc, p_fromunitid,
                p_geoloccode, p_narrative, p_startdate, p_stopdate,
                p_transactioncode, SYSDATE
               );

   COMMIT;

   IF (p_geoloccode IS NOT NULL)
   THEN
      IF (p_stopdate IS NOT NULL)
      THEN
         stopdt := TO_DATE (p_stopdate, 'YYYY-MM-DD');
      END IF;

      SELECT COUNT (*)
        INTO tmpvar
        FROM stationloccodes
       WHERE stationloccodes.stationloc = RTRIM (p_geoloccode);

      IF (tmpvar > 0)
      THEN
         SELECT stationloccodes.staloccodeid
           INTO geolocid
           FROM emoc3.stationloccodes
          WHERE stationloccodes.stationloc = RTRIM (p_geoloccode);

         IF (p_transactioncode = 'D')
         THEN
            UPDATE aircraft
               SET staloccodeid = NULL,
                   geoloccode = NULL
             WHERE staloccodeid = geolocid;

            DELETE FROM stationloccodes
                  WHERE staloccodeid = geolocid;
         ELSE
            upd_statloc (p_geoloccode,
                         p_narrative,
                         geolocid,
                         TO_DATE (p_startdate, 'YYYY-MM-DD'),
                         stopdt
                        );
         END IF;

         COMMIT;
      ELSE
         IF (p_transactioncode = 'A')
         THEN
            IF (p_geoloccode IS NOT NULL)
            THEN
               INSERT INTO stationloccodes
                           (staloccodeid, stationloc,
                            stalocnarrative, camsinit, mocid,
                            startdate, stopdate
                           )
                    VALUES (seq_stationlocs.NEXTVAL, p_geoloccode,
                            p_narrative, SYSDATE, 0,
                            TO_DATE (p_startdate, 'YYYY-MM-DD'), stopdt
                           );

               COMMIT;
            END IF;
         END IF;
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END insertgeoloccodetrx;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."INSERTINVENTORYSTATUSUPDATETRX" ( 
   p_homeelc                      VARCHAR2, 
   p_currentelc                   VARCHAR2, 
   p_unitid                       VARCHAR2, 
   p_equipmentid                  VARCHAR2, 
   p_gainlossactioncode           VARCHAR2, 
   p_changedate                   VARCHAR2, 
   p_changetime                   VARCHAR2, 
   p_possessionid                 VARCHAR2, 
   p_assignmentstatuscode         VARCHAR2, 
   p_assignmentcommandabbr        VARCHAR2, 
   p_aircraftconfigid             VARCHAR2, 
   p_trainerreportingdesignator   VARCHAR2, 
   p_missiondesignseries          VARCHAR2, 
   p_majorcommandabbr             VARCHAR2, 
   p_hostunitdateandtime          VARCHAR2, 
   p_transactionordinaldate       VARCHAR2 
) 
AS 
   tmpvar      NUMBER; 
   trxidvar    NUMBER; 
   acidvar     NUMBER; 
   sqidvar     NUMBER; 
   mocidvar    NUMBER; 
   wingidvar   NUMBER; 
   wcidvar     NUMBER; 
   sqnamevar   VARCHAR (50); 
   porgidvar   VARCHAR (10); 
   mdsidvar    NUMBER; 
/****************************************************************************** 
   NAME:       insertstatusupdatetrx 
   PURPOSE: 
 
   REVISIONS: 
   Ver        Date        Author           Description 
   ---------  ----------  ---------------  ------------------------------------ 
   1.0        12/15/2006  r mcbride        1. Created this procedure. 
 
   NOTES: 
 
   Automatically available Auto Replace Keywords: 
      Object Name:     insertstatusupdatetrx 
      Sysdate:         12/15/2006 
      Date and Time:   12/15/2006, 10:30:55 AM, and 12/15/2006 10:30:55 AM 
      Username:         emoc3) 
      Table Name:       inventorystatusupdatetrx) 
 
******************************************************************************/ 
BEGIN 
   SELECT seq_inventorystatusupdate.NEXTVAL 
     INTO tmpvar 
     FROM DUAL; 
 
   INSERT INTO inventorystatusupdatetrx 
               (inventorystatusupdatetrxid, homeenterpriselocationcode, 
                currententerpriselocationcode, unitid, equipmentid, 
                gainlossactioncode, changedate, changetime, 
                possessionid, assignmentstatuscode, 
                assignmentcommandabbr, aircraftconfigid, 
                trainerreportingdesignator, missiondesignseries, 
                majorcommandabbr, hostunitdateandtime, 
                transactionordinaldate 
               ) 
        VALUES (tmpvar, p_homeelc, 
                p_currentelc, p_unitid, p_equipmentid, 
                p_gainlossactioncode, p_changedate, p_changetime, 
                p_possessionid, p_assignmentstatuscode, 
                p_assignmentcommandabbr, p_aircraftconfigid, 
                p_trainerreportingdesignator, p_missiondesignseries, 
                p_majorcommandabbr, p_hostunitdateandtime, 
                p_transactionordinaldate 
               ); 
 
   COMMIT; 
   get_mocid_by_elcunitid (p_currentelc, p_unitid, mocidvar); 
 
   IF (mocidvar IS NOT NULL) 
   THEN 
      get_aircraftid_by_mocequipid (mocidvar, p_equipmentid, acidvar); 
 
      IF (p_possessionid IS NOT NULL) 
      THEN 
         SELECT COUNT (*) 
           INTO tmpvar 
           FROM possessions 
          WHERE possessioncode = p_possessionid AND mocid = mocidvar; 
 
         IF (tmpvar = 0) 
         THEN 
            INSERT INTO possessions 
                        (possessionid, possessioncode, defaultpossession, 
                         mocid 
                        ) 
                 VALUES (seq_possessions.NEXTVAL, p_possessionid, 0, 
                         mocidvar 
                        ); 
 
            COMMIT; 
         END IF; 
      END IF; 
 
      IF (acidvar IS NOT NULL) 
      THEN 
         UPDATE aircraft 
            SET possessionid = 
                   (SELECT possessionid 
                      FROM possessions 
                     WHERE possessioncode = p_possessionid 
                           AND mocid = mocidvar), 
                assignmentstatus = p_assignmentstatuscode, 
                assignmentcmd = p_assignmentcommandabbr, 
                acft_config_id = p_aircraftconfigid, 
                gainlossactioncode = p_gainlossactioncode, 
                commandcode = p_majorcommandabbr, 
                changedate = p_changedate, 
                changetime = p_changetime, 
                reportdesig = p_trainerreportingdesignator 
          WHERE aircraftid = acidvar; 
      END IF; 
   END IF; 
         emoc_cache.updatechangenotification('aircraft'||to_char(acidvar), 0); 
EXCEPTION 
   WHEN NO_DATA_FOUND 
   THEN 
      NULL; 
   WHEN OTHERS 
   THEN 
      -- Consider logging the error and then re-raise 
      RAISE; 
END insertinventorystatusupdatetrx;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."INSERTLOCATIONCODETRX" (
   p_homeelc                   VARCHAR2,
   p_currentelc                VARCHAR2,
   p_locationcode              VARCHAR2,
   p_allowablequantity         VARCHAR2,
   p_locationrestrictioncode   VARCHAR2,
   p_hostunitdateandtime       VARCHAR2,
   p_transactionordinaldate    VARCHAR2,
   p_transactiontype           VARCHAR2,
   p_newlocationcode           VARCHAR2
)
IS
   tmpvar   NUMBER;
/******************************************************************************
   NAME:       InsertLocationCodeTrx
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  r mcbride        1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     InsertLocationCodeTrx
      Sysdate:         12/18/2006
      Date and Time:   12/18/2006, 10:16:05 AM, and 12/18/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       InsertLocationCodeTrx)

******************************************************************************/
BEGIN
   SELECT seq_locationcodetrx.NEXTVAL
     INTO tmpvar
     FROM DUAL;

   INSERT INTO locationcodetrx
               (locationcodetrxid, homeenterpriselocationcode,
                currententerpriselocationcode, locationcode, newlocationcode,
                allowablequantity, locationrestrictioncode,
                transactionordinaldate, hostunitdateandtime,
                transactiontype
               )
        VALUES (tmpvar, p_homeelc,
                p_currentelc, p_locationcode, p_newlocationcode,
                p_allowablequantity, p_locationrestrictioncode,
                p_transactionordinaldate, p_hostunitdateandtime,
                p_transactiontype
               );

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END insertlocationcodetrx;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."INSERTMDSEQUIPMENTTRX" ( 
   p_homeelc                       VARCHAR, 
   p_currentelc                    VARCHAR, 
   p_unitid                        VARCHAR, 
   p_equipmentid                   VARCHAR, 
   p_serialnumber                  VARCHAR, 
   p_standardreportingdesignator   VARCHAR, 
   p_afi21103selectionindicator    VARCHAR, 
   p_possessionid                  VARCHAR, 
   p_assignmentstatuscode          VARCHAR, 
   p_assignmentcommandabbr         VARCHAR, 
   p_aircraftconfigurationid       VARCHAR, 
   p_programelementcode            VARCHAR, 
   p_maintenancetypeinterval       VARCHAR, 
   p_operatingtime                 VARCHAR, 
   p_previousoperatingtime         VARCHAR, 
   p_totalsorties                  VARCHAR, 
   p_totallandings                 VARCHAR, 
   p_fullstoplandings              VARCHAR, 
   p_createautohistoryeh           VARCHAR, 
   p_itemmanufacturer              VARCHAR, 
   p_equipmentacceptancedate       VARCHAR, 
   p_typeofrepair                  VARCHAR, 
   p_repairfrequency               VARCHAR, 
   p_repairtypeinterval            VARCHAR, 
   p_lastoverhauldate              VARCHAR, 
   p_lastoverhaultime              VARCHAR, 
   p_primeremoteterminalid         VARCHAR, 
   p_secondaryremoteterminalid     VARCHAR, 
   p_localoption                   VARCHAR, 
   p_owningworkcenter              VARCHAR, 
   p_supportgeneralreportable      VARCHAR, 
   p_supplyfactor                  VARCHAR, 
   p_transactionordinaldate        VARCHAR, 
   p_hostunitdateandtime           VARCHAR, 
   p_transactiontype               VARCHAR, 
   p_mds                           VARCHAR, 
   p_mdsblock                      VARCHAR 
) 
AS 
   tmpvar      NUMBER; 
   trxidvar    NUMBER; 
   acidvar     NUMBER; 
   sqidvar     NUMBER; 
   mocidvar    NUMBER; 
   wingidvar   NUMBER; 
   wcidvar     NUMBER; 
   sqnamevar   VARCHAR (50); 
   porgidvar   VARCHAR (10); 
   mdsidvar    NUMBER; 
/****************************************************************************** 
   NAME:       MDSEquipmentLoad 
   PURPOSE: 
 
   REVISIONS: 
   Ver        Date        Author           Description 
   ---------  ----------  ---------------  ------------------------------------ 
   1.0        12/23/2006  r mcbride        1. Created this procedure. 
 
   NOTES: 
 
   Automatically available Auto Replace Keywords: 
      Object Name:     MDSEquipmentLoad 
      Sysdate:         12/23/2006 
      Date and Time:   12/23/2006, 10:37:53 AM, and 12/23/2006 10:37:53 AM 
      Username:         (emoc3) 
      Table Name:       (mdsequipmenttrx) 
 
******************************************************************************/ 
BEGIN 
   SELECT seq_mdsequipmenttrx.NEXTVAL 
     INTO trxidvar 
     FROM DUAL; 
 
   INSERT INTO mdsequipmenttrx 
               (mdsequiptrxid, homeenterpriselocationcode, 
                currententerpriselocationcode, unitid, equipmentid, 
                serialnumber, standardreportingdesignator, 
                afi21103selectionindicator, possessionid, 
                assignmentstatuscode, assignmentcommandabbreviation, 
                aircraftconfigurationid, programelementcode, 
                maintenancetypeinterval, operatingtime, 
                previousoperatingtime, totalsorties, totallandings, 
                fullstoplandings, createautohistoryeh, 
                itemmanufacturer, equipmentacceptancedate, 
                typeofrepair, repairfrequency, repairtypeinterval, 
                lastoverhauldate, lastoverhaultime, 
                primeremoteterminalid, secondaryremoteterminalid, 
                localoption, owningworkcenter, 
                supportgeneralreportable, supplyfactor, 
                transactionordinaldate, hostunitdateandtime, 
                transactiontype, equipmentdesignator, productionblocknumber 
               ) 
        VALUES (trxidvar, p_homeelc, 
                p_currentelc, p_unitid, p_equipmentid, 
                p_serialnumber, p_standardreportingdesignator, 
                p_afi21103selectionindicator, p_possessionid, 
                p_assignmentstatuscode, p_assignmentcommandabbr, 
                p_aircraftconfigurationid, p_programelementcode, 
                p_maintenancetypeinterval, p_operatingtime, 
                p_previousoperatingtime, p_totalsorties, p_totallandings, 
                p_fullstoplandings, p_createautohistoryeh, 
                p_itemmanufacturer, p_equipmentacceptancedate, 
                p_typeofrepair, p_repairfrequency, p_repairtypeinterval, 
                p_lastoverhauldate, p_lastoverhaultime, 
                p_primeremoteterminalid, p_secondaryremoteterminalid, 
                p_localoption, p_owningworkcenter, 
                p_supportgeneralreportable, p_supplyfactor, 
                p_transactionordinaldate, p_hostunitdateandtime, 
                p_transactiontype, p_mds, p_mdsblock 
               ); 
 
   COMMIT; 
   get_wingid_by_elcunitid (p_currentelc, p_unitid, wingidvar); 
 
   IF (LOWER (p_transactiontype) = 'missiondesignseriesequipmentload') 
   THEN 
      IF (wingidvar IS NOT NULL) 
      THEN 
         get_mocid_by_elcunitid (p_currentelc, p_unitid, mocidvar); 
 
         SELECT COUNT (*) 
           INTO tmpvar 
           FROM workcenters 
          WHERE workcentercode = p_owningworkcenter AND wingid = wingidvar; 
 
         IF (tmpvar > 0) 
         THEN 
            SELECT workcenterid, porgid 
              INTO wcidvar, porgidvar 
              FROM (SELECT workcenterid, porgid 
                      FROM workcenters 
                     WHERE workcentercode = p_owningworkcenter 
                       AND wingid = wingidvar 
                       AND ROWNUM < 2); 
         END IF; 
 
         SELECT COUNT (*) 
           INTO tmpvar 
           FROM squadrons 
          WHERE wingid = wingidvar AND organization_id = porgidvar; 
 
         IF (tmpvar > 0) 
         THEN 
            SELECT squadronid 
              INTO sqidvar 
              FROM (SELECT squadronid 
                      FROM squadrons 
                     WHERE wingid = wingidvar 
                       AND organization_id = porgidvar 
                       AND ROWNUM < 2); 
         ELSE 
            SELECT seq_squadrons.NEXTVAL 
              INTO sqidvar 
              FROM DUAL; 
 
            INSERT INTO squadrons 
                        (squadronid, squadronname, shortname, 
                         organization_id, mocid, wingid, 
                         colorid 
                        ) 
                 VALUES (sqidvar, p_owningworkcenter, p_owningworkcenter, 
                         porgidvar, mocidvar, wingidvar, 
                         NVL ((SELECT MIN (colorid) 
                                 FROM colors 
                                WHERE mocid = mocidvar), 0) 
                        ); 
 
            COMMIT; 
         END IF; 
 
         SELECT COUNT (*) 
           INTO tmpvar 
           FROM aircraftmds 
          WHERE aircraftmds = p_mds 
            AND blocknumber = NVL (p_mdsblock, '000') 
            AND mocid = mocidvar; 
 
         IF (tmpvar = 0) 
         THEN 
            SELECT seq_aircraftmds.NEXTVAL 
              INTO mdsidvar 
              FROM DUAL; 
 
            INSERT INTO aircraftmds 
                        (aircraftmdsid, aircraftmds, blocknumber, mocid, 
                         numberofstations, numberofengines 
                        ) 
                 VALUES (mdsidvar, p_mds, NVL (p_mdsblock, '000'), mocidvar, 
                         1, 1 
                        ); 
 
            COMMIT; 
         ELSE 
            SELECT aircraftmdsid 
              INTO mdsidvar 
              FROM aircraftmds 
             WHERE aircraftmds = p_mds 
               AND blocknumber = NVL (p_mdsblock, '000') 
               AND mocid = mocidvar; 
         END IF; 
 
         IF (p_possessionid IS NOT NULL) 
         THEN 
            SELECT COUNT (*) 
              INTO tmpvar 
              FROM possessions 
             WHERE possessioncode = p_possessionid AND mocid = mocidvar; 
 
            IF (tmpvar = 0) 
            THEN 
               INSERT INTO possessions 
                           (possessionid, possessioncode, defaultpossession, 
                            mocid 
                           ) 
                    VALUES (seq_possessions.NEXTVAL, p_possessionid, 0, 
                            mocidvar 
                           ); 
 
               COMMIT; 
            END IF; 
         END IF; 
 
         SELECT COUNT (*) 
           INTO tmpvar 
           FROM aircraft 
          WHERE (   (    misequipid = p_equipmentid 
                     AND homeenterpriselocationcode = p_homeelc 
                     AND missiondesignseries = p_mds 
                     AND missiondesignseriesblock = NVL (p_mdsblock, '000') 
                    ) 
                 OR (misequipid = p_equipmentid) 
                ) 
            AND mocid = mocidvar; 
 
         IF tmpvar = 0 
         THEN 
            SELECT seq_aircraft.NEXTVAL 
              INTO acidvar 
              FROM DUAL; 
 
            -- aicraft not found in database. Ok to add  -- 
            INSERT INTO aircraft 
                        (aircraftid, misequipid, 
                         tailnumber, 
                         shorttailnumber, serialnumber, missiondesignseries, 
                         missiondesignseriesblock, 
                         possessionid, 
                         aircraftyear, 
                         aircraft.acft_config_id, homeenterpriselocationcode, 
                         currententerpriselocationcode, unitid, 
                         owningworkcenter, mocid, squadronid, aircraftmdsid, 
                         assignmentstatus, assignmentcmd, 
                         statuscodeid 
                        ) 
                 VALUES (acidvar, p_equipmentid, 
                         SUBSTR (p_equipmentid, 2, 4), 
                         SUBSTR (p_equipmentid, 2, 4), p_serialnumber, p_mds, 
                         NVL (p_mdsblock, '000'), 
                         (SELECT possessionid 
                            FROM possessions 
                           WHERE possessioncode = p_possessionid 
                             AND mocid = mocidvar), 
                         NVL (SUBSTR (p_serialnumber, 1, 2), '00'), 
                         p_aircraftconfigurationid, p_homeelc, 
                         p_currentelc, p_unitid, 
                         p_owningworkcenter, mocidvar, sqidvar, mdsidvar, 
                         p_assignmentstatuscode, p_assignmentcommandabbr, 
                         (SELECT statuscodeid 
                            FROM (SELECT statuscodeid 
                                    FROM statuscode 
                                   WHERE mocid = mocidvar 
                                     AND defaultstatuscode = 1 
                                     AND ROWNUM < 2)) 
                        ); 
 
            COMMIT; 
            addaircraftenginedata (acidvar, mdsidvar); 
         END IF; 
      ELSE 
         UPDATE mdsequipmenttrx 
            SET applicationnote = 'ELC and UnitId not found in Wings table.' 
          WHERE mdsequiptrxid = trxidvar; 
      END IF; 
   ELSE 
      get_mocid_by_elcunitid (p_currentelc, p_unitid, mocidvar); 
 
      IF (mocidvar IS NOT NULL) 
      THEN 
         get_aircraftid_by_mocequipid (mocidvar, p_equipmentid, acidvar); 
 
         IF (acidvar IS NOT NULL) 
         THEN 
            IF (LOWER (p_transactiontype) = 
                                          'missiondesignseriesequipmentdelete' 
               ) 
            THEN 
               delete_aircraft (acidvar); 
            ELSE 
               IF (p_localoption IS NOT NULL) 
               THEN 
                  UPDATE aircraft 
                     SET aircraft.localoption = p_localoption 
                   WHERE aircraftid = acidvar; 
 
                  COMMIT; 
               END IF; 
 
               IF (p_assignmentstatuscode IS NOT NULL) 
               THEN 
                  UPDATE aircraft 
                     SET aircraft.assignmentstatus = p_assignmentstatuscode 
                   WHERE aircraftid = acidvar; 
 
                  COMMIT; 
               END IF; 
 
               IF (p_assignmentcommandabbr IS NOT NULL) 
               THEN 
                  UPDATE aircraft 
                     SET aircraft.assignmentcmd = p_assignmentcommandabbr 
                   WHERE aircraftid = acidvar; 
 
                  COMMIT; 
               END IF; 
 
               IF (p_aircraftconfigurationid IS NOT NULL) 
               THEN 
                  UPDATE aircraft 
                     SET aircraft.multiconfigid = p_aircraftconfigurationid 
                   WHERE aircraftid = acidvar; 
 
                  COMMIT; 
               END IF; 
 
               IF (p_owningworkcenter IS NOT NULL) 
               THEN 
                  UPDATE aircraft 
                     SET aircraft.owningworkcenter = p_owningworkcenter 
                   WHERE aircraftid = acidvar; 
 
                  COMMIT; 
                  get_squadid_by_owc (p_owningworkcenter, mocidvar, sqidvar); 
 
                  IF (sqidvar IS NOT NULL) 
                  THEN 
                     UPDATE aircraft 
                        SET squadronid = sqidvar 
                      WHERE aircraftid = acidvar; 
 
                     COMMIT; 
                  END IF; 
               END IF; 
            END IF; 
         END IF; 
      END IF; 
               emoc_cache.updatechangenotification('aircraft'||to_char(acidvar), 0); 
   END IF; 
 
   COMMIT; 
END insertmdsequipmenttrx;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."INSERTMICAPTRX" (
   p_fromelc                    VARCHAR2,
   p_unitid                     VARCHAR2,
   p_equipmentid                VARCHAR2,
   p_jobcontrolnumber           VARCHAR2,
   p_documentnumber             VARCHAR2,
   p_nomenclature               VARCHAR2,
   p_estimateddeliverydate      VARCHAR2,
   p_issuedate                  VARCHAR2,
   p_urgencyjustificationcode   VARCHAR2,
   p_transactioncode            VARCHAR2,
   p_workunitcode               VARCHAR2
)
AS
/******************************************************************************
   NAME:       InsertMicapTrx
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/26/2006  r mcbride        1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     InsertMicapTrx
      Sysdate:         12/26/2006
      Date and Time:   12/26/2006, 8:04:58 AM, and 12/26/2006 8:04:58 AM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

   new OracleParameter("p_fromelc",OracleType.VarChar,4,ParameterDirection.Input,
   new OracleParameter("p_unitid",OracleType.VarChar,1,ParameterDirection.Input,
   new OracleParameter("p_equipmentid",OracleType.VarChar,5,ParameterDirection.Input,
   new OracleParameter("p_jobcontrolnumber",OracleType.VarChar,12,ParameterDirection.Input,
   new OracleParameter("p_documentnumber",OracleType.VarChar,50,ParameterDirection.Input,
   new OracleParameter("p_nomenclature",OracleType.VarChar,50,ParameterDirection.Input,
   new OracleParameter("p_estimateddeliverydate",OracleType.VarChar,7,ParameterDirection.Input,
   new OracleParameter("p_issuedate",OracleType.VarChar,7,ParameterDirection.Input,
   new OracleParameter("p_urgencyjustificationcode",OracleType.VarChar,2,ParameterDirection.Input,
   new OracleParameter("p_transactioncode",OracleType.VarChar,1,ParameterDirection.Input,
   new OracleParameter("p_workunitcode",OracleType.VarChar,32,ParameterDirection.Input,

******************************************************************************/
BEGIN
   INSERT INTO micaptrx
               (micaptrxid, fromenterpriselocationcode, fromunitid,
                equipmentid, jobcontrolnumber, documentnumber,
                nomenclature, estimateddeliverydate, issuedate,
                urgencyjustificationcode, workunitcode,
                transactioncode, dateprocessed
               )
        VALUES (seq_micaptrx.NEXTVAL, p_fromelc, p_unitid,
                p_equipmentid, p_jobcontrolnumber, p_documentnumber,
                p_nomenclature, p_estimateddeliverydate, p_issuedate,
                p_urgencyjustificationcode, p_workunitcode,
                p_transactioncode, SYSDATE
               );

   COMMIT;

   IF (LENGTH (p_documentnumber) > 0)
   THEN
      IF (LENGTH (p_jobcontrolnumber) > 0)
      THEN
         IF (p_transactioncode = 'D')
         THEN
            deleteimdscdbmicap (p_equipmentid,
                                p_fromelc,
                                p_unitid,
                                p_jobcontrolnumber,
                                p_documentnumber
                               );
         ELSE
    IF (p_transactioncode = 'T')
   THEN
    transferimdscdbmicap(p_equipmentid,
                     p_fromelc,
                               p_unitid,
                               p_jobcontrolnumber,
                               p_documentnumber,
                               p_nomenclature,
                               p_estimateddeliverydate,
                               p_issuedate,
                               p_urgencyjustificationcode,
                               p_workunitcode
                              );
   ELSE
             addimdscdbmicap (p_equipmentid,
                     p_fromelc,
                               p_unitid,
                               p_jobcontrolnumber,
                               p_documentnumber,
                               p_nomenclature,
                               p_estimateddeliverydate,
                               p_issuedate,
                               p_urgencyjustificationcode,
                               p_workunitcode
                              );
         END IF;
      END IF;
   END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END insertmicaptrx;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."INSERTOPERATIONALEVENTLOADTRX" (
   oeltransidin	  			     NUMBER,
   homeelcin                     VARCHAR2,
   currentelcin                  VARCHAR2,
   unitidin                      VARCHAR2,
   isortiedatein				 VARCHAR2,
   sortiedatein                  VARCHAR2,
   dsortiedatein				 VARCHAR2,
   durexcd24hrsin				 VARCHAR2,
   opeventtypeeventin			 VARCHAR2,
   assnoneblockin				 VARCHAR2,
   estfuelloadin				 VARCHAR2,
   equipidin    				 VARCHAR2,
   schedblknumin				 VARCHAR2,
   sortienumberin 				 VARCHAR2,
   starttimein                   VARCHAR2,
   stoptimein                    VARCHAR2,
   missionnumin                  VARCHAR2,
   devcausecodein                VARCHAR2,
   chargeindin                   VARCHAR2
)
AS
   tmpvar   NUMBER;
   /******************************************************************************
   NAME:       INSERTOPERATIONALEVENTLOADTRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     INSERTOPERATIONALEVENTLOADTRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       operationaleventloadtrx)

******************************************************************************/
BEGIN
   SELECT seq_opereventload.NEXTVAL
     INTO tmpvar
     FROM DUAL;

   	 INSERT INTO EMOC3.OPERATIONALEVENTLOADTRX (
   	 		OPERATIONALEVENTLOADTRXID, OELTRANSACTIONID, HOMEENTERPRISELOCATIONCODE,
   			CURRENTENTERPRISELOCATIONCODE, UNITID, SORTIEDATE,
   			DURATIONEXCEEDS24HOURS, OPERATIONALEVENTTYPEEVENT, ASSIGNTOONESCHEDULEINGBLOCK,
   			ESTIMATEDFUELLOAD, EQUIPMENTID, SORTIENUMBER, STARTTIME, STOPTIME,
			MISSIONNUMBER, DEVIATIONCAUSECODE, CHARGEABLEINDICATOR, DATEPROCESSED, SCHEDULINGBLOCKNUMBER)
	 VALUES (tmpvar, oeltransidin, homeelcin, currentelcin, unitidin, isortiedatein,
    		 durexcd24hrsin, opeventtypeeventin, assnoneblockin, estfuelloadin,
			 equipidin, sortienumberin, starttimein, stoptimein, missionnumin,
    		 devcausecodein, chargeindin, SYSDATE, schedblknumin);

	 INSERTOPEREVENTLOADFROMIMDS(oeltransidin, homeelcin, currentelcin, unitidin, isortiedatein,
    		 sortiedatein, dsortiedatein, durexcd24hrsin, opeventtypeeventin, assnoneblockin,
			 estfuelloadin, equipidin, schedblknumin, sortienumberin, starttimein, stoptimein, missionnumin,
    		 devcausecodein, chargeindin);

--EXCEPTION
 --  WHEN NO_DATA_FOUND
--   THEN
--     NULL;
--   WHEN OTHERS
 --  THEN
      -- Consider logging the error and then re-raise
  --    RAISE;
END INSERTOPERATIONALEVENTLOADTRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."INSERTOPEREVENTDELETETRX" (
   homeelcin                     VARCHAR2,
   currentelcin                  VARCHAR2,
   unitidin                      VARCHAR2,
   equipidin                     VARCHAR2,
   isortiedatein     VARCHAR2,
   sortiedatein         VARCHAR2,
   sortienumberin       VARCHAR2
)
AS
   tmpvar   NUMBER;
   /******************************************************************************
   NAME:       INSERTOPEREVENTDELETETRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     INSERTOPEREVENTDELETETRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       operationaleventdeletetrx)

******************************************************************************/
BEGIN
   SELECT seq_opereventdelete.NEXTVAL
     INTO tmpvar
     FROM DUAL;

     INSERT INTO EMOC3.OPERATIONALEVENTDELETETRX (
       OPERATIONALEVENTDELETETRXID, HOMEENTERPRISELOCATIONCODE,
      CURRENTENTERPRISELOCATIONCODE, UNITID, EQUIPMENTID, SORTIEDATE,
   SORTIENUMBER, DATEPROCESSED)
  VALUES (tmpvar, homeelcin, currentelcin, unitidin, equipidin,
     isortiedatein, sortienumberin, SYSDATE);

  DELETEOPEREVENTDELETEFROMIMDS(homeelcin, currentelcin, unitidin, equipidin,
     isortiedatein, sortiedatein, sortienumberin);

--EXCEPTION
--   WHEN NO_DATA_FOUND
--   THEN
 --     NULL;
 --  WHEN OTHERS
--   THEN
      -- Consider logging the error and then re-raise
 --     RAISE;
END INSERTOPEREVENTDELETETRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."INSERTOPEREVENTLOADFROMIMDS" (
   oeltransidin           NUMBER,
   homeelcin                     VARCHAR2,
   currentelcin                  VARCHAR2,
   unitidin                      VARCHAR2,
   isortiedatein                 VARCHAR2,
   sortiedatein       VARCHAR2,
   dsortiedatein     VARCHAR2,
   durexcd24hrsin     VARCHAR2,
   opeventtypeeventin    VARCHAR2,
   assnoneblockin     VARCHAR2,
   estfuelloadin     VARCHAR2,
   equipidin      VARCHAR2,
   schedblknumin     VARCHAR2,
   sortienumberin      VARCHAR2,
   starttimein                   VARCHAR2,
   stoptimein                    VARCHAR2,
   missionnumin                  VARCHAR2,
   devcausecodein                VARCHAR2,
   chargeindin                   VARCHAR2
)
AS
   tmpvar   NUMBER;
   mocvar   NUMBER;
   acidvar NUMBER;
   devidvar NUMBER;
   causevar NUMBER;
   wxvar    NUMBER;
   squadvar NUMBER;
   missvar  NUMBER;
   startdate DATE;
   stopdate DATE;
   starttime NUMBER;
   stoptime NUMBER;
   schedday DATE;
   blocknum NUMBER;
   causecnt NUMBER;
   schedcnt NUMBER;
   overcnt NUMBER;
   /******************************************************************************
   NAME:       INSERTOPEREVENTLOADFROMIMDS
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     INSERTOPEREVENTLOADFROMIMDS
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       operationaleventloadtrx)

******************************************************************************/
BEGIN
   
  /*GET MOCID for gathering code ids*/
  GET_MOCID_BY_ELCUNITID(currentelcin,unitidin,mocvar);
  IF mocvar IS NOT NULL THEN
  /*Get Aircraftid to make sure correct schedule line*/
      GET_AIRCRAFTID_BY_MOCEQUIPID(mocvar,equipidin,acidvar);
     IF acidvar IS NOT NULL THEN
        UPD_AIRCRAFT_FUELLOAD(estfuelloadin,acidvar);
         /*Get Squadronid */
         GET_SQUADID_BY_AIRCRAFTID(acidvar,squadvar);
     IF squadvar IS NOT NULL THEN
      /*Get Deviationid*/
         GET_DEVDEFAULT_BY_MOC(mocvar,devidvar);
        IF devidvar IS NOT NULL THEN
         /*GET CauseCodeid*/
        IF devcausecodein IS NOT NULL THEN
         SELECT COUNT(*)
             INTO causecnt
             FROM CAUSECODES
            WHERE mocid = mocvar
              AND causecode = devcausecodein;
         IF causecnt > 0 THEN
          GET_CAUSEID_BY_MOCCAUSECODE(mocvar,devcausecodein,causevar);
         ELSE
           causevar := NULL;
         END IF;
        ELSE
           causevar := NULL;
        END IF;
        /*Get Weathercode*/
        GET_WXDEFAULT_BY_MOC(mocvar,wxvar);
        
        /*Get Missionid*/
        GET_MISSIONID_BY_MOCMISSION(mocvar, missionnumin,missvar);
        IF starttimein IS NOT NULL THEN
         startdate := TO_DATE(dsortiedatein || starttimein, 'mm/dd/yyyy hh24:MI:ss');
        ELSE
          startdate := NULL;
        END IF;
        IF stoptimein IS NOT NULL THEN
         IF TO_NUMBER(stoptimein) < TO_NUMBER(starttimein) THEN
           IF durexcd24hrsin IS NOT NULL THEN
               stopdate := TO_DATE(dsortiedatein || stoptimein, 'mm/dd/yyyy hh24:MI:ss') + 2;--+2
         ELSE
             stopdate := TO_DATE(dsortiedatein || stoptimein, 'mm/dd/yyyy hh24:MI:ss') + 1;--+1
         END IF;
         ELSE
          IF durexcd24hrsin IS NOT NULL THEN
             stopdate := TO_DATE(dsortiedatein || stoptimein, 'mm/dd/yyyy hh24:MI:ss') + 1;--+1
         ELSE
             stopdate := TO_DATE(dsortiedatein || stoptimein, 'mm/dd/yyyy hh24:MI:ss');
         END IF;
         END IF;
         ELSE
           stopdate := NULL;
         END IF; 
         schedday := TO_DATE(dsortiedatein, 'mm/dd/yyyy');

        IF schedblknumin IS NOT NULL THEN
         blocknum := schedblknumin;
        ELSE
         blocknum := NULL;
        END IF;
        CHECK_FOR_DUP_SCHEDULELINE(squadvar,sortiedatein,sortienumberin,acidvar,schedcnt);
        --IF startdate IS NOT NULL and stopdate IS NOT NULL THEN
         --CHECK_FOR_FLIGHT_OVERLAP(sortiedatein,startdate,stopdate,acidvar,overcnt);
        --ELSE
          overcnt := 0;
        --END IF;
        IF schedcnt = 0 AND overcnt = 0 THEN
          SELECT seq_schedule.NEXTVAL
             INTO tmpvar
             FROM DUAL;
          
            INSERT INTO EMOC3.SCHEDULE (
              SCHEDULEID, GO, SCHEDULEDTAKEOFF, SCHEDULEDLANDING, ACTUALTAKEOFF, 
          ACTUALLANDING, SPARE, ADJTAKEOFF, ADJLANDING, AREAARRIVETIME, 
          AREALEAVETIME, LANDINGCODEID, RANGEID, DEVIATIONCODEID, CAUSECODEID, 
             WXCODEID, MISSIONID, AREAID, AIRCRAFTID, PILOTID, SORTIENUM, 
             SORTIEMOD, SORTIEDATE, BLOCKNUMBER, PUBLISHED_FLAG, SCHEDDAY, CALLSIGN, 
             TRANSIENT, DURATIONSCHEDULED, DURATIONACTUAL, CONFIGCODE, 
          SCHEDULEREMARKS, MAINTREMARKS, SORTIE_JOAP, SORTIE_SEMEDX, SQUADRONID, 
             UTILCODEID, CAMSINIT, SCHEDULESOURCE, INTERFACELOGID, TYPE_EVENT, SWAPPEDLINE) 
          VALUES (tmpvar, NULL, startdate, stopdate, NULL, NULL, 0, NULL, NULL, NULL, 
              NULL, NULL, NULL, devidvar,
                 causevar, wxvar, missvar, NULL, acidvar, NULL, sortienumberin, NULL, 
              sortiedatein, blocknum, NULL, schedday, NULL, NULL, NULL, NULL,
                 NULL, NULL, NULL, NULL, NULL, squadvar, NULL, SYSDATE, 341, NULL, 
              opeventtypeeventin, NULL);
       END IF;
         END IF;
     END IF;
   END IF;
  END IF;
--EXCEPTION
--  WHEN NO_DATA_FOUND
 --  THEN
 --     NULL;
 --  WHEN OTHERS
 --  THEN
      -- Consider logging the error and then re-raise
 --     RAISE;
END INSERTOPEREVENTLOADFROMIMDS;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."INSERTOPEREVENTREPLACEMENTTRX" (
   homeelcin                     VARCHAR2,
   currentelcin                  VARCHAR2,
   unitidin                      VARCHAR2,
   isortiedatein				 VARCHAR2,
   sortiedatein                  VARCHAR2,
   sortienumberin   			 VARCHAR2,
   undoreplacementin   			 VARCHAR2,
   equipidin    				 VARCHAR2,
   devcodein    				 VARCHAR2,
   devcausecodein  				 VARCHAR2,
   chargeindin   				 VARCHAR2,
   newequipidin                  VARCHAR2,
   mainteventid                  VARCHAR2,
   devremarksin                  VARCHAR2
)
AS
   tmpvar   NUMBER;
   /******************************************************************************
   NAME:       INSERTOPEREVENTREPLACEMENTTRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     INSERTOPEREVENTREPLACEMENTTRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       operationaleventreplacementtrx)

******************************************************************************/
BEGIN
   SELECT seq_opereventreplacement.NEXTVAL
     INTO tmpvar
     FROM DUAL;

   	 INSERT INTO EMOC3.OPERATIONALEVENTREPLACEMENTTRX (
   	 		OPERATEVENTREPLACEMENTTRXID, HOMEENTERPRISELOCATIONCODE,
   			CURRENTENTERPRISELOCATIONCODE, UNITID, SORTIEDATE, SORTIENUMBER,
   			UNDOREPLACEMENT, EQUIPMENTID, DEVIATIONCODE, DEVIATIONCAUSECODE,
			CHARGEABLEINDICATOR, NEWEQUIPMENTID, MAINTENANCEEVENTID,
			DEVIATIONREMARKS, DATEPROCESSED)
	 VALUES (tmpvar, homeelcin, currentelcin, unitidin, isortiedatein,
    		 sortienumberin, undoreplacementin, equipidin, devcodein,
			 devcausecodein, chargeindin, newequipidin, mainteventid, devremarksin,
			 SYSDATE);

	 INSERTOPEREVTRPLACEMNTFROMIMDS(homeelcin, currentelcin, unitidin, isortiedatein,
    		 sortiedatein, sortienumberin, undoreplacementin, equipidin, devcodein,
			 devcausecodein, chargeindin, newequipidin, mainteventid, devremarksin);

--EXCEPTION
 --  WHEN NO_DATA_FOUND
 --  THEN
--      NULL;
 --  WHEN OTHERS
 --  THEN
      -- Consider logging the error and then re-raise
--      RAISE;
END INSERTOPEREVENTREPLACEMENTTRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."INSERTOPEREVENTUPDATETRX" (
   oeutransidin           NUMBER,
   homeelcin                     VARCHAR2,
   currentelcin                  VARCHAR2,
   unitidin                      VARCHAR2,
   isortiedatein     VARCHAR2,
   sortiedatein                  VARCHAR2,
   schedblocknumberin    VARCHAR2,
   equipidin          VARCHAR2,
   sortienumberin     VARCHAR2,
   istartdatein      VARCHAR2,
   startdatein       VARCHAR2,
   starttimein       VARCHAR2,
   istopdatein      VARCHAR2,
   stopdatein        VARCHAR2,
   stoptimein                    VARCHAR2,
   fuelloadin                    VARCHAR2,
   missionnumin                  VARCHAR2,
   opereventtypeeventin            VARCHAR2
)
AS
   tmpvar   NUMBER;
   /******************************************************************************
   NAME:       INSERTOPEREVENTUPDATETRX
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     INSERTOPEREVENTUPDATETRX
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       operationaleventupdatetrx)

******************************************************************************/
BEGIN
   SELECT seq_opereventupdate.NEXTVAL
     INTO tmpvar
     FROM DUAL;

     INSERT INTO EMOC3.OPERATIONALEVENTUPDATETRX (
       OPERATIONALEVENTUPDATETRXID, OEUTRANSACTIONID, HOMEENTERPRISELOCATIONCODE,
      CURRENTENTERPRISELOCATIONCODE, UNITID, SORTIEDATE, SCHEDULINGBLOCKNUMBER,
      EQUIPMENTID, SORTIENUMBER, STARTDATE, STARTTIME, STOPDATE, STOPTIME,
   FUELLOAD, MISSIONNUMBER, OPERATIONALEVENTTYPEEVENT, DATEPROCESSED)
  VALUES (tmpvar, oeutransidin, homeelcin, currentelcin, unitidin, isortiedatein,
       schedblocknumberin, equipidin, sortienumberin, istartdatein,
    starttimein, istopdatein, stoptimein, fuelloadin, missionnumin,
    opereventtypeeventin, SYSDATE);

  IF schedblocknumberin IS NOT NULL THEN
   UPDATEBLKOPEREVTUPDATEFROMIMDS(oeutransidin, homeelcin, currentelcin, unitidin, isortiedatein,
       sortiedatein, schedblocknumberin, equipidin, sortienumberin, istartdatein, startdatein,
    starttimein, istopdatein, stopdatein, stoptimein, fuelloadin, missionnumin,
    opereventtypeeventin);
  ELSE
   UPDATEOPEREVENTUPDATEFROMIMDS(oeutransidin, homeelcin, currentelcin, unitidin, isortiedatein,
       sortiedatein, schedblocknumberin, equipidin, sortienumberin, istartdatein, startdatein,
    starttimein, istopdatein, stopdatein, stoptimein, fuelloadin, missionnumin,
    opereventtypeeventin);
  END IF;

--EXCEPTION
--   WHEN NO_DATA_FOUND
 --  THEN
 --     NULL;
 --  WHEN OTHERS
 --  THEN
      -- Consider logging the error and then re-raise
 --     RAISE;
END INSERTOPEREVENTUPDATETRX;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."INSERTOPEREVTRPLACEMNTFROMIMDS"
  (
    homeelcin         VARCHAR2,
    currentelcin      VARCHAR2,
    unitidin          VARCHAR2,
    isortiedatein     VARCHAR2,
    sortiedatein      VARCHAR2,
    sortienumberin    VARCHAR2,
    undoreplacementin VARCHAR2,
    equipidin         VARCHAR2,
    devcodein         VARCHAR2,
    devcausecodein    VARCHAR2,
    chargeindin       VARCHAR2,
    newequipidin      VARCHAR2,
    mainteventid      VARCHAR2,
    devremarksin      VARCHAR2 )
AS
  tmpvar           NUMBER;
  mocvar           NUMBER;
  acidvar          NUMBER;
  squadvar         NUMBER;
  schedidvar       NUMBER;
  newschedidvar    NUMBER;
  newacidvar       NUMBER;
  REMARKSIDIN      NUMBER;
  UPDREMARK        NUMBER;
  newsquadvar      NUMBER;
  ERROR_DEV        NUMBER;
  ERROR_CAUSE      NUMBER;
  ERROR_SQ         NUMBER;
  ERROR_SORTIEDATE CHAR(7);
  ERROR_SORTIENUM  NUMBER;
  SWAP             NUMBER;
  NEWREMARK        NUMBER;
  PLACEHOLDER      NUMBER;
  devidvar         NUMBER;
  causevar         NUMBER;
  devidcnt         NUMBER;
  causecnt         NUMBER;
  STATUSCODEVAR    NUMBER;
  /******************************************************************************
  NAME:       INSERTOPEREVTRPLACEMNTFROMIMDS
  PURPOSE:
  REVISIONS:
  Ver        Date        Author           Description
  ---------  ----------  ---------------  ------------------------------------
  1.0        12/15/2006  jwc             1. Created this procedure.
  2.0        7/16/2012   J.Long          4. QC 336/363/499/521 - Undo TS issues
  NOTES:
  Automatically available Auto Replace Keywords:
  Object Name:     INSERTOPEREVTRPLACEMNTFROMIMDS
  Sysdate:         12/15/2006
  Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
  Username:         emoc3)
  Table Name:       operationaleventreplacementtrx)
  ******************************************************************************/
BEGIN
  /*GET MOCID for gathering code ids*/
  GET_MOCID_BY_ELCUNITID(currentelcin,unitidin,mocvar);
  IF mocvar IS NOT NULL THEN
    /*Get Aircraftid to make sure correct schedule line*/
    GET_AIRCRAFTID_BY_MOCEQUIPID(mocvar,equipidin,acidvar);
    IF acidvar IS NOT NULL THEN
      /*Get Aircraftid to make sure correct schedule line*/
      GET_AIRCRAFTID_BY_MOCEQUIPID(mocvar,newequipidin,newacidvar);
      IF newacidvar IS NOT NULL THEN
        /*Get Squadronid */
        GET_SQUADID_BY_AIRCRAFTID(acidvar,squadvar);
        IF squadvar IS NOT NULL THEN
          /*Get Squadronid */
          GET_SQUADID_BY_AIRCRAFTID(newacidvar,newsquadvar);
          IF newsquadvar IS NOT NULL THEN
            /*GetScheduleid to apply deviation to*/
            IF undoreplacementin = 'Y' THEN
              GET_SCHEDID_BY_SQUADSORTIEACID(newsquadvar,sortiedatein,sortienumberin,newacidvar,schedidvar);
              GET_SCHEDID_BY_SQUADSORTIEACID(squadvar,sortiedatein,sortienumberin,acidvar,newschedidvar);
            ELSE
              GET_SCHEDID_BY_SQUADSORTIEACID(squadvar,sortiedatein,sortienumberin,acidvar,schedidvar);
            END IF;
            IF schedidvar IS NOT NULL THEN
              /*Get Deviationid*/
              --IF undoreplacementin = 'Y' THEN
              IF devcodein IS NOT NULL THEN
                SELECT COUNT(*)
                INTO devidcnt
                FROM DEVIATIONCODES
                WHERE mocid       = mocvar
                AND deviationcode = devcodein;
                IF devidcnt       > 0 THEN
                  GET_DEVID_BY_MOCDEVCODE(mocvar,devcodein,devidvar);
                ELSE
                  devidvar := NULL;
                END IF;
              ELSE
                devidvar := NULL;
              END IF;
              /*GET CauseCodeid*/
              IF devcausecodein IS NOT NULL THEN
                SELECT COUNT(*)
                INTO causecnt
                FROM CAUSECODES
                WHERE mocid   = mocvar
                AND causecode = devcausecodein;
                IF causecnt   > 0 THEN
                  GET_CAUSEID_BY_MOCCAUSECODE(mocvar,devcausecodein,causevar);
                ELSE
                  causevar := NULL;
                END IF;
              ELSE
                causevar := NULL;
              END IF;
              --INCREMENT
              --GET REMARK, IF ONE EXISTS
              SELECT SCHEDULEREMARKS
              INTO REMARKSIDIN
              FROM SCHEDULE
              WHERE SCHEDULEID         = schedidvar;
              IF (LENGTH(devremarksin) > 0 OR devremarksin IS NOT NULL) AND undoreplacementin = 'N' THEN
                IF (REMARKSIDIN       IS NOT NULL)THEN
                  UPDATE REMARKS
                  SET REMARKS     = devremarksin,
                    REMARKSDATE   = SYSDATE
                  WHERE REMARKSID = REMARKSIDIN;
                ELSE
                  SELECT SEQ_REMARKS.NEXTVAL INTO REMARKSIDIN FROM DUAL;

                  Add_Remarks (REMARKSIDIN, devremarksin);
                  UPDATE SCHEDULE
                  SET SCHEDULEREMARKS = REMARKSIDIN
                  WHERE SCHEDULEID    = schedidvar;
                END IF;
              END IF;
              --END IF;
              IF undoreplacementin = 'Y' THEN
                --GET THESE TO RESET DEV+CAUSE CODES ON ORIGINAL RECORD
                SELECT DEVIATIONCODEID,
                  CAUSECODEID,
                  SQUADRONID,
                  SORTIEDATE,
                  SORTIENUM,
                  SWAPPEDLINE
                INTO ERROR_DEV,
                  ERROR_CAUSE,
                  ERROR_SQ,
                  ERROR_SORTIEDATE,
                  ERROR_SORTIENUM,
                  SWAP
                FROM SCHEDULE
                WHERE SCHEDULEID = schedidvar;
                SELECT SCHEDULEREMARKS INTO UPDREMARK FROM SCHEDULE WHERE SCHEDULEID = SWAP;
                IF (UPDREMARK IS NULL AND (LENGTH(devremarksin) > 0 OR devremarksin IS NOT NULL)) THEN
                  SELECT SEQ_REMARKS.NEXTVAL INTO NEWREMARK FROM DUAL;

                  Add_Remarks (NEWREMARK, devremarksin);
                  UPDATE SCHEDULE SET SCHEDULEREMARKS = NEWREMARK WHERE SCHEDULEID = schedidvar;
                ELSE
                  UPDATE SCHEDULE SET SCHEDULEREMARKS = UPDREMARK WHERE SCHEDULEID = SWAP;
                  --UPDATE REMARKS
                  --SET REMARKS = SCHEDULEREMARKSIN
                  --WHERE REMARKSID = UPDREMARK;
                END IF;
                UPDATE SCHEDULE
                SET DEVIATIONCODEID = ERROR_DEV,
                  CAUSECODEID       = ERROR_CAUSE
                WHERE SQUADRONID    = squadvar
                AND SORTIEDATE      = ERROR_SORTIEDATE
                AND SORTIENUM       = ERROR_SORTIENUM
                AND SCHEDULEID      = SWAP;
                --1/28/05 To satisfy OnTime FeatureId #99
                --(When doing a Maintenance Interchange using a Spare
                --the Crew Ready information is not being carried forward to the line it is being placed in)
                DELETE SCHEDULESTATUS
                WHERE SCHEDULEID = schedidvar;
                --8/27/2012 Find Default Statusboard Icon for Aircraft
                SELECT SC.STATUSCODEID
                INTO STATUSCODEVAR
                FROM STATUSCODE SC
                JOIN AIRCRAFT AC
                ON SC.MOCID              = AC.MOCID
                WHERE AC.AIRCRAFTID      = newacidvar
                AND SC.DEFAULTSTATUSCODE = 1;
                --8/27/2012 Set Default Statusboard Icon for Aircraft
                UPDATE AIRCRAFT
                SET STATUSCODEID = STATUSCODEVAR
                WHERE AIRCRAFTID = newacidvar;
				--9/12/2012 Set SQPRESELECT to NULL per QC 335
				UPDATE AIRCRAFT
				SET SQPRESELECT = NULL
				WHERE AIRCRAFTID = acidvar;
                --DELETE THE SWAPPED RECORD
                Delete_Sortie_Line(schedidvar, PLACEHOLDER); --3/11/04
              ELSE
                SELECT seq_schedule.NEXTVAL INTO tmpvar FROM DUAL;
                INSERT INTO EMOC3.SCHEDULE
                SELECT tmpvar SCHEDULEID,
                  GO,
                  SCHEDULEDTAKEOFF,
                  SCHEDULEDLANDING,
                  ACTUALTAKEOFF,
                  ACTUALLANDING,
                  SPARE,
                  ADJTAKEOFF,
                  ADJLANDING,
                  AREAARRIVETIME,
                  AREALEAVETIME,
                  LANDINGCODEID,
                  RANGEID,
                  DEVIATIONCODEID,
                  CAUSECODEID,
                  WXCODEID,
                  MISSIONID,
                  AREAID,
                  AIRCRAFTID,
                  PILOTID,
                  SORTIENUM,
                  SORTIEMOD,
                  SORTIEDATE,
                  BLOCKNUMBER,
                  PUBLISHED_FLAG,
                  SCHEDDAY,
                  CALLSIGN,
                  TRANSIENT,
                  DURATIONSCHEDULED,
                  DURATIONACTUAL,
                  CONFIGCODE,
                  NULL,
                  NULL,
                  SORTIE_JOAP,
                  SORTIE_SEMEDX,
                  SQUADRONID,
                  UTILCODEID,
                  CAMSINIT,
                  SCHEDULESOURCE,
                  INTERFACELOGID,
                  TYPE_EVENT,
                  SWAPPEDLINE
                FROM SCHEDULE
                WHERE SCHEDULEID = schedidvar;
                UPDATE SCHEDULE
                SET AIRCRAFTID   = newacidvar,
                  SWAPPEDLINE    = schedidvar,
                  SQUADRONID     = newsquadvar
                WHERE SCHEDULEID = tmpvar;
                UPDATE SCHEDULE
                SET DEVIATIONCODEID = devidvar,
                  CAUSECODEID       = causevar
                WHERE SCHEDULEID    = schedidvar;
              END IF;
            END IF;
          END IF;
        END IF;
      END IF;
    END IF;
  END IF;
  --EXCEPTION
  --  WHEN NO_DATA_FOUND
  --  THEN
  --     NULL;
  -- WHEN OTHERS
  --  THEN
  -- Consider logging the error and then re-raise
  --    RAISE;
END INSERTOPEREVTRPLACEMNTFROMIMDS;

CREATE PROCEDURE         "EMOC3"."INSERTSCREEN73" 
AS
   CURSOR curctrl
   IS
      SELECT interfacecontrolid, mocid
        FROM interfacecontrol
       WHERE interfacename = 'CAMS';

   ctrlrec   curctrl%ROWTYPE;
   recid     NUMBER;
   tmpvar    NUMBER;
BEGIN
   OPEN curctrl;

   FETCH curctrl
    INTO ctrlrec;

   WHILE curctrl%FOUND
   LOOP
      SELECT COUNT (*)
        INTO tmpvar
        FROM interfaceitems
       WHERE interfacecontrolid = ctrlrec.interfacecontrolid
         AND mocid = ctrlrec.mocid
         AND tric = 'EAR';

      IF (tmpvar = 0)
      THEN
         SELECT MAX (interfaceitemid)
           INTO recid
           FROM interfaceitems;

         INSERT INTO emoc3.interfaceitems
                     (interfaceitemid, interfacecontrolid, itemname,
                      itemenabled, lastupdate, lastupdatedby, tric,
                      itemdescription,
                      mocid
                     )
              VALUES (recid + 1, ctrlrec.interfacecontrolid, '73',
                      1, SYSDATE, 0, 'EAR',
                      'Schedule Maintenance (No Job Standard Assigned)',
                      ctrlrec.mocid
                     );
      END IF;

      FETCH curctrl
       INTO ctrlrec;
   END LOOP;

   CLOSE curctrl;

   COMMIT;
END insertscreen73;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."INSERTSTATUSCORRECTIONTRX" ( 
   p_homeelc                  VARCHAR2, 
   p_currentelc               VARCHAR2, 
   p_unitid                   VARCHAR2, 
   p_equipmentid              VARCHAR2, 
   p_maintenancestatuscode    VARCHAR2, 
   p_conditionstatuscode      VARCHAR2, 
   p_startdate                VARCHAR2, 
   p_starttime                VARCHAR2, 
   p_stopdate                 VARCHAR2, 
   p_stoptime                 VARCHAR2, 
   p_workunitcode             VARCHAR2, 
   p_geoloccode               VARCHAR2, 
   p_transactionordinaldate   VARCHAR2, 
   p_hostunitdateandtime      VARCHAR2 
) 
IS 
   tmpvar     NUMBER; 
   mocidvar   NUMBER; 
   acidvar    NUMBER; 
/****************************************************************************** 
   NAME:       insertstatuscorrectiontrx 
   PURPOSE: 
 
   REVISIONS: 
   Ver        Date        Author           Description 
   ---------  ----------  ---------------  ------------------------------------ 
   1.0        12/15/2006  r mcbride        1. Created this procedure. 
 
   NOTES: 
 
   Automatically available Auto Replace Keywords: 
      Object Name:     insertstatuscorrectiontrx 
      Sysdate:         12/15/2006 
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM 
      Username:         emoc3) 
      Table Name:       statuscorrectiontrx) 
 
******************************************************************************/ 
BEGIN 
   SELECT seq_statuscorrection.NEXTVAL 
     INTO tmpvar 
     FROM DUAL; 
 
   INSERT INTO statuscorrectiontrx 
               (statuscorrectionid, homeenterpriselocationcode, 
                currententerpriselocationcode, unitid, equipmentid, 
                maintenancestatuscode, conditionstatuscode, startdate, 
                starttime, stopdate, stoptime, workunitcode, 
                geoloccode, transactionordinaldate, hostunitdateandtime 
               ) 
        VALUES (tmpvar, p_homeelc, 
                p_currentelc, p_unitid, p_equipmentid, 
                p_maintenancestatuscode, p_conditionstatuscode, p_startdate, 
                p_starttime, p_stopdate, p_stoptime, p_workunitcode, 
                p_geoloccode, p_transactionordinaldate, p_hostunitdateandtime 
               ); 
 
   COMMIT; 
   /*GET MOCID for gathering code ids*/ 
   get_mocid_by_elcunitid (p_homeelc, p_unitid, mocidvar); 
 
   IF mocidvar IS NOT NULL 
   THEN 
      /*Get Aircraftid to make sure correct schedule line*/ 
      get_aircraftid_by_mocequipid (mocidvar, p_equipmentid, acidvar); 
 
      IF acidvar IS NOT NULL 
      THEN 
         INSERT INTO aircraftstatusupdate 
                     (statusupdateid, unitid, equipmentid, 
                      maintenancestatuscode, conditionstatuscode, 
                      statusstartdate, statusstarttime, workunitcode, 
                      aircraftid, geoloccode 
                     ) 
              VALUES (seq_statusupdate.NEXTVAL, p_unitid, p_equipmentid, 
                      p_maintenancestatuscode, p_conditionstatuscode, 
                      p_startdate, p_starttime, p_workunitcode, 
                      acidvar, p_geoloccode 
                     ); 
 
         COMMIT; 
      END IF; 
   END IF; 
         emoc_cache.updatechangenotification('aircraft'||to_char(acidvar), 0); 
EXCEPTION 
   WHEN NO_DATA_FOUND 
   THEN 
      NULL; 
   WHEN OTHERS 
   THEN 
      -- Consider logging the error and then re-raise 
      RAISE; 
END insertstatuscorrectiontrx;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."INSERTUSERALERT" (
   useridin     useralert.userid%TYPE,
   sentbyin     useralert.sentby%TYPE,
   alertmsgin   useralert.alertmsg%TYPE,
   priorityin   useralert.priority%TYPE
)
AS
   new_id   INTEGER;
BEGIN
   SELECT seq_useralert.NEXTVAL
     INTO new_id
     FROM DUAL;

   INSERT INTO useralert
               (alertid, userid, sentby, alertmsg, priority
               )
        VALUES (new_id, useridin, sentbyin, alertmsgin, priorityin
               );
END insertuseralert;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."INSERTUVRCHANGETRX" (
   p_homeelc                  VARCHAR2,
   p_currentelc               VARCHAR2,
   p_unitid                   VARCHAR2,
   p_timezonefactor           VARCHAR2,
   p_timezonehours            VARCHAR2,
   p_gmtfactor                VARCHAR2,
   p_gmthours                 VARCHAR2,
   p_remoteprintindicator     VARCHAR2,
   p_hosttimezonefactor       VARCHAR2,
   p_hosttimezonehours        VARCHAR2,
   p_hostunitdateandtime      VARCHAR2,
   p_transactionordinaldate   VARCHAR2
)
AS
   tmpvar      NUMBER;
   wingidvar   NUMBER;
/******************************************************************************
   NAME:       InsertUVRChangeTrx
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/26/2006  r mcbride        1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     InsertUVRChangeTrx
      Sysdate:         12/26/2006
      Date and Time:   12/26/2006, 9:26:15 AM, and 12/26/2006 9:26:15 AM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

  new OracleParameter("p_homeelc",OracleType.VarChar,4,ParameterDirection.Input,
  new OracleParameter("p_currentelc",OracleType.VarChar,4,ParameterDirection.Input,
  new OracleParameter("p_unitid",OracleType.VarChar,1,ParameterDirection.Input,
  new OracleParameter("p_timezonefactor",OracleType.VarChar,1,ParameterDirection.Input,
  new OracleParameter("p_timezonehours",OracleType.VarChar,2,ParameterDirection.Input,
  new OracleParameter("p_gmtfactor",OracleType.VarChar,1,ParameterDirection.Input,
  new OracleParameter("p_gmthours",OracleType.VarChar,2,ParameterDirection.Input,
  new OracleParameter("p_remoteprintindicator",OracleType.VarChar,1,ParameterDirection.Input,
  new OracleParameter("p_hosttimezonefactor",OracleType.VarChar,1,ParameterDirection.Input,
  new OracleParameter("p_hosttimezonehours",OracleType.VarChar,2,ParameterDirection.Input,
  new OracleParameter("p_hostunitdateandtime",OracleType.VarChar,25,ParameterDirection.Input,
  new OracleParameter("p_transactionordinaldate",OracleType.VarChar,25,ParameterDirection.Input,


  UVRCHANGETRXID                 NUMBER(20),
  HOMEENTERPRISELOCTIONCODE      VARCHAR2(4 BYTE),
  CURRENTENTERPRISELOCATIONCODE  VARCHAR2(4 BYTE),
  UNITID                         VARCHAR2(1 BYTE),
  TIMEZONEFACTOR                 VARCHAR2(1 BYTE),
  TIMEZONEHOURS                  VARCHAR2(2 BYTE),
  GMTFACTOR                      VARCHAR2(1 BYTE),
  GMTHOURS                       VARCHAR2(2 BYTE),
  HOSTTIMEZONEFACTOR             VARCHAR2(1 BYTE),
  HOSTTIMEZONEHOURS              VARCHAR2(2 BYTE),
  HOSTUNITDATEANDTIME            VARCHAR2(25 BYTE),
  TRANSACTIONORDINALDATE         VARCHAR2(25 BYTE),
  RECORDDATETIME                 DATE           DEFAULT sysdate,
  APPLICATIONNOTE                NVARCHAR2(2000),
  DATEPROCESSED                  DATE,
  REMOTEPRINTINDICATOR           VARCHAR2(1 BYTE)

******************************************************************************/
BEGIN
   SELECT seq_uvrchangetrx.NEXTVAL
     INTO tmpvar
     FROM DUAL;

   INSERT INTO uvrchangetrx
               (uvrchangetrxid, homeenterpriselocationcode,
                currententerpriselocationcode, unitid, timezonefactor,
                timezonehours, gmtfactor, gmthours,
                hosttimezonefactor, hosttimezonehours,
                hostunitdateandtime, transactionordinaldate, dateprocessed,
                remoteprintindicator
               )
        VALUES (tmpvar, p_homeelc,
                p_currentelc, p_unitid, p_timezonefactor,
                p_timezonehours, p_gmtfactor, p_gmthours,
                p_hosttimezonefactor, p_hosttimezonehours,
                p_hostunitdateandtime, p_transactionordinaldate, SYSDATE,
                p_remoteprintindicator
               );

   COMMIT;

  get_wingid_by_elcunitid(p_currentelc, p_unitid, wingidvar);
   IF (wingidvar IS NOT NULL)
   THEN
      UPDATE wings
         SET timezonefactor = p_timezonefactor,
             timezonehours = p_timezonehours,
             gmtfactor = p_gmtfactor,
             gmthours = p_gmthours,
             remoteprintindicator = p_remoteprintindicator,
    lastupdate = SYSDATE
       WHERE wingid = wingidvar;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END insertuvrchangetrx;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."INSERTWDCTRX" (
   p_fromelc              VARCHAR2,
   p_fromunitid           VARCHAR2,
   p_whendiscoveredcode   VARCHAR2,
   p_wdcnarrative         VARCHAR2,
   p_startdate            VARCHAR2,
   p_stopdate             VARCHAR2,
   p_transactioncode      VARCHAR2
)
AS
   tmpvar   NUMBER;
   stopdt   DATE;
/********************************** ********************************************
   NAME:       InsertWDCTrx
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/24/2006  r mcbride        1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     InsertWDCTrx
      Sysdate:         12/24/2006
      Date and Time:   12/24/2006, 10:38:46 AM, and 12/24/2006 10:38:46 AM
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
BEGIN
   stopdt := NULL;

   INSERT INTO whendiscoveredcodetrx
               (whendiscoveredcodetrxid, fromenterpriselocationcode,
                fromunitid, whendiscoveredcode, whendiscoveredcodenarrative,
                startdate, stopdate, transactioncode
               )
        VALUES (seq_whendisccodetrx.NEXTVAL, p_fromelc,
                p_fromunitid, p_whendiscoveredcode, p_wdcnarrative,
                p_startdate, p_stopdate, p_transactioncode
               );

   COMMIT;

   IF (LENGTH (p_whendiscoveredcode) > 0)
   THEN
      IF (p_stopdate IS NOT NULL)
      THEN
         stopdt := TO_DATE (p_stopdate, 'YYYY-MM-DD');
      END IF;

      SELECT COUNT (*)
        INTO tmpvar
        FROM whendiscoveredcodes
       WHERE wdc = p_whendiscoveredcode AND mocid = 0;

      IF (tmpvar = 0)
      THEN
         IF (p_transactioncode != 'D')
         THEN
            INSERT INTO whendiscoveredcodes
                        (whendiscoveredid, wdc,
                         wdcnarrative,
                         startdate, stopdate,
                         camsinit, mocid
                        )
                 VALUES (seq_whendisccodes.NEXTVAL, p_whendiscoveredcode,
                         p_wdcnarrative,
                         TO_DATE (p_startdate, 'YYYY-MM-DD'), stopdt,
                         SYSDATE, 0
                        );

            COMMIT;
         END IF;
      ELSE
         SELECT whendiscoveredid
           INTO tmpvar
           FROM whendiscoveredcodes
          WHERE wdc = p_whendiscoveredcode AND mocid = 0;

         IF (p_transactioncode = 'D')
         THEN
            DELETE FROM whendiscoveredcodes
                  WHERE whendiscoveredid = tmpvar;
         ELSE
            upd_wdc (p_whendiscoveredcode,
                     p_wdcnarrative,
                     TO_DATE (p_startdate, 'YYYY-MM-DD'),
                     stopdt,
                     tmpvar
                    );
         END IF;

         COMMIT;
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END insertwdctrx;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."INSERTWORKUNITCODETRX" (
   p_fromelc           workunitcodetrx.fromenterpriselocationcode%TYPE,
   p_fromunitid        workunitcodetrx.fromunitid%TYPE,
   p_workunitcode      workunitcodetrx.workunitcode%TYPE,
   p_narrative         workunitcodetrx.workunitcodenarrative%TYPE,
   p_mds               workunitcodetrx.missiondesignseries%TYPE,
   p_block             workunitcodetrx.blocknumbertype%TYPE,
   p_startdate         workunitcodetrx.startdate%TYPE,
   p_stopdate          workunitcodetrx.stopdate%TYPE,
   p_newworkunitcode   workunitcodetrx.newworkunitcode%TYPE,
   p_transactioncode   workunitcodetrx.transactioncode%TYPE
)
AS
   tmpvar    NUMBER;
   stopdt    DATE;

   CURSOR wuc_cur
   IS
      SELECT wucid
        FROM wuc
       WHERE wuccode = p_workunitcode
         AND missiondesignseries = p_mds
         AND blocknumber = NVL (p_block, '000');

   wuc_rec   wuc_cur%ROWTYPE;
/******************************************************************************
   NAME:       insertworkunitcodetrx
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/26/2006   r mcbride       1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     insertworkunitcodetrx
      Sysdate:         12/26/2006
      Date and Time:   12/26/2006, 10:07:12 AM, and 12/26/2006 10:07:12 AM
      Username:         (emoc3)
      Table Name:       (workunitcodetrx)
******************************************************************************/
BEGIN
   SELECT seq_workunitcodetrx.NEXTVAL
     INTO tmpvar
     FROM DUAL;

   INSERT INTO workunitcodetrx
               (workunitcodetrxid, fromenterpriselocationcode, fromunitid,
                workunitcode, workunitcodenarrative, startdate, stopdate,
                missiondesignseries, blocknumbertype, newworkunitcode,
                dateprocessed, transactioncode
               )
        VALUES (tmpvar, p_fromelc, p_fromunitid,
                p_workunitcode, p_narrative, p_startdate, p_stopdate,
                p_mds, p_block, p_newworkunitcode,
                SYSDATE, p_transactioncode
               );

   COMMIT;

   IF (LENGTH (p_workunitcode) > 0)
   THEN
      tmpvar := 0;

      IF (p_stopdate IS NOT NULL)
      THEN
         stopdt := TO_DATE (p_stopdate, 'YYYY-MM-DD');
      END IF;

      IF (p_transactioncode = 'A')
      THEN
         SELECT COUNT (*)
           INTO tmpvar
           FROM wuc
          WHERE wuccode = p_workunitcode
            AND missiondesignseries = p_mds
            AND blocknumber = NVL (p_block, '000');

         IF (tmpvar = 0)
         THEN
            INSERT INTO wuc
                        (wucid, wuccode, wucdescription,
                         wucstartdate, wucstopdate,
                         camsinit, lastupdate, missiondesignseries,
                         blocknumber, newwuc
                        )
                 VALUES (seq_wucs.NEXTVAL, p_workunitcode, p_narrative,
                         TO_DATE (p_startdate, 'YYYY-MM-DD'), stopdt,
                         SYSDATE, SYSDATE, p_mds,
                         NVL (p_block, '000'), p_newworkunitcode
                        );

            COMMIT;
         END IF;
      ELSE
         IF (p_transactioncode = 'D')
         THEN
            OPEN wuc_cur;

            FETCH wuc_cur
             INTO wuc_rec;

            WHILE wuc_cur%FOUND
            LOOP
               UPDATE aircraft
                  SET aircraftwucid = NULL
                WHERE aircraftwucid = wuc_rec.wucid;

               UPDATE writeups
                  SET wucid = NULL
                WHERE wucid = wuc_rec.wucid AND corrected = 0;

               DELETE FROM wuc
                     WHERE wucid = wuc_rec.wucid;

               FETCH wuc_cur
                INTO wuc_rec;
            END LOOP;

            CLOSE wuc_cur;

            COMMIT;
         ELSE
            -- assume p_transactioncode = 'C' --

            -- need to reconcile new workunitcode if startdate > sysdate --
            /*IF (stopdt IS NULL)
            THEN
               IF (TO_DATE (p_startdate, 'YYYY-MM-DD') > SYSDATE)
               THEN
                  INSERT INTO wuc
                              (wucid, wuccode, wucdescription,
                               wucstartdate, wucstopdate,
                               camsinit, lastupdate, missiondesignseries,
                               blocknumber, newwuc
                              )
                       VALUES (seq_wucs.NEXTVAL, p_workunitcode, p_narrative,
                               TO_DATE (p_startdate, 'YYYY-MM-DD'), stopdt,
                               SYSDATE, SYSDATE, p_mds,
                               NVL (p_block, '000'), p_newworkunitcode
                              );

                  OPEN wuc_cur;

                  FETCH wuc_cur
                   INTO wuc_rec;

                  WHILE wuc_cur%FOUND
                  LOOP
                     UPDATE wuc
                        SET wucstopdate = stopdt,
                            newwuc = p_newworkunitcode
                      WHERE wucid = wuc_rec.wucid;

                     FETCH wuc_cur
                      INTO wuc_rec;
                  END LOOP;

                  CLOSE wuc_cur;

                  COMMIT;
               ELSE
                  OPEN wuc_cur;

                  FETCH wuc_cur
                   INTO wuc_rec;

                  WHILE wuc_cur%FOUND
                  LOOP
                     UPDATE aircraft
                        SET statuswuclcn = p_newworkunitcode
                      WHERE aircraftwucid = wuc_rec.wucid;

                     UPDATE wuc
                        SET newwuc = p_newworkunitcode,
                            wucdescription = p_narrative
                      WHERE wucid = wuc_rec.wucid;

                     FETCH wuc_cur
                      INTO wuc_rec;
                  END LOOP;

                  CLOSE wuc_cur;

                  COMMIT;
               END IF;
            ELSE */
            UPDATE wuc
               SET wucdescription = p_narrative,
                   wucstartdate = TO_DATE (p_startdate, 'YYYY-MM-DD'),
                   wucstopdate = stopdt,
                   lastupdate = SYSDATE,
                   newwuc = p_newworkunitcode
             WHERE wuccode = p_workunitcode
               AND missiondesignseries = p_mds
               AND blocknumber = NVL (p_block, '000');
         --END IF;
         END IF;
      END IF;

      COMMIT;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END insertworkunitcodetrx;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."LOAD_CAMS_TRANSACTION" (
   interfacenamein           interfacecontrol.interfacename%TYPE,
   transactiontypein         interfacelog.transactiontype%TYPE,
   useridin                  interfacelog.userid%TYPE,
   xmlin                     interfacelog.xmlin%TYPE,
   updateobjectin            interfacelog.updateobject%TYPE,
   interfacelogidout   OUT   interfacelog.interfacelogid%TYPE,
   mocidin                   interfacelog.mocid%TYPE
)
/******************************************************************************
   NAME:       LOAD_CAMS_TRANSACTION
   PURPOSE:    Inserts a transaction record

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        8/12/03      A.Mitchell       1. Created this procedure.

   PARAMETERS:
   INPUT:
   *INTERFACENAME,
   *TRANSACTIONTYPE,
   *USERID,
   *XMLIN
   OUTPUT:
   *INTERFACELOGID
   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/
AS
   interfacecontrolid   NUMBER;
   ifacelogid           NUMBER;
BEGIN
   ---SELECT interfacecontrolid
    -- INTO interfacecontrolid
     --FROM interfacecontrol
   -- WHERE interfacename = interfacenamein AND mocid = mocidin;

   SELECT seq_interfacelog.NEXTVAL
     INTO ifacelogid
     FROM DUAL;

   INSERT INTO interfacelog
               (interfacelogid, interfacecontrolid, mocid, transactiontype,
                timeofinsert, userid, xmlin, updateobject, xmlout
               )
        VALUES (ifacelogid, 0, mocidin, transactiontypein,
                SYSDATE, useridin, xmlin, updateobjectin,
                                                          --PLACEHOLDER FOR CLOB FIELD. WITHOUT A VALUE, NO CLOB LOCATION IS ENTERED,
                                                          --AND THE UPDATE_INTERFACELOG procedure WONT WORK
                ' '
               );

   COMMIT;
   interfacelogidout := ifacelogid;
END load_cams_transaction;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."LOAD_FLYING_SCHEDULE_LINE" (
   GO                       schedule.GO%TYPE,
   sortienum                schedule.sortienum%TYPE,
   aircraftid               schedule.aircraftid%TYPE,
   callsign                 schedule.callsign%TYPE,
   pilotid                  schedule.pilotid%TYPE,
   scheduledtakeoff         schedule.scheduledtakeoff%TYPE,
   scheduledlanding         schedule.scheduledlanding%TYPE,
   spare                    schedule.spare%TYPE,
   areaid                   schedule.areaid%TYPE,
   areaarrivetime           schedule.areaarrivetime%TYPE,
   arealeavetime            schedule.arealeavetime%TYPE,
   deviationcodeid          schedule.deviationcodeid%TYPE,
   causecodeid              schedule.causecodeid%TYPE,
   missionid                schedule.missionid%TYPE,
   scheduleremarks          remarks.remarks%TYPE,
   schedday                 schedule.schedday%TYPE,
   squadronidin             schedule.squadronid%TYPE,
   sortiedatein             schedule.sortiedate%TYPE,
   CONFIGCODE               schedule.CONFIGCODE%TYPE,
   scheduleidout      OUT   schedule.scheduleid%TYPE
)
/******************************************************************************
   NAME:       LOAD_FLYING_SCHEDULE_LINE
   PURPOSE:    Inserts a schedule line.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        6/18/03      A.Mitchell       1. Created this procedure.
   1.1        2/27/04      A.Mitchell     2. Modified sequencing problem
   3.0        4/24/07      G.Regan        3. Add config code
   PARAMETERS:
   INPUT:
   *SCHEDULEID,
   *GO,
   *CALLSIGN,
   *SCHEDULEDTAKEOFF,
   *SCHEDULEDLANDING,
   *SPARE,
   *AREAID,
   *AIRCRAFTID,
   *PILOTID,
   *SORTIENUM,
   *DEVIATIONCODEID,
   *CAUSECODEID
   *MISSIONID
   *REMARKS
   *SCHEDDAY
   *SQUADRONID
   *SORTIEDATE
   * Config code
   OUTPUT:

   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/
AS
   newscheduleid         NUMBER;
   scheduledeviationid   NUMBER;
   remarksid             NUMBER;
   sortie                NUMBER;
BEGIN
   --2.1.1 Standardize addition of spare lines
   IF spare = 1
   THEN
      BEGIN
         SELECT MIN (NVL (sortienum, 0))
           INTO sortie
           FROM schedule
          WHERE schedule.sortiedate = sortiedatein
            AND schedule.squadronid = squadronidin;

         IF sortie < 0
         THEN
            BEGIN
               sortie := sortie - 1;
            END;
         ELSE
            BEGIN
               sortie := -1;
            END;
         END IF;
      END;
   ELSE
      BEGIN
         sortie := sortienum;
      END;
   END IF;

   --INCREMENT
   SELECT seq_schedule.NEXTVAL
     INTO newscheduleid
     FROM DUAL;

   INSERT INTO schedule
               (scheduleid, GO, callsign, scheduledtakeoff,
                scheduledlanding, spare, areaid, areaarrivetime,
                arealeavetime, aircraftid, pilotid, sortienum,
                deviationcodeid, causecodeid, missionid, schedday,
                squadronid, sortiedate, CONFIGCODE, schedulesource
               )
        VALUES (newscheduleid, GO, callsign, scheduledtakeoff,
                scheduledlanding, spare, areaid, areaarrivetime,
                arealeavetime, aircraftid, pilotid, sortie,             --NUM,
                deviationcodeid, causecodeid, missionid, schedday,
                squadronidin, sortiedatein, CONFIGCODE, 'EMC'
               );

   --INCREMENT
   IF LENGTH (scheduleremarks) > 0
   THEN
      BEGIN
         SELECT seq_remarks.NEXTVAL
           INTO remarksid
           FROM DUAL;

         add_remarks (remarksid, scheduleremarks);

         UPDATE schedule
            SET scheduleremarks = remarksid
          WHERE scheduleid = newscheduleid;
      END;
   END IF;

   scheduleidout := newscheduleid;
END load_flying_schedule_line;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."LOAD_SCHEDULE_LINE_FROM_CAMS"
  (
    SORTIENUMIN SCHEDULE.SORTIENUM%TYPE,
    EQUIPIDIN AIRCRAFT.MISEQUIPID%TYPE,
    SCHEDULEDTAKEOFFIN SCHEDULE.SCHEDULEDTAKEOFF%TYPE,
    SCHEDULEDLANDINGIN SCHEDULE.SCHEDULEDLANDING%TYPE,
    DEVIATIONCODEIN DEVIATIONCODES.DEVIATIONCODE%TYPE,
    CAUSECODEIN CAUSECODES.CAUSECODE%TYPE,
    SQUADRONIDIN SCHEDULE.SQUADRONID%TYPE,
    SORTIEDATEIN SCHEDULE.SORTIEDATE%TYPE,
    SCHEDDAYIN SCHEDULE.SCHEDDAY%TYPE,
    INTERFACELOGIDIN SCHEDULE.INTERFACELOGID%TYPE )
AS
  NEWSCHEDULEID NUMBER;
  DEVCODEID     NUMBER;
  CAUSEID       NUMBER;
  ACFTID        NUMBER;
  SCHEDCNT      NUMBER;
  MOCIDVAR      NUMBER;
BEGIN
  --GET AIRCRAFT
  SELECT AIRCRAFTID
  INTO ACFTID
  FROM AIRCRAFT
  WHERE MISEQUIPID = EQUIPIDIN
  AND SQUADRONID   = SQUADRONIDIN;
  --Get MOC ID
  SELECT MOCID
  INTO MOCIDVAR
  FROM AIRCRAFT
  WHERE AIRCRAFTID = ACFTID;
  --GET DEVIATION
  GET_DEVID_BY_MOCDEVCODE(MOCIDVAR,DEVIATIONCODEIN,DEVCODEID);
  IF DEVCODEID IS NULL THEN
    GET_DEVDEFAULT_BY_MOC(MOCIDVAR,DEVCODEID);
  END IF;
  --GET CAUSE
  GET_CAUSEID_BY_MOCCAUSECODE(MOCIDVAR,CAUSECODEIN,CAUSEID);
  IF CAUSEID IS NULL THEN
    GET_CAUSEDEFAULT_BY_MOC(MOCIDVAR,CAUSEID);
  END IF;
  SELECT COUNT(*)
  INTO SCHEDCNT
  FROM SCHEDULE
  WHERE SORTIEDATE = SORTIEDATEIN
  AND SORTIENUM    = SORTIENUMIN
  AND AIRCRAFTID   = ACFTID
  AND SQUADRONID   = SQUADRONIDIN;
  IF SCHEDCNT      > 0 THEN
    UPDATE SCHEDULE
    SET SCHEDULEDTAKEOFF = SCHEDULEDTAKEOFFIN,
      SCHEDULEDLANDING   = SCHEDULEDLANDINGIN,
      DEVIATIONCODEID    = DEVCODEID,
      CAUSECODEID        = CAUSEID,
      INTERFACELOGID     = INTERFACELOGIDIN
    WHERE SORTIEDATE     = SORTIEDATEIN
    AND SORTIENUM        = SORTIENUMIN
    AND AIRCRAFTID       = ACFTID
    AND SQUADRONID       = SQUADRONIDIN;
  ELSE
    --INCREMENT
    SELECT SEQ_SCHEDULE.NEXTVAL INTO NEWSCHEDULEID FROM DUAL;
    INSERT
    INTO SCHEDULE
      (
        SCHEDULEID ,
        SCHEDULEDTAKEOFF ,
        SCHEDULEDLANDING ,
        AIRCRAFTID ,
        SORTIENUM ,
        DEVIATIONCODEID ,
        CAUSECODEID ,
        SORTIEDATE ,
        SQUADRONID ,
        SPARE ,
        SCHEDULESOURCE ,
        SCHEDDAY ,
        INTERFACELOGID ,
        PUBLISHED_FLAG
      )
      VALUES
      (
        NEWSCHEDULEID ,
        SCHEDULEDTAKEOFFIN ,
        SCHEDULEDLANDINGIN ,
        ACFTID ,
        SORTIENUMIN ,
        DEVCODEID ,
        CAUSEID ,
        SORTIEDATEIN ,
        SQUADRONIDIN ,
        0 ,
        '174' ,
        SCHEDDAYIN ,
        INTERFACELOGIDIN ,
        1
      );
  END IF;
END Load_Schedule_Line_From_Cams;

CREATE PROCEDURE         "EMOC3"."LOAD_SCHEDULE_LINE_FROM_EXCEL" (
   go                 schedule.go%TYPE,
   sortienum          schedule.sortienum%TYPE,
   aircraftid         schedule.aircraftid%TYPE,
   callsign           schedule.callsign%TYPE,
   pilotid            schedule.pilotid%TYPE,
   scheduledtakeoff   schedule.scheduledtakeoff%TYPE,
   scheduledlanding   schedule.scheduledlanding%TYPE,
   spare              schedule.spare%TYPE,
   areaid             schedule.areaid%TYPE,
   areaarrivetime     schedule.areaarrivetime%TYPE,
   arealeavetime      schedule.arealeavetime%TYPE,
   rangeid            schedule.rangeid%TYPE,
   deviationcodeid    schedule.deviationcodeid%TYPE,
   causecodeid        schedule.causecodeid%TYPE,
   schedday           schedule.schedday%TYPE,
   config             schedule.configcode%TYPE,
   DURATION           schedule.durationscheduled%TYPE,
   sortiedate         schedule.sortiedate%TYPE,
   squadronid         schedule.squadronid%TYPE,
   missionid          schedule.missionid%TYPE,
   remarks            remarks.remarks%TYPE
)
/******************************************************************************
   NAME:       LOAD_FLYING_SCHEDULE_LINE_FROM_EXCEL
   PURPOSE:    Inserts a schedule line.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        5/12/03      A.Mitchell       1. Created this procedure.
   1.1        6/16/03      A.Mitchell       2. Added proecssing for Deviations

   PARAMETERS:
   INPUT:
   *SCHEDULEID,
   *GO,
   *CALLSIGN,
   *SCHEDULEDTAKEOFF,
   *SCHEDULEDLANDING,
   *SPARE,
   *AREAARRIVETIME,
   *AREALEAVETIME,
   *RANGEID,
   *AREAID,
   *AIRCRAFTID,
   *PILOTID,
   *SORTIENUM,
   *DEVIATIONCODEID,
   *CAUSECODEID,
   *SCHEDDAY
   *CONFIG
   *DURATION
   *SORTIEDATE
   *SQUADRONID
   OUTPUT:

   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/
AS
   newscheduleid         NUMBER;
   scheduledeviationid   NUMBER;
   statuscodeid          NUMBER;
   remarksid             NUMBER;
BEGIN
   --INCREMENT
   SELECT seq_schedule.NEXTVAL
     INTO newscheduleid
     FROM DUAL;

   INSERT INTO schedule
               (scheduleid, go, callsign, scheduledtakeoff,
                scheduledlanding, spare, areaarrivetime, arealeavetime,
                rangeid, areaid, aircraftid, pilotid, sortienum,
                deviationcodeid, causecodeid, schedday, configcode,
                durationscheduled, sortiedate, squadronid, schedulesource,
                missionid
               )
        VALUES (newscheduleid, go, callsign, scheduledtakeoff,
                scheduledlanding, spare, areaarrivetime, arealeavetime,
                rangeid, areaid, aircraftid, pilotid, sortienum,
                deviationcodeid, causecodeid, schedday, config,
                DURATION, sortiedate, squadronid, 'XLS',
                missionid
               );

   --INCREMENT
   IF LENGTH (remarks) > 0
   THEN
      BEGIN
         SELECT seq_remarks.NEXTVAL
           INTO remarksid
           FROM DUAL;

         add_remarks (remarksid, remarks);

         UPDATE schedule
            SET scheduleremarks = remarksid
          WHERE scheduleid = newscheduleid;
      END;
   END IF;
END load_schedule_line_from_excel;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."LOAD_SPARE_LINE_FROM_EXCEL" (
   aircraftid        schedule.aircraftid%TYPE,
   deviationcodeid   schedule.deviationcodeid%TYPE,
   causecodeid       schedule.causecodeid%TYPE,
   schedday          schedule.schedday%TYPE,
   squadronid        schedule.squadronid%TYPE,
   sortiedate        schedule.sortiedate%TYPE,
   missionid         schedule.missionid%TYPE
)
/******************************************************************************
   NAME:       LOAD_FLYING_SCHEDULE_LINE_FROM_EXCEL
   PURPOSE:    Inserts a schedule line.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        6/2/03      A.Mitchell       1. Created this procedure.

   PARAMETERS:
   INPUT:
   *AIRCRAFTID,
   *DEVIATIONCODEID,
   *CAUSECODEID,
   *SCHEDDAY
   *SQUADRONID,
   *SORTIEDATE
   OUTPUT:

   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/
AS
   newscheduleid         NUMBER;
   scheduledeviationid   NUMBER;
   statuscodeid          NUMBER;
BEGIN
   --INCREMENT
   SELECT seq_schedule.NEXTVAL
     INTO newscheduleid
     FROM DUAL;

   INSERT INTO schedule
               (scheduleid, spare, aircraftid, sortienum, deviationcodeid,
                causecodeid, schedday, squadronid, sortiedate, missionid
               )
        VALUES (newscheduleid, 1, aircraftid, -1,           --BLANK SORTIENUM,
                                                 deviationcodeid,
                causecodeid, schedday, squadronid, sortiedate, missionid
               );
END load_spare_line_from_excel;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."LOAD_TBMCS_MESSAGEBODY" (
   interfacelogidin   IN   NUMBER,
   messagebodyin      IN   VARCHAR2
)
AS
   l_clob   CLOB;
BEGIN
   SELECT     messagebody
         INTO l_clob
         FROM tbmcsinterfacelog
        WHERE interfacelogid = interfacelogidin
   FOR UPDATE;

   DBMS_LOB.writeappend (l_clob, LENGTH (messagebodyin), messagebodyin);
END;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."LOAD_TBMCS_TRANSACTION" (
   tbmcsresponserecvin         tbmcsinterfacelog.tbmcsresponserecv%TYPE,
   messageidin                 tbmcsinterfacelog.messageid%TYPE,
   camsvalidatedin             tbmcsinterfacelog.camsvalidated%TYPE,
   useridin                    tbmcsinterfacelog.userid%TYPE,
   tbmcsmsgsentin              tbmcsinterfacelog.tbmcsmsgsent%TYPE,
   tbmcsresponsein             tbmcsinterfacelog.tbmcsresponse%TYPE,
   updatemethodin              tbmcsinterfacelog.updatemethod%TYPE,
   updateobjectin              tbmcsinterfacelog.updateobject%TYPE,
   interfacelogidout     OUT   tbmcsinterfacelog.interfacelogid%TYPE,
   mocidin                     tbmcsinterfacelog.mocid%TYPE
)
/******************************************************************************
   NAME:       LOAD_TBMCS_TRANSACTION
   PURPOSE:    Inserts a transaction record

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        3/16/04      J.Chaplin       1. Created this procedure.

   PARAMETERS:
   INPUT:
   *UPDATEFIELD,
   *TBMCSRESPONSERECV,
   *MESSAGEID
   *CAMSVALIDATED
   *USERID
   *TBMCSMSGSENT
   *TBMCSRESPONSE
   *UPDATEMETHOD
   *UPDATEOBJECT
   *MESSAGEBODY
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/
AS
   newlogid   NUMBER;
BEGIN
--Increment
   SELECT seq_tbmcsinterfacelog.NEXTVAL
     INTO newlogid
     FROM DUAL;

   INSERT INTO tbmcsinterfacelog
               (interfacelogid, messageid, camsvalidated, userid,
                tbmcsmsgsent, tbmcsresponse, updatemethod,
                updateobject, mocid, messagebody 
               )
        VALUES (newlogid, messageidin, camsvalidatedin, useridin,
                tbmcsmsgsentin, tbmcsresponsein, updatemethodin,
                updateobjectin, mocidin,
                                --PLACEHOLDER FOR CLOB FIELD. WITHOUT A VALUE, NO CLOB LOCATION IS ENTERED,
                                --AND THE LOAD_TBMCS_MESSAGEBODY procedure WONT WORK
                ' '
               );

   COMMIT;
   interfacelogidout := newlogid;
END load_tbmcs_transaction;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."LOCATIONCODECHANGE" (
   p_homeelc                   VARCHAR2,
   p_currentelc                VARCHAR2,
   p_locationcode              VARCHAR2,
   p_allowablequantity         VARCHAR2,
   p_locationrestrictioncode   VARCHAR2,
   p_hostunitdateandtime       VARCHAR2,
   p_transactionordinaldate    VARCHAR2,
   p_newlocationcode           VARCHAR2
)
IS
   tmpvar     NUMBER;
   recordid   NUMBER;

   CURSOR loc_cur
   IS
      SELECT locationid
        FROM locations
       WHERE locationcode = p_locationcode
         AND (elc = p_homeelc OR elc = p_currentelc);

   loc_rec    loc_cur%ROWTYPE;
/******************************************************************************
   NAME:       LocationCodeChange

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/18/2006          1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     LocationCodeChange
      Sysdate:         12/18/2006
      Date and Time:   12/18/2006, 3:57:14 PM, and 12/18/2006 3:57:14 PM
      Username:         (EMOC3)
      Table Name:       (LocatoncodeTrx)

******************************************************************************/
BEGIN
   insertlocationcodetrx (p_homeelc,
                          p_currentelc,
                          p_locationcode,
                          p_allowablequantity,
                          p_locationrestrictioncode,
                          p_hostunitdateandtime,
                          p_transactionordinaldate,
                          'LocationCodeChange',
                          p_newlocationcode
                         );

   IF (LENGTH (p_locationcode) > 0)
   THEN
      OPEN loc_cur;

      FETCH loc_cur
       INTO loc_rec;

      WHILE loc_cur%FOUND
      LOOP
         IF (p_locationrestrictioncode IS NOT NULL)
         THEN
            UPDATE locations
               SET locationrestrictioncode = p_locationrestrictioncode
             WHERE locationid = loc_rec.locationid;

            COMMIT;
         END IF;

         IF (p_allowablequantity IS NOT NULL)
         THEN
            UPDATE locations
               SET maximumoccupancy = p_allowablequantity
             WHERE locationid = loc_rec.locationid;

            COMMIT;
         END IF;

         IF (p_newlocationcode IS NOT NULL)
         THEN
            UPDATE locations
               SET locationcode = p_newlocationcode
             WHERE locationid = loc_rec.locationid;

            COMMIT;

            SELECT COUNT (*)
              INTO tmpvar
              FROM aircraft
             WHERE locationid = loc_rec.locationid;

            IF (tmpvar > 0)
            THEN
               UPDATE aircraft
                  SET locationcode = p_newlocationcode
                WHERE locationid = loc_rec.locationid;

               COMMIT;
            END IF;
         END IF;

         FETCH loc_cur
          INTO loc_rec;
      END LOOP;

      CLOSE loc_cur;
   END IF;
/*  need to add code hear to process location code load */
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END locationcodechange;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."LOCATIONCODEDELETE" (
   p_homeelc                  VARCHAR2,
   p_currentelc               VARCHAR2,
   p_locationcode             VARCHAR2,
   p_hostunitdateandtime      VARCHAR2,
   p_transactionordinaldate   VARCHAR2
)
IS
   tmpvar     NUMBER;
   recordid   NUMBER;

   CURSOR loc_cur
   IS
      SELECT locationid
        FROM locations
       WHERE locationcode = p_locationcode AND elc = p_homeelc;

   loc_rec    loc_cur%ROWTYPE;
/******************************************************************************
   NAME:       LocationCodeDelete
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/18/2006          1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     LocationCodeDelete
      Sysdate:         12/18/2006
      Date and Time:   12/18/2006, 3:57:14 PM, and 12/18/2006 3:57:14 PM
      Username:         (EMOC3)
      Table Name:       (LocatoncodeTrx)

******************************************************************************/
BEGIN
   insertlocationcodetrx (p_homeelc,
                          p_currentelc,
                          p_locationcode,
                          NULL,
                          NULL,
                          p_hostunitdateandtime,
                          p_transactionordinaldate,
                          'LocationCodeDelete',
                          NULL
                         );

   IF (LENGTH (p_locationcode) > 0)
   THEN
      OPEN loc_cur;

      FETCH loc_cur
       INTO loc_rec;

      WHILE loc_cur%FOUND
      LOOP
         DELETE FROM hotspots
               WHERE locationid = loc_rec.locationid;

         COMMIT;

         UPDATE aircraft
            SET locationid = NULL,
                locationcode = NULL
          WHERE locationid = loc_rec.locationid;

         DELETE FROM locations
               WHERE locationid = loc_rec.locationid;

         COMMIT;

         FETCH loc_cur
          INTO loc_rec;
      END LOOP;

      CLOSE loc_cur;
   END IF;
/*  need to add code hear to process location code delete */
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END locationcodedelete;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."LOCATIONCODEEXTRACT" (
   p_homeelc             VARCHAR2,
   p_locationcode        VARCHAR2,
   p_allowablequantity   VARCHAR2,
   p_unitid              VARCHAR2
)
IS
   tmpvar   NUMBER;
/******************************************************************************
   NAME:       LocationCodeExtract

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/18/2006  r mcbride        1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     LocationCodeExtract
      Sysdate:         12/18/2006
      Date and Time:   12/18/2006, 3:57:14 PM, and 12/18/2006 3:57:14 PM
      Username:         (EMOC3)
      Table Name:       (LocatoncodeTrx)

******************************************************************************/
BEGIN
   insertlocationcodetrx (p_homeelc,
                          p_homeelc,
                          p_locationcode,
                          p_allowablequantity,
                          NULL,
                          NULL,
                          NULL,
                          'LocationCodeExtract',
                          NULL
                         );

   SELECT COUNT (*)
     INTO tmpvar
     FROM locations
    WHERE locations.elc = p_homeelc
          AND locations.locationcode = p_locationcode;

   IF (tmpvar = 0)
   THEN
      INSERT INTO locations
                  (locationid, locationcode,
                   maximumoccupancy, camsinit,
                   elc,
                   mocid
                  )
           VALUES (seq_locations.NEXTVAL, p_locationcode,
                   NVL (isnumeric (p_allowablequantity), 9999), SYSDATE,
                   p_homeelc, 0
                  );

      COMMIT;
   END IF;
/*  need to add code hear to process location code load */
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END locationcodeextract;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."LOCATIONCODELOAD" (
   p_homeelc                   VARCHAR2,
   p_currentelc                VARCHAR2,
   p_locationcode              VARCHAR2,
   p_allowablequantity         VARCHAR2,
   p_locationrestrictioncode   VARCHAR2,
   p_hostunitdateandtime       VARCHAR2,
   p_transactionordinaldate    VARCHAR2
)
IS
   tmpvar     NUMBER;
   recordid   NUMBER;
/******************************************************************************
   NAME:       LocationCodeLoad
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/18/2006          1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     LocationCodeLoad
      Sysdate:         12/18/2006
      Date and Time:   12/18/2006, 3:57:14 PM, and 12/18/2006 3:57:14 PM
      Username:         (EMOC3)
      Table Name:       (LocatoncodeTrx)

******************************************************************************/
BEGIN
   insertlocationcodetrx (p_homeelc,
                          p_currentelc,
                          p_locationcode,
                          p_allowablequantity,
                          p_locationrestrictioncode,
                          p_hostunitdateandtime,
                          p_transactionordinaldate,
                          'LocationCodeLoad',
                          ''
                         );

   IF (LENGTH (p_locationcode) > 0)
   THEN
      SELECT COUNT (*)
        INTO recordid
        FROM locations
       WHERE locations.elc = p_homeelc
         AND locations.locationcode = p_locationcode;

      IF (recordid = 0)
      THEN
         INSERT INTO locations
                     (locationid, locationcode, locationname,
                      maximumoccupancy, camsinit,
                      elc, locationrestrictioncode, mocid
                     )
              VALUES (seq_locations.NEXTVAL, p_locationcode, '',
                      NVL (isnumeric (p_allowablequantity), 9999), SYSDATE,
                      p_homeelc, p_locationrestrictioncode, 0
                     );

         COMMIT;
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END locationcodeload;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."LOGINUSER" (useridin users.userid%TYPE)
AS
BEGIN
   UPDATE users
      SET lastlogin = SYSDATE,
          badattempts = 0,
          isonline = 1
    WHERE users.userid = useridin;

END loginuser;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."LOGOUTUSER" (useridin users.userid%TYPE)
AS
BEGIN
   UPDATE users
      SET isonline = 0
    WHERE users.userid = useridin;
END logoutuser;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."MAJCOMCODELOAD" (
   p_fromelc               VARCHAR2,
   p_fromunitid            VARCHAR2,
   p_majcomcode            VARCHAR2,
   p_majcomcodenarrative   VARCHAR2,
   p_transactioncode       VARCHAR2,
   p_majcomabbrev     VARCHAR2
)
IS
   tmpvar   NUMBER;
   /******************************************************************************
   NAME:       MajcomCodeLoad
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/18/2006  r mcbride        1. Created this procedure.
        4/30/2007   j chaplin     2.  mod for cams change, code 2 digit
                     abbrev 3 digit

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     MajcomCodeLoad
      Sysdate:         12/18/2006
      Date and Time:   12/18/2006, 3:57:14 PM, and 12/18/2006 3:57:14 PM
      Username:         (EMOC3)
      Table Name:       (majorCommandCodeTrx)

******************************************************************************/
BEGIN
   INSERT INTO majorcommandcodetrx
               (majorcommandcodetrxid, fromenterpriselocationcode,
                fromunitid, majorcommandcode, majorcommandcodenarrative,
                transactioncode, majorcommandabbrev
               )
        VALUES (seq_majorcommandcodetrx.NEXTVAL, p_fromelc,
                p_fromunitid, p_majcomcode, p_majcomcodenarrative,
                p_transactioncode, p_majcomabbrev
               );

   COMMIT;

   IF (LENGTH (p_majcomabbrev) > 0)
   THEN
      SELECT COUNT (*)
        INTO tmpvar
        FROM majcoms
       WHERE majcoms.majcom = p_majcomabbrev AND mocid = 0;

      IF (tmpvar = 0)
      THEN
         IF (p_transactioncode = 'A')
         THEN
            INSERT INTO majcoms
                        (majcomid, majcom, comcode,
                         majcomnarrative, camsinit, comid, mocid
                        )
                 VALUES (seq_majcoms.NEXTVAL, p_majcomabbrev, p_majcomcode,
                         p_majcomcodenarrative, SYSDATE, p_majcomcode, 0
                        );

            COMMIT;
         END IF;
      ELSE
         IF (p_transactioncode = 'C')
         THEN
            UPDATE majcoms
               SET majcomnarrative = p_majcomcodenarrative,
                   lastupdate = SYSDATE
             WHERE majcom = p_majcomabbrev AND mocid = 0;
         ELSE
            IF (p_transactioncode = 'D')
            THEN
               DELETE      majcoms
                     WHERE majcom = p_majcomabbrev AND mocid = 0;
            END IF;
         END IF;
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END majcomcodeload;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."NEW_BLOB" (out_newblob OUT BLOB)
AS
BEGIN
   DBMS_LOB.createtemporary (out_newblob, FALSE, 0);
END;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ORGCHANGE" (
   elcin                      wings.elc%TYPE,
   unitidin                   organizations.unit_id%TYPE,
   orgidin                    organizations.orgid%TYPE,
   orgnumberin                organizations.organizationnumber%TYPE,
   orgkindin                  organizations.organizationkind%TYPE,
   orgtypein                  organizations.organizationtype%TYPE,
   neworgidin                 organizations.orgid%TYPE,
   neworgnumberin             organizations.organizationnumber%TYPE,
   neworgkindin               organizations.organizationkind%TYPE,
   neworgtypein               organizations.organizationtype%TYPE,
   hostunitdateandtimein      VARCHAR2,
   transactionordinaldatein   VARCHAR2,
   nomenclaturein             organizations.orgname%TYPE
)
AS
   mocidin    NUMBER;
   wingidin   NUMBER;
   orgidvar   NUMBER;
   tmpvar     NUMBER;
BEGIN
   INSERT INTO organizationtrx
               (organizationloadtrxid, currententerpriselocationcode,
                homeenterpriselocationcode, unitid, organizationid,
                organizationnumber, organizationkind, organizationtype,
                neworganizationid, neworganizationnumber,
                neworganizationkind, neworganizationtype,
                hostunitdateandtime, transactionordinaldate, dateprocessed,
                transactiontype, nomenclature
               )
        VALUES (seq_organizationtrx.NEXTVAL, elcin,
                elcin, unitidin, orgidin,
                orgnumberin, orgkindin, orgtypein,
                neworgidin, neworgnumberin,
                neworgkindin, neworgtypein,
                hostunitdateandtimein, transactionordinaldatein, SYSDATE,
                'OrganizationChange', nomenclaturein
               );

   COMMIT;

   IF (LENGTH (orgidin) > 0)
   THEN
      /* GET MOCID  */
      get_mocid_by_elcunitid (elcin, unitidin, mocidin);

      IF (mocidin IS NOT NULL)
      THEN
         /* GET WINGID from wings table using elc and unitid */
         get_wingid_by_elcunitid (elcin, unitidin, wingidin);

         SELECT organizationsid
           INTO orgidvar
           FROM organizations
          WHERE orgid = orgidin AND mocid = mocidin AND wingid = wingidin;

         IF (orgidvar IS NOT NULL)
         THEN
            IF (neworgidin IS NOT NULL)
            THEN
               UPDATE organizations
                  SET lastupdate = SYSDATE,
                      orgid = neworgidin
                WHERE organizationsid = orgidvar;

               COMMIT;

               SELECT COUNT (*)
                 INTO tmpvar
                 FROM workcenters
                WHERE porgid = orgidin
                  AND mocid = mocidin
                  AND wingid = wingidin;

               IF (tmpvar > 0)
               THEN
                  UPDATE workcenters
                     SET porgid = neworgidin
                   WHERE porgid = orgidin
                     AND mocid = mocidin
                     AND wingid = wingidin;

                  COMMIT;
               END IF;

               SELECT COUNT (*)
                 INTO tmpvar
                 FROM squadrons
                WHERE organization_id = orgidin
                  AND mocid = mocidin
                  AND wingid = wingidin;

               IF (tmpvar > 0)
               THEN
                  UPDATE squadrons
                     SET organization_id = neworgidin
                   WHERE organization_id = orgidin
                     AND mocid = mocidin
                     AND wingid = wingidin;

                  COMMIT;
               END IF;
            END IF;

            COMMIT;

            IF (neworgnumberin IS NOT NULL)
            THEN
               UPDATE organizations
                  SET organizationnumber = neworgnumberin,
                      lastupdate = SYSDATE
                WHERE organizationsid = orgidvar;
            END IF;

            IF (neworgkindin IS NOT NULL)
            THEN
               UPDATE organizations
                  SET organizationkind = neworgkindin,
                      lastupdate = SYSDATE
                WHERE organizationsid = orgidvar;
            END IF;

            IF (neworgtypein IS NOT NULL)
            THEN
               UPDATE organizations
                  SET organizationtype = neworgtypein,
                      lastupdate = SYSDATE
                WHERE organizationsid = orgidvar;
            END IF;

            COMMIT;

            IF (nomenclaturein IS NOT NULL)
            THEN
               UPDATE organizations
                  SET orgname = nomenclaturein,
                      lastupdate = SYSDATE
                WHERE organizationsid = orgidvar;
            END IF;

            COMMIT;
         END IF;
      END IF;

      COMMIT;
   END IF;
END orgchange;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ORGDELETE" (
   elcin                      wings.elc%TYPE,
   unitidin                   organizations.unit_id%TYPE,
   orgidin                    organizations.orgid%TYPE,
   hostunitdateandtimein      VARCHAR2,
   transactionordinaldatein   VARCHAR2
)
AS
   wingidin   NUMBER;
   mocidin    NUMBER;
BEGIN
   INSERT INTO organizationtrx
               (organizationloadtrxid, currententerpriselocationcode,
                homeenterpriselocationcode, unitid, organizationid,
                hostunitdateandtime, transactionordinaldate, dateprocessed,
                transactiontype
               )
        VALUES (seq_organizationtrx.NEXTVAL, elcin,
                elcin, unitidin, orgidin,
                hostunitdateandtimein, transactionordinaldatein, SYSDATE,
                'OrganizationDelete'
               );

   COMMIT;

   IF (LENGTH (orgidin) > 0)
   THEN
      /* GET MOCID  */
      get_mocid_by_elcunitid (elcin, unitidin, mocidin);

      IF (mocidin IS NOT NULL)
      THEN
         /* GET WINGID from wings table using elc and unitid */
         get_wingid_by_elcunitid (elcin, unitidin, wingidin);

         UPDATE workcenters
            SET porgid = NULL
          WHERE workcenters.porgid = orgidin AND workcenters.mocid = mocidin;

         COMMIT;

         UPDATE squadrons
            SET organization_id = NULL,
                organizationsid = NULL
          WHERE organization_id = orgidin AND squadrons.mocid = mocidin;

         COMMIT;

         DELETE FROM organizations
               WHERE orgid = orgidin AND mocid = mocidin;

         COMMIT;
      END IF;
   END IF;
END orgdelete;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."ORGLOAD" (
   elcin                      wings.elc%TYPE,
   unitidin                   organizations.unit_id%TYPE,
   orgidin                    organizations.orgid%TYPE,
   orgnamein                  organizations.orgname%TYPE,
   installationcodein         VARCHAR2,
   orgnumberin                organizations.organizationnumber%TYPE,
   orgkindin                  organizations.organizationkind%TYPE,
   orgtypein                  organizations.organizationtype%TYPE,
   afiorgnumberin             organizations.afi21103organizationnumber%TYPE,
   afiorgkindin               organizations.afi21103organizationkind%TYPE,
   afiorgtypein               organizations.afi21103organizationtype%TYPE,
   detachmentnumberin         organizations.detachmentnumber%TYPE,
   overseasindicatorin        organizations.overseasindicator%TYPE,
   celastreportingdatein      organizations.celastreportingdate%TYPE,
   hostunitdateandtimein      VARCHAR2,
   transactionordinaldatein   VARCHAR2,
   transactiontypein          VARCHAR2
)
AS
   wingidin   NUMBER;
   mocidin    NUMBER;
   tmpvar     NUMBER;
BEGIN
   INSERT INTO organizationtrx
               (organizationloadtrxid, currententerpriselocationcode,
                homeenterpriselocationcode, unitid, organizationid,
                organizationnumber, organizationkind, organizationtype,
                nomenclature, installtioncode, afi21103organizationnumber,
                afi21103organizationkind, afi21103organizationtype,
                detachmentnumber, overseasindicator,
                celastreportingdate, hostunitdateandtime,
                transactionordinaldate, dateprocessed, transactiontype
               )
        VALUES (seq_organizationtrx.NEXTVAL, elcin,
                elcin, unitidin, orgidin,
                orgnumberin, orgkindin, orgtypein,
                orgnamein, installationcodein, afiorgnumberin,
                afiorgkindin, afiorgtypein,
                detachmentnumberin, overseasindicatorin,
                celastreportingdatein, hostunitdateandtimein,
                transactionordinaldatein, SYSDATE, transactiontypein
               );

   COMMIT;

   IF (LENGTH (orgidin) > 0)
   THEN
      /* GET MOCID ids */
      get_mocid_by_elcunitid (elcin, unitidin, mocidin);

      IF (mocidin IS NOT NULL)
      THEN
         /* GET WINGID from wings table using elc and unitid */
         get_wingid_by_elcunitid (elcin, unitidin, wingidin);
         tmpvar := 0;

         SELECT COUNT (*)
           INTO tmpvar
           FROM organizations
          WHERE orgid = orgidin AND wingid = wingidin;

         IF (tmpvar = 0)
         THEN
            INSERT INTO organizations
                        (organizationsid, orgname, orgid,
                         station_location_code, camsinit, unit_id, wingid,
                         mocid, organizationnumber, organizationkind,
                         organizationtype, afi21103organizationnumber,
                         afi21103organizationkind, afi21103organizationtype,
                         detachmentnumber, overseasindicator,
                         celastreportingdate
                        )
                 VALUES (seq_organizations.NEXTVAL, orgnamein, orgidin,
                         installationcodein, SYSDATE, unitidin, wingidin,
                         mocidin, orgnumberin, orgkindin,
                         orgtypein, afiorgnumberin,
                         afiorgkindin, afiorgtypein,
                         detachmentnumberin, overseasindicatorin,
                         celastreportingdatein
                        );
         END IF;
      END IF;
   END IF;
END orgload;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."REMOVE_AIRCRAFT_ENGINEDATA" (
   aircraftidin   aircraftenginedata.aircraftid%TYPE
)
AS
   CURSOR enginecur
   IS
      SELECT enginedataid, enginenumber, aircraftid
        FROM aircraftenginedata
       WHERE aircraftid = aircraftidin;

   enginerec   enginecur%ROWTYPE;
BEGIN
   OPEN enginecur;

   FETCH enginecur
    INTO enginerec;

   WHILE enginecur%FOUND
   LOOP
      INSERT INTO emocaux.aircraftenginedata
                  (enginedataid, aircraftid,
                   enginenumber
                  )
           VALUES (enginerec.enginedataid, enginerec.aircraftid,
                   enginerec.enginenumber
                  );

      /* get semedx data for this engine */
      INSERT INTO emocaux.semedxdata
         SELECT semdataid, enginedataid,
                (SELECT semedx
                   FROM semedx
                  WHERE semedxid = semedxdata.semedxid) AS semedx,
                moccontroller, sampledate, reason, hoursrequired,
                hoursremaining, notifiedby, expediternotified,
                semedxlastupdated, scheduleid, SYSDATE AS archivedate
           FROM semedxdata
          WHERE enginedataid = enginerec.enginedataid;

      DELETE FROM semedxdata
            WHERE enginedataid = enginerec.enginedataid;

      /* get joap data for this engine */
      INSERT INTO emocaux.joapdata
         SELECT joapdataid, (SELECT joapcode
                               FROM joap
                              WHERE joapid = joapdata.joapid) AS joap,
                enginedataid, moccontroller, sampledate, reason,
                hoursrequired, hoursremaining, notifiedby, expediternotified,
                joaplastupdated, scheduleid, SYSDATE AS archivedate
           FROM joapdata
          WHERE enginedataid = enginerec.enginedataid;

      DELETE FROM joapdata
            WHERE enginedataid = enginerec.enginedataid;

      /* get enginerunlog data for this engine */
      INSERT INTO emocaux.enginerunlog
         SELECT enginelogid, moccontroller, runperson, employeenumber,
                rundate, qualchecked, standbyfiretruck, reason, idlestart,
                idlestop, milstart, milstop, abstart, abstop, misupdated,
                spapproval, towerrunclearance, enginedataid, lastupdate,
                lastupdateby, SYSDATE AS archivedate
           FROM enginerunlog
          WHERE enginedataid = enginerec.enginedataid;

      DELETE FROM enginerunlog
            WHERE enginedataid = enginerec.enginedataid;

      FETCH enginecur
       INTO enginerec;
   END LOOP;

   CLOSE enginecur;

   DELETE FROM aircraftenginedata
         WHERE aircraftid = aircraftidin;
END remove_aircraft_enginedata;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."REMOVE_AIRCRAFT_EVENTLOG" (
   shorttailin   eventlog.shorttailnumber%TYPE
)
AS
BEGIN
   INSERT INTO emocaux.eventlog
      SELECT logid, datetimeentered, eventtype, eventnarrative,
             shorttailnumber, userid, SYSDATE AS archivedate, mocid
        FROM eventlog
       WHERE shorttailnumber = shorttailin;

   DELETE FROM eventlog
         WHERE shorttailnumber = shorttailin;
END remove_aircraft_eventlog;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."REMOVE_AIRCRAFT_HISTORY" (
   aircraftidin   history.aircraftid%TYPE
)
AS
   CURSOR history_cur
   IS
      SELECT historyid, eventdate, elementvalue, userid, aircraftid, ELEMENT,
             transactionid
        FROM history
       WHERE aircraftid = aircraftidin;

   history_rec   history_cur%ROWTYPE;
BEGIN
   OPEN history_cur;

   FETCH history_cur
    INTO history_rec;

   WHILE history_cur%FOUND
   LOOP
      INSERT INTO emocaux.history
                  (historyid, eventdate,
                   elementvalue, userid,
                   aircraftid, ELEMENT,
                   transactionid
                  )
           VALUES (history_rec.historyid, history_rec.eventdate,
                   history_rec.elementvalue, history_rec.userid,
                   history_rec.aircraftid, history_rec.ELEMENT,
                   history_rec.transactionid
                  );

      FETCH history_cur
       INTO history_rec;
   END LOOP;

   CLOSE history_cur;

   DELETE FROM history
         WHERE aircraftid = aircraftidin;
END remove_aircraft_history;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."REMOVE_AIRCRAFT_INTERFACERECS" (
AIRCRAFTIDIN WRITEUPS.AIRCRAFTID%TYPE
)
AS

BEGIN
  INSERT INTO EMOCAUX.INTERFACELOG
  SELECT INTERFACELOGID,
    INTERFACECONTROLID,
   TRANSACTIONTYPE,
   TIMEOFINSERT,
   EXPIRATION,
   CAMSVALIDATED,
   CANCELFLAG,
   USERID,
   null,
   null,
   AIRCRAFTID,
   null,
   null,
   null,
   XMLIN,
   XMLOUT,
   null,
   PARSED,
   sysdate as archivedate
  FROM INTERFACELOG
  WHERE AIRCRAFTID = AIRCRAFTIDIN;

  delete from interfacelog where aircraftid = aircraftidin;


END REMOVE_AIRCRAFT_INTERFACERECS;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."REMOVE_AIRCRAFT_MAINTEVENTS" (aircraftidin INTEGER)
AS
BEGIN
   INSERT INTO emocaux.maintenanceevents
      SELECT maintenanceeventid, unit, eventid, pwc, equipid, cp, wuclcn, wd,
             priority, symbol, tssch, jobdur, discrepancy, wcenarrative,
             empid, entry781, defer, wcesymbol, jobfollow, partsrequired,
             aircraftid, entered, SYSDATE AS archivedate
        FROM maintenanceevents
       WHERE aircraftid = aircraftidin;

   --Then delete
   DELETE      maintenanceevents
         WHERE aircraftid = aircraftidin;

   --Commit only if both successful
   COMMIT;
END remove_aircraft_maintevents;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."REMOVE_AIRCRAFT_MICAPS" (
   aircraftidin   micap.aircraftid%TYPE
)
AS
   CURSOR mycur
   IS
      SELECT micapid, documentnumber, nomenclature, estimateddeliverydate, aircraftid
        FROM micap
       WHERE aircraftid = aircraftidin;

   myrec   mycur%ROWTYPE;
BEGIN
   OPEN mycur;

   FETCH mycur
    INTO myrec;

   WHILE mycur%FOUND
   LOOP
      INSERT INTO emocaux.micap
                  (micapid, documentnumber,
                   nomenclature, estimateddeliverydate, aircraftid
                  )
           VALUES (myrec.micapid, myrec.documentnumber,
                   myrec.nomenclature, myrec.estimateddeliverydate, myrec.aircraftid
                  );

      FETCH mycur
       INTO myrec;
   END LOOP;

   CLOSE mycur;

   DELETE FROM micap
         WHERE aircraftid = aircraftidin;
END remove_aircraft_micaps;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."REMOVE_AIRCRAFT_SCHEDULERECS" (
   aircraftidin   aircraftenginedata.aircraftid%TYPE
)
AS
   CURSOR schedcur
   IS
      SELECT scheduleid, scheduleremarks, maintremarks
        FROM schedule
       WHERE aircraftid = aircraftidin;

   schedrec   schedcur%ROWTYPE;
BEGIN
   OPEN schedcur;

   FETCH schedcur
    INTO schedrec;

   WHILE schedcur%FOUND
   LOOP
      DELETE FROM semedxdata
            WHERE scheduleid = schedrec.scheduleid;

      COMMIT;

      DELETE FROM joapdata
            WHERE scheduleid = schedrec.scheduleid;

      COMMIT;

      DELETE FROM schedulestatus
            WHERE scheduleid = schedrec.scheduleid;

      COMMIT;
      remove_deviation_remarks (schedrec.scheduleid);

      DELETE FROM scheduledeviations
            WHERE scheduleid = schedrec.scheduleid;

      COMMIT;

      UPDATE schedule
         SET scheduleremarks = NULL,
             maintremarks = NULL
       WHERE scheduleid = schedrec.scheduleid;

      COMMIT;

      DELETE FROM remarks
            WHERE remarksid = schedrec.scheduleremarks;

      COMMIT;

      DELETE FROM remarks
            WHERE remarksid = schedrec.maintremarks;

      COMMIT;

      DELETE FROM schedule
            WHERE scheduleid = schedrec.scheduleid;

      COMMIT;

      FETCH schedcur
       INTO schedrec;
   END LOOP;

   CLOSE schedcur;
END remove_aircraft_schedulerecs;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."REMOVE_AIRCRAFT_SHOPDISPATCH" (
   aircraftidin   shopdispatch.aircraftid%TYPE
)
AS
   CURSOR shopdispatch_cur
   IS
      SELECT shopdispatchid, aircraftid, requester,
             (SELECT workcentercode
                FROM workcenters
               WHERE workcenterid =
                                  shopdispatch.workcenterid)
                                                           AS workcentercode,
             personcontacted, persondispatched, requestdate, discrepancy,
             completiondate, eticshowtime, entered, enteredby,
             (SELECT squadronname
                FROM squadrons
               WHERE squadronid = sqdispatchedtoid) AS sqdispatchedto
        FROM shopdispatch
       WHERE aircraftid = aircraftidin;

   shopdispatch_rec   shopdispatch_cur%ROWTYPE;
BEGIN
   OPEN shopdispatch_cur;

   FETCH shopdispatch_cur
    INTO shopdispatch_rec;

   WHILE shopdispatch_cur%FOUND
   LOOP
      INSERT INTO emocaux.shopdispatch
                  (shopdispatchid,
                   aircraftid, requester,
                   workcentercode,
                   personcontacted,
                   persondispatched,
                   requestdate,
                   discrepancy,
                   completiondate,
                   eticshowtime, entered,
                   enteredby,
                   sqdispatchedto
                  )
           VALUES (shopdispatch_rec.shopdispatchid,
                   shopdispatch_rec.aircraftid, shopdispatch_rec.requester,
                   shopdispatch_rec.workcentercode,
                   shopdispatch_rec.personcontacted,
                   shopdispatch_rec.persondispatched,
                   shopdispatch_rec.requestdate,
                   shopdispatch_rec.discrepancy,
                   shopdispatch_rec.completiondate,
                   shopdispatch_rec.eticshowtime, shopdispatch_rec.entered,
                   shopdispatch_rec.enteredby,
                   shopdispatch_rec.sqdispatchedto
                  );

      FETCH shopdispatch_cur
       INTO shopdispatch_rec;
   END LOOP;

   CLOSE shopdispatch_cur;

   DELETE FROM shopdispatch
         WHERE aircraftid = aircraftidin;
END remove_aircraft_shopdispatch;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."REMOVE_AIRCRAFT_WEAPONSLOAD" (
   aircraftidin   weaponsload.aircraftid%TYPE
)
AS
   CURSOR mycur
   IS
      SELECT loadid, station,
             (SELECT ordnance
                FROM ordnance
               WHERE ordnanceid = weaponsload.ordnanceid) AS ordnance,
             weaponsnumber, aircraftid,
             (SELECT weaponsclass
                FROM weaponsclass
               WHERE weaponsclassid =
                                   weaponsload.weaponsclassid)
                                                             AS weaponsclass,
             (SELECT firesymbol
                FROM firesymbols
               WHERE firesymbolid = weaponsload.firesymbolid) AS firesymbol
        FROM weaponsload
       WHERE aircraftid = aircraftidin;

   myrec   mycur%ROWTYPE;
BEGIN
   OPEN mycur;

   FETCH mycur
    INTO myrec;

   WHILE mycur%FOUND
   LOOP
      INSERT INTO emocaux.weaponsload
                  (loadid, station, ordnance,
                   weaponsnumber, aircraftid,
                   weaponsclass, firesymbol
                  )
           VALUES (myrec.loadid, myrec.station, myrec.ordnance,
                   myrec.weaponsnumber, myrec.aircraftid,
                   myrec.weaponsclass, myrec.firesymbol
                  );

      FETCH mycur
       INTO myrec;
   END LOOP;

   CLOSE mycur;

   DELETE FROM weaponsload
         WHERE aircraftid = aircraftidin;
END remove_aircraft_weaponsload;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."REMOVE_AIRCRAFT_WRITEUPS" (
   aircraftidin   writeups.aircraftid%TYPE
)
AS
   CURSOR mycur
   IS
      SELECT writeupid, writeuptime, jcn, corrected, correctedtime, pacer,
             etic, aircraftid,
             (SELECT symbol
                FROM symbols
               WHERE symbolid = writeups.symbolid) AS symbol,
             (SELECT wuccode
                FROM wuc
               WHERE wucid = writeups.wucid) AS wuc, discrepancy,
             correctiveaction
        FROM writeups
       WHERE aircraftid = aircraftidin;

   myrec   mycur%ROWTYPE;
BEGIN
   OPEN mycur;

   FETCH mycur
    INTO myrec;

   WHILE mycur%FOUND
   LOOP
      INSERT INTO emocaux.writeups
                  (writeupid, writeuptime, jcn,
                   corrected, correctedtime, pacer,
                   etic, aircraftid, symbol, wuc,
                   discrepancy, correctiveaction
                  )
           VALUES (myrec.writeupid, myrec.writeuptime, myrec.jcn,
                   myrec.corrected, myrec.correctedtime, myrec.pacer,
                   myrec.etic, myrec.aircraftid, myrec.symbol, myrec.wuc,
                   myrec.discrepancy, myrec.correctiveaction
                  );

      FETCH mycur
       INTO myrec;
   END LOOP;

   CLOSE mycur;

   DELETE FROM writeups
         WHERE aircraftid = aircraftidin;
END remove_aircraft_writeups;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."REMOVE_DEVIATION_REMARKS" (
   scheduleidin   schedule.scheduleid%TYPE
)
AS
   CURSOR cur
   IS
      SELECT deviationsremarks
        FROM scheduledeviations
       WHERE scheduleid = scheduleidin AND deviationsremarks IS NOT NULL;

   rec   cur%ROWTYPE;
BEGIN
   UPDATE scheduledeviations
      SET deviationsremarks = NULL
    WHERE scheduleid = scheduleidin;

   OPEN cur;

   FETCH cur
    INTO rec;

   WHILE cur%FOUND
   LOOP
      DELETE FROM remarks
            WHERE remarksid = rec.deviationsremarks;

      FETCH cur
       INTO rec;
   END LOOP;

   CLOSE cur;

   COMMIT;
END remove_deviation_remarks;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."REMOVE_SQUADRON_PILOTS" (
   squadronidin   pilot.squadronid%TYPE
)
AS
   CURSOR mycur
   IS
      SELECT pilotid
        FROM pilot
       WHERE squadronid = squadronidin;

   myrec   mycur%ROWTYPE;
BEGIN
   OPEN mycur;

   FETCH mycur
    INTO myrec;

   WHILE mycur%FOUND
   LOOP
      UPDATE schedule
         SET pilotid = NULL
       WHERE pilotid = myrec.pilotid;

      COMMIT;

      FETCH mycur
       INTO myrec;
   END LOOP;

   CLOSE mycur;

   DELETE FROM pilot
         WHERE squadronid = squadronidin;

   COMMIT;
END remove_squadron_pilots;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."REMOVE_SQUADRON_SCHEDULERECS" (
   squadronidin   squadrons.squadronid%TYPE
)
AS
   CURSOR schedcur
   IS
      SELECT scheduleid, scheduleremarks, maintremarks
        FROM schedule
       WHERE squadronid = squadronidin;

   schedrec   schedcur%ROWTYPE;
BEGIN
   OPEN schedcur;

   FETCH schedcur
    INTO schedrec;

   WHILE schedcur%FOUND
   LOOP
      DELETE FROM semedxdata
            WHERE scheduleid = schedrec.scheduleid;

      COMMIT;

      DELETE FROM joapdata
            WHERE scheduleid = schedrec.scheduleid;

      COMMIT;

      DELETE FROM schedulestatus
            WHERE scheduleid = schedrec.scheduleid;

      COMMIT;
      remove_deviation_remarks (schedrec.scheduleid);

      DELETE FROM scheduledeviations
            WHERE scheduleid = schedrec.scheduleid;

      COMMIT;

      UPDATE schedule
         SET pilotid = NULL
       WHERE scheduleid = schedrec.scheduleid;

      COMMIT;

      UPDATE schedule
         SET scheduleremarks = NULL,
             maintremarks = NULL
       WHERE scheduleid = schedrec.scheduleid;

      COMMIT;

      DELETE FROM remarks
            WHERE remarksid = schedrec.scheduleremarks;

      COMMIT;

      DELETE FROM remarks
            WHERE remarksid = schedrec.maintremarks;

      COMMIT;

      DELETE FROM schedule
            WHERE scheduleid = schedrec.scheduleid;

      COMMIT;

      FETCH schedcur
       INTO schedrec;
   END LOOP;

   CLOSE schedcur;
END remove_squadron_schedulerecs;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."REPORT_GETPARAMETERS" (
   p_cursor     OUT   emoc_types.emoc_cursor,
   reportidin         reports.reportid%TYPE
)
AS
BEGIN
   OPEN p_cursor FOR
      SELECT   parameternumber, parametername, parametertype, parameterlabel
          FROM reportparameters
         WHERE reportid = reportidin
      ORDER BY parameternumber;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      NULL;
END report_getparameters;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."REPORT_GETREPORTDATA" (
   sqlstatementout   OUT   reports.sqlstatement%TYPE,
   reportidin              reports.reportid%TYPE
)
AS
   sqlselect   VARCHAR2 (4000);
BEGIN
   SELECT sqlstatement
     INTO sqlselect
     FROM reports
    WHERE reportid = reportidin;

   sqlstatementout := sqlselect;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      NULL;
END report_getreportdata;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPADDPACERWRITEUP" (
   aircraftidin        aircraft.aircraftid%TYPE,
   eventnumberin       writeups.jcn%TYPE,
   writeuptimein       VARCHAR,
   eticin              writeups.etic%TYPE,
   wucidin             writeups.wucid%TYPE,
   discrepancyin       writeups.discrepancy%TYPE
)
AS
   row_id   INTEGER;
BEGIN
--Can only have one pacer write-up per aircraft.
   UPDATE writeups
       SET pacer = 0
   WHERE aircraftid = aircraftidin;

   SELECT NVL (MAX (writeups.writeupid), 0)
     INTO row_id
     FROM writeups;

   INSERT INTO writeups
               (writeupid, writeuptime,
                jcn, pacer, etic, aircraftid,corrected,
                wucid, discrepancy
               )
        VALUES (row_id + 1, TO_DATE (writeuptimein, 'MM/DD/YYYY HH24:MI:SS'),
                eventnumberin, 1, eticin, aircraftidin,0,
                wucidin, discrepancyin
               );
END spaddpacerwriteup;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPDELETEENGINERUN" (
ENGINELOGIDIN ENGINERUNLOG.ENGINELOGID%TYPE

)
AS
BEGIN

DELETE FROM ENGINERUNLOG

WHERE ENGINELOGID=ENGINELOGIDIN;


END SPDELETEENGINERUN;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPDELETEMEVENT" (
AIRCRAFTIDIN MAINTENANCEEVENTS.AIRCRAFTID%TYPE,
JCNIN MAINTENANCEEVENTS.EVENTID%TYPE
)
AS
BEGIN

DELETE FROM MAINTENANCEEVENTS

WHERE AIRCRAFTID = AIRCRAFTIDIN
AND EVENTID = JCNIN;

END SPDELETEMEVENT;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPDELETEMICAP" (

MICAPIDIN MICAP.MICAPID%TYPE
)
AS
BEGIN

DELETE FROM MICAP

WHERE (  (MICAPID = MICAPIDIN)	);

END SPDELETEMICAP;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPDELETEPRESELECTSPARE" (

AIRCRAFTIDIN AIRCRAFT.AIRCRAFTID%TYPE

)
AS
BEGIN

UPDATE AIRCRAFT
SET

AIRCRAFT.SQPRESELECT = NULL

WHERE (  (AIRCRAFTID = AIRCRAFTIDIN)  );


END SPDELETEPRESELECTSPARE;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPDELETESHOPDISPATCH" (

SHOPDISPATCHIDIN SHOPDISPATCH.SHOPDISPATCHID%TYPE

)
AS
BEGIN

DELETE FROM SHOPDISPATCH

WHERE SHOPDISPATCHID=SHOPDISPATCHIDIN;


END SPDELETESHOPDISPATCH;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPDELETESQUADSORTITEM" (

USERIDIN SQUADRON_SORT_ORDER.USERID%TYPE,
SQUADRONIDIN SQUADRON_SORT_ORDER.SQUADRONID%TYPE

)
AS
BEGIN

DELETE FROM SQUADRON_SORT_ORDER

WHERE (		 (USERID = USERIDIN)
AND (SQUADRONID = SQUADRONIDIN )		);



END SPDELETESQUADSORTITEM;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETAIRCRAFTFIRESYMBOL" (
P_CURSOR OUT EMOC_TYPES.EMOC_CURSOR,
AIRCRAFTIDIN AIRCRAFT.AIRCRAFTID%TYPE
)
AS
BEGIN
OPEN P_CURSOR FOR
SELECT WEAPONSLOAD.AIRCRAFTID, WEAPONSLOAD.FIRESYMBOLID, FIRESYMBOLS.FIRESYMBOL, FIRESYMBOLS.RANKING
FROM WEAPONSLOAD, FIRESYMBOLS
WHERE AIRCRAFTID = AIRCRAFTIDIN
AND WEAPONSLOAD.FIRESYMBOLID = FIRESYMBOLS.FIRESYMBOLID(+)
ORDER BY RANKING DESC;

END SPGETAIRCRAFTFIRESYMBOL;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETAIRCRAFTMAINTENANCESTATUS" (
   p_cursor       OUT   emoc_types.emoc_cursor,
   aircraftidin         aircraft.aircraftid%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT aircraft.tailnumber,
             TO_CHAR (aircraft.lastflowntime,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) "LASTFLOWNTIME",
             (SELECT crewchiefs.crewchief
                FROM crewchiefs
               WHERE aircraft.crewchiefid =
                                          crewchiefs.crewchiefid)
                                                                AS crewchief,
             aircraft.crewchiefid, ranks.rankcode, ranks.rankid,
             crewchiefs.picture, aircraft.fcf, aircraft.ocf, aircraft.qvi,
             aircraft.serialnumber,
             TO_CHAR (aircraft.phasedate,
                      'MM/DD/YYYY HH24:MI:SS') "PHASEDATE",
             aircraft.phaseunits, aircraft.firstofficial,
             aircraft.secondofficial, possessions.possessioncode,
             possessions.possessionid,
             TO_CHAR (aircraft.possdatetime,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) "POSSDATETIME",
             aircraft.commandcode, aircraft.assignmentstatus,
             aircraft.assignstatdatetime, aircraft.assignmentcmd,
             aircraft.assigncomdatetime, aircraft.acft_config_id,
             aircraft.localconfigid, aircraft.multiconfigid,
             aircraft.localoption, aircraft.airconfigdatetime,
             aircraft.relatedmds, squadrons.squadronname,
    aircraft.MissionDesignSeries, aircraft.MissionDesignSeriesBlock,
             squadrons.squadronid, aircraftmds.aircraftmds,
             aircraftmds.blocknumber, aircraftmds.phaseunit,
             aircraftmds.timebetweenphase, aircraft.aircraftmdsid,
             conditioncodes.conditioncode, conditioncodes.condcodeid,
             aircraft.etic, aircraft.eticdatetime, hanger_queen_code.hqcode,
             hanger_queen_code.hqcodeid, aircraft.priority,
             aircraft.reportdesig, aircraft.repdesigndatetime,
             aircraft.tmeflownsincephasedate, aircraft.aircraftwucid,
             TO_CHAR (aircraft.crewchieflastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) "CREWCHIEFLASTUPDATED",
             TO_CHAR (aircraft.teststatuslastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) "TESTSTATUSLASTUPDATED",
             TO_CHAR
                 (aircraft.serialnumberlastupdated,
                  'MM/DD/YYYY HH24:MI:SS'
                 ) "SERIALNUMBERLASTUPDATED",
             TO_CHAR (aircraft.phasedatelastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) "PHASEDATELASTUPDATED",
             TO_CHAR (aircraft.impoundslastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) "IMPOUNDSLASTUPDATED",
             TO_CHAR
                (aircraft.possessioncodelastupdated,
                 'MM/DD/YYYY HH24:MI:SS'
                ) "POSSESSIONCODELASTUPDATED",
             TO_CHAR
                 (aircraft.assignstatuslastupdated,
                  'MM/DD/YYYY HH24:MI:SS'
                 ) "ASSIGNSTATUSLASTUPDATED",
             TO_CHAR
                (aircraft.assigncommandlastupdated,
                 'MM/DD/YYYY HH24:MI:SS'
                ) "ASSIGNCOMMANDLASTUPDATED",
             TO_CHAR
                   (aircraft.airconfigidlastupdated,
                    'MM/DD/YYYY HH24:MI:SS'
                   ) "AIRCONFIGIDLASTUPDATED",
             TO_CHAR (aircraft.squadronlastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) "SQUADRONLASTUPDATED",
             TO_CHAR (aircraft.mdslastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) "MDSLASTUPDATED",
             TO_CHAR
                (aircraft.conditioncodelastupdated,
                 'MM/DD/YYYY HH24:MI:SS'
                ) "CONDITIONCODELASTUPDATED",
             TO_CHAR (aircraft.eticlastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) "ETICLASTUPDATED",
             TO_CHAR (aircraft.hqstatuslastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) "HQSTATUSLASTUPDATED",
             TO_CHAR (aircraft.prioritylastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) "PRIORITYLASTUPDATED",
             TO_CHAR (aircraft.repdesignlastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) "REPDESIGNLASTUPDATED",
             TO_CHAR (aircraft.wuclastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) "WUCLASTUPDATED",
             TO_CHAR (aircraft.remarkslastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) "REMARKSLASTUPDATED",
             remarks.remarks, statusstartdate, statusstarttime,
             aircraft.statusnarrative, aircraft.openstatuseventjcn,
             aircraft.statuswuclcn, aircraft.arm_dearm,
             (SELECT COUNT (*)
                FROM customdatamds
               WHERE aircraftmdsid = aircraft.aircraftmdsid) AS cdcount,
             (SELECT COUNT (*)
                FROM aircraftcustomdata
               WHERE aircraftid = aircraft.aircraftid) AS aircraftcdcount,
             aircraft.geoloccode AS stationloc
        FROM aircraft,
             crewchiefs,
             squadrons,
             conditioncodes,
             hanger_queen_code,
             possessions,
             ranks,
             aircraftmds,
             remarks
       WHERE (    (aircraft.squadronid = squadrons.squadronid)
              AND (aircraft.conditioncodeid = conditioncodes.condcodeid(+))
              AND (aircraft.hangerqueenstatus = hanger_queen_code.hqcodeid(+))
              AND (aircraft.possessionid = possessions.possessionid(+))
     AND (aircraft.crewchiefid = crewchiefs.crewchiefid(+))
              AND (crewchiefs.rankid = ranks.rankid(+))
              AND (aircraft.aircraftmdsid = aircraftmds.aircraftmdsid(+))
              AND (aircraft.aircraftid = aircraftidin)
              AND (aircraft.remarksid = remarks.remarksid(+))
             );
END spgetaircraftmaintenancestatus;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETAIRCRAFTMICAPS" (
   p_cursor       OUT   emoc_types.emoc_cursor,
   aircraftidin         micap.aircraftid%TYPE,
   elc                  micap.enterpriselocationcode%TYPE,
   unitidin             micap.unitid%TYPE,
   equipid              micap.equipmentid%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT DISTINCT micap.micapid, micap.jobcontrolnumber,
                      micap.documentnumber, micap.nomenclature AS part,
                      micap.estimateddeliverydate AS eta,
                      issuedate,
                      urgencyjustificationcode AS ujc, workunitcode,
                      usercomment, NVL (deletedflag, 0) AS deletedflag,
                      TO_CHAR (micap.deleteddate,
                               'MM/DD/YYYY HH24:MI:SS'
                              ) "DELETEDDATE",
                      TO_CHAR (micap.camsinit,
                               'MM/DD/YYYY HH24:MI:SS'
                              ) "CAMSINIT"
                 FROM micap
                WHERE (   (    micap.enterpriselocationcode = elc
                           AND micap.unitid = unitidin
                           AND micap.equipmentid = equipid
                          )
                       OR (micap.aircraftid = aircraftidin)
                      )
             ORDER BY micap.documentnumber;
END spgetaircraftmicaps;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETAIRCRAFTMISSIONS" 
(
P_CURSOR OUT EMOC_TYPES.EMOC_CURSOR,
AIRCRAFTIDIN AIRCRAFT.AIRCRAFTID%TYPE)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR


SELECT TO_CHAR(schedule.ACTUALTAKEOFF, 'MM/DD/YYYY HH24:MI:SS') "ACTUALTAKEOFF",
	   TO_CHAR(schedule.ACTUALLANDING, 'MM/DD/YYYY HH24:MI:SS') "ACTUALLANDING",
 	   TO_CHAR(schedule.SCHEDULEDTAKEOFF, 'MM/DD/YYYY HH24:MI:SS') "SCHEDULEDTAKEOFF",
	   TO_CHAR(schedule.SCHEDULEDLANDING, 'MM/DD/YYYY HH24:MI:SS') "SCHEDULEDLANDING",
	   TO_CHAR(schedule.SCHEDDAY, 'MM/DD/YYYY') "SCHEDDAY",
	   schedule.SCHEDULEID,
	   schedule.SORTIENUM

FROM SCHEDULE

WHERE (   (SCHEDULE.AIRCRAFTID = AIRCRAFTIDIN)
	  AND (schedule.ACTUALLANDING = NULL)	  )

ORDER BY SCHEDULEDTAKEOFF;
END SPGETAIRCRAFTMISSIONS;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETAIRCRAFTMISSIONSTATUS" (
   p_cursor       OUT   emoc_types.emoc_cursor,
   aircraftidin         aircraft.aircraftid%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT squadrons.squadronname, aircraft.tailnumber,
             aircraft.statuscodeid,
             TO_CHAR (aircraft.statuscodetime,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) "STATUSCODETIME",
             TO_CHAR (aircraft.statuscodelastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) "STATUSCODELASTUPDATED",
             aircraft.fuelstatusid,
             TO_CHAR (aircraft.fuelstatustime,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) "FUELSTATUSTIME",
             TO_CHAR (aircraft.fuelstatuslastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) "FUELSTATUSLASTUPDATED",
             TO_CHAR (aircraft.lastflowntime,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) "LASTFLOWNTIME",
             aircraft.locationid, aircraft.locationcode,
             locations.locationname,
             TO_CHAR (aircraft.locationlastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) "LOCATIONLASTUPDATED",
             statusnarrative, localconfigid, multiconfigid, localoption,
             numberofengines, fuelload,
             TO_CHAR (aircraft.fuelrequestedtime,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) "FUELREQUESTEDTIME",
             TO_CHAR (aircraft.fueldeliverytime,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) "FUELDELIVERYTIME",
             fuel.fuelstatus, fuel.fueldescription,
             (SELECT aircraftmds
                FROM aircraftmds
               WHERE aircraft.aircraftmdsid =
                                     aircraftmds.aircraftmdsid)
                                                              AS aircraftmds,
             aircraft.staloccodeid, stationloccodes.stationloc,
             aircraft.geoloccode,
             (SELECT statusimageid
                FROM mocstatusicons
               WHERE mocstatusicons.missiondesignseries =
                                          aircraftmds.aircraftmds
                 AND aircraftmds.aircraftmdsid = aircraft.aircraftmdsid
                 AND mocstatusicons.statuscode = statuscode.statuscode
                 AND mocstatusicons.mocid = aircraft.mocid
                 AND icon_type = 'b'
                 AND ROWNUM <= 1) AS bimageid,
             (SELECT statusimageid
                FROM mocstatusicons
               WHERE mocstatusicons.missiondesignseries =
                                          aircraftmds.aircraftmds
                 AND aircraftmds.aircraftmdsid = aircraft.aircraftmdsid
                 AND mocstatusicons.statuscode = statuscode.statuscode
                 AND mocstatusicons.mocid = aircraft.mocid
                 AND icon_type = 'w'
                 AND ROWNUM <= 1) AS wimageid,
             (SELECT COUNT (*)
                FROM micap
               WHERE (   (aircraftid = aircraft.aircraftid)
                      OR (    equipmentid = aircraft.misequipid
                          AND enterpriselocationcode = wings.elc
                          AND unitid = wings.unitid
                          AND squadrons.squadronid = aircraft.squadronid
                          AND squadrons.wingid = wings.wingid
                         )
                     )) AS micapcount
        FROM aircraft,
             squadrons,
             statuscode,
             locations,
             fuel,
             aircraftmds,
             stationloccodes,
             wings
       WHERE (    (aircraft.aircraftid = aircraftidin)
              AND (aircraft.squadronid = squadrons.squadronid(+))
              AND (aircraft.statuscodeid = statuscode.statuscodeid(+))
              AND (aircraft.locationid = locations.locationid(+))
              AND (aircraft.fuelstatusid = fuel.fuelstatusid(+))
              AND (aircraft.aircraftmdsid = aircraftmds.aircraftmdsid(+))
              AND (aircraft.staloccodeid = stationloccodes.staloccodeid(+))
              AND (squadrons.wingid = wings.wingid(+))
             );
END spgetaircraftmissionstatus;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETAIRCRAFTSTATUSCODES" (
P_CURSOR OUT EMOC_TYPES.EMOC_CURSOR,
SCHEDULEIDIN SCHEDULESTATUS.SCHEDULEID%TYPE)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR

SELECT
schedulestatus.SCHEDULESTATUSID,
schedulestatus.SCHEDULEID,
schedulestatus.STATUSCODEID,
schedulestatus.STATUSTIME,
schedulestatus.STATUSTYPE,
statuscode.statuscode,
colors.colorvalue as fuelcolorvalue

FROM
schedulestatus, statuscode, colors, fuel

WHERE (  		(schedulestatus.SCHEDULEID = 1)
	  	  AND (schedulestatus.STATUSCODEID = statuscode.statuscodeid)
		  AND (schedulestatus.statuscodeid = fuel.FUELSTATUSID(+))
		  AND (fuel.COLORID = colors.COLORID(+))       )

ORDER BY STATUSTIME;


END SPGETAIRCRAFTSTATUSCODES;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETAIRCRAFTUNIT" (
   p_cursor       OUT   emoc_types.emoc_cursor,
   aircraftidin         aircraft.aircraftid%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor
    FOR
       SELECT aircraft.tailnumber, aircraft.shorttailnumber, aircraft.countrycode,
              aircraft.misequipid, squadrons.squadronname,
              squadrons.shortname, squadrons.wingid, wings.wingname,
              wings.unitid, wings.elc
         FROM aircraft, squadrons, wings
        WHERE aircraft.squadronid = squadrons.squadronid(+)
          AND squadrons.wingid = wings.wingid(+)
          AND aircraft.aircraftid = aircraftidin;
END spgetaircraftunit;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETAIRCRAFTWEAPONSSTATUS" 
(
AIRCRAFTIDIN IN AIRCRAFT.AIRCRAFTID%TYPE,
SQUADRONNAMEOUT OUT SQUADRONS.SQUADRONNAME%TYPE,
TAILNUMBEROUT OUT AIRCRAFT.TAILNUMBER%TYPE,
LASTFLOWNTIMEOUT OUT AIRCRAFT.LASTFLOWNTIME%TYPE,
COMBATSCLOUT OUT COMBATSCLS.COMBATSCL%TYPE,
COMBATSCLIDOUT OUT AIRCRAFT.COMBATSCLID%TYPE,
CHAFFOUT OUT AIRCRAFT.CHAFF%TYPE,
FLAREOUT OUT AIRCRAFT.FLARE%TYPE,
HOTGUNSOUT OUT AIRCRAFT.HOTGUNS%TYPE


)
AS
BEGIN

SELECT SQUADRONNAME,
TAILNUMBER,
LASTFLOWNTIME,
COMBATSCLS.COMBATSCL,
AIRCRAFT.COMBATSCLID,
CHAFF,
FLARE,
HOTGUNS


INTO SQUADRONNAMEOUT,
TAILNUMBEROUT,
LASTFLOWNTIMEOUT,
COMBATSCLOUT,
COMBATSCLIDOUT,
CHAFFOUT,
FLAREOUT,
HOTGUNSOUT

FROM AIRCRAFT, SQUADRONS, COMBATSCLS

WHERE AIRCRAFT.AIRCRAFTID = AIRCRAFTIDIN
	  AND AIRCRAFT.SQUADRONID = SQUADRONS.SQUADRONID
	  AND AIRCRAFT.COMBATSCLID = COMBATSCLS.COMBATSCLID;

END SPGETAIRCRAFTWEAPONSSTATUS;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETAIRCRAFTWRITEUPS2" (
   p_cursor       OUT   emoc_types.emoc_cursor,
   aircraftidin         writeups.aircraftid%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor
    FOR
       SELECT writeups.writeupid, writeups.symbolid, symbols.symbol,
              writeups.discrepancy, writeups.jcn,
              TO_CHAR (writeups.writeuptime,
                       'MM/DD/YYYY HH24:MI:SS'
                      ) "WRITEUPTIME",
              writeups.pacer, writeups.wucid, wuc.wuccode,
              writeups.corrected, writeups.etic,
              TO_CHAR (writeups.correctedtime,
                       'MM/DD/YYYY HH24:MI:SS'
                      ) "CORRECTEDTIME",
              writeups.correctiveaction
         FROM writeups, symbols, wuc
        WHERE (    (writeups.aircraftid = aircraftidin)
               AND (writeups.symbolid = symbols.symbolid(+))
               AND (writeups.corrected = 0)
               AND (writeups.wucid = wuc.wucid(+))
              );
END spgetaircraftwriteups2;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETALLAIRCRAFT" (
   p_cursor   OUT   emoc_types.emoc_cursor
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT aircraft.aircraftid, aircraft.aircraftmdsid,
             aircraft.countrycode, aircraftmds.aircraftmds,
             aircraftmds.numberofengines, aircraftmds.numberofstations,
             aircraftmds.phaseunit, aircraftmds.timebetweenphase,
             aircraftmds.acftmdstypecd, aircraft.aircraftwucid, wuc.wuccode,
             aircraft.aircraftyear, aircraft.arm_dearm, aircraft.chaff,
             aircraft.combatsclid, combatscls.combatscl,
             aircraft.conditioncodeid, aircraft.statuswuclcn,
             conditioncodes.conditioncode, conditioncodes.condstatid,
             conditioncolor.colorvalue conditioncolorvalue,
             conditioncolor.fontcolor conditionfontcolor,
             TO_CHAR
                 (aircraft.conditioncodelastupdated,
                  'MM/DD/YYYY HH24:MI:SS'
                 ) conditioncodelastupdated,
             aircraft.crewchiefid, crewchiefs.crewchief, crewchiefs.picture,
             crewchiefs.rankid, aircraft.crewchieflastupdated, aircraft.etic,
             TO_CHAR (aircraft.eticlastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) eticlastupdated,
             aircraft.fcf, aircraft.firesymbolid, firesymbols.firesymbol,
             aircraft.firstofficial, aircraft.flare, aircraft.flightid,
             flights.flightname,
             TO_CHAR (aircraft.fueldeliverytime,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) fueldeliverytime,
             aircraft.fuelload,
             TO_CHAR (aircraft.fuelrequestedtime,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) fuelrequestedtime,
             aircraft.fuelstatusid, fuel.fuelstatus, fuel.fueldescription,
             TO_CHAR (aircraft.fuelstatustime,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) fuelstatustime,
             fuelcolor.colorvalue fuelcolorvalue,
             fuelcolor.fontcolor fuelfontcolor,
             TO_CHAR (aircraft.fuelstatuslastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) fuelstatuslastupdated,
             aircraft.hangerqueenstatus, hanger_queen_code.hqcode,
             aircraft.hotguns,
             TO_CHAR (aircraft.hqstatuslastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) hqstatuslastupdated,
             TO_CHAR (aircraft.impoundslastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) impoundslastupdated,
             TO_CHAR (aircraft.lastflowntime,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) lastflowntime,
             aircraft.localconfigid, aircraft.localoption,
             aircraft.locationid, locations.locationcode,
             locations.locationname,
             TO_CHAR (aircraft.locationlastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) locationlastupdated,
             TO_CHAR (aircraft.mdslastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) mdslastupdated,
             aircraft.multiconfigid, aircraft.ocf,
             TO_CHAR (aircraft.phasedate, 'MM/DD/YYYY HH24:MI:SS') phasedate,
             TO_CHAR (aircraft.phasedatelastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) phasedatelastupdated,
             aircraft.phaseunits,
             TO_CHAR (aircraft.possdatetime,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) possdatetime,
             TO_CHAR
                (aircraft.possessioncodelastupdated,
                 'MM/DD/YYYY HH24:MI:SS'
                ) possessioncodelastupdated,
             aircraft.possessionid, possessions.possessioncode,
             aircraft.priority,
             TO_CHAR (aircraft.prioritylastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) prioritylastupdated,
             aircraft.qvi, aircraft.remarksid, remarks.remarks,
             TO_CHAR (aircraft.remarkslastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) remarkslastupdated,
             aircraft.secondofficial, aircraft.serialnumber,
             TO_CHAR
                   (aircraft.serialnumberlastupdated,
                    'MM/DD/YYYY HH24:MI:SS'
                   ) serialnumberlastupdated,
             aircraft.shorttailnumber, aircraft.statuscodeid,
             statuscode.statuscode, statuscode.iconname,
             aircraft.sqpreselect, aircraft.squadronid,
             squadrons.squadronname, squadrons.wingid,
             squadroncolor.colorvalue squadroncolorvalue,
             squadroncolor.fontcolor squadronfontcolor, wings.wingname,
             wings.unitid, wings.elc,
             TO_CHAR (aircraft.squadronlastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) squadronlastupdated,
             aircraft.staloccodeid, aircraft.statuscodeid,
             stationloccodes.stationloc, stationloccodes.stalocnarrative,
             TO_CHAR (aircraft.statuscodelastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) statuscodelastupdated,
             TO_CHAR (aircraft.statuscodetime,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) statuscodetime,
             TO_CHAR (aircraft.teststatuslastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) teststatuslastupdated,
             aircraft.tmeflownsincephasedate,
             TO_CHAR
                 (aircraft.weaponsstatuslastupdated,
                  'MM/DD/YYYY HH24:MI:SS'
                 ) weaponsstatuslastupdated,
             TO_CHAR (aircraft.wuclastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) wuclastupdated,
             (SELECT COUNT (*)
                FROM customdatamds
               WHERE aircraftmdsid = aircraft.aircraftmdsid) AS cdcount,
             (SELECT COUNT (*)
                FROM aircraftcustomdata
               WHERE aircraftid = aircraft.aircraftid) AS aircraftcdcount,
             (SELECT statusimageid
                FROM mocstatusicons
               WHERE mocstatusicons.missiondesignseries =
                                          aircraftmds.aircraftmds
                 AND aircraftmds.aircraftmdsid = aircraft.aircraftmdsid
                 AND mocstatusicons.statuscode = statuscode.statuscode
                 AND mocstatusicons.mocid = aircraft.mocid
                 AND icon_type = 'b'
                 AND ROWNUM <= 1) AS bimageid,
             (SELECT statusimageid
                FROM mocstatusicons
               WHERE mocstatusicons.missiondesignseries =
                                          aircraftmds.aircraftmds
                 AND aircraftmds.aircraftmdsid = aircraft.aircraftmdsid
                 AND mocstatusicons.statuscode = statuscode.statuscode
                 AND mocstatusicons.mocid = aircraft.mocid
                 AND icon_type = 'w'
                 AND ROWNUM <= 1) AS wimageid,
             (SELECT COUNT (*)
                FROM micap
               WHERE (   (aircraftid = aircraft.aircraftid)
                      OR (    equipmentid = aircraft.misequipid
                          AND enterpriselocationcode = wings.elc
                          AND unitid = wings.unitid
                          AND squadrons.squadronid = aircraft.squadronid
                          AND squadrons.wingid = wings.wingid
                         )
                     )) AS micapcount
        FROM aircraft,
             aircraftmds,
             wuc,
             combatscls,
             conditioncodes,
             colors conditioncolor,
             conditionstatus,
             crewchiefs,
             firesymbols,
             flights,
             fuel,
             colors fuelcolor,
             hanger_queen_code,
             locations,
             possessions,
             remarks,
             statuscode,
             squadrons,
             wings,
             colors squadroncolor,
             stationloccodes
       WHERE aircraft.aircraftmdsid = aircraftmds.aircraftmdsid(+)
         AND aircraft.aircraftwucid = wuc.wucid(+)
         AND aircraft.combatsclid = combatscls.combatsclid(+)
         AND aircraft.conditioncodeid = conditioncodes.condcodeid(+)
         AND conditioncodes.condstatid = conditionstatus.condstatid(+)
         AND conditionstatus.colorid = conditioncolor.colorid(+)
         AND aircraft.crewchiefid = crewchiefs.crewchiefid(+)
         AND aircraft.firesymbolid = firesymbols.firesymbolid(+)
         AND aircraft.flightid = flights.flightid(+)
         AND aircraft.fuelstatusid = fuel.fuelstatusid(+)
         AND aircraft.hangerqueenstatus = hanger_queen_code.hqcodeid(+)
         AND fuel.colorid = fuelcolor.colorid(+)
         AND aircraft.locationid = locations.locationid(+)
         AND aircraft.possessionid = possessions.possessionid(+)
         AND aircraft.remarksid = remarks.remarksid(+)
         AND aircraft.squadronid = squadrons.squadronid(+)
         AND squadrons.colorid = squadroncolor.colorid(+)
         AND squadrons.wingid = wings.wingid(+)
         AND aircraft.statuscodeid = statuscode.statuscodeid(+)
         AND aircraft.staloccodeid = stationloccodes.staloccodeid(+);
END spgetallaircraft;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETALLCOMBATSCLSBYMDS" (
P_CURSOR OUT EMOC_TYPES.EMOC_CURSOR,
AIRCRAFTIDIN AIRCRAFT.AIRCRAFTID%TYPE)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR

SELECT combatscls.COMBATSCL, combatscls.COMBATSCLID
	 FROM aircraft, combatsclrules, combatscls
 	 WHERE (    (aircraft.aircraftmdsid = combatsclrules.aircraftmdsid)
        AND (combatscls.combatsclid = combatsclrules.combatsclid)
        AND (aircraft.aircraftid = aircraftidin)   )
	 ORDER BY COMBATSCL;
END SPGETALLCOMBATSCLSBYMDS;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETALLFLIGHTLINES" (
P_CURSOR OUT EMOC_TYPES.EMOC_CURSOR,
AIRCRAFTIDIN AIRCRAFT.AIRCRAFTID%TYPE)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR

SELECT
schedule.scheduleid,
schedule.aircraftid,
schedule.sortienum,
schedule.callsign,
TO_CHAR(schedule.ACTUALTAKEOFF, 'MM/DD/YYYY HH24:MI:SS') "ACTUALTAKEOFF",
TO_CHAR(schedule.ACTUALLANDING, 'MM/DD/YYYY HH24:MI:SS') "ACTUALLANDING",
TO_CHAR(schedule.SCHEDULEDTAKEOFF, 'MM/DD/YYYY HH24:SS') "SCHEDULEDTAKEOFF",
sch.statuscodeid,
TO_CHAR(sch.statustime, 'MM/DD/YYYY HH24:MI:SS') "STATUSTIME",
sta.statuscode,
sch.statustype,
fuel.FUELSTATUS,
colors.COLORVALUE
  FROM schedule schedule, schedulestatus sch, statuscode sta, fuel, colors
 WHERE (   (TO_CHAR(schedule.SCHEDULEDTAKEOFF, 'MM/DD/YYYY') = TO_CHAR(SYSDATE, 'MM/DD/YYYY'))
 	   	AND	(sch.statuscodeid = sta.statuscodeid(+))
 	   	AND (sch.statuscodeid = fuel.FUELSTATUSID(+))
		AND (fuel.COLORID = colors.COLORID(+))
        AND (schedule.scheduleid = sch.scheduleid)
        AND (schedule.aircraftid = AIRCRAFTIDIN))



	 ORDER BY SCHEDULE.SCHEDULEID,SCHEDULE.SCHEDULEDTAKEOFF;
END SPGETALLFLIGHTLINES;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETALLFLINESTATUSCODES" (
P_CURSOR OUT EMOC_TYPES.EMOC_CURSOR,
AIRCRAFTIDIN AIRCRAFT.AIRCRAFTID%TYPE)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR

SELECT SCHEDULE.AIRCRAFTID, SCHEDULE.SORTIENUM, SCHEDULESTATUS.STATUSCODEID, STATUSCODE.STATUSCODE, SCHEDULESTATUS.STATUSTIME
FROM AIRCRAFT, SCHEDULE, SCHEDULESTATUS, STATUSCODE
WHERE (    (SCHEDULE.AIRCRAFTID = AIRCRAFTIDIN)
      AND  (SCHEDULE.SCHEDULEID = SCHEDULESTATUS.SCHEDULEID)  )
	 ORDER BY SCHEDULE.SORTIENUM;
END SPGETALLFLINESTATUSCODES;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETALLFUELCODESBYMISSION" (
P_CURSOR OUT EMOC_TYPES.EMOC_CURSOR,
SCHEDULEIDIN SCHEDULESTATUS.SCHEDULEID%TYPE)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR

SELECT
schedulestatus.SCHEDULEID,
schedulestatus.SCHEDULESTATUSID,
schedulestatus.STATUSCODEID,
TO_CHAR(schedulestatus.STATUSTIME, 'MM/DD/YYYY HH24:MI:SS') "STATUSTIME",
schedulestatus.STATUSTYPE,
fuel.FUELSTATUS,
FUEL.FUELDESCRIPTION,
colors.COLORVALUE


FROM schedulestatus, fuel, colors
WHERE (  (schedulestatus.statuscodeid = fuel.fuelstatusid(+))
		AND (fuel.COLORID = colors.COLORID(+))
        AND (schedulestatus.scheduleid = SCHEDULEIDIN)
		AND (schedulestatus.statustype = 1) )

ORDER BY schedulestatus.statustime;
END SPGETALLFUELCODESBYMISSION;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETALLMOCAIRCRAFT" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          INTEGER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT aircraft.aircraftid, aircraft.aircraftmdsid,
             aircraftmds.aircraftmds, aircraftmds.numberofengines,
             aircraftmds.numberofstations, aircraftmds.phaseunit,
             aircraftmds.timebetweenphase, aircraftmds.acftmdstypecd,
             aircraft.aircraftwucid, wuc.wuccode, aircraft.aircraftyear,
             aircraft.arm_dearm, aircraft.chaff, aircraft.combatsclid,
             aircraft.countrycode, aircraft.statuswuclcn, combatscls.combatscl,
             aircraft.conditioncodeid, conditioncodes.conditioncode,
             conditioncodes.condstatid,
             conditioncolor.colorvalue conditioncolorvalue,
             conditioncolor.fontcolor conditionfontcolor,
             TO_CHAR
                 (aircraft.conditioncodelastupdated,
                  'MM/DD/YYYY HH24:MI:SS'
                 ) conditioncodelastupdated,
             aircraft.crewchiefid, crewchiefs.crewchief, crewchiefs.picture,
             crewchiefs.rankid, aircraft.crewchieflastupdated, aircraft.etic,
             TO_CHAR (aircraft.eticlastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) eticlastupdated,
             aircraft.fcf, aircraft.firesymbolid, firesymbols.firesymbol,
             aircraft.firstofficial, aircraft.flare, aircraft.flightid,
             flights.flightname,
             TO_CHAR (aircraft.fueldeliverytime,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) fueldeliverytime,
             aircraft.fuelload,
             TO_CHAR (aircraft.fuelrequestedtime,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) fuelrequestedtime,
             aircraft.fuelstatusid, fuel.fuelstatus, fuel.fueldescription,
             TO_CHAR (aircraft.fuelstatustime,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) fuelstatustime,
             fuelcolor.colorvalue fuelcolorvalue,
             fuelcolor.fontcolor fuelfontcolor,
             TO_CHAR (aircraft.fuelstatuslastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) fuelstatuslastupdated,
             aircraft.hangerqueenstatus, hanger_queen_code.hqcode,
             aircraft.hotguns,
             TO_CHAR (aircraft.hqstatuslastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) hqstatuslastupdated,
             TO_CHAR (aircraft.impoundslastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) impoundslastupdated,
             TO_CHAR (aircraft.lastflowntime,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) lastflowntime,
             aircraft.localconfigid, aircraft.localoption,
             aircraft.locationid, locations.locationcode,
             locations.locationname,
             TO_CHAR (aircraft.locationlastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) locationlastupdated,
             TO_CHAR (aircraft.mdslastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) mdslastupdated,
             aircraft.multiconfigid, aircraft.ocf,
             TO_CHAR (aircraft.phasedate, 'MM/DD/YYYY HH24:MI:SS') phasedate,
             TO_CHAR (aircraft.phasedatelastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) phasedatelastupdated,
             aircraft.phaseunits,
             TO_CHAR (aircraft.possdatetime,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) possdatetime,
             TO_CHAR
                (aircraft.possessioncodelastupdated,
                 'MM/DD/YYYY HH24:MI:SS'
                ) possessioncodelastupdated,
             aircraft.possessionid, possessions.possessioncode,
             aircraft.priority,
             TO_CHAR (aircraft.prioritylastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) prioritylastupdated,
             aircraft.qvi, aircraft.remarksid, remarks.remarks,
             TO_CHAR (aircraft.remarkslastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) remarkslastupdated,
             aircraft.secondofficial, aircraft.serialnumber,
             TO_CHAR
                   (aircraft.serialnumberlastupdated,
                    'MM/DD/YYYY HH24:MI:SS'
                   ) serialnumberlastupdated,
             aircraft.shorttailnumber,
             NVL (aircraft.statuscodeid,
                  (SELECT statuscodeid
                     FROM statuscode
                    WHERE defaultstatuscode = 1 AND mocid = mocidin)
                 ) AS statuscodeid,
             statuscode.statuscode, statuscode.iconname,
             aircraft.sqpreselect, aircraft.squadronid,
             squadrons.squadronname, squadrons.wingid,
             squadroncolor.colorvalue squadroncolorvalue,
             squadroncolor.fontcolor squadronfontcolor, wings.wingname,
             wings.unitid,
             TO_CHAR (aircraft.squadronlastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) squadronlastupdated,
             aircraft.staloccodeid, aircraft.statuscodeid,
             stationloccodes.stationloc, stationloccodes.stalocnarrative,
             TO_CHAR (aircraft.statuscodelastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) statuscodelastupdated,
             TO_CHAR (aircraft.statuscodetime,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) statuscodetime,
             TO_CHAR (aircraft.teststatuslastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) teststatuslastupdated,
             aircraft.tmeflownsincephasedate,
             TO_CHAR
                 (aircraft.weaponsstatuslastupdated,
                  'MM/DD/YYYY HH24:MI:SS'
                 ) weaponsstatuslastupdated,
             TO_CHAR (aircraft.wuclastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) wuclastupdated,
             (SELECT COUNT (*)
                FROM customdatamds
               WHERE aircraftmdsid = aircraft.aircraftmdsid) AS cdcount,
             (SELECT COUNT (*)
                FROM aircraftcustomdata
               WHERE aircraftid = aircraft.aircraftid) AS aircraftcdcount,
             (SELECT statusimageid
                FROM mocstatusicons
               WHERE mocstatusicons.missiondesignseries =
                                          aircraftmds.aircraftmds
                 AND aircraft.aircraftmdsid = aircraftmds.aircraftmdsid
                 AND mocstatusicons.statuscode = statuscode.statuscode
                 AND mocstatusicons.mocid = mocidin
                 AND icon_type = 'b'
                 AND ROWNUM <= 1) AS bimageid,
             (SELECT statusimageid
                FROM mocstatusicons
               WHERE mocstatusicons.missiondesignseries =
                                          aircraftmds.aircraftmds
                 AND aircraft.aircraftmdsid = aircraftmds.aircraftmdsid
                 AND mocstatusicons.statuscode = statuscode.statuscode
                 AND mocstatusicons.mocid = mocidin
                 AND icon_type = 'w'
                 AND ROWNUM <= 1) AS wimageid,
             (SELECT COUNT (*)
                FROM micap
               WHERE (   (aircraftid = aircraft.aircraftid)
                      OR (    equipmentid = aircraft.misequipid
                          AND enterpriselocationcode = wings.elc
                          AND unitid = wings.unitid
                          AND squadrons.squadronid = aircraft.squadronid
                          AND squadrons.wingid = wings.wingid
                         )
                     )) AS micapcount,
             aircraft.missiondesignseries, aircraft.missiondesignseriesblock
        FROM aircraft,
             aircraftmds,
             wuc,
             combatscls,
             conditioncodes,
             colors conditioncolor,
             conditionstatus,
             crewchiefs,
             firesymbols,
             flights,
             fuel,
             colors fuelcolor,
             hanger_queen_code,
             locations,
             possessions,
             remarks,
             statuscode,
             squadrons,
             wings,
             colors squadroncolor,
             stationloccodes
       WHERE aircraft.mocid = mocidin
         AND aircraft.aircraftmdsid = aircraftmds.aircraftmdsid(+)
         AND aircraft.aircraftwucid = wuc.wucid(+)
         AND aircraft.combatsclid = combatscls.combatsclid(+)
         AND aircraft.conditioncodeid = conditioncodes.condcodeid(+)
         AND conditioncodes.condstatid = conditionstatus.condstatid(+)
         AND conditionstatus.colorid = conditioncolor.colorid(+)
         AND aircraft.crewchiefid = crewchiefs.crewchiefid(+)
         AND aircraft.firesymbolid = firesymbols.firesymbolid(+)
         AND aircraft.flightid = flights.flightid(+)
         AND aircraft.fuelstatusid = fuel.fuelstatusid(+)
         AND aircraft.hangerqueenstatus = hanger_queen_code.hqcodeid(+)
         AND fuel.colorid = fuelcolor.colorid(+)
         AND aircraft.locationid = locations.locationid(+)
         AND aircraft.possessionid = possessions.possessionid(+)
         AND aircraft.remarksid = remarks.remarksid(+)
         AND aircraft.squadronid = squadrons.squadronid(+)
         AND squadrons.colorid = squadroncolor.colorid(+)
         AND squadrons.wingid = wings.wingid(+)
         AND aircraft.statuscodeid = statuscode.statuscodeid(+)
         AND aircraft.staloccodeid = stationloccodes.staloccodeid(+);
END spgetallmocaircraft;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETALLMOCSQUADRONS" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          INTEGER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT squ.squadronid, squ.squadronname, squ.shortname, squ.colorid,
             c.colorvalue, c.fontcolor, squ.mocid,
    w.elc, w.unitid, w.wingid,
    (Select sum(micapcount) from squadronmicapcount where squadronid=squ.squadronid) as squadronmicapcount
 FROM SQUADRONS squ, COLORS c, wings w
 WHERE c.colorid(+) = squ.colorid
      and squ.wingid = w.wingid 
         and squ.mocid = mocidin;
END spgetallmocsquadrons;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETALLSQUADRONS" (
P_CURSOR OUT Emoc_Types.EMOC_CURSOR)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR
SELECT squ.squadronid, squ.squadronname, squ.shortname, squ.colorid, c.colorvalue, c.fontcolor, w.elc, w.unitid,
(Select sum(micapcount) from squadronmicapcount where squadronid=squ.squadronid) as squadronmicapcount
FROM SQUADRONS squ, COLORS c, wings w
WHERE (c.colorid(+) = squ.colorid
   and squ.wingid = w.wingid) ;
END Spgetallsquadrons;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETALLSQUADRONSBYUSER" (
P_CURSOR OUT Emoc_Types.EMOC_CURSOR,
USERIDIN USERS.USERID%TYPE,
WINGIDIN SQUADRONS.WINGID%TYPE)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR
SELECT squ.squadronid, squ.squadronname, per.userid,
       squsortorder.sortorder

FROM SQUADRONS squ,
       PERMISSIONS per,
       SQUADRON_SORT_ORDER squsortorder

WHERE (  ( squ.wingid = WINGIDIN)
	   AND (squ.squadronid = per.squadronid(+))
        AND (per.squadronid = squsortorder.squadronid(+))
        AND (per.userid = squsortorder.userid(+))
        AND (per.userid = USERIDIN)
		AND (squ.squadronname != 'TRANSIENT')    )

ORDER BY squsortorder.sortorder;

END Spgetallsquadronsbyuser;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETALLSTATIONS_ORDNANCES" (
P_CURSOR OUT EMOC_TYPES.EMOC_CURSOR,
AIRCRAFTIDIN INTEGER)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR
SELECT STATION, ORDNANCE, WEAPONSNUMBER

FROM WEAPONSLOAD, ORDNANCE

WHERE WEAPONSLOAD.AIRCRAFTID = AIRCRAFTIDIN
	  AND WEAPONSLOAD.ORDNANCEID = ORDNANCE.ORDNANCEID;

END SPGETALLSTATIONS_ORDNANCES;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETALLSTATUSCODESBYMISSION" (
   p_cursor       OUT   emoc_types.emoc_cursor,
   scheduleidin         schedulestatus.scheduleid%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   schedulestatus.scheduleid,
               schedulestatus.schedulestatusid,
               schedulestatus.statuscodeid,
               TO_CHAR (schedulestatus.statustime,
                        'MM/DD/YYYY HH24:MI:SS'
                       ) statustime,
               schedulestatus.statustype, statuscode.statuscode
          FROM schedulestatus, statuscode
         WHERE (    (schedulestatus.statuscodeid = statuscode.statuscodeid(+))
                AND (schedulestatus.statustype = 0)
                AND (schedulestatus.scheduleid = scheduleidin)
               )
      ORDER BY statuscode, schedulestatus.statustime DESC;
END spgetallstatuscodesbymission;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETALT_AIRCRAFTBYSQUADRON" (
P_CURSOR OUT EMOC_TYPES.EMOC_CURSOR,
SQUADRONIDIN INTEGER)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR
SELECT TAILNUMBER, ETIC, LOCATIONNAME, FUELSTATUS, COLORVALUE, AIRCRAFTMDS, STATUSCODE

FROM AIRCRAFT, LOCATIONS, FUEL, COLORS, AIRCRAFTMDS, STATUSCODE

WHERE SQUADRONID = SQUADRONIDIN
AND AIRCRAFT.LOCATIONID = LOCATIONS.LOCATIONID
AND (AIRCRAFT.FUELSTATUSID = FUEL.FUELSTATUSID AND FUEL.COLORID = COLORS.COLORID)
AND AIRCRAFT.AIRCRAFTMDSID = AIRCRAFTMDS.AIRCRAFTMDSID
AND AIRCRAFT.STATUSCODEID = STATUSCODE.STATUSCODEID;
END SPGETALT_AIRCRAFTBYSQUADRON;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETCHIPENGINEDATABYAIRCRAFT" (
   p_cursor       OUT   emoc_types.emoc_cursor,
   aircraftidin         aircraft.aircraftid%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   semedx.semedx, colors.colorvalue, colors.colorname,
               colorrules.colorrank, aircraftenginedata.enginenumber,
               semedxdata.semdataid, semedxdata.scheduleid,
               TO_CHAR (schedule.scheduledtakeoff,
                        'MM/DD/YYYY HH24:MI:SS'
                       ) "SCHEDULEDTAKEOFF",
               semedxdata.semedxid,
               TO_CHAR (semedxdata.sampledate,
                        'MM/DD/YYYY HH24:MI:SS'
                       ) "SAMPLEDATE",
               semedxdata.enginedataid, semedxdata.expediternotified,
               semedxdata.hoursrequired, semedxdata.hoursremaining,
               semedxdata.moccontroller, semedxdata.notifiedby,
               semedxdata.reason,
               TO_CHAR (semedxdata.semedxlastupdated,
                        'MM/DD/YYYY HH24:MI:SS'
                       ) "SEMEDXLASTUPDATED"
          FROM aircraft,
               semedx,
               colors,
               colorrules,
               aircraftenginedata,
               semedxdata,
               schedule
         WHERE (    (aircraft.aircraftid = aircraftenginedata.aircraftid)
                AND (aircraftenginedata.enginedataid = semedxdata.enginedataid
                    )
                AND (semedx.semedxid = semedxdata.semedxid)
                AND (semedx.colorrulesid = colorrules.colorrulesid)
                AND (colorrules.codetype = 'SEMEDX')
                AND (colorrules.colorid = colors.colorid)
                AND (semedxdata.scheduleid = schedule.scheduleid(+))
                AND (aircraft.aircraftid = aircraftidin)
                AND (semedxdata.datecleared IS NULL)
                AND (semedx.mocid = aircraft.mocid)
               )
      ORDER BY aircraftenginedata.enginenumber, semedxdata.sampledate;
END spgetchipenginedatabyaircraft;



 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETCHIPENGINEDATABYSCHEDULE" (
   p_cursor       OUT   emoc_types.emoc_cursor,
   scheduleidin         semedxdata.scheduleid%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   semedx.semedx, colors.colorvalue, colors.colorname,
               colorrules.colorrank, aircraftenginedata.enginenumber,
               semedxdata.semdataid, semedxdata.scheduleid,
               TO_CHAR (schedule.scheduledtakeoff,
                        'MM/DD/YYYY HH24:MI:SS'
                       ) "SCHEDULEDTAKEOFF",
               semedxdata.semedxid,
               TO_CHAR (semedxdata.sampledate,
                        'MM/DD/YYYY HH24:MI:SS'
                       ) "SAMPLEDATE",
               semedxdata.enginedataid, semedxdata.expediternotified,
               semedxdata.hoursrequired, semedxdata.hoursremaining,
               semedxdata.moccontroller, semedxdata.notifiedby,
               semedxdata.reason,
               TO_CHAR (semedxdata.semedxlastupdated,
                        'MM/DD/YYYY HH24:MI:SS'
                       ) "SEMEDXLASTUPDATED"
          FROM aircraft,
               semedx,
               colors,
               colorrules,
               aircraftenginedata,
               semedxdata,
               schedule
         WHERE (    (aircraft.aircraftid = aircraftenginedata.aircraftid)
                AND (aircraftenginedata.enginedataid = semedxdata.enginedataid
                    )
                AND (semedx.semedxid = semedxdata.semedxid)
                AND (semedx.colorrulesid = colorrules.colorrulesid)
                AND (colorrules.codetype = 'SEMEDX')
                AND (colorrules.colorid = colors.colorid)
                AND (semedxdata.scheduleid = schedule.scheduleid(+))
                AND (semedxdata.scheduleid = scheduleidin)
                AND (semedxdata.datecleared IS NULL)
                AND (semedx.mocid = aircraft.mocid)
               )
      ORDER BY aircraftenginedata.enginenumber, semedxdata.sampledate;
END spgetchipenginedatabyschedule;



 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETCONFIGCODESPERAIRCRAFT" (
P_CURSOR OUT EMOC_TYPES.EMOC_CURSOR,
AIRCRAFTIDIN SCHEDULE.AIRCRAFTID%TYPE,
DATEIN SCHEDULE.SCHEDULEDTAKEOFF%TYPE)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR

SELECT schedule.SORTIENUM, schedule.CONFIGCODE, schedule.SCHEDULEDLANDING,schedule.SCHEDULEDTAKEOFF
	 FROM schedule
 	 WHERE (    (schedule.aircraftid = aircraftidin)
        AND (schedule.scheduledtakeoff = datein)  )

	 ORDER BY schedule.scheduledtakeoff;

END SPGETCONFIGCODESPERAIRCRAFT;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETGENERALAIRCRAFTDATA" (
   p_cursor       OUT   emoc_types.emoc_cursor,
   aircraftidin         aircraft.aircraftid%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT aircraft.aircraftid, aircraft.tailnumber, aircraft.misequipid,
             aircraft.conditioncodeid, aircraft.aircraftyear, wings.unitid,
             locations.locationname, locations.locationcode, wings.elc,
             squadrons.wingid,
             TO_CHAR (aircraft.lastflowntime,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) "LASTFLOWNTIME",
             squadrons.squadronname, aircraftmds.numberofstations,
             aircraftmds.numberofengines, aircraftmds.aircraftmds,
             aircraftmds.aircraftmdsid, aircraftmds.acftmdstypecd,
             aircraft.statusstartdate, aircraft.statusstarttime,
             aircraft.staloccodeid, stationloccodes.stationloc, aircraft.countrycode,
    aircraft.missiondesignseries, aircraft.missiondesignseriesblock,
    aircraft.OWNINGWORKCENTER
        FROM aircraft,
             squadrons,
             locations,
             aircraftmds,
             wings,
             stationloccodes
       WHERE (    (aircraft.squadronid = squadrons.squadronid(+))
              AND (squadrons.wingid = wings.wingid(+))
              AND (aircraft.locationid = locations.locationid(+))
              AND (aircraft.aircraftmdsid = aircraftmds.aircraftmdsid(+))
              AND (aircraft.staloccodeid = stationloccodes.staloccodeid(+))
              AND (aircraftid = aircraftidin)
             );
END spgetgeneralaircraftdata;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETJOAPENGINEDATABYAIRCRAFT" (
   p_cursor       OUT   emoc_types.emoc_cursor,
   aircraftidin         aircraft.aircraftid%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   joap.joapcode, joap.joapid, joap.redcapstatus,
               colors.colorvalue, colors.colorname, colorrules.colorrank,
               aircraftenginedata.enginenumber, joapdata.joapdataid,
               joapdata.scheduleid,
               TO_CHAR (schedule.scheduledtakeoff,
                        'MM/DD/YYYY HH24:MI:SS'
                       ) "SCHEDULEDTAKEOFF",
               TO_CHAR (joapdata.sampledate,
                        'MM/DD/YYYY HH24:MI:SS'
                       ) "SAMPLEDATE",
               joapdata.reason, joapdata.notifiedby, joapdata.moccontroller,
               TO_CHAR (joapdata.joaplastupdated,
                        'MM/DD/YYYY HH24:MI:SS'
                       ) "JOAPLASTUPDATED",
               joapdata.hoursrequired, joapdata.hoursremaining,
               joapdata.expediternotified, joapdata.enginedataid
          FROM aircraft,
               joap,
               colors,
               colorrules,
               aircraftenginedata,
               joapdata,
               schedule
         WHERE (    (aircraft.aircraftid = aircraftenginedata.aircraftid)
                AND (aircraftenginedata.enginedataid = joapdata.enginedataid
                    )
                AND (joap.joapid = joapdata.joapid)
                AND (joap.colorrulesid = colorrules.colorrulesid)
                AND (colorrules.codetype = 'JOAP')
                AND (colorrules.colorid = colors.colorid)
                AND (joapdata.scheduleid = schedule.scheduleid(+))
                AND (aircraft.aircraftid = aircraftidin)
                AND (joapdata.datecleared IS NULL)
                AND (joap.mocid = aircraft.mocid)
               )
      ORDER BY aircraftenginedata.enginenumber, joapdata.sampledate;
END spgetjoapenginedatabyaircraft;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETJOAPENGINEDATABYSCHEDULE" (
   p_cursor       OUT   emoc_types.emoc_cursor,
   scheduleidin         joapdata.scheduleid%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   joap.joapcode, joap.joapid, joap.redcapstatus,
               colors.colorvalue, colors.colorname, colorrules.colorrank,
               aircraftenginedata.enginenumber, joapdata.joapdataid,
               joapdata.scheduleid,
               TO_CHAR (schedule.scheduledtakeoff,
                        'MM/DD/YYYY HH24:MI:SS'
                       ) "SCHEDULEDTAKEOFF",
               TO_CHAR (joapdata.sampledate,
                        'MM/DD/YYYY HH24:MI:SS'
                       ) "SAMPLEDATE",
               joapdata.reason, joapdata.notifiedby, joapdata.moccontroller,
               TO_CHAR (joapdata.joaplastupdated,
                        'MM/DD/YYYY HH24:MI:SS'
                       ) "JOAPLASTUPDATED",
               joapdata.hoursrequired, joapdata.hoursremaining,
               joapdata.expediternotified, joapdata.enginedataid
          FROM aircraft,
               joap,
               colors,
               colorrules,
               aircraftenginedata,
               joapdata,
               schedule
         WHERE (    (aircraft.aircraftid = aircraftenginedata.aircraftid)
                AND (aircraftenginedata.enginedataid = joapdata.enginedataid
                    )
                AND (joap.joapid = joapdata.joapid)
                AND (joap.colorrulesid = colorrules.colorrulesid)
                AND (colorrules.codetype = 'JOAP')
                AND (colorrules.colorid = colors.colorid)
                AND (joapdata.scheduleid = schedule.scheduleid(+))
                AND (joapdata.scheduleid = scheduleidin)
                AND (joapdata.datecleared IS NULL)
                AND (joap.mocid = aircraft.mocid)
               )
      ORDER BY aircraftenginedata.enginenumber, joapdata.sampledate;
END spgetjoapenginedatabyschedule;



 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETMAINTENANCESTATUS" (
   aircraftidin                  IN       aircraft.aircraftid%TYPE,
   crewchiefout                  OUT      crewchiefs.crewchief%TYPE,
   crewchiefrankout              OUT      ranks.rankcode%TYPE,
   crewchiefrankidout            OUT      crewchiefs.rankid%TYPE,
   squadronnameout               OUT      squadrons.squadronname%TYPE,
   squadronnameidout             OUT      squadrons.squadronid%TYPE,
   conditioncodeout              OUT      conditioncodes.conditioncode%TYPE,
   conditioncodeidout            OUT      conditioncodes.condcodeid%TYPE,
   possessioncodeout             OUT      possessions.possessioncode%TYPE,
   possessioncodeidout           OUT      possessions.possessionid%TYPE,
   serialnumberout               OUT      aircraft.serialnumber%TYPE,
   tailnumberout                 OUT      aircraft.tailnumber%TYPE,
   eticout                       OUT      aircraft.etic%TYPE,
   fcfout                        OUT      aircraft.fcf%TYPE,
   qcfout                        OUT      aircraft.ocf%TYPE,
   qviout                        OUT      aircraft.qvi%TYPE,
   firstofficialout              OUT      aircraft.firstofficial%TYPE,
   secondofficialout             OUT      aircraft.secondofficial%TYPE,
   priorityout                   OUT      aircraft.priority%TYPE,
   hangerqueenstatuscodeout      OUT      hanger_queen_code.hqcode%TYPE,
   hqstatuscodeidout             OUT      hanger_queen_code.hqcodeid%TYPE,
   lastflowntimeout              OUT      aircraft.lastflowntime%TYPE,
   pictureout                    OUT      crewchiefs.picture%TYPE,
   phasedateout                  OUT      aircraft.phasedate%TYPE,
   mdsout                        OUT      aircraftmds.aircraftmds%TYPE,
   mdsidout                      OUT      aircraftmds.aircraftmdsid%TYPE,
   crewchieflastupdatedout       OUT      aircraft.crewchieflastupdated%TYPE,
   serialnolastupdatedout        OUT      aircraft.serialnumberlastupdated%TYPE,
   impoundslastupdatedout        OUT      aircraft.impoundslastupdated%TYPE,
   conditioncodelastupdatedout   OUT      aircraft.conditioncodelastupdated%TYPE,
   qstatuslastupdatedout         OUT      aircraft.hqstatuslastupdated%TYPE,
   teststatuslastupdatedout      OUT      aircraft.teststatuslastupdated%TYPE,
   phasedatelastupdatedout       OUT      aircraft.phasedatelastupdated%TYPE,
   posscodelastupdatedout        OUT      aircraft.possessioncodelastupdated%TYPE,
   eticlastupdatedout            OUT      aircraft.eticlastupdated%TYPE,
   remarkslastupdatedout         OUT      aircraft.remarkslastupdated%TYPE,
   prioritylastupdatedout        OUT      aircraft.prioritylastupdated%TYPE,
   statusstartdateout            OUT      aircraft.statusstartdate%TYPE,
   statusstarttimeout            OUT      aircraft.statusstarttime%TYPE,
   statusnarrativeout            OUT      aircraft.statusnarrative%TYPE
)
AS
BEGIN
   SELECT crewchiefs.crewchief, ranks.rankcode, ranks.rankid,
          squadrons.squadronname, squadrons.squadronid,
          conditioncodes.conditioncode, conditioncodes.condcodeid,
          possessions.possessioncode, possessions.possessionid,
          aircraft.serialnumber, aircraft.tailnumber, aircraft.etic,
          aircraft.fcf, aircraft.ocf, aircraft.qvi, aircraft.firstofficial,
          aircraft.secondofficial, aircraft.priority,
          hanger_queen_code.hqcode, hanger_queen_code.hqcodeid,
          aircraft.lastflowntime, crewchiefs.picture, aircraft.phasedate,
          aircraftmds.aircraftmds, aircraftmds.aircraftmdsid,
          aircraft.crewchieflastupdated, aircraft.serialnumberlastupdated,
          aircraft.impoundslastupdated, aircraft.conditioncodelastupdated,
          aircraft.hqstatuslastupdated, aircraft.teststatuslastupdated,
          aircraft.phasedatelastupdated, aircraft.possessioncodelastupdated,
          aircraft.eticlastupdated, aircraft.remarkslastupdated,
          aircraft.statusnarrative, aircraft.prioritylastupdated,
          aircraft.statusstartdate, aircraft.statusstarttime
     INTO crewchiefout, crewchiefrankout, crewchiefrankidout,
          squadronnameout, squadronnameidout,
          conditioncodeout, conditioncodeidout,
          possessioncodeout, possessioncodeidout,
          serialnumberout, tailnumberout, eticout,
          fcfout, qcfout, qviout, firstofficialout,
          secondofficialout, priorityout,
          hangerqueenstatuscodeout, hqstatuscodeidout,
          lastflowntimeout, pictureout, phasedateout,
          mdsout, mdsidout,
          crewchieflastupdatedout, serialnolastupdatedout,
          impoundslastupdatedout, conditioncodelastupdatedout,
          qstatuslastupdatedout, teststatuslastupdatedout,
          phasedatelastupdatedout, posscodelastupdatedout,
          eticlastupdatedout, remarkslastupdatedout,
          statusnarrativeout, prioritylastupdatedout,
          statusstartdateout, statusstarttimeout
     FROM aircraft,
          crewchiefs,
          squadrons,
          conditioncodes,
          hanger_queen_code,
          possessions,
          ranks,
          aircraftmds
    WHERE (    (aircraft.crewchiefid = crewchiefs.crewchiefid)
           AND (aircraft.squadronid = squadrons.squadronid)
           AND (conditioncodes.condcodeid = aircraft.conditioncodeid)
           AND (aircraft.hangerqueenstatus = hanger_queen_code.hqcodeid)
           AND (possessions.possessionid = aircraft.possessionid)
           AND (ranks.rankid = crewchiefs.rankid)
           AND (aircraftmds.aircraftmdsid = aircraft.aircraftmdsid)
           AND (aircraft.aircraftid = aircraftidin)
          );
END spgetmaintenancestatus;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETMEVENT" (
P_CURSOR OUT EMOC_TYPES.EMOC_CURSOR,
EVENTIDIN MAINTENANCEEVENTS.EVENTID%TYPE)

AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR

SELECT MAINTENANCEEVENTID, UNIT, EVENTID, PWC, EQUIPID, CP, WUCLCN, WD, PRIORITY, SYMBOL, TSSCH,
	   JOBDUR, DISCREPANCY, WCENARRATIVE, EMPID, ENTRY781, DEFER, WCESYMBOL, JOBFOLLOW, PARTSREQUIRED

FROM MAINTENANCEEVENTS
WHERE EVENTID = EVENTIDIN;


END SPGETMEVENT;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETONEAIRCRAFT" (
   p_cursor       OUT   emoc_types.emoc_cursor,
   aircraftidin         aircraft.aircraftid%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT aircraft.aircraftid, aircraft.aircraftmdsid,
             aircraft.countrycode, aircraft.statuswuclcn,
             aircraftmds.aircraftmds, aircraftmds.numberofengines,
             aircraftmds.numberofstations, aircraftmds.phaseunit,
             aircraftmds.timebetweenphase, aircraftmds.acftmdstypecd,
             aircraft.aircraftwucid, wuc.wuccode, aircraft.aircraftyear,
             aircraft.arm_dearm, aircraft.chaff, aircraft.combatsclid,
             combatscls.combatscl, aircraft.conditioncodeid,
             conditioncodes.conditioncode, conditioncodes.condstatid,
             conditioncolor.colorvalue conditioncolorvalue,
             conditioncolor.fontcolor conditionfontcolor,
             TO_CHAR
                 (aircraft.conditioncodelastupdated,
                  'MM/DD/YYYY HH24:MI:SS'
                 ) conditioncodelastupdated,
             aircraft.crewchiefid, crewchiefs.crewchief, crewchiefs.picture,
             crewchiefs.rankid, aircraft.crewchieflastupdated, aircraft.etic,
             TO_CHAR (aircraft.eticlastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) eticlastupdated,
             aircraft.fcf, aircraft.firesymbolid, firesymbols.firesymbol,
             aircraft.firstofficial, aircraft.flare, aircraft.flightid,
             flights.flightname,
             TO_CHAR (aircraft.fueldeliverytime,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) fueldeliverytime,
             aircraft.fuelload,
             TO_CHAR (aircraft.fuelrequestedtime,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) fuelrequestedtime,
             aircraft.fuelstatusid, fuel.fuelstatus, fuel.fueldescription,
             TO_CHAR (aircraft.fuelstatustime,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) fuelstatustime,
             fuelcolor.colorvalue fuelcolorvalue,
             fuelcolor.fontcolor fuelfontcolor,
             TO_CHAR (aircraft.fuelstatuslastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) fuelstatuslastupdated,
             aircraft.hangerqueenstatus, hanger_queen_code.hqcode,
             aircraft.hotguns,
             TO_CHAR (aircraft.hqstatuslastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) hqstatuslastupdated,
             TO_CHAR (aircraft.impoundslastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) impoundslastupdated,
             TO_CHAR (aircraft.lastflowntime,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) lastflowntime,
             aircraft.localconfigid, aircraft.localoption,
             aircraft.locationid, locations.locationname,
             locations.locationcode,
             TO_CHAR (aircraft.locationlastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) locationlastupdated,
             TO_CHAR (aircraft.mdslastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) mdslastupdated,
             aircraft.multiconfigid, aircraft.ocf,
             TO_CHAR (aircraft.phasedate, 'MM/DD/YYYY HH24:MI:SS') phasedate,
             TO_CHAR (aircraft.phasedatelastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) phasedatelastupdated,
             aircraft.phaseunits,
             TO_CHAR (aircraft.possdatetime,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) possdatetime,
             TO_CHAR
                (aircraft.possessioncodelastupdated,
                 'MM/DD/YYYY HH24:MI:SS'
                ) possessioncodelastupdated,
             aircraft.possessionid, possessions.possessioncode,
             aircraft.priority,
             TO_CHAR (aircraft.prioritylastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) prioritylastupdated,
             aircraft.qvi, aircraft.remarksid, remarks.remarks,
             TO_CHAR (aircraft.remarkslastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) remarkslastupdated,
             aircraft.secondofficial, aircraft.serialnumber,
             TO_CHAR
                   (aircraft.serialnumberlastupdated,
                    'MM/DD/YYYY HH24:MI:SS'
                   ) serialnumberlastupdated,
             aircraft.shorttailnumber,
             NVL (aircraft.statuscodeid,
                  (SELECT statuscodeid
                     FROM statuscode
                    WHERE defaultstatuscode = 1 AND mocid = aircraft.mocid)
                 ) AS statuscodeid,
             statuscode.statuscode, statuscode.iconname,
             aircraft.sqpreselect, aircraft.squadronid,
             squadrons.squadronname, squadrons.wingid,
             squadroncolor.colorvalue squadroncolorvalue,
             squadroncolor.fontcolor squadronfontcolor, wings.wingname,
             wings.unitid, wings.elc,
             TO_CHAR (aircraft.squadronlastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) squadronlastupdated,
             aircraft.staloccodeid, aircraft.statuscodeid,
             stationloccodes.stationloc, stationloccodes.stalocnarrative,
             TO_CHAR (aircraft.statuscodelastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) statuscodelastupdated,
             TO_CHAR (aircraft.statuscodetime,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) statuscodetime,
             TO_CHAR (aircraft.teststatuslastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) teststatuslastupdated,
             aircraft.tmeflownsincephasedate,
             TO_CHAR
                 (aircraft.weaponsstatuslastupdated,
                  'MM/DD/YYYY HH24:MI:SS'
                 ) weaponsstatuslastupdated,
             TO_CHAR (aircraft.wuclastupdated,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) wuclastupdated,
             (SELECT COUNT (*)
                FROM customdatamds
               WHERE aircraftmdsid = aircraft.aircraftmdsid) AS cdcount,
             (SELECT COUNT (*)
                FROM aircraftcustomdata
               WHERE aircraftid = aircraft.aircraftid) AS aircraftcdcount,
             (SELECT statusimageid
                FROM mocstatusicons
               WHERE mocstatusicons.missiondesignseries =
                                          aircraftmds.aircraftmds
                 AND aircraftmds.aircraftmdsid = aircraft.aircraftmdsid
                 AND mocstatusicons.statuscode = statuscode.statuscode
                 AND mocstatusicons.mocid = aircraft.mocid
                 AND icon_type = 'b'
                 AND ROWNUM <= 1) AS bimageid,
             (SELECT statusimageid
                FROM mocstatusicons
               WHERE mocstatusicons.missiondesignseries =
                                          aircraftmds.aircraftmds
                 AND aircraftmds.aircraftmdsid = aircraft.aircraftmdsid
                 AND mocstatusicons.statuscode = statuscode.statuscode
                 AND mocstatusicons.mocid = aircraft.mocid
                 AND icon_type = 'w'
                 AND ROWNUM <= 1) AS wimageid,
             (SELECT COUNT (*)
                FROM micap
               WHERE (   (aircraftid = aircraft.aircraftid)
                      OR (    equipmentid = aircraft.misequipid
                          AND enterpriselocationcode = wings.elc
                          AND unitid = wings.unitid
                          AND squadrons.squadronid = aircraft.squadronid
                          AND squadrons.wingid = wings.wingid
                         )
                     )) AS micapcount,
             aircraft.missiondesignseries, aircraft.missiondesignseriesblock
        FROM aircraft,
             aircraftmds,
             wuc,
             combatscls,
             conditioncodes,
             colors conditioncolor,
             conditionstatus,
             crewchiefs,
             firesymbols,
             flights,
             fuel,
             colors fuelcolor,
             hanger_queen_code,
             locations,
             possessions,
             remarks,
             statuscode,
             squadrons,
             wings,
             colors squadroncolor,
             stationloccodes
       WHERE aircraft.aircraftmdsid = aircraftmds.aircraftmdsid(+)
         AND aircraft.aircraftwucid = wuc.wucid(+)
         AND aircraft.combatsclid = combatscls.combatsclid(+)
         AND aircraft.conditioncodeid = conditioncodes.condcodeid(+)
         AND conditioncodes.condstatid = conditionstatus.condstatid(+)
         AND conditionstatus.colorid = conditioncolor.colorid(+)
         AND aircraft.crewchiefid = crewchiefs.crewchiefid(+)
         AND aircraft.firesymbolid = firesymbols.firesymbolid(+)
         AND aircraft.flightid = flights.flightid(+)
         AND aircraft.fuelstatusid = fuel.fuelstatusid(+)
         AND aircraft.hangerqueenstatus = hanger_queen_code.hqcodeid(+)
         AND fuel.colorid = fuelcolor.colorid(+)
         AND aircraft.locationid = locations.locationid(+)
         AND aircraft.possessionid = possessions.possessionid(+)
         AND aircraft.remarksid = remarks.remarksid(+)
         AND aircraft.squadronid = squadrons.squadronid(+)
         AND squadrons.colorid = squadroncolor.colorid(+)
         AND squadrons.wingid = wings.wingid(+)
         AND aircraft.statuscodeid = statuscode.statuscodeid(+)
         AND aircraft.staloccodeid = stationloccodes.staloccodeid(+)
         AND aircraft.aircraftid = aircraftidin;
END spgetoneaircraft;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETONESQUADRON" (
   p_cursor       OUT   emoc_types.emoc_cursor,
   squadronidin         squadrons.squadronid%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT squ.squadronid, squ.squadronname, squ.shortname, squ.colorid,
             c.colorvalue, c.fontcolor, squ.mocid, w.elc, w.unitid, w.wingid,
             (SELECT SUM (micapcount)
                FROM squadronmicapcount
               WHERE squadronid = squ.squadronid) AS squadronmicapcount
        FROM squadrons squ, colors c, wings w
       WHERE c.colorid(+) = squ.colorid
         AND squ.wingid = w.wingid
         AND squ.squadronid = squadronidin;
END spgetonesquadron;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETORDNANCEPERSTATION" 
(
P_CURSOR OUT EMOC_TYPES.EMOC_CURSOR,
AIRCRAFTIDIN AIRCRAFT.AIRCRAFTID%TYPE)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR
SELECT weaponsload.STATION,
	   weaponsload.ORDNANCEID,
	   ordnance.ORDNANCE,
	   weaponsload.WEAPONSNUMBER,
	   weaponsload.FIRESYMBOLID,
	   weaponsload.WEAPONSCLASSID


FROM aircraft, weaponsload, ordnance
WHERE ( (aircraft.AIRCRAFTID = AIRCRAFTIDIN)
 	   	AND	(aircraft.AIRCRAFTID = weaponsload.AIRCRAFTID)
		AND (weaponsload.ORDNANCEID = ordnance.ORDNANCEID) )
ORDER BY weaponsload.station;

END SPGETORDNANCEPERSTATION;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETPACINGWRITEUP" 
(
P_CURSOR OUT Emoc_Types.EMOC_CURSOR,
AIRCRAFTIDIN WRITEUPS.AIRCRAFTID%TYPE)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR
SELECT WRITEUPS.WRITEUPID,
	   WRITEUPS.DISCREPANCY,
	   WRITEUPS.JCN,
	   TO_CHAR(WRITEUPS.WRITEUPTIME, 'MM/DD/YYYY HH24:MI:SS') "WRITEUPTIME",
	   WRITEUPS.PACER,
	   WUC.WUCCODE,
	   WRITEUPS.ETIC

FROM WRITEUPS, WUC

WHERE ( (WRITEUPS.AIRCRAFTID = AIRCRAFTIDIN)
	  	AND (WRITEUPS.CORRECTED = 0)
		AND (WRITEUPS.PACER = 1)
		AND (WRITEUPS.WUCID = WUC.WUCID(+)));


END SPGETPACINGWRITEUP;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETPACINGWRITEUPMICAPS" (
   p_cursor       OUT   emoc_types.emoc_cursor,
   aircraftidin         micap.aircraftid%TYPE,
   equipidin            micap.equipmentid%TYPE,
   elcin                micap.enterpriselocationcode%TYPE,
   unitidin             micap.unitid%TYPE,
   jcnin                micap.jobcontrolnumber%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   *
          FROM micap
         WHERE micap.jobcontrolnumber = jcnin
           AND (   (    micap.equipmentid = equipidin
                    AND micap.enterpriselocationcode = elcin
                    AND micap.unitid = unitidin
                   )
                OR (micap.aircraftid = aircraftidin)
               )
      ORDER BY micap.documentnumber;
END spgetpacingwriteupmicaps;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETSTATIONSORDNANCES" 
(
P_CURSOR OUT EMOC_TYPES.EMOC_CURSOR,
AIRCRAFTIDIN AIRCRAFT.AIRCRAFTID%TYPE,
STATIONIN ARMAMENT.STATION%TYPE)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR
SELECT armament.STATION,
	   armament.ORDNANCEID,
	   ordnance.ORDNANCE

FROM aircraft, armament, ordnance
WHERE ( (aircraft.AIRCRAFTID = AIRCRAFTIDIN)
	  	AND (ARMAMENT.STATION = STATIONIN)
 	   	AND	(aircraft.AIRCRAFTMDSID = armament.AIRCRAFTMDSID)
		AND (armament.ORDNANCEID = ordnance.ORDNANCEID))
ORDER BY armament.station, ordnance.ordnance;

END SPGETSTATIONSORDNANCES;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETSYMBOLSCONDITIONS" (
P_CURSOR OUT EMOC_TYPES.EMOC_CURSOR)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR

SELECT SYMBOLID, SYMBOLS.CONDCODEID, CONDITIONCODE, SYMBOL
FROM SYMBOLS, CONDITIONCODES
WHERE SYMBOLS.CONDCODEID = CONDITIONCODES.CONDCODEID
ORDER BY SYMBOLS.CONDCODEID, SYMBOLID;

END SPGETSYMBOLSCONDITIONS;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETTBMCSAIRCRAFT" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   mocidin          aircraft.mocid%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT aircraft.aircraftid, aircraft.tailnumber,
             aircraftmds.acftmdstypecd, aircraftmds.blocknumber,
             aircraftmds.aircraftmds, aircraft.aircraftyear,
             (aircraft.aircraftyear || aircraft.tailnumber
             ) AS yearandtailnumber,
             aircraft.hotguns, combatscls.combatscl,
             conditioncodes.conditioncode, crewchiefs.crewchief,
             ranks.rankcode AS crewchiefrank, aircraft.etic,
             aircraft.fuelload, fuel.fuelstatus, fuel.fueldescription,
             TO_CHAR (aircraft.lastflowntime,
                      'MM/DD/YYYY HH24:MI:SS'
                     ) lastflowntime,
             locations.locationcode, locations.locationname,
             possessions.possessioncode, aircraft.priority, remarks.remarks,
             (SELECT wuc.wuccode
                FROM wuc
               WHERE aircraft.aircraftwucid = wuc.wucid) AS aircraftwuc,
             squadrons.squadronname, wings.wingname, wings.elc, wings.wingid,
             wings.unitid, stationloccodes.stationloc, aircraft.countrycode, aircraft.misequipid
        FROM aircraft,
             aircraftmds,
             combatscls,
             conditioncodes,
             crewchiefs,
             ranks,
             fuel,
             locations,
             possessions,
             remarks,
             statuscode,
             squadrons,
             wings,
             stationloccodes
       WHERE aircraft.mocid = mocidin
         AND aircraft.aircraftmdsid = aircraftmds.aircraftmdsid(+)
         AND aircraft.combatsclid = combatscls.combatsclid(+)
         AND aircraft.conditioncodeid = conditioncodes.condcodeid(+)
         AND aircraft.crewchiefid = crewchiefs.crewchiefid(+)
         AND crewchiefs.rankid = ranks.rankid(+)
         AND aircraft.fuelstatusid = fuel.fuelstatusid(+)
         AND aircraft.locationid = locations.locationid(+)
         AND aircraft.possessionid = possessions.possessionid(+)
         AND aircraft.remarksid = remarks.remarksid(+)
         AND aircraft.squadronid = squadrons.squadronid(+)
         AND squadrons.wingid = wings.wingid(+)
         AND aircraft.statuscodeid = statuscode.statuscodeid(+)
         AND aircraft.staloccodeid = stationloccodes.staloccodeid(+);
END spgettbmcsaircraft;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETTBMCSAIRCRAFTBYID" (
P_CURSOR OUT Emoc_Types.EMOC_CURSOR,
AIRCRAFTIDIN AIRCRAFT.AIRCRAFTID%TYPE)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR

SELECT
AIRCRAFT.AIRCRAFTID,
AIRCRAFT.TAILNUMBER,
AIRCRAFTMDS.ACFTMDSTYPECD,
AIRCRAFTMDS.BLOCKNUMBER,
AIRCRAFTMDS.AIRCRAFTMDS,
AIRCRAFT.AIRCRAFTYEAR,
(AIRCRAFT.AIRCRAFTYEAR || AIRCRAFT.TAILNUMBER) AS YEARANDTAILNUMBER,
AIRCRAFT.COUNTRYCODE,
AIRCRAFT.HOTGUNS,
COMBATSCLS.COMBATSCL,
CONDITIONCODES.CONDITIONCODE,
CREWCHIEFS.CREWCHIEF,
RANKS.RANKCODE AS CREWCHIEFRANK,
AIRCRAFT.ETIC,
AIRCRAFT.FUELLOAD,
FUEL.FUELSTATUS,
FUEL.FUELDESCRIPTION,
TO_CHAR(AIRCRAFT.LASTFLOWNTIME, 'MM/DD/YYYY HH24:MI:SS') LASTFLOWNTIME,
LOCATIONS.LOCATIONCODE,
LOCATIONS.LOCATIONNAME,
POSSESSIONS.POSSESSIONCODE,
AIRCRAFT.PRIORITY,
REMARKS.REMARKS,
(SELECT WUC.WUCCODE FROM WUC WHERE AIRCRAFT.AIRCRAFTWUCID = WUC.WUCID) AS AIRCRAFTWUC,
SQUADRONS.SQUADRONNAME,
WINGS.WINGNAME,
STATIONLOCCODES.STATIONLOC

FROM AIRCRAFT, AIRCRAFTMDS, COMBATSCLS, CONDITIONCODES, CREWCHIEFS,
RANKS,  FUEL, LOCATIONS, POSSESSIONS, REMARKS, STATUSCODE, SQUADRONS,
WINGS, STATIONLOCCODES

WHERE AIRCRAFT.aircraftmdsid = AIRCRAFTMDS.AIRCRAFTMDSID(+)
AND AIRCRAFT.COMBATSCLID = COMBATSCLS.COMBATSCLID(+)
AND AIRCRAFT.CONDITIONCODEID = CONDITIONCODES.CONDCODEID(+)
AND AIRCRAFT.CREWCHIEFID = CREWCHIEFS.CREWCHIEFID(+)
AND CREWCHIEFS.RANKID = RANKS.RANKID(+)
AND AIRCRAFT.FUELSTATUSID = FUEL.FUELSTATUSID(+)
AND AIRCRAFT.LOCATIONID = LOCATIONS.LOCATIONID(+)
AND AIRCRAFT.POSSESSIONID = POSSESSIONS.POSSESSIONID(+)
AND AIRCRAFT.REMARKSID = REMARKS.REMARKSID(+)
AND AIRCRAFT.SQUADRONID = SQUADRONS.SQUADRONID(+)
AND SQUADRONS.WINGID = WINGS.WINGID(+)
AND AIRCRAFT.STATUSCODEID = STATUSCODE.STATUSCODEID(+)
AND AIRCRAFT.STALOCCODEID = STATIONLOCCODES.STALOCCODEID(+)
AND AIRCRAFT.AIRCRAFTID = AIRCRAFTIDIN;

END SPGETTBMCSAIRCRAFTBYID;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETTRANSSQBYUSERMOC" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   useridin         users.userid%TYPE,
   mocidin          INTEGER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   squ.squadronid, squ.squadronname, per.userid,
               squsortorder.sortorder
          FROM squadrons squ,
               permissions per,
               squadron_sort_order squsortorder
         WHERE (    (squ.squadronid = per.squadronid(+))
                AND (per.squadronid = squsortorder.squadronid(+))
                AND (per.userid = squsortorder.userid(+))
                AND (per.userid = useridin)
                AND (squ.squadronname = 'TRANSIENT')
                AND (squ.mocid = mocidin)
               )
      ORDER BY squsortorder.sortorder;
END spgettranssqbyusermoc;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETTRANSSQUADRONBYUSER" (
P_CURSOR OUT Emoc_Types.EMOC_CURSOR,
USERIDIN USERS.USERID%TYPE)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR
SELECT squ.squadronid, squ.squadronname, per.userid,
       squsortorder.sortorder

FROM SQUADRONS squ,
       PERMISSIONS per,
       SQUADRON_SORT_ORDER squsortorder

WHERE (  (squ.squadronid = per.squadronid(+))
        AND (per.squadronid = squsortorder.squadronid(+))
        AND (per.userid = squsortorder.userid(+))
        AND (per.userid = USERIDIN)
		AND (squ.squadronname = 'TRANSIENT')    )

ORDER BY squsortorder.sortorder;

END Spgettranssquadronbyuser;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETUSERDATA" (
   useridin                     users.userid%TYPE,
   useridout              OUT   users.userid%TYPE,
   rankout                OUT   ranks.rankcode%TYPE,
   usernameout            OUT   users.username%TYPE,
   fullnameout            OUT   users.fullname%TYPE,
   ipaddressout           OUT   users.ipaddress%TYPE,
   isonlineout            OUT   users.isonline%TYPE,
   badattemptsout         OUT   users.badattempts%TYPE,
   aircraftsortorderout   OUT   users.aircraftsortorder1%TYPE,
   backgroundcolorout     OUT   colors.colorvalue%TYPE,
   fontcolorout           OUT   colors.colorvalue%TYPE,
   linkcolorout           OUT   colors.colorvalue%TYPE,
   datepreferenceout      OUT   users.datepreference%TYPE,
   timepreferenceout      OUT   users.timepreference%TYPE
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE USER RECORDSET
   SELECT userid, rankcode, username,
          fullname, ipaddress, isonline, badattempts,
          aircraftsortorder1, backgroundcolor, fontcolor,
          linkcolor, datepreference, timepreference
     INTO useridout, rankout, usernameout,
          fullnameout, ipaddressout, isonlineout, badattemptsout,
          aircraftsortorderout, backgroundcolorout, fontcolorout,
          linkcolorout, datepreferenceout, timepreferenceout
     FROM users
    WHERE ((userid = useridin));
END spgetuserdata;



 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETUSERINTERFACELOGINDATA" (useridin     users.userid%TYPE,
                                                        squadronidin squadrons.squadronid%TYPE,
                                                        p_cursor     OUT emoc_types.emoc_cursor) AS
BEGIN
  OPEN p_cursor FOR
  -- RETURN THE CURSOR FOR THE USER RECORDSET
    SELECT users.userid,
           imdslogins.imdslogin camsuserid,
           emoc_security.decrypt(imdslogins.imdspassword) camspassword,
           imdslogins.imdsaccount camsaccount,
           imdslogins.imdsprojectid camsprojectid,
           imdslogins.imdsterminalid camsterminalid,
           users.portaluserid,
           emoc_security.decrypt(users.portalpassword) portalpassword,
           imdslogins.wingid
      FROM users, squadrons, imdslogins, emocconfig
     WHERE users.userid = useridin
       AND users.userid = imdslogins.userid
       AND squadronid = squadronidin
       AND squadrons.wingid = imdslogins.wingid;
END spgetuserinterfacelogindata;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETWEAPONSSTATUS" 
(
P_CURSOR OUT Emoc_Types.EMOC_CURSOR,
AIRCRAFTIDIN AIRCRAFT.AIRCRAFTID%TYPE)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR

SELECT SQUADRONNAME,
TAILNUMBER,
TO_CHAR(LASTFLOWNTIME,'MM/DD/YYYY HH24:MI:SS') "LASTFLOWNTIME",
COMBATSCLS.COMBATSCL,
AIRCRAFT.COMBATSCLID,
CHAFF,
FLARE,
HOTGUNS,
AIRCRAFT.ARM_DEARM,
TO_CHAR(AIRCRAFT.WEAPONSSTATUSLASTUPDATED,'MM/DD/YYYY HH24:MI:SS') "WEAPONSSTATUSLASTUPDATED"

FROM AIRCRAFT, SQUADRONS, COMBATSCLS

WHERE ((AIRCRAFT.AIRCRAFTID = AIRCRAFTIDIN)
	  AND (AIRCRAFT.SQUADRONID = SQUADRONS.SQUADRONID(+))
	  AND (AIRCRAFT.COMBATSCLID = COMBATSCLS.COMBATSCLID(+))   );

END Spgetweaponsstatus;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETWRITEUP" 
(P_CURSOR OUT EMOC_TYPES.EMOC_CURSOR,
JCNIN WRITEUPS.JCN%TYPE,
AIRCRAFTIDIN WRITEUPS.AIRCRAFTID%TYPE)

AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR
SELECT writeups.SYMBOLID,
	   writeups.PACER,
	   writeups.WRITEUPTIME,
	   writeups.ETIC,
	   writeups.WUCID,
	   writeups.DISCREPANCY,
	   writeups.CORRECTED,
	   writeups.CORRECTEDTIME,
	   writeups.CORRECTIVEACTION,
	   aircraft.CONDITIONCODEID

FROM writeups, aircraft
WHERE (   (writeups.AIRCRAFTID = AIRCRAFTIDIN)
	  AND (writeups.JCN = JCNIN)
	  AND (writeups.AIRCRAFTID = aircraft.AIRCRAFTID)
	  AND (writeups.CORRECTEDTIME IS NULL)    );


END SPGETWRITEUP;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPGETWRITEUPBYID" 
(P_CURSOR OUT EMOC_TYPES.EMOC_CURSOR,
WRITEUPIDIN WRITEUPS.WRITEUPID%TYPE)

AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR
SELECT writeups.JCN,
	   writeups.SYMBOLID,
	   writeups.PACER,
	   TO_CHAR(WRITEUPS.WRITEUPTIME, 'MM/DD/YYYY HH24:MI:SS') "WRITEUPTIME",
	   writeups.ETIC,
	   writeups.WUCID,
	   writeups.DISCREPANCY,
	   writeups.CORRECTED,
	   TO_CHAR(WRITEUPS.CORRECTEDTIME, 'MM/DD/YYYY HH24:MI:SS') "CORRECTEDTIME",
	   writeups.CORRECTIVEACTION

FROM writeups, aircraft
WHERE writeupid = writeupidin;


END SPGETWRITEUPBYID;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPINSERTCHIP" (

CHIPDATAIDIN SEMEDXDATA.SEMDATAID%TYPE,
ENGINEDATAIDIN SEMEDXDATA.ENGINEDATAID%TYPE,
SCHEDULEIDIN SEMEDXDATA.SCHEDULEID%TYPE,
MOCCONTROLLERIN SEMEDXDATA.MOCCONTROLLER%TYPE,
SAMPLEDATEIN VARCHAR,
CHIPIDIN SEMEDXDATA.SEMEDXID%TYPE,
REASONIN SEMEDXDATA.REASON%TYPE,
HOURSREQUIREDIN SEMEDXDATA.HOURSREQUIRED%TYPE,
HOURSREMAININGIN SEMEDXDATA.HOURSREMAINING%TYPE,
NOTIFIEDBYIN SEMEDXDATA.NOTIFIEDBY%TYPE,
EXPEDITERNOTIFIEDIN SEMEDXDATA.EXPEDITERNOTIFIED%TYPE,
CHIPLASTUPDATEDIN VARCHAR

)
AS
ROW_ID INTEGER;

BEGIN

SELECT NVL(MAX(SEMEDXDATA.SEMDATAID), 0)
INTO ROW_ID
FROM SEMEDXDATA;

INSERT INTO SEMEDXDATA (SEMDATAID, SEMEDXID, ENGINEDATAID, MOCCONTROLLER, SAMPLEDATE, REASON, HOURSREQUIRED,
	   				 HOURSREMAINING, NOTIFIEDBY, EXPEDITERNOTIFIED, SEMEDXLASTUPDATED, SCHEDULEID)

VALUES (ROW_ID + 1, CHIPIDIN, ENGINEDATAIDIN, MOCCONTROLLERIN, TO_DATE(SAMPLEDATEIN, 'MM/DD/YYYY HH24:MI:SS'), REASONIN, HOURSREQUIREDIN,
	   		   	 	HOURSREMAININGIN, NOTIFIEDBYIN, EXPEDITERNOTIFIEDIN, TO_DATE(CHIPLASTUPDATEDIN, 'MM/DD/YYYY HH24:MI:SS'), SCHEDULEIDIN);


END SPINSERTCHIP;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPINSERTENGINERUN" (

ABSTARTIN ENGINERUNLOG.ABSTART%TYPE,
ABSTOPIN ENGINERUNLOG.ABSTOP%TYPE,
EMPLOYEENUMBERIN ENGINERUNLOG.EMPLOYEENUMBER%TYPE,
ENGINEDATAIDIN ENGINERUNLOG.ENGINEDATAID%TYPE,
IDLESTARTIN ENGINERUNLOG.IDLESTART%TYPE,
IDLESTOPIN ENGINERUNLOG.IDLESTOP%TYPE,
LASTUPDATEIN VARCHAR,
LASTUPDATEBYIN ENGINERUNLOG.LASTUPDATEBY%TYPE,
MILSTARTIN ENGINERUNLOG.MILSTART%TYPE,
MILSTOPIN ENGINERUNLOG.MILSTOP%TYPE,
MISUPDATEDIN ENGINERUNLOG.MISUPDATED%TYPE,
MOCCONTROLLERIN ENGINERUNLOG.MOCCONTROLLER%TYPE,
QUALCHECKEDIN ENGINERUNLOG.QUALCHECKED%TYPE,
REASONIN ENGINERUNLOG.REASON%TYPE,
RUNDATEIN VARCHAR,
RUNPERSONIN ENGINERUNLOG.RUNPERSON%TYPE,
SPAPPROVALIN ENGINERUNLOG.SPAPPROVAL%TYPE,
STANDBYFIRETRUCKIN ENGINERUNLOG.STANDBYFIRETRUCK%TYPE,
TOWERRUNCLEARANCEIN ENGINERUNLOG.TOWERRUNCLEARANCE%TYPE,
AIRCRAFTIDIN ENGINERUNLOG.AIRCRAFTID%TYPE

)
AS
ROW_ID INTEGER;

BEGIN

SELECT NVL(MAX(ENGINERUNLOG.ENGINELOGID), 0)
INTO ROW_ID
FROM ENGINERUNLOG;

INSERT INTO ENGINERUNLOG (ENGINELOGID, ABSTART, ABSTOP, EMPLOYEENUMBER, ENGINEDATAID, IDLESTART, IDLESTOP, LASTUPDATE,
	   		LASTUPDATEBY, MILSTART, MILSTOP, MISUPDATED, MOCCONTROLLER, QUALCHECKED, REASON, RUNDATE,
			RUNPERSON, SPAPPROVAL, STANDBYFIRETRUCK, TOWERRUNCLEARANCE, AIRCRAFTID)

VALUES (ROW_ID + 1, ABSTARTIN, ABSTOPIN, EMPLOYEENUMBERIN, ENGINEDATAIDIN, IDLESTARTIN, IDLESTOPIN, TO_DATE(LASTUPDATEIN, 'MM/DD/YYYY HH24:MI:SS'),
	   LASTUPDATEBYIN, MILSTARTIN, MILSTOPIN, MISUPDATEDIN, MOCCONTROLLERIN, QUALCHECKEDIN, REASONIN, TO_DATE(RUNDATEIN, 'MM/DD/YYYY HH24:MI:SS'), RUNPERSONIN,
	   SPAPPROVALIN, STANDBYFIRETRUCKIN, TOWERRUNCLEARANCEIN, AIRCRAFTIDIN);


END SPINSERTENGINERUN;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPINSERTEVENTLOG" (

DATETIMEENTEREDIN VARCHAR,
USERIDIN NUMBER,
EVENTTYPEIN EVENTLOG.EVENTTYPE%TYPE,
EVENTNARRATIVEIN EVENTLOG.EVENTNARRATIVE%TYPE,
TAILNUMBERIN EVENTLOG.SHORTTAILNUMBER%TYPE

)
AS
ROW_ID INTEGER;

BEGIN

SELECT NVL(MAX(EVENTLOG.LOGID), 0)
INTO ROW_ID
FROM EVENTLOG;

INSERT INTO EVENTLOG (LOGID, DATETIMEENTERED, USERID, EVENTTYPE, EVENTNARRATIVE, SHORTTAILNUMBER)

VALUES (ROW_ID + 1, TO_DATE(DATETIMEENTEREDIN,'MM/DD/YYYY HH24:MI:SS'), USERIDIN, EVENTTYPEIN, EVENTNARRATIVEIN, TAILNUMBERIN);


END SPINSERTEVENTLOG;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPINSERTEVENTLOG_MOC" (
   datetimeenteredin   VARCHAR,
   useridin            NUMBER,
   eventtypein         eventlog.eventtype%TYPE,
   eventnarrativein    eventlog.eventnarrative%TYPE,
   tailnumberin        eventlog.shorttailnumber%TYPE,
   mocidin             INTEGER
)
AS
   row_id   INTEGER;
BEGIN
   SELECT NVL (MAX (eventlog.logid), 0)
     INTO row_id
     FROM eventlog;

   INSERT INTO eventlog
               (logid,
                datetimeentered,
                userid, eventtype, eventnarrative, shorttailnumber, mocid
               )
        VALUES (row_id + 1,
                TO_DATE (datetimeenteredin, 'MM/DD/YYYY HH24:MI:SS'),
                useridin, eventtypein, eventnarrativein, tailnumberin, mocidin
               );
END spinserteventlog_moc;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPINSERTJOAP" (
   enginedataidin        joapdata.enginedataid%TYPE,
   scheduleidin          joapdata.scheduleid%TYPE,
   moccontrollerin       joapdata.moccontroller%TYPE,
   sampledatein          VARCHAR,
   joapidin              joapdata.joapid%TYPE,
   reasonin              joapdata.reason%TYPE,
   hoursrequiredin       joapdata.hoursrequired%TYPE,
   hoursremainingin      joapdata.hoursremaining%TYPE,
   notifiedbyin          joapdata.notifiedby%TYPE,
   expediternotifiedin   joapdata.expediternotified%TYPE,
   joaplastupdatedin     VARCHAR,
   enginenumberin        INTEGER,
   aircraftidin          INTEGER
)
AS
   row_id      INTEGER;
   engdataid   INTEGER;
BEGIN
   engdataid := NULL;
   SELECT enginedataid
     INTO engdataid
     FROM emoc3.aircraftenginedata
    WHERE ((aircraftid = aircraftidin) AND (enginenumber = enginenumberin));

   IF (engdataid IS NULL) THEN
      SELECT NVL(MAX(emoc3.aircraftenginedata.enginedataid), 0)
        INTO row_id
        FROM emoc3.aircraftenginedata;

      INSERT INTO emoc3.aircraftenginedata (enginedataid,
	  		 aircraftid, enginenumber) VALUES (row_id+1, aircraftidin, enginenumberin);

      engdataid := row_id + 1;
   END IF;

   SELECT NVL (MAX (emoc3.joapdata.joapdataid), 0)
     INTO row_id
     FROM emoc3.joapdata;

   INSERT INTO EMOC3.joapdata
               (joapdataid, joapid, enginedataid, moccontroller,
                sampledate, reason,
                hoursrequired, hoursremaining, notifiedby,
                expediternotified,
                joaplastupdated,
                scheduleid
               )
        VALUES (row_id + 1, joapidin, engdataid, moccontrollerin,
                TO_DATE (sampledatein, 'MM/DD/YYYY HH24:MI:SS'), reasonin,
                hoursrequiredin, hoursremainingin, notifiedbyin,
                expediternotifiedin,
                TO_DATE (joaplastupdatedin, 'MM/DD/YYYY HH24:MI:SS'),
                scheduleidin
               );
END SPINSERTJOAP;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPINSERTJOAPDATA" (

ENGINENUMBERIN AIRCRAFTENGINEDATA.ENGINENUMBER%TYPE,
AIRCRAFTIDIN AIRCRAFTENGINEDATA.AIRCRAFTID%TYPE,
JOAPIDIN JOAPDATA.JOAPID%TYPE,
SAMPLEDATEIN JOAPDATA.SAMPLEDATE%TYPE,
SCHEDULEIDIN JOAPDATA.SCHEDULEID%TYPE

)
AS

ROW_ID INTEGER;
ENGDATAID INTEGER;
BEGIN

SELECT AIRCRAFTENGINEDATA.ENGINEDATAID
INTO ENGDATAID
FROM AIRCRAFTENGINEDATA
WHERE ( (AIRCRAFTID = AIRCRAFTIDIN)
	  AND (ENGINENUMBER = ENGINENUMBERIN)  );

IF (ENGDATAID IS NULL) THEN
   SELECT MAX(AIRCRAFTENGINEDATA.ENGINEDATAID)
   INTO ROW_ID
   FROM AIRCRAFTENGINEDATA;

   INSERT INTO AIRCRAFTENGINEDATA (ENGINEDATAID, AIRCRAFTID, ENGINENUMBER)
   VALUES (ROW_ID + 1, AIRCRAFTIDIN, ENGINENUMBERIN);

   ENGDATAID := ROW_ID + 1;
END IF;

SELECT MAX(JOAPDATA.JOAPDATAID)
INTO ROW_ID
FROM JOAPDATA;

INSERT INTO JOAPDATA (JOAPDATAID, ENGINEDATAID, JOAPID, SAMPLEDATE, SCHEDULEID)

VALUES (ROW_ID + 1, ENGDATAID, JOAPIDIN, SAMPLEDATEIN, SCHEDULEIDIN);


END SPINSERTJOAPDATA;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPINSERTMICAP" (
   aircraftidin      micap.AIRCRAFTID%TYPE,
   equipidin          micap.equipmentid%TYPE,
   elcin              micap.enterpriselocationcode%TYPE,
   unitidin           micap.unitid%TYPE,
   jcnin              micap.jobcontrolnumber%TYPE,
   documentnumberin   micap.documentnumber%TYPE,
   partin         micap.nomenclature%TYPE,
   eddin              micap.estimateddeliverydate%TYPE
)
AS
   row_id   INTEGER;
BEGIN
   SELECT NVL (MAX (micap.micapid), 0)
     INTO row_id
     FROM micap;

   INSERT INTO micap
               (micapid, equipmentid, enterpriselocationcode, unitid,
                jobcontrolnumber, documentnumber, nomenclature,
                estimateddeliverydate, aircraftid
               )
        VALUES (row_id + 1, equipidin, elcin, unitidin,
                jcnin, documentnumberin, partin,
                eddin, aircraftidin
               );
END spinsertmicap;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPINSERTREQINQ" (
   equipidin       supplyinquiry.equipid%TYPE,
   documentnumin   supplyinquiry.documentnum%TYPE,
   workcenterin    supplyinquiry.workcenter%TYPE,
   statin          supplyinquiry.stat%TYPE,
   eddin           supplyinquiry.edd%TYPE,
   wucin           supplyinquiry.wuc%TYPE,
   qtyin           supplyinquiry.qty%TYPE,
   eventnumin      supplyinquiry.eventnum%TYPE,
   locin           supplyinquiry.loc%TYPE,
   narrativein     supplyinquiry.narrative%TYPE,
   unitidin        supplyinquiry.unitid%TYPE,
   elcin           supplyinquiry.elc%TYPE,
   aircraftidin    supplyinquiry.aircraftid%TYPE
)
AS
BEGIN
   INSERT INTO supplyinquiry
               (equipid, documentnum, workcenter, stat, edd,
                wuc, qty, eventnum, loc, narrative, unitid,
                elc, aircraftid
               )
        VALUES (equipidin, documentnumin, workcenterin, statin, eddin,
                wucin, qtyin, eventnumin, locin, narrativein, unitidin,
                elcin, aircraftidin
               );

   COMMIT;

   IF (LENGTH (documentnumin) > 0)
   THEN
      IF (LENGTH (eventnumin) > 0)
      THEN
         addimdscdbmicap (equipidin,
                          elcin,
                          unitidin,
                          eventnumin,
                          documentnumin,
                          narrativein,
                          eddin,
                          NULL,
                          NULL,
                          wucin
                         );
      END IF;
   END IF;
END spinsertreqinq;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPINSERTSCHEDULESTATUS" (

SCHEDULEIDIN SCHEDULESTATUS.SCHEDULEID%TYPE,
STATUSCODEIDIN SCHEDULESTATUS.STATUSCODEID%TYPE,
STATUSTIMEIN VARCHAR,
STATUSTYPEIN SCHEDULESTATUS.STATUSTYPE%TYPE

)
AS
COUNTER INTEGER;
ROW_ID INTEGER;
BEGIN
--INCREMENT
	 SELECT SEQ_SCHEDULESTATUS.NEXTVAL
	 INTO   ROW_ID
	 FROM   DUAL;

IF STATUSTYPEIN = '0' THEN
   INSERT INTO SCHEDULESTATUS (SCHEDULESTATUSID, SCHEDULEID, STATUSCODEID, STATUSTIME, STATUSTYPE)
   VALUES (ROW_ID, SCHEDULEIDIN, STATUSCODEIDIN, TO_DATE(STATUSTIMEIN,'MM/DD/YYYY HH24:MI:SS'), STATUSTYPEIN);
ELSE --IF STATUSTYPEIN = '1' THEN
   INSERT INTO SCHEDULESTATUS (SCHEDULESTATUSID, SCHEDULEID, FUELSTATUSID, STATUSTIME, STATUSTYPE)
   VALUES (ROW_ID, SCHEDULEIDIN, STATUSCODEIDIN, TO_DATE(STATUSTIMEIN,'MM/DD/YYYY HH24:MI:SS'), STATUSTYPEIN);
END IF;


END SPINSERTSCHEDULESTATUS;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPINSERTSHOPDISPATCH" (

AIRCRAFTIDIN SHOPDISPATCH.AIRCRAFTID%TYPE,
COMPLETIONDATEIN VARCHAR,
DISCREPANCYIN SHOPDISPATCH.DISCREPANCY%TYPE,
ETICSHOWTIMEIN VARCHAR,
PERSONCONTACTEDIN SHOPDISPATCH.PERSONCONTACTED%TYPE,
PERSONDISPATCHEDIN SHOPDISPATCH.PERSONDISPATCHED%TYPE,
REQUESTDATEIN VARCHAR,
REQUESTERIN SHOPDISPATCH.REQUESTER%TYPE,
SQDISPATCHEDTOIDIN SHOPDISPATCH.SQDISPATCHEDTOID%TYPE,
WORKCENTERIDIN SHOPDISPATCH.WORKCENTERID%TYPE

)
AS

ROW_ID INTEGER;
BEGIN


SELECT NVL(MAX(SHOPDISPATCH.SHOPDISPATCHID), 0)
INTO ROW_ID
FROM SHOPDISPATCH;


INSERT INTO SHOPDISPATCH(SHOPDISPATCHID, AIRCRAFTID, COMPLETIONDATE, DISCREPANCY, ETICSHOWTIME, PERSONCONTACTED,
	   PERSONDISPATCHED, REQUESTDATE, REQUESTER, SQDISPATCHEDTOID, WORKCENTERID)

VALUES (ROW_ID + 1, AIRCRAFTIDIN, TO_DATE(COMPLETIONDATEIN,'MM/DD/YYYY HH24:MI:SS'), DISCREPANCYIN, TO_DATE(ETICSHOWTIMEIN,'MM/DD/YYYY HH24:MI:SS'), PERSONCONTACTEDIN,
	   PERSONDISPATCHEDIN, TO_DATE(REQUESTDATEIN, 'MM/DD/YYYY HH24:MI:SS'), REQUESTERIN, SQDISPATCHEDTOIDIN, WORKCENTERIDIN);


END SPINSERTSHOPDISPATCH;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPINSERTSTATUSUPDATE" (
   unitidin                      aircraftstatusupdate.unitid%TYPE,
   equipmentidin                 aircraftstatusupdate.equipmentid%TYPE,
   maintenancestatuscodein       aircraftstatusupdate.maintenancestatuscode%TYPE,
   conditionstatuscodein         aircraftstatusupdate.conditionstatuscode%TYPE,
   statusstartdatein             aircraftstatusupdate.statusstartdate%TYPE,
   statusstarttimein             aircraftstatusupdate.statusstarttime%TYPE,
   workunitcodein                aircraftstatusupdate.workunitcode%TYPE,
   openstatuseventin             aircraftstatusupdate.openstatusevent%TYPE,
   estimatedtimeincommissionin   aircraftstatusupdate.estimatedtimeincommission%TYPE,
   partsplusin                   aircraftstatusupdate.partsplus%TYPE,
   statusnarrativein             aircraftstatusupdate.statusnarrative%TYPE,
   configurationin               aircraftstatusupdate.configuration%TYPE,
   priorityin                    aircraftstatusupdate.priority%TYPE,
   armin                         aircraftstatusupdate.arm%TYPE,
   multipleconfigidin            aircraftstatusupdate.multipleconfigid%TYPE,
   localoptionin                 aircraftstatusupdate.localoption%TYPE,
   enteredbyin                   aircraftstatusupdate.enteredby%TYPE,
   aircraftidin                  aircraftstatusupdate.aircraftid%TYPE
)
AS
   statusupdateidin   INTEGER;
   mdsid              INTEGER;
BEGIN
   SELECT seq_statusupdate.NEXTVAL
     INTO statusupdateidin
     FROM DUAL;

   INSERT INTO aircraftstatusupdate
               (statusupdateid, unitid, equipmentid,
                maintenancestatuscode, conditionstatuscode,
                statusstartdate, statusstarttime, workunitcode,
                openstatusevent, estimatedtimeincommission, partsplus,
                statusnarrative, configuration, priority, arm,
                multipleconfigid, localoption, enteredby, aircraftid
               )
        VALUES (statusupdateidin, unitidin, equipmentidin,
                maintenancestatuscodein, conditionstatuscodein,
                statusstartdatein, statusstarttimein, workunitcodein,
                openstatuseventin, estimatedtimeincommissionin, partsplusin,
                statusnarrativein, configurationin, priorityin, armin,
                multipleconfigidin, localoptionin, enteredbyin, aircraftidin
               );

   IF (LENGTH (workunitcodein) > 0 AND LENGTH (openstatuseventin) > 0)
   THEN
      SELECT aircraftmdsid
        INTO mdsid
        FROM aircraft
       WHERE aircraftid = aircraftidin;
   END IF;
END spinsertstatusupdate;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPINSERTWORKUNITCODE" (
   wuccodein          wuc.wuccode%TYPE,
   wucdescriptionin   wuc.wucdescription%TYPE,
   wucstartdatein     VARCHAR,
   wucstopdatein      VARCHAR,
   mdsin              VARCHAR,
   blknumberin        VARCHAR,
   lastupdatein       VARCHAR,
   lastupdatebyin     wuc.lastupdateby%TYPE
)
AS
   row_id   INTEGER;
   dupwuc   INTEGER;
BEGIN
   SELECT COUNT (wucid)
     INTO dupwuc
     FROM wuc
    WHERE wuccode = wuccodein
      AND missiondesignseries = mdsin
      AND blocknumber = blknumberin;

   IF (dupwuc = 0)
   THEN
      SELECT NVL (MAX (wuc.wucid), 0)
        INTO row_id
        FROM wuc;

      INSERT INTO wuc
                  (wucid, wuccode, wucdescription,
                   wucstartdate,
                   wucstopdate, missiondesignseries,
                   blocknumber,
                   lastupdate,
                   lastupdateby
                  )
           VALUES (row_id + 1, wuccodein, wucdescriptionin,
                   TO_DATE (wucstartdatein, 'MM/DD/YYYY HH24:MI:SS'),
                   TO_DATE (wucstopdatein, 'MM/DD/YYYY HH24:MI:SS'), mdsin,
                   blknumberin,
                   TO_DATE (lastupdatein, 'MM/DD/YYYY HH24:MI:SS'),
                   lastupdatebyin
                  );
   END IF;
END spinsertworkunitcode;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPINSERTWRITEUP" (
   aircraftidin        aircraft.aircraftid%TYPE,
   eventnumberin       writeups.jcn%TYPE,
   symbolidin          writeups.symbolid%TYPE,
   pacerin             writeups.pacer%TYPE,
   writeuptimein       VARCHAR,
   eticin              writeups.etic%TYPE,
   wucidin             writeups.wucid%TYPE,
   discrepancyin       writeups.discrepancy%TYPE,
   correctedin         writeups.corrected%TYPE,
   conditioncodeidin   aircraft.conditioncodeid%TYPE
)
AS
   row_id   INTEGER;
   tmpvar   INTEGER;
   wutime   DATE;
BEGIN
   SELECT COUNT (*)
     INTO tmpvar
     FROM writeups
    WHERE aircraftid = aircraftidin AND jcn = eventnumberin AND corrected = 0;

   IF (tmpvar = 0)
   THEN
      IF (pacerin = 1)
      THEN
         UPDATE writeups
            SET pacer = 0
          WHERE aircraftid = aircraftidin;
      END IF;

      IF (writeuptimein IS NULL)
      THEN
         wutime := SYSDATE;
      ELSE
         wutime := TO_DATE (writeuptimein, 'MM/DD/YYYY HH24:MI:SS');
      END IF;

      SELECT NVL (MAX (writeups.writeupid), 0)
        INTO row_id
        FROM writeups;

      INSERT INTO writeups
                  (writeupid, writeuptime, jcn, corrected, pacer,
                   etic, aircraftid, symbolid, wucid, discrepancy
                  )
           VALUES (row_id + 1, wutime, eventnumberin, correctedin, pacerin,
                   eticin, aircraftidin, symbolidin, wucidin, discrepancyin
                  );
   END IF;
END spinsertwriteup;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPTESTPROC" (
P_CURSOR OUT EMOC_TYPES.EMOC_CURSOR)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
OPEN P_CURSOR FOR
SELECT * FROM AIRCRAFT;
END SPTESTPROC;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPUPDATEACTUALLANDING" (
SCHEDULEIDIN SCHEDULE.SCHEDULEID%TYPE,
STATUSCODETIMEIN VARCHAR

)
AS

BEGIN

UPDATE SCHEDULE
SET

ACTUALLANDING = TO_DATE(STATUSCODETIMEIN, 'MM/DD/YYYY HH24:MI:SS')

WHERE (SCHEDULEID = SCHEDULEIDIN);
END Spupdateactuallanding;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPUPDATEACTUALTAKEOFF" (
SCHEDULEIDIN SCHEDULE.SCHEDULEID%TYPE,
STATUSCODETIMEIN VARCHAR

)
AS

BEGIN

UPDATE SCHEDULE
SET

ACTUALTAKEOFF = TO_DATE(STATUSCODETIMEIN, 'MM/DD/YYYY HH24:MI:SS')

WHERE (SCHEDULEID = SCHEDULEIDIN);
END Spupdateactualtakeoff;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPUPDATEAIRCRAFTCD" (
   aircraftidin     aircraft.aircraftid%TYPE,
   customdataidin   customdata.customdataid%TYPE,
   datavaluein      aircraftcustomdata.datavalue%TYPE,
   lastupdatebyin   users.userid%TYPE
)
AS
   reccount   INTEGER;
   cdlabel    VARCHAR (50);
   cdtype     VARCHAR (10);
   cdvalue    VARCHAR (50);
BEGIN
   SELECT COUNT (*)
     INTO reccount
     FROM aircraftcustomdata
    WHERE customdataid = customdataidin AND aircraftid = aircraftidin;

   IF (reccount > 0)
   THEN
      UPDATE aircraftcustomdata
         SET datavalue = UPPER (datavaluein),
             lastupdated = SYSDATE,
             lastupdateby = lastupdatebyin
       WHERE aircraftid = aircraftidin AND customdataid = customdataidin;
   ELSE
      INSERT INTO aircraftcustomdata
                  (aircraftid, customdataid, datavalue,
                   lastupdated, lastupdateby
                  )
           VALUES (aircraftidin, customdataidin, UPPER (datavaluein),
                   SYSDATE, lastupdatebyin
                  );
   END IF;

   SELECT customdatalabel, customdatatype
     INTO cdlabel, cdtype
     FROM customdata
    WHERE customdataid = customdataidin;

   IF (LENGTH (datavaluein) > 0)
   THEN
      IF (cdtype = 'String')
      THEN
         add_customdatalistitem (customdataidin, UPPER (datavaluein));
      END IF;

      spupdateaircrafthistory (aircraftidin,
                               cdlabel,
                               UPPER (datavaluein),
                               TO_CHAR (SYSDATE, 'MM/DD/YYYY HH24:MI:SS'),
                               NULL,
                               lastupdatebyin
                              );
   END IF;
END spupdateaircraftcd;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPUPDATEAIRCRAFTENGINEDATA" (
AIRCRAFTIDIN AIRCRAFTENGINEDATA.AIRCRAFTID%TYPE,
AIRCRAFTMDSIDIN AIRCRAFTMDS.AIRCRAFTMDSID%TYPE
)
AS
NUMENGINES INTEGER;
ROW_ID INTEGER;
x INTEGER := 1;
BEGIN

DELETE FROM AIRCRAFTENGINEDATA
WHERE AIRCRAFTID = AIRCRAFTIDIN;

SELECT NUMBEROFENGINES INTO NUMENGINES
FROM AIRCRAFTMDS
WHERE AIRCRAFTMDSID = AIRCRAFTMDSIDIN;

while x <= NUMENGINES
loop
 	 SELECT NVL(MAX(AIRCRAFTENGINEDATA.ENGINEDATAID), 0)
 	 INTO ROW_ID
	 FROM AIRCRAFTENGINEDATA;

	 INSERT INTO AIRCRAFTENGINEDATA (ENGINEDATAID, AIRCRAFTID, ENGINENUMBER)
	 VALUES (ROW_ID + 1, AIRCRAFTIDIN, x);
	 x := x + 1;
end loop;


END SPUPDATEAIRCRAFTENGINEDATA;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPUPDATEAIRCRAFTHISTORY" (

AIRCRAFTIDIN HISTORY.AIRCRAFTID%TYPE,
ELEMENTIN HISTORY.ELEMENT%TYPE,
ELEMENTVALUEIN HISTORY.ELEMENTVALUE%TYPE,
EVENTDATEIN VARCHAR,
TRANSACTIONIDIN	HISTORY.TRANSACTIONID%TYPE,
USERIDIN HISTORY.USERID%TYPE

)
AS

ROW_ID INTEGER;
BEGIN


SELECT NVL(MAX(HISTORY.HISTORYID), 0)
INTO ROW_ID
FROM HISTORY;


INSERT INTO HISTORY (HISTORYID, ELEMENT, ELEMENTVALUE, EVENTDATE, TRANSACTIONID, USERID, AIRCRAFTID)

VALUES (ROW_ID + 1, ELEMENTIN, ELEMENTVALUEIN, TO_DATE(EVENTDATEIN,'MM/DD/YYYY HH24:MI:SS'), TRANSACTIONIDIN, USERIDIN, AIRCRAFTIDIN);





END SPUPDATEAIRCRAFTHISTORY;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPUPDATECONDITIONETIC" (

AIRCRAFTIDIN AIRCRAFT.AIRCRAFTID%TYPE,
CONDITIONCODEIDIN AIRCRAFT.CONDITIONCODEID%TYPE,
ETICIN AIRCRAFT.ETIC%TYPE

)
AS
BEGIN
UPDATE AIRCRAFT
SET

AIRCRAFT.CONDITIONCODEID = CONDITIONCODEIDIN,
AIRCRAFT.ETIC = ETICIN


WHERE ((AIRCRAFTID = AIRCRAFTIDIN));


END SPUPDATECONDITIONETIC;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPUPDATEENGINERUN" (

ENGINELOGIDIN ENGINERUNLOG.ENGINELOGID%TYPE,
ABSTARTIN ENGINERUNLOG.ABSTART%TYPE,
ABSTOPIN ENGINERUNLOG.ABSTOP%TYPE,
EMPLOYEENUMBERIN ENGINERUNLOG.EMPLOYEENUMBER%TYPE,
ENGINEDATAIDIN ENGINERUNLOG.ENGINEDATAID%TYPE,
IDLESTARTIN ENGINERUNLOG.IDLESTART%TYPE,
IDLESTOPIN ENGINERUNLOG.IDLESTOP%TYPE,
LASTUPDATEIN VARCHAR,
LASTUPDATEBYIN ENGINERUNLOG.LASTUPDATEBY%TYPE,
MILSTARTIN ENGINERUNLOG.MILSTART%TYPE,
MILSTOPIN ENGINERUNLOG.MILSTOP%TYPE,
MISUPDATEDIN ENGINERUNLOG.MISUPDATED%TYPE,
MOCCONTROLLERIN ENGINERUNLOG.MOCCONTROLLER%TYPE,
QUALCHECKEDIN ENGINERUNLOG.QUALCHECKED%TYPE,
REASONIN ENGINERUNLOG.REASON%TYPE,
RUNDATEIN VARCHAR,
RUNPERSONIN ENGINERUNLOG.RUNPERSON%TYPE,
SPAPPROVALIN ENGINERUNLOG.SPAPPROVAL%TYPE,
STANDBYFIRETRUCKIN ENGINERUNLOG.STANDBYFIRETRUCK%TYPE,
TOWERRUNCLEARANCEIN ENGINERUNLOG.TOWERRUNCLEARANCE%TYPE,
AIRCRAFTIDIN ENGINERUNLOG.AIRCRAFTID%TYPE


)
AS

BEGIN

UPDATE ENGINERUNLOG
SET ABSTART=ABSTARTIN,
	ABSTOP=ABSTOPIN,
	EMPLOYEENUMBER=EMPLOYEENUMBERIN,
	ENGINEDATAID=ENGINEDATAIDIN,
	IDLESTART=IDLESTARTIN,
	IDLESTOP=IDLESTOPIN,
	LASTUPDATE=TO_DATE(LASTUPDATEIN, 'MM/DD/YYYY HH24:MI:SS'),
	LASTUPDATEBY=LASTUPDATEBYIN,
	MILSTART=MILSTARTIN,
	MILSTOP=MILSTOPIN,
	MISUPDATED=MISUPDATEDIN,
	MOCCONTROLLER=MOCCONTROLLERIN,
	QUALCHECKED=QUALCHECKEDIN,
	REASON=REASONIN,
	RUNDATE=TO_DATE(RUNDATEIN, 'MM/DD/YYYY HH24:MI:SS'),
	RUNPERSON=RUNPERSONIN,
	SPAPPROVAL=SPAPPROVALIN,
	STANDBYFIRETRUCK=STANDBYFIRETRUCKIN,
	TOWERRUNCLEARANCE=TOWERRUNCLEARANCEIN,
	AIRCRAFTID = AIRCRAFTIDIN

WHERE ENGINELOGID=ENGINELOGIDIN;


END SPUPDATEENGINERUN;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPUPDATEINTERFACELOG" (
AIRCRAFTIDIN INTERFACELOG.AIRCRAFTID%TYPE,
TIMEOFINSERTIN INTERFACELOG.TIMEOFINSERT%TYPE,
TBMCSMSGSUBJECTIN varchar2,
TBMCSMSGTYPEIN varchar2,
TBMCSONLYIN varchar2,
TBMCSSUMMARYSENTIN date,
TBMCSXMLIN varchar2,
INTERFACECONTROLIDIN INTERFACELOG.INTERFACECONTROLID%TYPE

)
AS
ROW_ID INTEGER;
BEGIN


SELECT NVL(MAX(INTERFACELOG.INTERFACELOGID), 0)
INTO ROW_ID
FROM INTERFACELOG;

INSERT INTO INTERFACELOG (INTERFACELOGID, AIRCRAFTID, TIMEOFINSERT,
           INTERFACECONTROLID )

VALUES (ROW_ID + 1, AIRCRAFTIDIN, TIMEOFINSERTIN,
               INTERFACECONTROLIDIN);


END SPUPDATEINTERFACELOG;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPUPDATEINTERFACELOGCAMS" (
AIRCRAFTIDIN INTERFACELOG.AIRCRAFTID%TYPE,
INTERFACELOGIDIN INTERFACELOG.INTERFACELOGID%TYPE,
TIMEOFINSERTIN INTERFACELOG.TIMEOFINSERT%TYPE,
TRANSACTIONTYPEIN INTERFACELOG.TRANSACTIONTYPE%TYPE,
XMLININ	INTERFACELOG.XMLIN%TYPE,
INTERFACECONTROLIDIN INTERFACELOG.INTERFACECONTROLID%TYPE,
USERIDIN INTERFACELOG.USERID%TYPE

)
AS

BEGIN

INSERT INTO INTERFACELOG (INTERFACELOGID, AIRCRAFTID, TIMEOFINSERT, TRANSACTIONTYPE, XMLIN, INTERFACECONTROLID, USERID )

VALUES (INTERFACELOGIDIN, AIRCRAFTIDIN, TIMEOFINSERTIN, TRANSACTIONTYPEIN, XMLININ, INTERFACECONTROLIDIN, USERIDIN);

COMMIT;

END SPUPDATEINTERFACELOGCAMS;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPUPDATEINTERFACELOGTBMCS" (
AIRCRAFTIDIN INTERFACELOG.AIRCRAFTID%TYPE,
INTERFACELOGIDIN INTERFACELOG.INTERFACELOGID%TYPE,
TIMEOFINSERTIN INTERFACELOG.TIMEOFINSERT%TYPE,
TBMCSMSGSUBJECTIN varchar2,
TBMCSMSGTYPEIN varchar2,
TBMCSONLYIN number,
TBMCSSUMMARYSENTIN date,
TBMCSXMLIN varchar2,
INTERFACECONTROLIDIN INTERFACELOG.INTERFACECONTROLID%TYPE

)
AS

BEGIN

INSERT INTO INTERFACELOG (INTERFACELOGID, AIRCRAFTID, TIMEOFINSERT, INTERFACECONTROLID )

VALUES (INTERFACELOGIDIN, AIRCRAFTIDIN, TIMEOFINSERTIN,  INTERFACECONTROLIDIN);

COMMIT;

END SPUPDATEINTERFACELOGTBMCS;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPUPDATELASTCHIP" (

CHIPDATAIDIN SEMEDXDATA.SEMDATAID%TYPE,
ENGINEDATAIDIN SEMEDXDATA.ENGINEDATAID%TYPE,
SCHEDULEIDIN SEMEDXDATA.SCHEDULEID%TYPE,
MOCCONTROLLERIN SEMEDXDATA.MOCCONTROLLER%TYPE,
SAMPLEDATEIN VARCHAR,
CHIPIDIN SEMEDXDATA.SEMEDXID%TYPE,
REASONIN SEMEDXDATA.REASON%TYPE,
HOURSREQUIREDIN SEMEDXDATA.HOURSREQUIRED%TYPE,
HOURSREMAININGIN SEMEDXDATA.HOURSREMAINING%TYPE,
NOTIFIEDBYIN SEMEDXDATA.NOTIFIEDBY%TYPE,
EXPEDITERNOTIFIEDIN SEMEDXDATA.EXPEDITERNOTIFIED%TYPE,
CHIPLASTUPDATEDIN VARCHAR

)
AS
BEGIN
UPDATE SEMEDXDATA
SET

SEMEDXDATA.MOCCONTROLLER = MOCCONTROLLERIN,
SEMEDXDATA.SAMPLEDATE = TO_DATE(SAMPLEDATEIN,'MM/DD/YYYY HH24:MI:SS'),
SEMEDXDATA.SEMEDXID = CHIPIDIN,
SEMEDXDATA.REASON = REASONIN,
SEMEDXDATA.HOURSREQUIRED = HOURSREQUIREDIN,
SEMEDXDATA.HOURSREMAINING = HOURSREMAININGIN,
SEMEDXDATA.NOTIFIEDBY = NOTIFIEDBYIN,
SEMEDXDATA.EXPEDITERNOTIFIED = EXPEDITERNOTIFIEDIN,
SEMEDXDATA.SEMEDXLASTUPDATED = TO_DATE(CHIPLASTUPDATEDIN, 'MM/DD/YYYY HH24:MI:SS')

WHERE ((SEMDATAID = CHIPDATAIDIN));



END SPUPDATELASTCHIP;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPUPDATELASTJOAP" (

JOAPDATAIDIN JOAPDATA.JOAPDATAID%TYPE,
ENGINEDATAIDIN JOAPDATA.ENGINEDATAID%TYPE,
SCHEDULEIDIN JOAPDATA.SCHEDULEID%TYPE,
MOCCONTROLLERIN JOAPDATA.MOCCONTROLLER%TYPE,
SAMPLEDATEIN VARCHAR,
JOAPIDIN JOAPDATA.JOAPID%TYPE,
REASONIN JOAPDATA.REASON%TYPE,
HOURSREQUIREDIN JOAPDATA.HOURSREQUIRED%TYPE,
HOURSREMAININGIN JOAPDATA.HOURSREMAINING%TYPE,
NOTIFIEDBYIN JOAPDATA.NOTIFIEDBY%TYPE,
EXPEDITERNOTIFIEDIN JOAPDATA.EXPEDITERNOTIFIED%TYPE,
JOAPLASTUPDATEDIN VARCHAR

)
AS
BEGIN
UPDATE JOAPDATA
SET

JOAPDATA.MOCCONTROLLER = MOCCONTROLLERIN,
JOAPDATA.SAMPLEDATE = TO_DATE(SAMPLEDATEIN,'MM/DD/YYYY HH24:MI:SS'),
JOAPDATA.JOAPID = JOAPIDIN,
JOAPDATA.REASON = REASONIN,
JOAPDATA.HOURSREQUIRED = HOURSREQUIREDIN,
JOAPDATA.HOURSREMAINING = HOURSREMAININGIN,
JOAPDATA.NOTIFIEDBY = NOTIFIEDBYIN,
JOAPDATA.EXPEDITERNOTIFIED = EXPEDITERNOTIFIEDIN,
JOAPDATA.JOAPLASTUPDATED = TO_DATE(JOAPLASTUPDATEDIN,'MM/DD/YYYY HH24:MI:SS')

WHERE ((JOAPDATAID = JOAPDATAIDIN));



END SPUPDATELASTJOAP;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPUPDATEMEVENT" (
   unitin                        maintenanceevents.unit%TYPE,
   eventidin                     maintenanceevents.eventid%TYPE,
   pwcin                         maintenanceevents.pwc%TYPE,
   equipidin                     maintenanceevents.equipid%TYPE,
   cpin                          maintenanceevents.cp%TYPE,
   wuclcnin                      maintenanceevents.wuclcn%TYPE,
   wdin                          maintenanceevents.wd%TYPE,
   priorityin                    maintenanceevents.priority%TYPE,
   symbolin                      maintenanceevents.symbol%TYPE,
   tsschin                       maintenanceevents.tssch%TYPE,
   jobdurin                      maintenanceevents.jobdur%TYPE,
   discrepancyin                 maintenanceevents.discrepancy%TYPE,
   wcenarrativein                maintenanceevents.wcenarrative%TYPE,
   empidin                       maintenanceevents.empid%TYPE,
   entry781in                    maintenanceevents.entry781%TYPE,
   deferin                       maintenanceevents.defer%TYPE,
   wcesymbolin                   maintenanceevents.wcesymbol%TYPE,
   jobfollowin                   maintenanceevents.jobfollow%TYPE,
   partsrequiredin               maintenanceevents.partsrequired%TYPE,
   aircraftidin                  maintenanceevents.aircraftid%TYPE,
   maintenanceeventidout   OUT   maintenanceevents.maintenanceeventid%TYPE
)
AS
BEGIN
   SELECT seq_maintenanceevent.NEXTVAL
     INTO maintenanceeventidout
     FROM DUAL;

   INSERT INTO maintenanceevents
               (maintenanceeventid, unit, eventid, pwc, equipid,
                cp, wuclcn, wd, priority, symbol, tssch,
                jobdur, discrepancy, wcenarrative, empid, entry781,
                defer, wcesymbol, jobfollow, partsrequired,
                aircraftid
               )
        VALUES (maintenanceeventidout, unitin, eventidin, pwcin, equipidin,
                cpin, wuclcnin, wdin, priorityin, symbolin, tsschin,
                jobdurin, discrepancyin, wcenarrativein, empidin, entry781in,
                deferin, wcesymbolin, jobfollowin, partsrequiredin,
                aircraftidin
               );
END spupdatemevent;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPUPDATEMICAP" (
   micapidin          micap.micapid%TYPE,
   documentnumberin   micap.DOCUMENTNUMBER%TYPE,
   partin             micap.nomenclature%TYPE,
   erdin              micap.estimateddeliverydate%TYPE
)
AS
BEGIN
   UPDATE micap
      SET micap.nomenclature = partin,
          micap.estimateddeliverydate = erdin,
          micap.documentnumber = documentnumberin
    WHERE (micapid = micapidin);
END spupdatemicap;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPUPDATEMICAPCOMMENT" (
   micapidin          micap.micapid%TYPE,
   usercommentin      micap.usercomment%TYPE
)
AS
BEGIN
   UPDATE micap
      SET micap.usercomment = usercommentin,
          micap.lastupdated = SYSDATE
    WHERE (micapid = micapidin);
END spupdatemicapcomment;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPUPDATEMICAPSFROMCAMS" (
   equipidin          micap.equipmentid%TYPE,
   elcin              micap.enterpriselocationcode%TYPE,
   unitidin           micap.unitid%TYPE,
   jcnin              micap.jobcontrolnumber%TYPE,
   documentnumberin   micap.documentnumber%TYPE,
   nomenclaturein     micap.nomenclature%TYPE,
   eddin              micap.estimateddeliverydate%TYPE,
   camsinitin         micap.camsinit%TYPE
)
AS
   counter   INTEGER;
   row_id    INTEGER;
BEGIN
   SELECT COUNT (*)
     INTO counter
     FROM micap
    WHERE (    (equipmentid = equipidin)
           AND (enterpriselocationcode = elcin)
           AND (unitid = unitidin)
           AND (jobcontrolnumber = jcnin)
           AND (documentnumber = documentnumberin)
          );

   SELECT NVL (MAX (micap.micapid), 0)
     INTO row_id
     FROM micap;

   IF (counter = 0)
   THEN
      INSERT INTO micap
                  (micapid, equipmentid, documentnumber,
                   nomenclature, estimateddeliverydate, camsinit,
                   jobcontrolnumber, enterpriselocationcode, unitid
                  )
           VALUES (row_id + 1, equipidin, documentnumberin,
                   nomenclaturein, eddin, camsinitin,
                   jcnin, elcin, unitidin
                  );
   ELSE
      UPDATE micap
         SET micap.nomenclature = nomenclaturein,
             micap.estimateddeliverydate = eddin,
             micap.camsinit = camsinitin
       WHERE (    (equipmentid = equipidin)
              AND (enterpriselocationcode = elcin)
              AND (unitid = unitidin)
              AND (jobcontrolnumber = jcnin)
              AND (documentnumber = documentnumberin)
             );
   END IF;
END spupdatemicapsfromcams;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPUPDATEMISSIONSTATUS" (
AIRCRAFTIDIN AIRCRAFT.AIRCRAFTID%TYPE,
LOCATIONIDIN AIRCRAFT.LOCATIONID%TYPE,
STALOCCODEIDIN AIRCRAFT.STALOCCODEID%TYPE,
FUELSTATUSIDIN AIRCRAFT.FUELSTATUSID%TYPE,
FUELREQUESTEDTIMEIN VARCHAR,
FUELDELIVERYTIMEIN VARCHAR,
FUELLOADIN AIRCRAFT.FUELLOAD%TYPE,
FUELSTATUSLASTUPDATEDIN VARCHAR,
STATUSCODEIDIN AIRCRAFT.STATUSCODEID%TYPE,
STATUSCODELASTUPDATEDIN VARCHAR,
STATUSCODETIMEIN VARCHAR,
FUELSTATUSTIMEIN VARCHAR,
LOCATIONLASTUPDATEDIN VARCHAR,
LASTFLYDATEIN VARCHAR,
LOCATIONIN VARCHAR

)
AS
BEGIN

UPDATE AIRCRAFT
SET
LOCATIONID = LOCATIONIDIN,
STALOCCODEID = STALOCCODEIDIN,
FUELSTATUSID = FUELSTATUSIDIN,
FUELREQUESTEDTIME = TO_DATE(FUELREQUESTEDTIMEIN, 'MM/DD/YYYY HH24:MI:SS'),
FUELDELIVERYTIME = TO_DATE(FUELDELIVERYTIMEIN, 'MM/DD/YYYY HH24:MI:SS'),
FUELLOAD = FUELLOADIN,
FUELSTATUSLASTUPDATED = TO_DATE(FUELSTATUSLASTUPDATEDIN, 'MM/DD/YYYY HH24:MI:SS'),
STATUSCODEID = STATUSCODEIDIN,
STATUSCODELASTUPDATED = TO_DATE(STATUSCODELASTUPDATEDIN, 'MM/DD/YYYY HH24:MI:SS'),
STATUSCODETIME = TO_DATE(STATUSCODETIMEIN, 'MM/DD/YYYY HH24:MI:SS'),
FUELSTATUSTIME = TO_DATE(FUELSTATUSTIMEIN, 'MM/DD/YYYY HH24:MI:SS'),
LOCATIONLASTUPDATED = TO_DATE(LOCATIONLASTUPDATEDIN, 'MM/DD/YYYY HH24:MI:SS'),
LASTFLOWNTIME = TO_DATE(LASTFLYDATEIN, 'MM/DD/YYYY HH24:MI:SS'),
LOCATIONCODE = LOCATIONIN


WHERE AIRCRAFTID=AIRCRAFTIDIN;

END Spupdatemissionstatus;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPUPDATEPRESELECTSPARE" (

AIRCRAFTIDIN AIRCRAFT.AIRCRAFTID%TYPE,
PRESELECTSPAREIN AIRCRAFT.SQPRESELECT%TYPE

)
AS
BEGIN

UPDATE AIRCRAFT
SET

AIRCRAFT.SQPRESELECT = PRESELECTSPAREIN

WHERE (  (AIRCRAFTID = AIRCRAFTIDIN)  );


END SPUPDATEPRESELECTSPARE;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPUPDATESCHEDULELANDING" (
SCHEDULEIDIN SCHEDULE.SCHEDULEID%TYPE,
STATUSCODETIMEIN SCHEDULE.SCHEDULEDLANDING%TYPE

)
AS

BEGIN

UPDATE SCHEDULE
SET

SCHEDULEDLANDING = STATUSCODETIMEIN

WHERE (SCHEDULEID = SCHEDULEIDIN);
END SPUPDATESCHEDULELANDING;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPUPDATESCHEDULESTATUS" (

SCHEDULEIDIN SCHEDULESTATUS.SCHEDULEID%TYPE,
STATUSCODEIDIN SCHEDULESTATUS.STATUSCODEID%TYPE,
STATUSTIMEIN VARCHAR,
STATUSTYPEIN SCHEDULESTATUS.STATUSTYPE%TYPE

)
AS

BEGIN

IF STATUSTYPEIN = '0' THEN
   UPDATE SCHEDULESTATUS
   SET
   STATUSTIME = TO_DATE(STATUSTIMEIN,'MM/DD/YYYY HH24:MI:SS')
   WHERE SCHEDULEID = SCHEDULEIDIN
   AND STATUSCODEID = STATUSCODEIDIN
   AND STATUSTYPE = STATUSTYPEIN
   AND STATUSTIME = (SELECT MAX(STATUSTIME) FROM SCHEDULESTATUS
			   WHERE SCHEDULEID = SCHEDULEIDIN
			   AND STATUSCODEID = STATUSCODEIDIN
			   AND STATUSTYPE = STATUSTYPEIN);
ELSE --IF STATUSTYPEIN = '1' THEN
   UPDATE SCHEDULESTATUS
   SET
   STATUSTIME = TO_DATE(STATUSTIMEIN,'MM/DD/YYYY HH24:MI:SS')
   WHERE SCHEDULEID = SCHEDULEIDIN
   AND FUELSTATUSID = STATUSCODEIDIN
   AND STATUSTYPE = STATUSTYPEIN
   AND STATUSTIME = (SELECT MAX(STATUSTIME) FROM SCHEDULESTATUS
			   WHERE SCHEDULEID = SCHEDULEIDIN
			   AND FUELSTATUSID = STATUSCODEIDIN
			   AND STATUSTYPE = STATUSTYPEIN);
END IF;


END SPUPDATESCHEDULESTATUS;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPUPDATESCHEDULETAKEOFF" (
SCHEDULEIDIN SCHEDULE.SCHEDULEID%TYPE,
STATUSCODETIMEIN SCHEDULE.SCHEDULEDTAKEOFF%TYPE

)
AS

BEGIN

UPDATE SCHEDULE
SET

SCHEDULEDTAKEOFF = STATUSCODETIMEIN

WHERE (SCHEDULEID = SCHEDULEIDIN);
END SPUPDATESCHEDULETAKEOFF;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPUPDATESHOPDISPATCH" (

SHOPDISPATCHIDIN SHOPDISPATCH.SHOPDISPATCHID%TYPE,
AIRCRAFTIDIN SHOPDISPATCH.AIRCRAFTID%TYPE,
COMPLETIONDATEIN VARCHAR,
DISCREPANCYIN SHOPDISPATCH.DISCREPANCY%TYPE,
ETICSHOWTIMEIN VARCHAR,
PERSONCONTACTEDIN SHOPDISPATCH.PERSONCONTACTED%TYPE,
PERSONDISPATCHEDIN SHOPDISPATCH.PERSONDISPATCHED%TYPE,
REQUESTDATEIN VARCHAR,
REQUESTERIN SHOPDISPATCH.REQUESTER%TYPE,
SQDISPATCHEDTOIDIN SHOPDISPATCH.SQDISPATCHEDTOID%TYPE,
WORKCENTERIDIN SHOPDISPATCH.WORKCENTERID%TYPE

)
AS

BEGIN

UPDATE SHOPDISPATCH
SET AIRCRAFTID=AIRCRAFTIDIN,
	COMPLETIONDATE=TO_DATE(COMPLETIONDATEIN, 'MM/DD/YYYY HH24:MI:SS'),
	DISCREPANCY=DISCREPANCYIN,
	ETICSHOWTIME=TO_DATE(ETICSHOWTIMEIN, 'MM/DD/YYYY HH24:MI:SS'),
	PERSONCONTACTED=PERSONCONTACTEDIN,
	PERSONDISPATCHED=PERSONDISPATCHEDIN,
	REQUESTDATE=TO_DATE(REQUESTDATEIN, 'MM/DD/YYYY HH24:MI:SS'),
	REQUESTER=REQUESTERIN,
	SQDISPATCHEDTOID=SQDISPATCHEDTOIDIN,
	WORKCENTERID=WORKCENTERIDIN

WHERE SHOPDISPATCHID=SHOPDISPATCHIDIN;


END SPUPDATESHOPDISPATCH;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPUPDATESQUADSORTORDER" (

USERIDIN SQUADRON_SORT_ORDER.USERID%TYPE,
SQUADRONIDIN SQUADRON_SORT_ORDER.SQUADRONID%TYPE,
SORTORDERIN SQUADRON_SORT_ORDER.SORTORDER%TYPE

)
AS
COUNTER INTEGER;
ROW_ID INTEGER;
BEGIN

SELECT COUNT(*) INTO COUNTER
FROM SQUADRON_SORT_ORDER
WHERE (		 (USERID = USERIDIN)
AND (SQUADRONID = SQUADRONIDIN )		);

SELECT NVL(MAX(SQUADRON_SORT_ORDER.SQSORTORDERID), 0)
--SELECT MAX(SQUADRON_SORT_ORDER.SQSORTORDERID)
INTO ROW_ID
FROM SQUADRON_SORT_ORDER;


IF (COUNTER = 0) THEN
INSERT INTO SQUADRON_SORT_ORDER (SQSORTORDERID, USERID, SQUADRONID, SORTORDER)

VALUES (ROW_ID + 1, USERIDIN, SQUADRONIDIN, SORTORDERIN);

ELSE
UPDATE SQUADRON_SORT_ORDER
SET

SQUADRON_SORT_ORDER.SORTORDER = SORTORDERIN

WHERE ((USERID = USERIDIN)
AND (SQUADRONID = SQUADRONIDIN ) );


END IF;

END SPUPDATESQUADSORTORDER;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPUPDATEUSERSORTPREFS" (
USERIDIN USERS.USERID%TYPE,
AIRSORTORDER1IN USERS.AIRCRAFTSORTORDER1%TYPE,
AIRSORTORDER2IN USERS.AIRCRAFTSORTORDER2%TYPE,
AIRSORTORDER3IN USERS.AIRCRAFTSORTORDER3%TYPE
)
AS
BEGIN

UPDATE USERS
SET AIRCRAFTSORTORDER1=AIRSORTORDER1IN,
	AIRCRAFTSORTORDER2=AIRSORTORDER2IN,
	AIRCRAFTSORTORDER3=AIRSORTORDER3IN

WHERE
USERID=USERIDIN;



END SPUPDATEUSERSORTPREFS;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPUPDATEVIEWABLESQUADS" (
USERIDIN USERS.USERID%TYPE,
VIEWABLESQUADSIN USERS.VIEWABLESQUADRONS%TYPE

)
AS
BEGIN

UPDATE USERS
SET VIEWABLESQUADRONS=VIEWABLESQUADSIN

WHERE
USERID=USERIDIN;

END SPUPDATEVIEWABLESQUADS;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPUPDATEWEAPONSLOAD" (
   aircraftidin       aircraft.aircraftid%TYPE,
   stationin          aircraft.combatsclid%TYPE,
   ordnanceidin       aircraft.chaff%TYPE,
   weaponsnumberin    aircraft.flare%TYPE,
   weaponsclassidin   weaponsload.weaponsclassid%TYPE,
   firesymbolidin     weaponsload.firesymbolid%TYPE
)
AS
   counter   INTEGER;
   row_id    INTEGER;
BEGIN
   SELECT COUNT (*)
     INTO counter
     FROM weaponsload
    WHERE (    (weaponsload.aircraftid = aircraftidin)
           AND (weaponsload.station = stationin)
          );

   SELECT NVL (MAX (weaponsload.loadid), 0)
--SELECT MAX(SQUADRON_SORT_ORDER.SQSORTORDERID)
   INTO   row_id
     FROM weaponsload;

   IF (counter = 0)
   THEN
      INSERT INTO weaponsload
                  (loadid, aircraftid, station, ordnanceid,
                   weaponsnumber, firesymbolid, weaponsclassid
                  )
           VALUES (row_id + 1, aircraftidin, stationin, ordnanceidin,
                   weaponsnumberin, firesymbolidin, weaponsclassidin
                  );
   ELSE
      UPDATE weaponsload
         SET weaponsload.ordnanceid = ordnanceidin,
             weaponsload.weaponsnumber = weaponsnumberin,
             weaponsload.weaponsclassid = weaponsclassidin,
             weaponsload.firesymbolid = firesymbolidin
       WHERE ((aircraftid = aircraftidin) AND (station = stationin));
   END IF;
END spupdateweaponsload;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPUPDATEWEAPONSSTATUS" (
   aircraftidin                 aircraft.aircraftid%TYPE,
   combatsclidin                aircraft.combatsclid%TYPE,
   chaffin                      aircraft.chaff%TYPE,
   flarein                      aircraft.flare%TYPE,
   hotgunsin                    aircraft.hotguns%TYPE,
   armedin                      aircraft.arm_dearm%TYPE,
   weaponsstatuslastupdatedin   VARCHAR
)
AS
BEGIN
   UPDATE aircraft
      SET aircraft.combatsclid = combatsclidin,
          aircraft.chaff = chaffin,
          aircraft.flare = flarein,
          aircraft.hotguns = hotgunsin,
          aircraft.arm_dearm = armedin,
          aircraft.weaponsstatuslastupdated =
                 TO_DATE (weaponsstatuslastupdatedin, 'MM/DD/YYYY HH24:MI:SS')
    WHERE aircraftid = aircraftidin;
END spupdateweaponsstatus;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPUPDATEWRITEUPETIC" (

AIRCRAFTIDIN WRITEUPS.AIRCRAFTID%TYPE,
ETICIN WRITEUPS.ETIC%TYPE

)
AS
BEGIN
UPDATE WRITEUPS
SET

WRITEUPS.ETIC = ETICIN

WHERE ( (WRITEUPS.AIRCRAFTID = AIRCRAFTIDIN)
	  	AND (PACER=1)   );


END SPUPDATEWRITEUPETIC;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPUPDATEWRITEUPWUC" (
   aircraftidin   writeups.aircraftid%TYPE,
   wucidin        writeups.wucid%TYPE
)
AS
BEGIN
   UPDATE writeups
      SET writeups.wucid = wucidin
    WHERE ((writeups.aircraftid = aircraftidin) AND (pacer = 1));
END spupdatewriteupwuc;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."SPUPDPACERWRITEUP" (
   aircraftidin    aircraft.aircraftid%TYPE,
   writeuptimein   VARCHAR,
   eticin          writeups.etic%TYPE,
   wucidin         writeups.wucid%TYPE,
   discrepancyin   writeups.discrepancy%TYPE,
   writeupidin     writeups.writeupid%TYPE
)
AS
BEGIN
   UPDATE writeups
      SET etic = eticin,
          writeuptime = TO_DATE(writeuptimein, 'MM/DD/YYYY HH24:MI:SS'),
          corrected = 0,
          correctiveaction = '',
          pacer = 1,
          wucid = wucidin,
          discrepancy = discrepancyin
    WHERE writeupid = writeupidin;
END spupdpacerwriteup;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."START_SCHEDULE_DEVIATION" (
ACTIONOPTIONS	  SCHEDULEDEVIATIONS.ACTIONOPTIONS%TYPE,
SORTIEDATE		  SCHEDULEDEVIATIONS.SORTIEDATE%TYPE,
SCHEDULEID		  SCHEDULEDEVIATIONS.SCHEDULEID%TYPE,
SORTIENUM  	 	  SCHEDULEDEVIATIONS.SORTIENUM%TYPE,
SORTIEMOD		  SCHEDULEDEVIATIONS.SORTIEMOD%TYPE,
STARTDATETIME	  SCHEDULEDEVIATIONS.STARTDATETIME%TYPE,
STOPDATETIME	  SCHEDULEDEVIATIONS.STOPDATETIME%TYPE,
DEVIATIONCODEID	  SCHEDULEDEVIATIONS.DEVIATIONCODEID%TYPE,
CAUSECODEID	  	  SCHEDULEDEVIATIONS.CAUSECODEID%TYPE,
NEWCAUSECODE	  SCHEDULEDEVIATIONS.NEWCAUSECODE%TYPE,
CHARGEABLE		  SCHEDULEDEVIATIONS.CHARGEABLE%TYPE,
MAINTENANCEEVENTID		  SCHEDULEDEVIATIONS.MAINTENANCEEVENTID%TYPE,
DEVIATIONSREMARKS REMARKS.REMARKS%TYPE,
INTERFACELOGID    SCHEDULEDEVIATIONS.INTERFACELOGID%TYPE
)
/******************************************************************************
   NAME:       START_SCHEDULE_DEVIATION
   PURPOSE:    Inserts a schedule deviation

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        7/18/03      A.Mitchell       1. Created this procedure.

   PARAMETERS:
   INPUT:
	OPTION
	SORTIEDATE
	SCHEDULEID
	SORTIENUM
	SORTIEMOD
	STARTDATETIME
	STOPDATETIME
	DEVIATIONCODEID
	CAUSECODEID
	NEWCAUSECODE
	MISSIONID
	CHARGEABLE
	MAINTENANCEEVENTID
	DEVIATIONSREMARKS
   OUTPUT:

   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/
AS

NEWSCHEDULEDEVIATIONID NUMBER;
REMARKSID NUMBER;

BEGIN
	 --INCREMENT
	 SELECT SEQ_SCHEDULEDEVIATIONS.NEXTVAL
	 INTO   NEWSCHEDULEDEVIATIONID
	 FROM   SCHEDULEDEVIATIONS;
	 NEWSCHEDULEDEVIATIONID := NEWSCHEDULEDEVIATIONID + 1;

	 INSERT INTO SCHEDULEDEVIATIONS (
		SCHEDULEDEVIATIONID,
		ACTIONOPTIONS,
		SORTIEDATE,
		SCHEDULEID,
		SORTIENUM,
		SORTIEMOD,
		STARTDATETIME,
		STOPDATETIME,
		DEVIATIONCODEID,
		CAUSECODEID,
		NEWCAUSECODE,
		CHARGEABLE,
		MAINTENANCEEVENTID,
		INTERFACELOGID
		)
   	VALUES
	(	NEWSCHEDULEDEVIATIONID,
		ACTIONOPTIONS,
		SORTIEDATE,
		SCHEDULEID,
		SORTIENUM,
		SORTIEMOD,
		STARTDATETIME,
		STOPDATETIME,
		DEVIATIONCODEID,
		CAUSECODEID,
		NEWCAUSECODE,
		CHARGEABLE,
		MAINTENANCEEVENTID,
		INTERFACELOGID
		);

	 --INCREMENT
	 IF LENGTH(DEVIATIONSREMARKS) > 0
	 THEN
		 BEGIN
			 SELECT SEQ_REMARKS.NEXTVAL
			 INTO   REMARKSID
			 FROM   REMARKS;
			 REMARKSID := REMARKSID + 1;

			ADD_REMARKS (REMARKSID, DEVIATIONSREMARKS);

			UPDATE SCHEDULEDEVIATIONS SET DEVIATIONSREMARKS = REMARKSID WHERE SCHEDULEID = NEWSCHEDULEDEVIATIONID;
		 END ;
	 END IF;

END START_SCHEDULE_DEVIATION;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."TBMCS_INTERFACE_METRICS" (
STARTDATE 		  		  DATE,
ENDDATE					  DATE,
P_CURSOR_ALL_AVG 		  OUT EMOC_TYPES.EMOC_CURSOR,
P_CURSOR_DAILY_AVG 		  OUT EMOC_TYPES.EMOC_CURSOR,
P_CURSOR_TOTAL_COUNT 	  OUT EMOC_TYPES.EMOC_CURSOR,
P_CURSOR_TOTAL_FAILED	  OUT EMOC_TYPES.EMOC_CURSOR,
P_CURSOR_LONG	   		  OUT EMOC_TYPES.EMOC_CURSOR,
P_CURSOR_FAILED  		  OUT EMOC_TYPES.EMOC_CURSOR,
P_CURSOR_CUSTOM  		  OUT EMOC_TYPES.EMOC_CURSOR
)
AS
BEGIN

--This procedure used to query TBMCSINTERFACELOG table and report on transaction metrics
--86400 is used b/c this is the number of seconds in a day

--average transaction Duration
OPEN P_CURSOR_ALL_AVG FOR
SELECT TO_CHAR(AVG(TBMCSRESPONSERECV - TBMCSMSGSENT) * 86400, 999.99) || ' seconds' "Avg Duration/All Trans."
FROM TBMCSINTERFACELOG
WHERE TBMCSMSGSENT BETWEEN STARTDATE AND (ENDDATE + 1);

--daily average transaction Duration
OPEN P_CURSOR_DAILY_AVG FOR
SELECT TO_CHAR(AVG(TBMCSRESPONSERECV - TBMCSMSGSENT) * 86400, 999.99) || ' seconds' "Avg Duration", COUNT(INTERFACELOGID) "# Trans.", TO_CHAR(TBMCSMSGSENT, 'MM/DD/YYYY') "Date"
FROM TBMCSINTERFACELOG
WHERE TBMCSMSGSENT BETWEEN (ENDDATE - 7) AND (ENDDATE + 1)
GROUP BY TO_CHAR(TBMCSMSGSENT, 'MM/DD/YYYY');

--total # transactions
OPEN P_CURSOR_TOTAL_COUNT FOR
SELECT COUNT(INTERFACELOGID) "Total # Trans."
FROM TBMCSINTERFACELOG
WHERE TBMCSMSGSENT BETWEEN STARTDATE AND (ENDDATE + 1);

--total # failed
OPEN P_CURSOR_TOTAL_FAILED FOR
SELECT COUNT(INTERFACELOGID) "# of Trans."
FROM TBMCSINTERFACELOG
WHERE TBMCSMSGSENT BETWEEN STARTDATE AND (ENDDATE + 1)
AND ((TBMCSRESPONSERECV IS NOT NULL
AND TBMCSRESPONSE NOT LIKE 'EMOC to TBMCS Transaction%completed successfully%')
OR TBMCSRESPONSE IS NULL);

--long running transactions
OPEN P_CURSOR_LONG FOR
SELECT * FROM (
SELECT INTERFACELOGID "ID", TBMCSMSGSENT "Time Sent", TO_CHAR(MAX(TBMCSRESPONSERECV - TBMCSMSGSENT) * 86400, 999) || ' seconds' "Duration", UPDATEMETHOD "Trans. Type"
FROM TBMCSINTERFACELOG
WHERE TBMCSMSGSENT BETWEEN sysdate - 7 AND (sysdate + 1)
GROUP BY INTERFACELOGID, TBMCSMSGSENT, UPDATEMETHOD
ORDER BY MAX(TBMCSRESPONSERECV - TBMCSMSGSENT) DESC )
WHERE ROWNUM <= 7;

--grouping of failed by type
OPEN P_CURSOR_FAILED FOR
SELECT COUNT(INTERFACELOGID) "# of Trans.", UPDATEMETHOD "Trans. Type"
FROM TBMCSINTERFACELOG
WHERE TBMCSMSGSENT BETWEEN STARTDATE AND (ENDDATE + 1)
AND ((TBMCSRESPONSERECV IS NOT NULL
AND TBMCSRESPONSE NOT LIKE 'EMOC to TBMCS Transaction%completed successfully%')
OR TBMCSRESPONSE IS NULL)
GROUP BY UPDATEMETHOD;

--use temp dummy select. users can replace with their own custom sql for report
OPEN P_CURSOR_CUSTOM FOR
SELECT TO_CHAR(SYSDATE, 'MM/DD/YYYY') "Today's Date:"
FROM DUAL;

END TBMCS_INTERFACE_METRICS;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."TBMCS_INTERFACE_METRICS_MOC" (
   startdate                     DATE,
   enddate                       DATE,
   p_cursor_all_avg        OUT   emoc_types.emoc_cursor,
   p_cursor_daily_avg      OUT   emoc_types.emoc_cursor,
   p_cursor_total_count    OUT   emoc_types.emoc_cursor,
   p_cursor_total_failed   OUT   emoc_types.emoc_cursor,
   p_cursor_long           OUT   emoc_types.emoc_cursor,
   p_cursor_failed         OUT   emoc_types.emoc_cursor,
   p_cursor_custom         OUT   emoc_types.emoc_cursor,
   mocidin                       tbmcsinterfacelog.mocid%TYPE
)
AS
BEGIN

--This procedure used to query TBMCSINTERFACELOG table and report on transaction metrics
--86400 is used b/c this is the number of seconds in a day

   --average transaction Duration
   OPEN p_cursor_all_avg FOR
      SELECT    TO_CHAR (AVG (tbmcsresponserecv - tbmcsmsgsent) * 86400,
                         999.99
                        )
             || ' seconds' "Avg Duration/All Trans."
        FROM tbmcsinterfacelog
       WHERE tbmcsmsgsent BETWEEN startdate AND (enddate + 1)
         AND mocid = mocidin;

--daily average transaction Duration
   OPEN p_cursor_daily_avg FOR
      SELECT      TO_CHAR (AVG (tbmcsresponserecv - tbmcsmsgsent) * 86400,
                           999.99
                          )
               || ' seconds' "Avg Duration",
               COUNT (interfacelogid) "# Trans.",
               TO_CHAR (tbmcsmsgsent, 'MM/DD/YYYY') "Date"
          FROM tbmcsinterfacelog
         WHERE tbmcsmsgsent BETWEEN (enddate - 7) AND (enddate + 1)
           AND mocid = mocidin
      GROUP BY TO_CHAR (tbmcsmsgsent, 'MM/DD/YYYY');

--total # transactions
   OPEN p_cursor_total_count FOR
      SELECT COUNT (interfacelogid) "Total # Trans."
        FROM tbmcsinterfacelog
       WHERE tbmcsmsgsent BETWEEN startdate AND (enddate + 1)
         AND mocid = mocidin;

--total # failed
   OPEN p_cursor_total_failed FOR
      SELECT COUNT (interfacelogid) "# of Trans."
        FROM tbmcsinterfacelog
       WHERE tbmcsmsgsent BETWEEN startdate AND (enddate + 1)
         AND (       (    tbmcsresponserecv IS NOT NULL
                      AND tbmcsresponse NOT LIKE
                             'EMOC to TBMCS Transaction%completed successfully%'
                     )
                 AND mocid = mocidin
              OR tbmcsresponse IS NULL
             );

--long running transactions
   OPEN p_cursor_long FOR
      SELECT *
        FROM (SELECT   interfacelogid "ID", tbmcsmsgsent "Time Sent",
                          TO_CHAR (  MAX (tbmcsresponserecv - tbmcsmsgsent)
                                   * 86400,
                                   999
                                  )
                       || ' seconds' "Duration",
                       updatemethod "Trans. Type"
                  FROM tbmcsinterfacelog
                 WHERE tbmcsmsgsent BETWEEN SYSDATE - 7 AND (SYSDATE + 1)
                   AND mocid = mocidin
              GROUP BY interfacelogid, tbmcsmsgsent, updatemethod
              ORDER BY MAX (tbmcsresponserecv - tbmcsmsgsent) DESC)
       WHERE ROWNUM <= 7;

--grouping of failed by type
   OPEN p_cursor_failed FOR
      SELECT   COUNT (interfacelogid) "# of Trans.",
               updatemethod "Trans. Type"
          FROM tbmcsinterfacelog
         WHERE tbmcsmsgsent BETWEEN startdate AND (enddate + 1)
           AND (       (    tbmcsresponserecv IS NOT NULL
                        AND tbmcsresponse NOT LIKE
                               'EMOC to TBMCS Transaction%completed successfully%'
                       )
                   AND mocid = mocidin
                OR tbmcsresponse IS NULL
               )
      GROUP BY updatemethod;

--use temp dummy select. users can replace with their own custom sql for report
   OPEN p_cursor_custom FOR
      SELECT TO_CHAR (SYSDATE, 'MM/DD/YYYY') "Todays Date:"
        FROM DUAL;
END tbmcs_interface_metrics_moc;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."TRANSFERIMDSCDBMICAP" ( 
   equipidin        VARCHAR2, 
   elcin            VARCHAR2, 
   unitidin         VARCHAR2, 
   jcnin            VARCHAR2, 
   docnumberin      VARCHAR2, 
   nomenclaturein   VARCHAR2, 
   eddin            VARCHAR2, 
   issuedatein      VARCHAR2, 
   ujcin            VARCHAR2, 
   wucin            VARCHAR2 
) 
AS 
   mocidvar   INTEGER; 
   acidvar    INTEGER; 
   wucidvar   INTEGER; 
BEGIN 
   /*GET MOCID */ 
   get_mocid_by_elcunitid (elcin, unitidin, mocidvar); 
 
   IF (mocidvar IS NOT NULL) 
   THEN 
      get_aircraftid_by_mocequipid (mocidvar, equipidin, acidvar); 
 
 
         UPDATE micap 
            SET equipmentid = equipidin, 
    jobcontrolnumber = jcnin, 
    nomenclature = nomenclaturein, 
                estimateddeliverydate = eddin, 
                issuedate = issuedatein, 
                urgencyjustificationcode = ujcin, 
                workunitcode = wucin, 
      aircraftid = acidvar 
          WHERE enterpriselocationcode = elcin 
            AND unitid = unitidin 
            AND documentnumber = docnumberin; 
 
         COMMIT; 
 
         IF (LENGTH (wucin) > 0) 
         THEN 
            get_wucid_by_wucaircraftid (wucin, acidvar, wucidvar); 
         ELSE 
            wucidvar := NULL; 
         END IF; 
 
         spinsertwriteup (acidvar, 
                          jcnin, 
                          NULL, 
                          0, 
                          NULL, 
                          NULL, 
                          wucidvar, 
                          NULL, 
                          0, 
                          NULL 
                         ); 
      END IF; 
         emoc_cache.updatechangenotification('aircraft'||to_char(acidvar), 0); 
EXCEPTION 
   WHEN NO_DATA_FOUND 
   THEN 
      NULL; 
   WHEN OTHERS 
   THEN 
      -- Consider logging the error and then re-raise 
      RAISE; 
END transferimdscdbmicap;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."TRANSMIT" 
 (p1 IN VARCHAR2, p2 IN VARCHAR2, p3 IN NUMBER)
 AUTHID CURRENT_USER AS LANGUAGE JAVA NAME 'DbTrigger.transmit(java.lang.String, java.lang.String, int)';

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPDATEBLKDEVCORRECTIONFROMIMDS" (
   homeelcin                     VARCHAR2,
   currentelcin                  VARCHAR2,
   unitidin                      VARCHAR2,
   isortiedatein				 VARCHAR2,
   sortiedatein                  VARCHAR2,
   schedblknumin				 VARCHAR2,
   equipidin 				 	 VARCHAR2,
   sortienumberin 				 VARCHAR2,
   sortiemodifierin              VARCHAR2,
   mainteventidin                VARCHAR2,
   devcodein                     VARCHAR2,
   devcausecodein                VARCHAR2,
   newdevcausecodein			 VARCHAR2,
   chargeindin                   VARCHAR2,
   istartdatein					 VARCHAR2,
   startdatein					 VARCHAR2,
   starttimein                   VARCHAR2,
   istopdatein					 VARCHAR2,
   stopdatein                    VARCHAR2,
   stoptimein					 VARCHAR2,
   devremarksin                  VARCHAR2
)/* criteria on where clause */
AS
   mocvar   NUMBER;
   schedidvar NUMBER;
   devidvar NUMBER;
   causevar NUMBER;
   chargevar NUMBER;
   newcausevar NUMBER;
   squadvar NUMBER;
   actionvar NUMBER;
   remarksid NUMBER;
   startdate DATE;
   stopdate  DATE;
   /******************************************************************************
   NAME:       UPDATEBLKDEVCORRECTIONFROMIMDS
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     UPDATEBLKDEVCORRECTIONFROMIMDS
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       deviationcorrectiontrx)

******************************************************************************/
BEGIN
   /*GET MOCID for gathering code ids*/
	 GET_MOCID_BY_ELCUNITID(currentelcin,unitidin,mocvar);

	 IF mocvar IS NOT NULL THEN
	 /*Get Deviationid*/
	 	   GET_DEVID_BY_MOCDEVCODE(mocvar,devcodein,devidvar);

		   IF devidvar IS NOT NULL THEN
	 	   /*GET CauseCodeid*/
	 	   		 GET_CAUSEID_BY_MOCCAUSECODE(mocvar,devcausecodein,causevar);

				 IF causevar IS NOT NULL THEN
	 			 /*GET CauseCodeid*/
				 	   GET_CAUSEID_BY_MOCCAUSECODE(mocvar,newdevcausecodein,newcausevar);

					   IF newcausevar IS NOT NULL THEN
							 IF chargeindin = 'Y' THEN
							 	chargevar := 1;
							 ELSE
							 	chargevar := 0;
							 END IF;
							 actionvar := 3;
							 IF devremarksin IS NOT NULL THEN
							 	SELECT SEQ_REMARKS.NEXTVAL
						       	 INTO   REMARKSID
						       	 FROM   DUAL;
						       	 Add_Remarks (REMARKSID, devremarksin);
							 ELSE
							 	 remarksid := NULL;
							 END IF;
							 IF startdatein IS NOT NULL AND starttimein IS NOT NULL THEN
							  	 startdate := TO_DATE(startdatein || starttimein, 'mm/dd/yyyy hh24:MI:ss');
							  ELSE
							  	 startdate := NULL;
							  END IF;
							 IF stopdatein IS NOT NULL AND stoptimein IS NOT NULL THEN
							  	 stopdate := TO_DATE(stopdatein || stoptimein, 'mm/dd/yyyy hh24:MI:ss');
							  ELSE
							  	 stopdate := NULL;
							  END IF;

						   UPDATE EMOC3.SCHEDULEDEVIATIONS
						   		  SET    NEWCAUSECODE = newcausevar,
						       			 SORTIEMOD = sortiemodifierin,
						       			 ACTIONOPTIONS = actionvar,
						       			 CHARGEABLE = chargevar,
						       			 STARTDATETIME = startdate,
						       			 STOPDATETIME = stopdate,
						       			 DEVIATIONSREMARKS = remarksid
								WHERE  SCHEDULEDEVIATIONID IN (SELECT SCHEDULEDEVIATIONID
									   					   	   FROM SCHEDULEDEVIATIONS
															   WHERE SCHEDULEID IN (SELECT scheduleid
							   																 FROM SCHEDULE
							  																 WHERE SQUADRONID IN (SELECT squadronid
																							 	   			      FROM squadrons
																												  WHERE mocid = mocvar)
							    															 AND SORTIEDATE = sortiedatein
																							 AND BLOCKNUMBER = schedblknumin))
								  AND  DEVIATIONCODEID = devidvar
								  AND  CAUSECODEID = causevar;
					 END IF;
				END IF;
			END IF;
	 END IF;

--EXCEPTION
--   WHEN NO_DATA_FOUND
 --  THEN
 --     NULL;
 --  WHEN OTHERS
 --  THEN
      -- Consider logging the error and then re-raise
 --     RAISE;
END UPDATEBLKDEVCORRECTIONFROMIMDS;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPDATEBLKOPEREVTUPDATEFROMIMDS" (
   oeutransidin	  			     NUMBER,
   homeelcin                     VARCHAR2,
   currentelcin                  VARCHAR2,
   unitidin                      VARCHAR2,
   isortiedatein				 VARCHAR2,
   sortiedatein                  VARCHAR2,
   schedblocknumberin			 VARCHAR2,
   equipidin    			 	 VARCHAR2,
   sortienumberin				 VARCHAR2,
   istartdatein					 VARCHAR2,
   startdatein  				 VARCHAR2,
   starttimein  				 VARCHAR2,
   istopdatein					 VARCHAR2,
   stopdatein   				 VARCHAR2,
   stoptimein                    VARCHAR2,
   fuelloadin                    VARCHAR2,
   missionnumin                  VARCHAR2,
   opeventtypeeventin            VARCHAR2
)/* FEULLOAD???????????????????*/
AS
   mocvar   NUMBER;
   missvar  NUMBER;
   startdate DATE;
   stopdate  DATE;
   /******************************************************************************
   NAME:       UPDATEBLKOPEREVTUPDATEFROMIMDS
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     UPDATEOPEREVENTUPDATEFROMIMDS
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       operationaleventupdatetrx)

******************************************************************************/
BEGIN
   /*GET MOCID for gathering code ids*/
	 GET_MOCID_BY_ELCUNITID(currentelcin,unitidin,mocvar);
	 IF mocvar IS NOT NULL THEN
	 	 GET_MISSIONID_BY_MOCMISSION(mocvar,missionnumin,missvar);

		 IF startdatein IS NOT NULL AND starttimein IS NOT NULL THEN
		  	 startdate := TO_DATE(startdatein || starttimein, 'mm/dd/yyyy hh24:MI:ss');
		  ELSE
		  	 startdate := NULL;
		  END IF;
		 IF stopdatein IS NOT NULL AND stoptimein IS NOT NULL THEN
		  	 stopdate := TO_DATE(stopdatein || stoptimein, 'mm/dd/yyyy hh24:MI:ss');
		  ELSE
		  	 stopdate := NULL;
		  END IF;
		 UPDATE AIRCRAFT
		    SET FUELLOAD = fuelloadin
		  WHERE AIRCRAFTID IN (SELECT aircraftid FROM schedule
		  				   	  WHERE SQUADRONID IN (SELECT squadronid
							  				   	  FROM squadrons
												  WHERE mocid = mocvar)
		    				  AND SORTIEDATE = sortiedatein
							  AND BLOCKNUMBER = schedblocknumberin);
		 UPDATE EMOC3.SCHEDULE
		 	SET SCHEDULEDTAKEOFF = startdate,
	       		SCHEDULEDLANDING = stopdate,
	       		MISSIONID = missvar,
	       		TYPE_EVENT = opeventtypeeventin
			WHERE SQUADRONID IN (SELECT squadronid FROM squadrons WHERE mocid = mocvar)
		    AND SORTIEDATE = sortiedatein
			AND BLOCKNUMBER = schedblocknumberin;
	END IF;


--EXCEPTION
--   WHEN NO_DATA_FOUND
 --  THEN
 --     NULL;
 --  WHEN OTHERS
 --  THEN
      -- Consider logging the error and then re-raise
 --     RAISE;
END UPDATEBLKOPEREVTUPDATEFROMIMDS;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPDATEDEVCORRECTIONFROMIMDS"
  (
    homeelcin         VARCHAR2,
    currentelcin      VARCHAR2,
    unitidin          VARCHAR2,
    isortiedatein     VARCHAR2,
    sortiedatein      VARCHAR2,
    schedblknumin     VARCHAR2,
    equipidin         VARCHAR2,
    sortienumberin    VARCHAR2,
    sortiemodifierin  VARCHAR2,
    mainteventidin    VARCHAR2,
    devcodein         VARCHAR2,
    devcausecodein    VARCHAR2,
    newdevcausecodein VARCHAR2,
    chargeindin       VARCHAR2,
    istartdatein      VARCHAR2,
    startdatein       VARCHAR2,
    starttimein       VARCHAR2,
    istopdatein       VARCHAR2,
    stopdatein        VARCHAR2,
    stoptimein        VARCHAR2,
    devremarksin      VARCHAR2 )
  /* Stop date 0 null 0 on where clause */
AS
  mocvar      NUMBER;
  acidvar     NUMBER;
  schedidvar  NUMBER;
  devidvar    NUMBER;
  causevar    NUMBER;
  chargevar   NUMBER;
  newcausevar NUMBER;
  squadvar    NUMBER;
  actionvar   NUMBER;
  REMARKSID   NUMBER;
  startdate DATE;
  stopdate DATE;
  /******************************************************************************
  NAME:       UPDATEDEVCORRECTIONFROMIMDS
  PURPOSE:
  REVISIONS:
  Ver        Date        Author           Description
  ---------  ----------  ---------------  ------------------------------------
  1.0        12/15/2006  jwc             1. Created this procedure.
  2.0        08/15/2012  J.Long          1. QC 377 - update if newdevcausecodein NULL
  NOTES:
  Automatically available Auto Replace Keywords:
  Object Name:     UPDATEDEVCORRECTIONFROMIMDS
  Sysdate:         12/15/2006
  Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
  Username:         emoc3)
  Table Name:       deviationcorrectiontrx)
  ******************************************************************************/
BEGIN
  /*GET MOCID for gathering code ids*/
  GET_MOCID_BY_ELCUNITID(currentelcin,unitidin,mocvar);
  IF mocvar IS NOT NULL THEN
    /*Get Aircraftid to make sure correct schedule line*/
    GET_AIRCRAFTID_BY_MOCEQUIPID(mocvar,equipidin,acidvar);
    IF acidvar IS NOT NULL THEN
      /*Get Squadronid */
      GET_SQUADID_BY_AIRCRAFTID(acidvar,squadvar);
      IF squadvar IS NOT NULL THEN
        /*GetScheduleid to apply deviation to*/
        GET_SCHEDID_BY_SQUADSORTIEACID(squadvar,sortiedatein,sortienumberin,acidvar,schedidvar);
        IF schedidvar IS NOT NULL THEN
          /*Get Deviationid*/
          GET_DEVID_BY_MOCDEVCODE(mocvar,devcodein,devidvar);
          IF devidvar IS NOT NULL THEN
            /*GET CauseCodeid*/
            GET_CAUSEID_BY_MOCCAUSECODE(mocvar,devcausecodein,causevar);
            IF causevar IS NOT NULL THEN
              /*GET CauseCodeid*/
              IF newdevcausecodein IS NOT NULL THEN
                GET_CAUSEID_BY_MOCCAUSECODE(mocvar,newdevcausecodein,newcausevar);
                IF newcausevar IS NULL THEN
                  RETURN;
                END IF;
              END IF;
              IF chargeindin = 'Y' THEN
                chargevar   := 1;
              ELSE
                chargevar := 0;
              END IF;
              actionvar       := 3;
              IF devremarksin IS NOT NULL THEN
                SELECT SEQ_REMARKS.NEXTVAL INTO REMARKSID FROM DUAL;

                Add_Remarks (REMARKSID, devremarksin);
              ELSE
                remarksid := NULL;
              END IF;
              IF startdatein IS NOT NULL AND starttimein IS NOT NULL THEN
                startdate    := TO_DATE(startdatein || starttimein, 'mm/dd/yyyy hh24:MI:ss');
              ELSE
                startdate := NULL;
              END IF;
              IF stopdatein IS NOT NULL AND stoptimein IS NOT NULL THEN
                stopdate    := TO_DATE(stopdatein || stoptimein, 'mm/dd/yyyy hh24:MI:ss');
              ELSE
                stopdate := NULL;
              END IF;
              UPDATE EMOC3.SCHEDULEDEVIATIONS
              SET NEWCAUSECODE          = newcausevar,
                SORTIEMOD               = sortiemodifierin,
                ACTIONOPTIONS           = actionvar,
                CHARGEABLE              = chargevar,
                STARTDATETIME           = startdate,
                STOPDATETIME            = stopdate,
                MAINTENANCEEVENTID      = mainteventidin,
                DEVIATIONSREMARKS       = remarksid
              WHERE SCHEDULEDEVIATIONID =
                (SELECT SCHEDULEDEVIATIONID
                FROM SCHEDULEDEVIATIONS
                WHERE SCHEDULEID IN
                  (SELECT scheduleid
                  FROM SCHEDULE
                  WHERE SQUADRONID = squadvar
                  AND SORTIEDATE   = sortiedatein
                  AND SORTIENUM    = sortienumberin
                  AND AIRCRAFTID   = acidvar
                  )
                AND DEVIATIONCODEID = devidvar
                AND CAUSECODEID     = causevar
                );
            END IF;
          END IF;
        END IF;
      END IF;
    END IF;
  END IF;
  --EXCEPTION
  --  WHEN NO_DATA_FOUND
  --  THEN
  --     NULL;
  --  WHEN OTHERS
  --  THEN
  -- Consider logging the error and then re-raise
  --     RAISE;
END UPDATEDEVCORRECTIONFROMIMDS;

CREATE PROCEDURE         "EMOC3"."UPDATEOPEREVENTUPDATEFROMIMDS" (
   oeutransidin	  			     NUMBER,
   homeelcin                     VARCHAR2,
   currentelcin                  VARCHAR2,
   unitidin                      VARCHAR2,
   isortiedatein				 VARCHAR2,
   sortiedatein                  VARCHAR2,
   schedblocknumberin			 VARCHAR2,
   equipidin    			 	 VARCHAR2,
   sortienumberin				 VARCHAR2,
   istartdatein					 VARCHAR2,
   startdatein  				 VARCHAR2,
   starttimein  				 VARCHAR2,
   istopdatein					 VARCHAR2,
   stopdatein   				 VARCHAR2,
   stoptimein                    VARCHAR2,
   fuelloadin                    VARCHAR2,
   missionnumin                  VARCHAR2,
   opeventtypeeventin            VARCHAR2
)/* FEULLOAD???????????????????*/
AS
   mocvar   NUMBER;
   acidvar  NUMBER;
   squadvar NUMBER;
   schedidvar NUMBER;
   missvar  NUMBER;
   startdate DATE;
   stopdate  DATE;
   /******************************************************************************
   NAME:       UPDATEOPEREVENTUPDATEFROMIMDS
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     UPDATEOPEREVENTUPDATEFROMIMDS
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       operationaleventupdatetrx)

******************************************************************************/
BEGIN
   /*GET MOCID for gathering code ids*/
	 GET_MOCID_BY_ELCUNITID(currentelcin,unitidin,mocvar);

	 IF mocvar IS NOT NULL THEN
	 /*Get Aircraftid to make sure correct schedule line*/
	 	   GET_AIRCRAFTID_BY_MOCEQUIPID(mocvar,equipidin,acidvar);

		   IF acidvar IS NOT NULL THEN
		   	  UPD_AIRCRAFT_FUELLOAD(fuelloadin,acidvar);
	 	   	  /*Get Squadronid */
	 	   		 GET_SQUADID_BY_AIRCRAFTID(acidvar,squadvar);

				 IF squadvar IS NOT NULL THEN
	 			 /*GetScheduleid to apply deviation to*/
	 			 	GET_SCHEDID_BY_SQUADSORTIEACID(squadvar,sortiedatein,sortienumberin,acidvar,schedidvar);

					IF schedidvar IS NOT NULL THEN
					   	 GET_MISSIONID_BY_MOCMISSION(mocvar,missionnumin,missvar);

						 IF startdatein IS NOT NULL AND starttimein IS NOT NULL THEN
						  	 startdate := TO_DATE(startdatein || starttimein, 'mm/dd/yyyy hh24:MI:ss');
						  ELSE
						  	startdate := NULL;
						  END IF;
						 IF stopdatein IS NOT NULL AND stoptimein IS NOT NULL THEN
						  	 stopdate := TO_DATE(stopdatein || stoptimein, 'mm/dd/yyyy hh24:MI:ss');
						  ELSE
						  	 stopdate := NULL;
						  END IF;

						 UPDATE EMOC3.SCHEDULE
						 	SET SCHEDULEDTAKEOFF = startdate,
					       		SCHEDULEDLANDING = stopdate,
					       		MISSIONID = missvar,
					       		TYPE_EVENT = opeventtypeeventin
							WHERE  SCHEDULEID = schedidvar;
					 END IF;
				END IF;
		 END IF;
	END IF;


--EXCEPTION
 --  WHEN NO_DATA_FOUND
  -- THEN
  --    NULL;
 --  WHEN OTHERS
 --  THEN
      -- Consider logging the error and then re-raise
 --     RAISE;
END UPDATEOPEREVENTUPDATEFROMIMDS;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPDATE_AC_STATUS_FROM_SORTIE" (
AIRCRAFTIDIN 	  AIRCRAFT.AIRCRAFTID%TYPE,
STATUSCODEIN    SCHEDULESTATUS.STATUSCODEID%TYPE,
STATUSTIMEIN    SCHEDULESTATUS.STATUSTIME%TYPE,
STATUSTYPEIN	  SCHEDULESTATUS.STATUSTYPE%TYPE
)
/******************************************************************************
   NAME:       UPDATE_AIRCRAFT_STATUS_FROM_SORTIE
   PURPOSE:    Updates AIRCRAFT table with last status

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        8/7/03      A.Mitchell       1. Created this procedure.

   PARAMETERS:
   INPUT:
   *AIRCRAFTID
   *STATUSTYPE
   *STATUSCODE
   *STATUSTIME
   OUTPUT:
   *STATUSCODEID
   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/

AS

BEGIN
    IF STATUSTYPEIN = 0 THEN
      BEGIN
        UPDATE AIRCRAFT
        SET STATUSCODEID = STATUSCODEIN,
        STATUSCODETIME = STATUSTIMEIN
        WHERE AIRCRAFTID = AIRCRAFTIDIN;
      END;
    END IF;

    IF STATUSTYPEIN = 1 THEN
      BEGIN
        UPDATE AIRCRAFT
        SET FUELSTATUSID = STATUSCODEIN,
        FUELSTATUSTIME = STATUSTIMEIN
        WHERE AIRCRAFTID = AIRCRAFTIDIN;
      END;
    END IF;

	   EXCEPTION
	     WHEN NO_DATA_FOUND THEN
	       Null;
	     WHEN OTHERS THEN
	       Null;
END UPDATE_AC_STATUS_FROM_SORTIE;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPDATE_BROADCAST_EMAIL_MESSAGE" (
SUBJECTIN  	  MESSAGES.MESSAGETITLE%TYPE,
MESSAGEIN 	  MESSAGES.MESSAGE%TYPE,
USERIN		  MESSAGES.LASTUPDATEBY%TYPE
)
/******************************************************************************
   NAME:       UPDATE_BROADCAST_EMAIL_MESSAGE
   PURPOSE:    Updates message table with the last broadcast message sent out

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        5/10/04      J.Chaplin       1. Created this procedure.

   PARAMETERS:
   INPUT:
   *SUBJECTIN
   *MESSAGEIN
   *USERIN
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/

AS

BEGIN
	 UPDATE MESSAGES
	 	SET
		   MESSAGETITLE = SUBJECTIN,
		   MESSAGE = MESSAGEIN,
		   LASTUPDATEBY = USERIN,
		   LASTUPDATE = SYSDATE
		WHERE
		   MESSAGETYPE = 'EBM';
COMMIT;
END UPDATE_BROADCAST_EMAIL_MESSAGE;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPDATE_FLYING_SCHEDULE_LINE" (
GOIN	    	  	  SCHEDULE.GO%TYPE,
SORTIENUMIN  	 	  SCHEDULE.SORTIENUM%TYPE,
AIRCRAFTIDIN		  SCHEDULE.AIRCRAFTID%TYPE,
CALLSIGNIN		  	  SCHEDULE.CALLSIGN%TYPE,
PILOTIDIN			  SCHEDULE.PILOTID%TYPE,
SCHEDULEDTAKEOFFIN    SCHEDULE.SCHEDULEDTAKEOFF%TYPE,
SCHEDULEDLANDINGIN    SCHEDULE.SCHEDULEDLANDING%TYPE,
AREAIDIN			  SCHEDULE.AREAID%TYPE,
AREAARRIVETIMEIN	  SCHEDULE.AREAARRIVETIME%TYPE,
AREALEAVETIMEIN	  	  SCHEDULE.AREALEAVETIME%TYPE,
MISSIONIDIN		  	  SCHEDULE.MISSIONID%TYPE,
SCHEDULEREMARKSIN	  REMARKS.REMARKS%TYPE,
SCHEDDAYIN		  	  SCHEDULE.SCHEDDAY%TYPE,
SQUADRONIDIN		  SCHEDULE.SQUADRONID%TYPE,
SORTIEDATEIN		  SCHEDULE.SORTIEDATE%TYPE,
CONFIGCODEIN		  SCHEDULE.CONFIGCODE%TYPE,
FUELLOADIN		  	  AIRCRAFT.FUELLOAD%TYPE,
BLOCKNUMBERIN		  SCHEDULE.BLOCKNUMBER%TYPE,
RANGEIDIN         SCHEDULE.RANGEID%TYPE,
SCHEDULEIDIN      SCHEDULE.SCHEDULEID%TYPE,
TYPE_EVENTIN        SCHEDULE.TYPE_EVENT%TYPE
)
/******************************************************************************
   NAME:       UPDATE_FLYING_SCHEDULE_LINE
   PURPOSE:    Updates a schedule line.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        7/31/03      A.Mitchell       1. Created this procedure.

   PARAMETERS:
   INPUT:
   *SCHEDULEID,
   *GO,
   *CALLSIGN,
   *SCHEDULEDTAKEOFF,
   *SCHEDULEDLANDING,
   *AREAID,
   *AIRCRAFTID,
   *PILOTID,
   *SORTIENUM,
   *MISSIONID
   *REMARKS
   *SCHEDDAY
   *SORTIEDATE
   *CONFIGCODE
   *FUELLOAD
   *BLOCKNUMBER
   *RANGEID
   OUTPUT:

   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/
AS

REMARKID NUMBER;

BEGIN
	 --GET REMARK, IF ONE EXISTS
	 SELECT SCHEDULEREMARKS
	 INTO REMARKID
	 FROM SCHEDULE
	 WHERE SCHEDULEID = SCHEDULEIDIN;


	 IF REMARKID IS NULL
	 THEN --EXISTS, NOW UPDATE
	  	    BEGIN
		   		 IF  LENGTH(SCHEDULEREMARKSIN) > 0 OR SCHEDULEREMARKSIN IS NOT NULL THEN
				 	BEGIN
						 SELECT SEQ_REMARKS.NEXTVAL
						 INTO   REMARKID
						 FROM   DUAL;
						 ADD_REMARKS (REMARKID, SCHEDULEREMARKSIN);
						 UPDATE SCHEDULE SET SCHEDULEREMARKS = REMARKID WHERE SCHEDULEID = SCHEDULEIDIN;
					END;
				 END IF;
	        END;
	 ELSE
			BEGIN
				 IF  LENGTH(SCHEDULEREMARKSIN) > 0 OR SCHEDULEREMARKSIN IS NOT NULL THEN
				    BEGIN
		    	  	  UPDATE REMARKS SET REMARKS.REMARKSDATE = SYSDATE, REMARKS.REMARKS = SCHEDULEREMARKSIN WHERE REMARKSID = REMARKID;
				    END;
				 ELSE
				    BEGIN
				      UPDATE SCHEDULE SET SCHEDULEREMARKS = NULL WHERE SCHEDULEID = SCHEDULEIDIN;
			 	   	  DELETE REMARKS WHERE REMARKSID = REMARKID;
					END;
				 END IF;
			END;
	 END IF;

	IF BLOCKNUMBERIN IS NULL THEN
	 BEGIN
		 UPDATE SCHEDULE SET
			GO = GOIN,
			CALLSIGN = CALLSIGNIN,
			SCHEDULEDTAKEOFF = SCHEDULEDTAKEOFFIN,
			SCHEDULEDLANDING = SCHEDULEDLANDINGIN,
			AREAID = AREAIDIN,
			AREAARRIVETIME = AREAARRIVETIMEIN,
			AREALEAVETIME = AREALEAVETIMEIN,
			AIRCRAFTID = AIRCRAFTIDIN,
			PILOTID = PILOTIDIN,
			SORTIENUM = SORTIENUMIN,
			MISSIONID = MISSIONIDIN,
			SCHEDDAY = SCHEDDAYIN,
			SORTIEDATE = SORTIEDATEIN,
			CONFIGCODE = CONFIGCODEIN,
			RANGEID = RANGEIDIN,
			TYPE_EVENT = TYPE_EVENTIN
		WHERE SCHEDULEID = SCHEDULEIDIN;

		UPDATE AIRCRAFT SET FUELLOAD = FUELLOADIN WHERE AIRCRAFTID = AIRCRAFTIDIN;
	 END;
	ELSE
 	   BEGIN
		UPDATE SCHEDULE SET
			GO = GOIN,
			SCHEDULEDTAKEOFF = SCHEDULEDTAKEOFFIN,
			SCHEDULEDLANDING = SCHEDULEDLANDINGIN,
			AREAID = AREAIDIN,
			AREAARRIVETIME = AREAARRIVETIMEIN,
			AREALEAVETIME = AREALEAVETIMEIN,
			MISSIONID = MISSIONIDIN,
			SCHEDDAY = SCHEDDAYIN,
			SORTIEDATE = SORTIEDATEIN,
			CONFIGCODE = CONFIGCODEIN,
			RANGEID = RANGEIDIN,
			TYPE_EVENT = TYPE_EVENTIN
		WHERE BLOCKNUMBER = BLOCKNUMBERIN
		AND SORTIEDATE = SORTIEDATEIN;

		UPDATE AIRCRAFT SET FUELLOAD = FUELLOADIN
		WHERE AIRCRAFTID IN
		(SELECT AIRCRAFTID FROM SCHEDULE
		 WHERE BLOCKNUMBER = BLOCKNUMBERIN
		 AND SORTIEDATE = SORTIEDATEIN);
	   END;
	  END IF;

END UPDATE_FLYING_SCHEDULE_LINE;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPDATE_INTERFACELOG" (
INTERFACELOGIDIN in number,
XML_IN in varchar2 )
as
          l_clob  clob;
  begin

          select xmlout into l_clob from interfacelog where interfacelogid = INTERFACELOGIDIN for update;

          dbms_lob.writeappend( l_clob, length(XML_IN), XML_IN);
  end;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPDATE_LINE_FOR_TAILSWAP"
  (
    SCHEDULEIDIN SCHEDULE.SCHEDULEID%TYPE,
    AIRCRAFTIDIN SCHEDULE.AIRCRAFTID%TYPE,
    NEWAIRCRAFTIDIN SCHEDULE.AIRCRAFTID%TYPE,
    SCHEDULEREMARKSIN REMARKS.REMARKS%TYPE,
    DEVIATIONCODEIDIN SCHEDULE.DEVIATIONCODEID%TYPE,
    CAUSECODEIDIN SCHEDULE.CAUSECODEID%TYPE,
    UNDOIN VARCHAR2 )
  /******************************************************************************
  NAME:       UPDATE_LINE_FOR_TAILSWAP
  PURPOSE:    Updates a schedule line.
  REVISIONS:
  Ver        Date        Author           Description
  ---------  ----------  ---------------  ------------------------------------
  1.0        8/6/03      A.Mitchell       1. Created this procedure.
  1.1        2/27/04     A.Mitchell       2. Updated remarks handling
  1.2        3/11/04     A.Mitchell       3. Uncommented DELETE_SORTIE call + added UNDO
  2.0        7/16/2012   J.Long           4. QC 363/499/521 - Undo TS issues
  2.1		 8/20/2013	 J.Long			  5. QC 335 REOPENED in v4.1 (Fixed Enclosed)
  PARAMETERS:
  INPUT:
  *SCHEDULEID,
  *AIRCRAFTID,
  *NEWAIRCRAFTID
  *SCHEDULEREMARKS
  *DEVIATIONCODEID
  *CAUSECODEID
  OUTPUT:
  RETURNED VALUE:
  CALLED BY:
  CALLS:
  EXAMPLE USE:
  ASSUMPTIONS:
  LIMITATIONS:
  ALGORITHM:
  NOTES:
  ******************************************************************************/
AS
  REMARKSIDIN      NUMBER;
  NEXTSCHEDULEID   NUMBER;
  PLACEHOLDER      NUMBER;
  ERROR_DEV        NUMBER;
  ERROR_CAUSE      NUMBER;
  ERROR_SQ         NUMBER;
  ERROR_SORTIEDATE CHAR(7);
  ERROR_SORTIENUM  NUMBER;
  SWAP             NUMBER;
  UPDREMARK        NUMBER;
  NEWREMARK        NUMBER;
  ERROR_AIRCRAFT   NUMBER;
  STATUSCODEVAR    NUMBER;
BEGIN
  --INCREMENT
  --GET REMARK, IF ONE EXISTS
  SELECT SCHEDULEREMARKS
  INTO REMARKSIDIN
  FROM SCHEDULE
  WHERE SCHEDULEID              = SCHEDULEIDIN;
  IF (LENGTH(SCHEDULEREMARKSIN) > 0 OR SCHEDULEREMARKSIN IS NOT NULL) AND UNDOIN IS NULL THEN
    BEGIN
      IF (REMARKSIDIN IS NOT NULL)THEN
        UPDATE REMARKS
        SET REMARKS     = SCHEDULEREMARKSIN,
          REMARKSDATE   = SYSDATE
        WHERE REMARKSID = REMARKSIDIN;
      ELSE
        SELECT SEQ_REMARKS.NEXTVAL INTO REMARKSIDIN FROM DUAL;

        Add_Remarks (REMARKSIDIN, SCHEDULEREMARKSIN);
        UPDATE SCHEDULE
        SET SCHEDULEREMARKS = REMARKSIDIN
        WHERE SCHEDULEID    = SCHEDULEIDIN;
      END IF;
    END;
    --ELSE
    -- BEGIN
    --IF REMARKSIDIN IS NOT NULL THEN
    --  BEGIN
    --  UPDATE SCHEDULE SET SCHEDULEREMARKS = NULL WHERE SCHEDULEID = SCHEDULEIDIN;
    --     DELETE REMARKS WHERE REMARKSID = REMARKSIDIN;
    --    END;
    --END IF;
    -- END;
  END IF;
  IF UNDOIN = 'U' THEN
    BEGIN
      --GET THESE TO RESET DEV+CAUSE CODES ON ORIGINAL RECORD
      SELECT DEVIATIONCODEID,
        CAUSECODEID,
        SQUADRONID,
        SORTIEDATE,
        SORTIENUM,
        SWAPPEDLINE,
        AIRCRAFTID
      INTO ERROR_DEV,
        ERROR_CAUSE,
        ERROR_SQ,
        ERROR_SORTIEDATE,
        ERROR_SORTIENUM,
        SWAP,
        ERROR_AIRCRAFT
      FROM SCHEDULE
      WHERE SCHEDULEID = SCHEDULEIDIN;
      SELECT SCHEDULEREMARKS INTO UPDREMARK FROM SCHEDULE WHERE SCHEDULEID = SWAP;
      IF (UPDREMARK IS NULL AND (LENGTH(SCHEDULEREMARKSIN) > 0 OR SCHEDULEREMARKSIN IS NOT NULL)) THEN
        BEGIN
          SELECT SEQ_REMARKS.NEXTVAL INTO NEWREMARK FROM DUAL;

          Add_Remarks (NEWREMARK, SCHEDULEREMARKSIN);
          UPDATE SCHEDULE
          SET SCHEDULEREMARKS = NEWREMARK
          WHERE SCHEDULEID    = SCHEDULEIDIN;
        END;
      ELSE
        BEGIN
          UPDATE SCHEDULE SET SCHEDULEREMARKS = UPDREMARK WHERE SCHEDULEID = SWAP;
          --UPDATE REMARKS
          --SET REMARKS = SCHEDULEREMARKSIN
          --WHERE REMARKSID = UPDREMARK;
        END;
      END IF;
      UPDATE SCHEDULE
      SET DEVIATIONCODEID = ERROR_DEV,
        CAUSECODEID       = ERROR_CAUSE
      WHERE SQUADRONID    = ERROR_SQ
      AND SORTIEDATE      = ERROR_SORTIEDATE
      AND SORTIENUM       = ERROR_SORTIENUM
      AND SCHEDULEID      = SWAP;
      --1/28/05 To satisfy OnTime FeatureId #99
      --(When doing a Maintenance Interchange using a Spare
      --the Crew Ready information is not being carried forward to the line it is being placed in)
      DELETE SCHEDULESTATUS
      WHERE SCHEDULEID = SCHEDULEIDIN;
      --8/27/2012 Find Default Statusboard Icon for Aircraft
      SELECT SC.STATUSCODEID
      INTO STATUSCODEVAR
      FROM STATUSCODE SC
      JOIN AIRCRAFT AC
      ON SC.MOCID              = AC.MOCID
      WHERE AC.AIRCRAFTID      = ERROR_AIRCRAFT
      AND SC.DEFAULTSTATUSCODE = 1;
      --8/27/2012 Set Default Statusboard Icon for Aircraft
      UPDATE AIRCRAFT
      SET STATUSCODEID = STATUSCODEVAR
      WHERE AIRCRAFTID = ERROR_AIRCRAFT;
	  --8/20/2013 Set Aircraft PRESELECT to NULL
	  UPDATE AIRCRAFT
	  SET SQPRESELECT = NULL
	  WHERE AIRCRAFTID =
		(SELECT AIRCRAFTID FROM SCHEDULE WHERE SCHEDULEID = SWAP
		);
      --DELETE THE SWAPPED RECORD
      Delete_Sortie_Line(SCHEDULEIDIN, PLACEHOLDER); --3/11/04
    END;
  ELSE
    BEGIN
      SELECT SEQ_SCHEDULE.NEXTVAL INTO NEXTSCHEDULEID FROM DUAL;
      INSERT INTO SCHEDULE
      SELECT NEXTSCHEDULEID SCHEDULEID,
        GO,
        SCHEDULEDTAKEOFF,
        SCHEDULEDLANDING,
        ACTUALTAKEOFF,
        ACTUALLANDING,
        SPARE,
        ADJTAKEOFF,
        ADJLANDING,
        AREAARRIVETIME,
        AREALEAVETIME,
        LANDINGCODEID,
        RANGEID,
        DEVIATIONCODEID,
        CAUSECODEID,
        WXCODEID,
        MISSIONID,
        AREAID,
        AIRCRAFTID,
        PILOTID,
        SORTIENUM,
        SORTIEMOD,
        SORTIEDATE,
        BLOCKNUMBER,
        PUBLISHED_FLAG,
        SCHEDDAY,
        CALLSIGN,
        TRANSIENT,
        DURATIONSCHEDULED,
        DURATIONACTUAL,
        CONFIGCODE,
        NULL,
        NULL, --NULL replaced schedule and Maintenance remarks
        SORTIE_JOAP,
        SORTIE_SEMEDX,
        SQUADRONID,
        UTILCODEID,
        CAMSINIT,
        SCHEDULESOURCE,
        INTERFACELOGID,
        TYPE_EVENT,
        SWAPPEDLINE
      FROM SCHEDULE
      WHERE SCHEDULEID = SCHEDULEIDIN;
      UPDATE SCHEDULE
      SET AIRCRAFTID = NEWAIRCRAFTIDIN,
        SWAPPEDLINE  = SCHEDULEIDIN
        --SCHEDULEREMARKS = REMARKSIDIN
      WHERE SCHEDULEID = NEXTSCHEDULEID;
      UPDATE SCHEDULE
      SET DEVIATIONCODEID = DEVIATIONCODEIDIN,
        CAUSECODEID       = CAUSECODEIDIN
      WHERE SCHEDULEID    = SCHEDULEIDIN;
    END;
  END IF;
END Update_Line_For_Tailswap;

CREATE PROCEDURE         "EMOC3"."UPDATE_SCHEDULEDOW_JOB" (
SCHEDULEDOWIN	 EMOCCONFIG.SCHEDULEDOW%TYPE,
SCHEDULETIMEIN	 EMOCCONFIG.SCHEDULETIME%TYPE
)
as
TEXTDOW VARCHAR(15);
TEXTTIME CHAR(4);
NEXTDATE DATE;
begin
--oracle date does not recognize 2400 as midnight, only 0000
if SCHEDULETIMEIN = '2400' then
  begin
    TEXTTIME := '0000';
  end;
else
  begin
    TEXTTIME := SCHEDULETIMEIN;
  end;
end if;

--Used to update job that imports flying schedule from CAMS
CASE SCHEDULEDOWIN
  WHEN 1 THEN
    TEXTDOW := 'Monday';
  WHEN 2 THEN
    TEXTDOW := 'Tuesday';
  WHEN 3 THEN
    TEXTDOW := 'Wednesday';
  WHEN 4 THEN
    TEXTDOW := 'Thursday';
  WHEN 5 THEN
    TEXTDOW := 'Friday';
  WHEN 6 THEN
    TEXTDOW := 'Saturday';
  WHEN 7 THEN
    TEXTDOW := 'Sunday';
  ELSE
    TEXTDOW := 'Friday';
END CASE;

  --gets the next date occurance of the specified day
  SELECT NEXT_DAY(SYSDATE,TEXTDOW)
  INTO NEXTDATE
  FROM DUAL;

  --add time selected
  SELECT TO_DATE(NEXTDATE || ' ' || TEXTTIME, 'DD-MON-YYYY HH24:MI:SS')
  INTO NEXTDATE
  FROM DUAL;

--update the job (799 used as a random number)
  DBMS_JOB.CHANGE(799,NULL,NEXTDATE,NULL);

end UPDATE_SCHEDULEDOW_JOB;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPDATE_SCHEDULE_BLOCK" (
SQUADRONIDIN		  SCHEDULE.SQUADRONID%TYPE,
SORTIEDATEIN		  SCHEDULE.SORTIEDATE%TYPE,
SORTIENUMIN  	 	  SCHEDULE.SORTIENUM%TYPE,
AIRCRAFTIDIN		  SCHEDULE.AIRCRAFTID%TYPE,
BLOCKNUMBERIN		  SCHEDULE.BLOCKNUMBER%TYPE
)
/******************************************************************************
   NAME:       UPDATE_SCHEDULE_BLOCK
   PURPOSE:    Updates a schedule line BLOCKNUM.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        9/15/03      A.Mitchell       1. Created this procedure.

   PARAMETERS:
   INPUT:
   *SQUADRONID,
   *AIRCRAFTID,
   *SORTIENUM,
   *SORTIEDATE
   *BLOCKNUMBER
   OUTPUT:
   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/
AS

BEGIN

		UPDATE SCHEDULE SET BLOCKNUMBER = BLOCKNUMBERIN
		WHERE SQUADRONID = SQUADRONIDIN
		AND SORTIEDATE = SORTIEDATEIN
		AND SORTIENUM = SORTIENUMIN
		AND AIRCRAFTID = AIRCRAFTIDIN;

END UPDATE_SCHEDULE_BLOCK;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPDATE_SCHED_STATUS" (
SCHEDULEIDIN	  SCHEDULE.SCHEDULEID%TYPE,
STATUSCODEIDIN	  SCHEDULESTATUS.STATUSCODEID%TYPE,
STATUSTYPEIN  	  SCHEDULESTATUS.STATUSTYPE%TYPE,
STATUSTIMEIN	  	  SCHEDULESTATUS.STATUSTIME%TYPE

)
/******************************************************************************
   NAME:       UPDATE_SCHED_STATUS
   PURPOSE:    Updates status record for a previously entered plane

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        7/31/03      A.Mitchell       1. Created this procedure.

   PARAMETERS:
   INPUT:
   *SCHEDULEID
   *STATUSCODEID
   *STATUSTYPE
   *STATUSTIME
   OUTPUT:
   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/

AS

BEGIN
IF STATUSTYPEIN = '0' THEN
	UPDATE SCHEDULESTATUS
	SET STATUSTIME = STATUSTIMEIN
	WHERE SCHEDULEID = SCHEDULEIDIN
	AND STATUSCODEID = STATUSCODEIDIN
	AND STATUSTYPE = STATUSTYPEIN;
ELSE --IF STATYSTYPEIN = '1' THEN
	UPDATE SCHEDULESTATUS
	SET STATUSTIME = STATUSTIMEIN
	WHERE SCHEDULEID = SCHEDULEIDIN
	AND FUELSTATUSID = STATUSCODEIDIN
	AND STATUSTYPE = STATUSTYPEIN;
END IF;
END UPDATE_SCHED_STATUS;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPDATE_TBMCS_TRANSACTION" (
INTERFACELOGIDIN  	  TBMCSINTERFACELOG.INTERFACELOGID%TYPE,
TBMCSRESPONSEIN 	  TBMCSINTERFACELOG.TBMCSRESPONSE%TYPE,
TBMCSRESPONSERECVIN   TBMCSINTERFACELOG.TBMCSRESPONSERECV%TYPE
)
/******************************************************************************
   NAME:       UPDATE_TBMCS_TRANSACTION
   PURPOSE:    Updates a transaction record

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        3/16/04      J.Chaplin       1. Created this procedure.

   PARAMETERS:
   INPUT:
   *INTERFACELOGID
   *TBMCSRESPONSERECV,
   *TBMCSRESPONSE
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/
AS
BEGIN
	 UPDATE TBMCSINTERFACELOG
	 	SET
		   TBMCSRESPONSE = TBMCSRESPONSEIN,
		   TBMCSRESPONSERECV = TBMCSRESPONSERECVIN
		WHERE
		   INTERFACELOGID = INTERFACELOGIDIN;
COMMIT;
END UPDATE_TBMCS_TRANSACTION;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPDPORTALINFO" (
   useridin     users.userid%TYPE,
   portalidin   users.portaluserid%TYPE,
   passwordin   users.portalpassword%TYPE
)
AS
BEGIN
   UPDATE users
      SET portaluserid = portalidin
    WHERE userid = useridin;

   IF LENGTH (NVL (passwordin, '')) > 0
   THEN
      UPDATE users
         SET portalpassword = emoc_security.encrypt (passwordin)
       WHERE userid = useridin;
   END IF;
END updportalinfo;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_AIRCRAFT" (
   aircraftidin   IN   aircraft.aircraftid%TYPE,
   squadronidin        aircraft.squadronid%TYPE,
   flightidin          aircraft.flightid%TYPE
)
AS
BEGIN
   UPDATE aircraft
      SET squadronid = squadronidin,
          flightid = flightidin
    WHERE aircraft.aircraftid = aircraftidin;
END upd_aircraft;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_AIRCRAFT2" (
   aircraftidin     IN   aircraft.aircraftid%TYPE,
   squadronidin          aircraft.squadronid%TYPE,
   flightidin            aircraft.flightid%TYPE,
   currentmdsidin        INTEGER,
   newmdsidin            INTEGER,
   locationidin          INTEGER,
   tailnumberin          aircraft.tailnumber%TYPE,
   aircraftyearin        aircraft.aircraftyear%TYPE,
   equipidin             aircraft.misequipid%TYPE,
   serialnumberin        aircraft.serialnumber%TYPE,
   countrycodein         aircraft.countrycode%TYPE
)
AS
BEGIN
   IF (currentmdsidin <> newmdsidin)
   THEN
      changemds (aircraftidin, currentmdsidin, newmdsidin);
   END IF;

   UPDATE aircraft
      SET squadronid = squadronidin,
          flightid = flightidin,
          aircraftmdsid = newmdsidin,
          locationid = locationidin,
          tailnumber = tailnumberin,
          shorttailnumber = tailnumberin,
          aircraftyear = aircraftyearin,
          misequipid = equipidin,
          serialnumber = serialnumberin,
          countrycode = countrycodein
    WHERE aircraft.aircraftid = aircraftidin;
END upd_aircraft2;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_AIRCRAFTMDS" (
   aircraftmdsidin      IN   aircraftmds.aircraftmdsid%TYPE,
   aircraftmdsin             aircraftmds.aircraftmds%TYPE,
   numberofstationsin        aircraftmds.numberofstations%TYPE,
   numberofenginesin         aircraftmds.numberofengines%TYPE,
   timebetweenphasein        aircraftmds.timebetweenphase%TYPE,
   blocknumberin             aircraftmds.blocknumber%TYPE,
   phaseunitin               aircraftmds.phaseunit%TYPE,
   defaultmdsin              aircraftmds.defaultaircrafttype%TYPE,
   acftmdstypecdin           aircraftmds.acftmdstypecd%TYPE
)
AS
   CURSOR aircraftcur
   IS
      SELECT aircraftid
        FROM aircraft
       WHERE aircraftmdsid = aircraftmdsidin;

   aircraftrec        aircraftcur%ROWTYPE;
   counter1           INTEGER               := 0;
   defaultval         INTEGER               := 0;
   cnumberofengines   INTEGER               := 0;
BEGIN
   SELECT numberofengines
     INTO cnumberofengines
     FROM aircraftmds
    WHERE aircraftmdsid = aircraftmdsidin;

   BEGIN
      OPEN aircraftcur;

      FETCH aircraftcur
       INTO aircraftrec;

      WHILE aircraftcur%FOUND
      LOOP
         changenumberofengines (aircraftrec.aircraftid,
                                cnumberofengines,
                                numberofenginesin
                               );

         FETCH aircraftcur
          INTO aircraftrec;
      END LOOP;

      CLOSE aircraftcur;
   END;

   defaultval := defaultmdsin;

   IF defaultval = 0
   THEN
      SELECT COUNT (*)
        INTO counter1
        FROM aircraftmds
       WHERE defaultaircrafttype = 1 AND aircraftmdsid != aircraftmdsidin;

      IF counter1 = 0
      THEN
         defaultval := 1;
      END IF;
   END IF;

   UPDATE aircraftmds
      SET aircraftmds = aircraftmdsin,
          numberofstations = numberofstationsin,
          numberofengines = numberofenginesin,
          timebetweenphase = timebetweenphasein,
          blocknumber = blocknumberin,
          phaseunit = phaseunitin,
          defaultaircrafttype = defaultval,
          acftmdstypecd = acftmdstypecdin
    WHERE aircraftmds.aircraftmdsid = aircraftmdsidin;
END upd_aircraftmds;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_AIRCRAFT_FUELLOAD" (
   fuelin                     	 VARCHAR2,
   aircraftidin                  NUMBER
)
AS
   /******************************************************************************
   NAME:       UPD_AIRCRAFT_FUELLOAD
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/15/2006  jwc             1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     UPD_AIRCRAFT_FUELLOAD
      Sysdate:         12/15/2006
      Date and Time:   12/15/2006, 10:16:05 AM, and 12/15/2006 10:16:05 AM
      Username:         emoc3)
      Table Name:       wings)

******************************************************************************/
BEGIN
   UPDATE AIRCRAFT
   SET	  FUELLOAD = fuelin
   WHERE AIRCRAFTID = aircraftidin;


--EXCEPTION
 --  WHEN NO_DATA_FOUND
  -- THEN
  --    NULL;
 --  WHEN OTHERS
 --  THEN
      -- Consider logging the error and then re-raise
 --     RAISE;
END UPD_AIRCRAFT_FUELLOAD;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_AREA" (
   areain              areas.area%TYPE,
   areadescriptionin   areas.areadescription%TYPE,
   areaidin            areas.areaid%TYPE
)
AS
BEGIN
   UPDATE areas
      SET area = areain,
          areadescription = areadescriptionin
    WHERE areaid = areaidin;
END upd_area;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_ARMAMENT" (
   armamentidin      armament.armamentid%TYPE,
   stationin         armament.station%TYPE,
   aircraftmdsidin   armament.aircraftmdsid%TYPE,
   ordnanceidin      armament.ordnanceid%TYPE
)
AS
BEGIN
   UPDATE armament
      SET station = stationin,
          aircraftmdsid = aircraftmdsidin,
          ordnanceid = ordnanceidin
    WHERE armament.armamentid = armamentidin;
END upd_armament;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_CAMSCONTROL" (interfaceenabledin interfacecontrol.interfaceenabled%TYPE,
                                            updatedbyin        interfacecontrol.lastupdateby%TYPE,
                                            interfacecontrolid OUT interfacecontrol.interfacecontrolid%TYPE) AS
  currentstatusin VARCHAR2(20);
BEGIN
  currentstatusin := 'DISABLED';

  SELECT interfacecontrolid
    INTO interfacecontrolid
    FROM interfacecontrol
   WHERE interfacename = 'CAMS';

  IF interfaceenabledin = 1 THEN
    currentstatusin := 'ENABLED';
  END IF;

  UPDATE interfacecontrol
     SET interfaceenabled = interfaceenabledin,
         currentstatus    = currentstatusin,
         lastupdate       = SYSDATE,
         lastupdateby     = updatedbyin
   WHERE TRIM(interfacename) = 'CAMS';
END upd_camscontrol;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_COLORRULE" (
   colorrulesidin   colorrules.colorrulesid%TYPE,
   codetypein       colorrules.codetype%TYPE,
   colorrankin      colorrules.colorrank%TYPE,
   coloridin        colorrules.colorid%TYPE
)
AS
BEGIN
   UPDATE colorrules
      SET codetype = codetypein,
          colorrank = colorrankin,
          colorid = coloridin
    WHERE colorrulesid = colorrulesidin;
END upd_colorrule;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_COMBATSCLRULE" (
   sclrulesidin      combatsclrules.sclrulesid%TYPE,
   combatsclidin     combatsclrules.combatsclid%TYPE,
   aircraftmdsidin   combatsclrules.aircraftmdsid%TYPE
)
AS
BEGIN
   UPDATE combatsclrules
      SET combatsclid = combatsclidin,
          aircraftmdsid = aircraftmdsidin
    WHERE sclrulesid = sclrulesidin;
END upd_combatsclrule;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_CONDITIONSTATUS" (
   condstatidin        conditionstatus.condstatid%TYPE,
   conditionstatusin   conditionstatus.conditionstatus%TYPE,
   conditionlevelin    conditionstatus.conditionlevel%TYPE,
   flyablein           conditionstatus.flyable%TYPE,
   coloridin           conditionstatus.colorid%TYPE
)
AS
BEGIN
   UPDATE conditionstatus
      SET conditionstatus = conditionstatusin,
          conditionlevel = conditionlevelin,
          flyable = flyablein,
          colorid = coloridin
    WHERE condstatid = condstatidin;
END upd_conditionstatus;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_CREWCHIEF" (
   crewchiefin          crewchiefs.crewchief%TYPE,
   defaultcrewchiefin   crewchiefs.defaultcrewchief%TYPE,
   picturein            crewchiefs.picture%TYPE,
   rankidin             crewchiefs.rankid%TYPE,
   crewchiefidin        crewchiefs.crewchiefid%TYPE
)
AS
   counter1     INTEGER;
   defaultval   INTEGER;
BEGIN
   defaultval := defaultcrewchiefin;

   IF defaultval = 0
   THEN
      SELECT COUNT (*)
        INTO counter1
        FROM crewchiefs
       WHERE defaultcrewchief = 1 AND crewchiefid != crewchiefidin;

      IF counter1 = 0
      THEN
         defaultval := 1;
      END IF;
   END IF;

   UPDATE crewchiefs
      SET crewchief = crewchiefin,
          defaultcrewchief = defaultval,
          picture = picturein,
          rankid = rankidin
    WHERE crewchiefid = crewchiefidin;
END upd_crewchief;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_CUSTOMDATA" (
   labelin         customdata.customdatalabel%TYPE,
   descriptionin   customdata.customdatadescription%TYPE,
   typein          customdata.customdatatype%TYPE,
   widthin         customdata.customdatawidth%TYPE,
   bgcolorin       customdata.bgcolorvalue%TYPE,
   fontcolorin     customdata.fontcolor%TYPE,
   idin            customdata.customdataid%TYPE
)
AS
BEGIN
   UPDATE customdata
      SET customdatalabel = labelin,
          customdatadescription = descriptionin,
          customdatatype = typein,
          customdatawidth = widthin,
          bgcolorvalue = bgcolorin,
          fontcolor = fontcolorin
    WHERE customdataid = idin;
END upd_customdata;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_EMOCCONFIGDATA" (
   emocconfigidin     emocconfig.emocconfigid%TYPE,
   timezonefactorin   emocconfig.timezonefactor%TYPE,
   timezonehoursin    emocconfig.timezonehours%TYPE,
   gmtfactorin        emocconfig.gmtfactor%TYPE,
   gmthoursin         emocconfig.gmthours%TYPE,
   versionin          emocconfig.VERSION%TYPE,
   basenamein         emocconfig.basename%TYPE,
   etictimerin        emocconfig.etictimer%TYPE,
   archivedomin       emocconfig.archivedom%TYPE,
   archivepurgemoin   emocconfig.archivepurgemo%TYPE,
   scheduledowin      emocconfig.scheduledow%TYPE,
   scheduletimein     emocconfig.scheduletime%TYPE,
   schedulepathin     emocconfig.schedulepath%TYPE,
   templatepathin     emocconfig.templatepath%TYPE,
   archivepathin      emocconfig.archivepath%TYPE,
   headercolorin      emocconfig.headercolor%TYPE,
   smtpserverin       emocconfig.smtpserver%TYPE,
   updatedbyin        emocconfig.lastupdatedby%TYPE,
   docspathin         emocconfig.docspath%TYPE,
   proxyurlin         emocconfig.proxyurl%TYPE,
   proxyuseridin      emocconfig.proxyuserid%TYPE,
   proxypasswordin    emocconfig.proxypassword%TYPE,
   proxyenabledin     emocconfig.proxyenabled%TYPE
)
AS
BEGIN
   UPDATE emocconfig
      SET timezonefactor = timezonefactorin,
          timezonehours = timezonehoursin,
          gmtfactor = gmtfactorin,
          gmthours = gmthoursin,
          VERSION = versionin,
          basename = basenamein,
          etictimer = etictimerin,
          archivedom = archivedomin,
          archivepurgemo = archivepurgemoin,
          scheduledow = scheduledowin,
          scheduletime = scheduletimein,
          schedulepath = schedulepathin,
          templatepath = templatepathin,
          archivepath = archivepathin,
          docspath = docspathin,
          headercolor = headercolorin,
          smtpserver = smtpserverin,
          lastupdatedby = updatedbyin,
          lastupdated = SYSDATE,
          proxyurl = proxyurlin,
          proxyuserid = proxyuseridin,
          proxypassword = emoc_security.encrypt(proxypasswordin),
          proxyenabled = proxyenabledin
    WHERE emocconfigid = emocconfigidin;
--Added 10/2/03 A.MitchelL
--update the job that pulls schedule from IMDS
--UPDATE_SCHEDULEDOW_JOB(SCHEDULEDOWIN, SCHEDULETIMEIN);
END upd_emocconfigdata;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_EMOCHTML1" (
   emocconfigidin   emocconfig.emocconfigid%TYPE,
   emochtml1in      CLOB
)
AS
BEGIN
   UPDATE emocconfig
      SET emochtml1 = emochtml1in
    WHERE emocconfigid = emocconfigidin;
END upd_emochtml1;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_FIRESYMBOL" (
   firesymbolin     firesymbols.firesymbol%TYPE,
   descriptionin    firesymbols.description%TYPE,
   defaultvalin     firesymbols.defaultval%TYPE,
   rankingin        firesymbols.ranking%TYPE,
   firesymbolidin   firesymbols.firesymbolid%TYPE,
   mocidin          firesymbols.mocid%TYPE
)
AS
   counter1     INTEGER;
   defaultval   INTEGER;
BEGIN
   IF defaultvalin = 1
   THEN
      UPDATE firesymbols
         SET defaultval = 0
       WHERE mocid = mocidin;
   END IF;

   UPDATE firesymbols
      SET firesymbol = firesymbolin,
          description = descriptionin,
          defaultval = defaultvalin,
          ranking = rankingin
    WHERE firesymbolid = firesymbolidin;

   SELECT COUNT (*)
     INTO counter1
     FROM firesymbols
    WHERE defaultval = 1 AND mocid = mocidin;

   IF counter1 = 0
   THEN
      UPDATE firesymbols
         SET defaultval = 1
       WHERE firesymbolid = firesymbolidin;
   END IF;
END upd_firesymbol;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_FLIGHT" (
   flightnamein     flights.flightname%TYPE,
   squadronidin     flights.squadronid%TYPE,
   workcenteridin   flights.workcenterid%TYPE,
   lastupdatebyin   flights.lastupdateby%TYPE,
   flightidin       flights.flightid%TYPE
)
AS
BEGIN
   UPDATE flights
      SET flightname = flightnamein,
          squadronid = squadronidin,
          workcenterid = workcenteridin,
          lastupdate = SYSDATE,
          lastupdateby = lastupdatebyin
    WHERE flightid = flightidin;
END upd_flight;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_HELPTOPIC" (
   helpidin     emochelp.helpid%TYPE,
   parentidin   emochelp.parentid%TYPE,
   topicin      emochelp.topic%TYPE,
   helphtmlin   emochelp.helphtml%TYPE,
   nodein       emochelp.node%TYPE
)
AS
BEGIN
   UPDATE emochelp
      SET parentid = parentidin,
          topic = topicin,
          helphtml = helphtmlin,
          node = nodein
    WHERE helpid = helpidin;
END upd_helptopic;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_HQCODE" (
   hqcodein          hanger_queen_code.hqcode%TYPE,
   hqdescriptionin   hanger_queen_code.hqdescription%TYPE,
   hqlevelin         hanger_queen_code.hqlevel%TYPE,
   hqdefaultin       hanger_queen_code.hqdefault%TYPE,
   hqcodeidin        hanger_queen_code.hqcodeid%TYPE
)
AS
BEGIN
   UPDATE hanger_queen_code
      SET hqcode = hqcodein,
          hqdescription = hqdescriptionin,
          hqlevel = hqlevelin,
          hqdefault = hqdefaultin
    WHERE hqcodeid = hqcodeidin;
END upd_hqcode;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_ICONTROL" (interfacenamein    interfacecontrol.INTERFACENAME%TYPE,
                                         interfaceenabledin interfacecontrol.interfaceenabled%TYPE,
                                         updatedbyin        interfacecontrol.lastupdateby%TYPE,
                                         interfacecontrolid OUT interfacecontrol.interfacecontrolid%TYPE) AS
  currentstatusin VARCHAR2(20);
BEGIN
  currentstatusin := 'DISABLED';

  SELECT interfacecontrolid
    INTO interfacecontrolid
    FROM interfacecontrol
   WHERE UPPER(interfacename) = UPPER(interfacenamein);

  IF interfaceenabledin = 1 THEN
    currentstatusin := 'ENABLED';
  END IF;

  UPDATE interfacecontrol
     SET interfaceenabled = interfaceenabledin,
         currentstatus    = currentstatusin,
         lastupdate       = SYSDATE,
         lastupdateby     = updatedbyin
   WHERE UPPER(interfacename) = UPPER(interfacenamein);
END upd_icontrol;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_IMDSLOGIN" (
   useridin       imdslogins.userid%TYPE,
   loginin        imdslogins.imdslogin%TYPE,
   passwordin     imdslogins.imdspassword%TYPE,
   accountin      imdslogins.imdsaccount%TYPE,
   projectidin    imdslogins.imdsprojectid%TYPE,
   terminalidin   imdslogins.imdsterminalid%TYPE,
   wingidin       imdslogins.wingid%TYPE,
   loginidin      imdslogins.imdsloginid%TYPE
)
AS
BEGIN
   UPDATE imdslogins
      SET imdslogin = loginin,
          imdsaccount = accountin,
          imdsprojectid = projectidin,
          imdsterminalid = terminalidin,
          wingid = wingidin
    WHERE imdsloginid = loginidin;

   IF LENGTH (NVL (passwordin, '')) > 0
   THEN
      UPDATE imdslogins
         SET imdspassword = emoc_security.encrypt (passwordin)
       WHERE imdsloginid = loginidin;
   END IF;
   
END upd_imdslogin;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_INTERFACECONTROL" (interfacecontrolidin interfacecontrol.interfacecontrolid%TYPE,
                                                 interfaceenabledin   interfacecontrol.interfaceenabled%TYPE,
                                                 currentstatusin      interfacecontrol.currentstatus%TYPE,
                                                 lastupdatebyin       interfacecontrol.lastupdateby%TYPE,
                                                 lastupdatein         interfacecontrol.lastupdate%TYPE) AS
  previousstatus VARCHAR2(10);
  prevenabled    INTEGER;
BEGIN
  SELECT currentstatus, interfaceenabled
    INTO previousstatus, prevenabled
    FROM interfacecontrol
   WHERE interfacecontrolid = interfacecontrolidin;

  IF previousstatus != currentstatusin OR prevenabled != interfaceenabledin THEN
    INSERT INTO interfacehistory
      (interfacecontrolid,
       statuschangeby,
       statuschangetime,
       currentstatus,
       currentenabled)
    VALUES
      (interfacecontrolidin,
       lastupdatebyin,
       lastupdatein,
       currentstatusin,
       interfaceenabledin);
  END IF;

  UPDATE interfacecontrol
     SET currentstatus = currentstatusin,
         lastupdateby  = lastupdatebyin,
         lastupdate    = lastupdatein
   WHERE interfacecontrolid = interfacecontrolidin;
END upd_interfacecontrol;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_INTERFACECONTROLREC" (interfacenamein    interfacecontrol.interfacename%TYPE,
                                                    interfaceenabledin interfacecontrol.interfaceenabled%TYPE,
                                                    lastupdatebyin     interfacecontrol.lastupdateby%TYPE,
                                                    currentstatusin    interfacecontrol.currentstatus%TYPE) AS
  interfacecontrolid INTEGER;
  previousstatus     VARCHAR2(10);
  prevenabled        INTEGER;
BEGIN
  SELECT interfacecontrolid, currentstatus, interfaceenabled
    INTO interfacecontrolid, previousstatus, prevenabled
    FROM interfacecontrol
   WHERE interfacename = interfacenamein;

  IF previousstatus != currentstatusin OR prevenabled != interfaceenabledin THEN
    INSERT INTO interfacehistory
      (interfacecontrolid,
       statuschangeby,
       statuschangetime,
       currentstatus,
       currentenabled)
    VALUES
      (interfacecontrolid,
       lastupdatebyin,
       SYSDATE,
       currentstatusin,
       interfaceenabledin);
  END IF;

  UPDATE interfacecontrol
     SET lastupdateby     = lastupdatebyin,
         interfaceenabled = interfaceenabledin,
         lastupdate       = SYSDATE,
         currentstatus    = currentstatusin
   WHERE TRIM(interfacename) = TRIM(interfacenamein);
END upd_interfacecontrolrec;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_INTERFACEITEM" (
   interfacecontrolidin   interfaceitems.interfacecontrolid%TYPE,
   interfaceitemidin      interfaceitems.interfaceitemid%TYPE,
   itemenabledin          interfaceitems.itemenabled%TYPE,
   lastupdatebyin         interfaceitems.lastupdatedby%TYPE
)
AS
   prevstatus    VARCHAR2 (10);
   prevenabled   INTEGER;
   currstatus    VARCHAR2 (10);
BEGIN
   SELECT itemenabled
     INTO prevenabled
     FROM interfaceitems
    WHERE interfaceitemid = interfaceitemidin;

   IF prevenabled = 1
   THEN
      prevstatus := 'ENABLED';
   ELSE
      prevstatus := 'DISABLED';
   END IF;

   IF itemenabledin = 1
   THEN
      currstatus := 'ENABLED';
   ELSE
      currstatus := 'DISABLED';
   END IF;

   IF prevenabled != itemenabledin
   THEN
      INSERT INTO interfaceitemshistory
                  (interfacecontrolid, interfaceitemid, statuschangeby,
                   statuschangetime, currentstatus
                  )
           VALUES (interfacecontrolidin, interfaceitemidin, lastupdatebyin,
                   SYSDATE, currstatus
                  );
   END IF;

   UPDATE interfaceitems
      SET itemenabled = itemenabledin,
          lastupdatedby = lastupdatebyin,
          lastupdate = SYSDATE
    WHERE interfaceitemid = interfaceitemidin;
END upd_interfaceitem;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_JOAP" (
   joapcodein          joap.joapcode%TYPE,
   joapdescriptionin   joap.joapdescription%TYPE,
   landingin           joap.landing%TYPE,
   redcapstatusin      joap.redcapstatus%TYPE,
   defaultjoapin       joap.defaultjoap%TYPE,
   colorrulesidin      joap.colorrulesid%TYPE,
   joapidin            joap.joapid%TYPE
)
AS
BEGIN
   UPDATE joap
      SET joapcode = joapcodein,
          joapdescription = joapdescriptionin,
          landing = landingin,
          redcapstatus = redcapstatusin,
          defaultjoap = defaultjoapin,
          colorrulesid = colorrulesidin
    WHERE joapid = joapidin;
END upd_joap;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_LINK" (
   linktitlein         links.linktitle%TYPE,
   linkurlin           links.linkurl%TYPE,
   linkdescriptionin   links.linkdescription%TYPE,
   linkorderin         links.linkorder%TYPE,
   linkidin            links.linkid%TYPE
)
AS
BEGIN
   UPDATE links
      SET linktitle = linktitlein,
          linkurl = linkurlin,
          linkdescription = linkdescriptionin,
          linkorder = linkorderin,
          lastupdated = SYSDATE
    WHERE linkid = linkidin;
END upd_link;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_LOCATION" (
   locationcodein      locations.locationcode%TYPE,
   locationnamein      locations.locationname%TYPE,
   maxoccupancyin      locations.maximumoccupancy%TYPE,
   defaultlocationin   locations.defaultlocation%TYPE,
   elcin               locations.elc%TYPE,
   camsinitin          INTEGER,
   locationidin        locations.locationid%TYPE
)
AS
   locid   INTEGER;
BEGIN
   UPDATE locations
      SET locationcode = locationcodein,
          locationname = locationnamein,
          maximumoccupancy = maxoccupancyin,
          elc = elcin,
    lastupdate = SYSDATE
    WHERE locationid = locationidin;

   IF (defaultlocationin = 1)
   THEN
      IF (LENGTH (elcin) > 0)
      THEN
         UPDATE locations
            SET defaultlocation = 0
          WHERE locationid != locationidin AND elc = elcin;
      ELSE
         UPDATE locations
            SET defaultlocation = 0
          WHERE (LENGTH (elc) = 0 OR elc IS NULL)
                AND locationid != locationidin;
      END IF;

      UPDATE locations
         SET defaultlocation = 1
       WHERE locationid = locationidin;
   ELSE
      UPDATE locations
         SET defaultlocation = 0
       WHERE locationid = locationidin;
   END IF;

   IF (camsinitin = 1)
   THEN
      UPDATE locations
         SET camsinit = SYSDATE
       WHERE locationid = locationidin;
   END IF;
END upd_location;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_MAJCOM" (
   majcomin            majcoms.majcom%TYPE,
   majcomnarrativein   majcoms.majcomnarrative%TYPE,
   comidin             majcoms.comid%TYPE,
   comcodein           majcoms.comcode%TYPE,
   majcomidin          majcoms.majcomid%TYPE,
   lastupdatebyin      INTEGER
)
AS
BEGIN
   UPDATE majcoms
      SET majcom = majcomin,
          majcomnarrative = majcomnarrativein,
          comid = comidin,
          comcode = comcodein,
          lastupdate = SYSDATE,
          lastupdateby = lastupdatebyin
    WHERE majcomid = majcomidin;
END upd_majcom;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_MESSAGEOFTHEDAY" (
   messagein   messages.MESSAGE%TYPE,
   useridin    messages.lastupdateby%TYPE
)
AS
BEGIN
   UPDATE messages
      SET MESSAGE = messagein,
          lastupdate = SYSDATE,
          lastupdateby = useridin
    WHERE messages.messagetype = 'MOD';
END upd_messageoftheday;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_MISSION" (
   missionidin            missions.missionid%TYPE,
   missionin              missions.mission%TYPE,
   missiondescriptionin   missions.missiondescription%TYPE
)
AS
BEGIN
   UPDATE missions
      SET mission = missionin,
          missiondescription = missiondescriptionin
    WHERE missions.missionid = missionidin;
END upd_mission;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_MOC" (
   moctitlein       moc.moctitle%TYPE,
   isactivein       INTEGER,
   lastupdatebyin   INTEGER,
   mocidin          INTEGER
)
AS
BEGIN
   UPDATE moc
      SET moctitle = moctitlein,
          isactive = isactivein,
          lastupdated = SYSDATE
    WHERE mocid = mocidin;
END upd_moc;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_MOC_BROADCAST_MSG" (
   subjectin   messages.messagetitle%TYPE,
   messagein   messages.MESSAGE%TYPE,
   userin      messages.lastupdateby%TYPE,
   mocidin     messages.mocid%TYPE
)
AS
BEGIN
   UPDATE messages
      SET messagetitle = subjectin,
          MESSAGE = messagein,
          lastupdateby = userin,
          lastupdate = SYSDATE
    WHERE messagetype = 'EBM' AND mocid = mocidin;

   COMMIT;
END upd_moc_broadcast_msg;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_MOC_CAMSCONTROL" (interfaceenabledin interfacecontrol.interfaceenabled%TYPE,
                                                updatedbyin        interfacecontrol.lastupdateby%TYPE,
                                                interfacecontrolid OUT interfacecontrol.interfacecontrolid%TYPE,
                                                mocidin            interfacecontrol.mocid%TYPE) AS
  currentstatusin VARCHAR2(20);
BEGIN
  currentstatusin := 'DISABLED';

  SELECT interfacecontrolid
    INTO interfacecontrolid
    FROM interfacecontrol
   WHERE interfacename = 'CAMS'
     AND mocid = mocidin;

  IF interfaceenabledin = 1 THEN
    currentstatusin := 'ENABLED';
  END IF;

  UPDATE interfacecontrol
     SET interfaceenabled = interfaceenabledin,
         currentstatus    = currentstatusin,
         lastupdate       = SYSDATE,
         lastupdateby     = updatedbyin
   WHERE TRIM(interfacename) = 'CAMS'
     AND mocid = mocidin;
END upd_moc_camscontrol;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_MOC_EMOCCONFIGDATA" (
   mocidin            emocconfig.mocid%TYPE,
   timezonefactorin   emocconfig.timezonefactor%TYPE,
   timezonehoursin    emocconfig.timezonehours%TYPE,
   gmtfactorin        emocconfig.gmtfactor%TYPE,
   gmthoursin         emocconfig.gmthours%TYPE,
   versionin          emocconfig.VERSION%TYPE,
   basenamein         emocconfig.basename%TYPE,
   etictimerin        emocconfig.etictimer%TYPE,
   archivedomin       emocconfig.archivedom%TYPE,
   archivepurgemoin   emocconfig.archivepurgemo%TYPE,
   scheduledowin      emocconfig.scheduledow%TYPE,
   scheduletimein     emocconfig.scheduletime%TYPE,
   schedulepathin     emocconfig.schedulepath%TYPE,
   templatepathin     emocconfig.templatepath%TYPE,
   archivepathin      emocconfig.archivepath%TYPE,
   headercolorin      emocconfig.headercolor%TYPE,
   smtpserverin       emocconfig.smtpserver%TYPE,
   updatedbyin        emocconfig.lastupdatedby%TYPE,
   docspathin         emocconfig.docspath%TYPE,
   proxyurlin         emocconfig.proxyurl%TYPE,
   proxyuseridin      emocconfig.proxyuserid%TYPE,
   proxypasswordin    emocconfig.proxypassword%TYPE,
   proxyenabledin     emocconfig.proxyenabled%TYPE
)
AS
BEGIN
   UPDATE emocconfig
      SET timezonefactor = timezonefactorin,
          timezonehours = timezonehoursin,
          gmtfactor = gmtfactorin,
          gmthours = gmthoursin,
          VERSION = versionin,
          basename = basenamein,
          etictimer = etictimerin,
          archivedom = archivedomin,
          archivepurgemo = archivepurgemoin,
          scheduledow = scheduledowin,
          scheduletime = scheduletimein,
          schedulepath = schedulepathin,
          templatepath = templatepathin,
          archivepath = archivepathin,
          docspath = docspathin,
          headercolor = headercolorin,
          smtpserver = smtpserverin,
          lastupdatedby = updatedbyin,
          lastupdated = SYSDATE,
          proxyurl = proxyurlin,
          proxyuserid = proxyuseridin,
          proxyenabled = proxyenabledin
    WHERE mocid = mocidin;

   IF LENGTH (NVL (proxypasswordin, '')) > 0
   THEN
      UPDATE emocconfig
         SET proxypassword = emoc_security.encrypt (proxypasswordin)
       WHERE mocid = mocidin;
   END IF;
   
--Added 10/2/03 A.MitchelL
--update the job that pulls schedule from IMDS
--UPDATE_SCHEDULEDOW_JOB(SCHEDULEDOWIN, SCHEDULETIMEIN);
END upd_moc_emocconfigdata;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_MOC_EMOCHTML1" (
   mocidin       emocconfig.mocid%TYPE,
   emochtml1in   CLOB
)
AS
BEGIN
   UPDATE emocconfig
      SET emochtml1 = emochtml1in
    WHERE mocid = mocidin;
END upd_moc_emochtml1;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_MOC_ICONTROL" (interfacenamein    interfacecontrol.interfacename%TYPE,
                                             interfaceenabledin interfacecontrol.interfaceenabled%TYPE,
                                             updatedbyin        interfacecontrol.lastupdateby%TYPE,
                                             interfacecontrolid OUT interfacecontrol.interfacecontrolid%TYPE,
                                             mocidin            interfacecontrol.mocid%TYPE) AS
  currentstatusin VARCHAR2(20);
BEGIN
  currentstatusin := 'DISABLED';

  SELECT interfacecontrolid
    INTO interfacecontrolid
    FROM interfacecontrol
   WHERE UPPER(interfacename) = UPPER(interfacenamein)
     AND mocid = mocidin;

  IF interfaceenabledin = 1 THEN
    currentstatusin := 'ENABLED';
  END IF;

  UPDATE interfacecontrol
     SET interfaceenabled = interfaceenabledin,
         currentstatus    = currentstatusin,
         lastupdate       = SYSDATE,
         lastupdateby     = updatedbyin
   WHERE UPPER(interfacename) = UPPER(interfacenamein)
     AND mocid = mocidin;
END upd_moc_icontrol;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_MOC_INTERFACECONTROLREC" (interfacenamein    interfacecontrol.interfacename%TYPE,
                                                        interfaceenabledin interfacecontrol.interfaceenabled%TYPE,
                                                        lastupdatebyin     interfacecontrol.lastupdateby%TYPE,
                                                        currentstatusin    interfacecontrol.currentstatus%TYPE,
                                                        mocidin            interfacecontrol.mocid%TYPE) AS
  interfacecontrolid INTEGER;
  previousstatus     VARCHAR2(10);
  prevenabled        INTEGER;
BEGIN
  SELECT interfacecontrolid, currentstatus, interfaceenabled
    INTO interfacecontrolid, previousstatus, prevenabled
    FROM interfacecontrol
   WHERE interfacename = interfacenamein
     AND mocid = mocidin;

  IF previousstatus != currentstatusin OR prevenabled != interfaceenabledin THEN
    INSERT INTO interfacehistory
      (interfacecontrolid,
       statuschangeby,
       statuschangetime,
       currentstatus,
       currentenabled)
    VALUES
      (interfacecontrolid,
       lastupdatebyin,
       SYSDATE,
       currentstatusin,
       interfaceenabledin);
  END IF;

  UPDATE interfacecontrol
     SET lastupdateby     = lastupdatebyin,
         interfaceenabled = interfaceenabledin,
         lastupdate       = SYSDATE,
         currentstatus    = currentstatusin
   WHERE TRIM(interfacename) = TRIM(interfacenamein)
     AND mocid = mocidin;
END upd_moc_interfacecontrolrec;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_MOC_MESSAGEOFTHEDAY" (
   messagein   messages.MESSAGE%TYPE,
   useridin    messages.lastupdateby%TYPE,
   mocidin     messages.mocid%TYPE
)
AS
BEGIN
   UPDATE messages
      SET MESSAGE = messagein,
          lastupdate = SYSDATE,
          lastupdateby = useridin
    WHERE messages.messagetype = 'MOD' AND mocid = mocidin;
END upd_moc_messageoftheday;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_MOC_SECURITYMESSAGE" (
   messagein   messages.MESSAGE%TYPE,
   useridin    messages.lastupdateby%TYPE,
   mocidin     messages.mocid%TYPE
)
AS
BEGIN
   UPDATE messages
      SET MESSAGE = messagein,
          lastupdate = SYSDATE,
          lastupdateby = useridin
    WHERE messages.messagetype = 'SEC' AND mocid = mocidin;
END upd_moc_securitymessage;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_MOC_TBMCSCONTROL" (
   tbmcstimerin               emocconfig.tbmcstimer%TYPE,
   interfaceenabledin         interfacecontrol.interfaceenabled%TYPE,
   updatedbyin                interfacecontrol.lastupdateby%TYPE,
   interfacecontrolid   OUT   interfacecontrol.interfacecontrolid%TYPE,
   useridin                   interfacecontrol.interfaceuserid%TYPE,
   passwordin                 interfacecontrol.interfacepassword%TYPE,
   mocidin                    interfacecontrol.mocid%TYPE
)
AS
   currentstatusin   VARCHAR2 (20);
BEGIN
   currentstatusin := 'DISABLED';

   SELECT interfacecontrolid
     INTO interfacecontrolid
     FROM interfacecontrol
    WHERE interfacename = 'TBMCS-UL' AND mocid = mocidin;

   UPDATE emocconfig
      SET tbmcstimer = tbmcstimerin
    WHERE mocid = mocidin;

   IF interfaceenabledin = 1
   THEN
      currentstatusin := 'ENABLED';
   END IF;

   UPDATE interfacecontrol
      SET interfaceenabled = interfaceenabledin,
          currentstatus = currentstatusin,
          lastupdate = SYSDATE,
          lastupdateby = updatedbyin,
          interfaceuserid = useridin
    WHERE TRIM (interfacename) = 'TBMCS-UL' AND mocid = mocidin;

   IF LENGTH (NVL (passwordin, '')) > 0
   THEN
      UPDATE interfacecontrol
         SET interfacepassword = emoc_security.encrypt (passwordin)
       WHERE TRIM (interfacename) = 'TBMCS-UL' AND mocid = mocidin;
   END IF;
END upd_moc_tbmcscontrol;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_MOC_WING" (
   wingnamein          wings.wingname%TYPE,
   unitidin            wings.unitid%TYPE,
   commandcodein       wings.commandcode%TYPE,
   elcin               wings.elc%TYPE,
   defaultwingin       INTEGER,
   lastupdatebyin      INTEGER,
   wingidin            wings.wingid%TYPE,
   mocidin             wings.mocid%TYPE,
   scheduledowin       wings.scheduledow%TYPE,
   scheduletimein      wings.scheduletime%TYPE,
   timezonefactorin    wings.timezonefactor%TYPE,
   timezonehoursin     wings.timezonehours%TYPE,
   gmtfactorin         wings.gmtfactor%TYPE,
   gmthoursin          wings.gmthours%TYPE,
   imdsinterfaceonin   wings.imdsinterfaceon%TYPE
)
AS
   counter1     INTEGER;
   defaultval   INTEGER;
BEGIN
   defaultval := defaultwingin;

   IF defaultval = 0
   THEN
      SELECT COUNT (*)
        INTO counter1
        FROM wings
       WHERE defaultwing = 1 AND wingid != wingidin AND mocid = mocidin;

      IF counter1 = 0
      THEN
         defaultval := 1;
      END IF;
   END IF;

   UPDATE wings
      SET wingname = wingnamein,
          unitid = unitidin,
          commandcode = commandcodein,
          elc = elcin,
          defaultwing = defaultval,
          lastupdate = SYSDATE,
          scheduledow = scheduledowin,
          scheduletime = scheduletimein,
          timezonefactor = timezonefactorin,
          timezonehours = timezonehoursin,
          gmtfactor = gmtfactorin,
          gmthours = gmthoursin,
          imdsinterfaceon = imdsinterfaceonin
    WHERE wingid = wingidin;
END upd_moc_wing;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_ORDNANCE" (
   ordnanceidin      ordnance.ordnanceid%TYPE,
   ordnancein        ordnance.ordnance%TYPE,
   configurationin   ordnance.configuration%TYPE,
   weaponstypeidin   ordnance.weaponstypeid%TYPE
)
AS
BEGIN
   UPDATE ordnance
      SET ordnance = ordnancein,
          configuration = configurationin,
          weaponstypeid = weaponstypeidin
    WHERE ordnanceid = ordnanceidin;
END upd_ordnance;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_ORG" (
   orgnamein                 organizations.orgname%TYPE,
   orgidin                   organizations.orgid%TYPE,
   station_location_codein   organizations.station_location_code%TYPE,
   unit_idin                 organizations.unit_id%TYPE,
   wingidin                  organizations.wingid%TYPE,
   lastupdatebyin            organizations.lastupdateby%TYPE,
   organizationsidin         organizations.organizationsid%TYPE
)
AS
   tmporg   VARCHAR2 (10);
   tmpvar   NUMBER;
BEGIN
   SELECT TRIM (orgid)
     INTO tmporg
     FROM organizations
    WHERE organizationsid = organizationsidin;

   UPDATE organizations
      SET orgname = orgnamein,
          orgid = orgidin,
          station_location_code = station_location_codein,
          unit_id = unit_idin,
          lastupdateby = lastupdatebyin,
          lastupdate = SYSDATE,
          wingid = wingidin
    WHERE organizationsid = organizationsidin;

   COMMIT;

   IF (tmporg != orgidin)
   THEN
      UPDATE workcenters
         SET porgid = orgidin
       WHERE porgid = tmporg AND wingid = wingidin;

      COMMIT;
   END IF;
END upd_org;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_PERMISSION" (
   permissionidin   permissions.permissionid%TYPE,
   emocrolein       permissions.emocrole%TYPE
)
AS
BEGIN
   UPDATE permissions
      SET emocrole = emocrolein
    WHERE permissionid = permissionidin;
END upd_permission;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_RECORD_INTERFACELOGID" (
   tablein            VARCHAR2,
   fieldin            VARCHAR2,
   idin               NUMBER,
   interfacelogidin   interfacelog.interfacelogid%TYPE
)
AS
   sqlstatement   CLOB;
BEGIN
   sqlstatement := 'UPDATE ' || tablein;
   sqlstatement :=
                 sqlstatement || ' SET INTERFACELOGID = ' || interfacelogidin;
   sqlstatement := sqlstatement || ' WHERE ' || fieldin || ' = ' || idin;

   EXECUTE IMMEDIATE TO_CHAR (sqlstatement);

   COMMIT;
END upd_record_interfacelogid;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_SECURITYMESSAGE" (
   messagein   messages.MESSAGE%TYPE,
   useridin    messages.lastupdateby%TYPE
)
AS
BEGIN
   UPDATE messages
      SET MESSAGE = messagein,
          lastupdate = SYSDATE,
          lastupdateby = useridin
    WHERE messages.messagetype = 'SEC';
END upd_securitymessage;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_SEMEDX" (
   semedxin              semedx.semedx%TYPE,
   semedxdescriptionin   semedx.semedxdescription%TYPE,
   defaultvalin          semedx.defaultval%TYPE,
   colorrulesidin        semedx.colorrulesid%TYPE,
   semedxidin            semedx.semedxid%TYPE
)
AS
BEGIN
   UPDATE semedx
      SET semedx = semedxin,
          semedxdescription = semedxdescriptionin,
          defaultval = defaultvalin,
          colorrulesid = colorrulesidin
    WHERE semedxid = semedxidin;
END upd_semedx;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_SQUADRON" (
   squadronnamein      squadrons.squadronname%TYPE,
   shortnamein         squadrons.shortname%TYPE,
   wingidin            squadrons.wingid%TYPE,
   coloridin           squadrons.colorid%TYPE,
   organizationsidin   squadrons.organizationsid%TYPE,
   squadronidin        squadrons.squadronid%TYPE
)
AS
BEGIN
   UPDATE squadrons
      SET squadronname = squadronnamein,
          shortname = shortnamein,
          wingid = wingidin,
          colorid = coloridin,
          organizationsid = organizationsidin
    WHERE squadronid = squadronidin;
END upd_squadron;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_STATLOC" (
   stationlocin        stationloccodes.stationloc%TYPE,
   stalocnarrativein   stationloccodes.stalocnarrative%TYPE,
   staloccodeidin      stationloccodes.staloccodeid%TYPE,
   startdatein         stationloccodes.startdate%TYPE,
   stopdatein          stationloccodes.stopdate%TYPE
)
AS
BEGIN
   IF (staloccodeidin IS NOT NULL)
   THEN
      UPDATE stationloccodes
         SET stationloc = stationlocin,
             stalocnarrative = stalocnarrativein,
             startdate = startdatein,
             stopdate = stopdatein
       WHERE staloccodeid = staloccodeidin;
   END IF;
END upd_statloc;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_STATUSCODE" (
   statuscodein          statuscode.statuscode%TYPE,
   ordernumberin         statuscode.ordernumber%TYPE,
   iconnamein            statuscode.iconname%TYPE,
   defaultstatuscodein   statuscode.defaultstatuscode%TYPE,
   lastflownin           statuscode.lastflown%TYPE,
   flyingin              statuscode.flying%TYPE,
   takeoffin             statuscode.takeoff%TYPE,
   statuscodelabelin     statuscode.statuscodelabel%TYPE,
   allowsortieupdatein   statuscode.allowsortieupdate%TYPE,
   statuscodeidin        statuscode.statuscodeid%TYPE
)
AS
   counter1     INTEGER;
   defaultval   INTEGER;
BEGIN
   defaultval := defaultstatuscodein;

   IF defaultval = 0
   THEN
      SELECT COUNT (*)
        INTO counter1
        FROM statuscode
       WHERE defaultstatuscode = 1 AND statuscodeid != statuscodeidin;

      IF counter1 = 0
      THEN
         defaultval := 1;
      END IF;
   END IF;

   UPDATE statuscode
      SET statuscode = statuscodein,
          ordernumber = ordernumberin,
          iconname = iconnamein,
          defaultstatuscode = defaultval,
          lastflown = lastflownin,
          flying = flyingin,
          takeoff = takeoffin,
          statuscodelabel = statuscodelabelin,
          allowsortieupdate = allowsortieupdatein
    WHERE statuscodeid = statuscodeidin;
END upd_statuscode;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_STATUSRULE" (
   statruleidin      statustransitionrule.statruleid%TYPE,
   statuscodeidin    statustransitionrule.statuscodeid%TYPE,
   transition2idin   statustransitionrule.transition2id%TYPE
)
AS
BEGIN
   UPDATE statustransitionrule
      SET statuscodeid = statuscodeidin,
          transition2id = transition2idin
    WHERE statruleid = statruleidin;
END upd_statusrule;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_SYMBOL" (
   symbolidin            symbols.symbolid%TYPE,
   symbolin              symbols.symbol%TYPE,
   symboldescriptionin   symbols.symboldescription%TYPE,
   condcodeidin          symbols.condcodeid%TYPE
)
AS
BEGIN
   UPDATE symbols
      SET symbol = symbolin,
          symboldescription = symboldescriptionin,
          condcodeid = condcodeidin
    WHERE symbolid = symbolidin;
END upd_symbol;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_TBMCSCONTROL" (
   tbmcstimerin               emocconfig.tbmcstimer%TYPE,
   interfaceenabledin         interfacecontrol.interfaceenabled%TYPE,
   updatedbyin                interfacecontrol.lastupdateby%TYPE,
   interfacecontrolid   OUT   interfacecontrol.interfacecontrolid%TYPE,
   useridin                   interfacecontrol.interfaceuserid%TYPE,
   passwordin                 interfacecontrol.interfacepassword%TYPE
)
AS
   currentstatusin   VARCHAR2 (20);
BEGIN
   currentstatusin := 'DISABLED';

   SELECT interfacecontrolid
     INTO interfacecontrolid
     FROM interfacecontrol
    WHERE interfacename = 'TBMCS-UL';

   UPDATE emocconfig
      SET tbmcstimer = tbmcstimerin
    WHERE emocconfigid = 0;

   IF interfaceenabledin = 1
   THEN
      currentstatusin := 'ENABLED';
   END IF;

   UPDATE interfacecontrol
      SET interfaceenabled = interfaceenabledin,
          currentstatus = currentstatusin,
          lastupdate = SYSDATE,
          lastupdateby = updatedbyin,
          interfaceuserid = useridin,
          interfacepassword = emoc_security.encrypt(passwordin)
    WHERE TRIM (interfacename) = 'TBMCS-UL';
END upd_tbmcscontrol;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_USER" (useridin         users.userid%TYPE,
                                       usernamein       users.username%TYPE,
                                       fullnamein       users.fullname%TYPE,
                                       emailin          users.email%TYPE,
                                       rankidin         users.rankcode%TYPE,
                                       datepreferencein users.datepreference%TYPE,
                                       timepreferencein users.timepreference%TYPE,
                                       aircraftperrowin users.aircraftperrow%TYPE,
                                       refreshprefin    users.refreshpref%TYPE) AS
BEGIN
  UPDATE users
     SET username       = usernamein,
         fullname       = fullnamein,
         email          = emailin,
         rankcode       = rankidin,
         datepreference = datepreferencein,
         timepreference = timepreferencein,
         aircraftperrow = aircraftperrowin,
         refreshpref    = refreshprefin
   WHERE userid = useridin;
END upd_user;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_USERPASSWORD" (
   useridin     users.userid%TYPE,
   passwordin   users.userpassword%TYPE
)
AS
BEGIN
   UPDATE users
      SET userpassword = passwordin
    WHERE userid = useridin;
END upd_userpassword;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_USERSTATUS" (
   useridin        users.userid%TYPE,
   userstatusin    users.userstatus%TYPE,
   emocadminin     users.emocadmin%TYPE,
   badattemptsin   users.badattempts%TYPE
)
AS
BEGIN
   UPDATE users
      SET userstatus = userstatusin,
          emocadmin = emocadminin,
          badattempts = badattemptsin
    WHERE userid = useridin;
END upd_userstatus;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_WDC" (
   wdcin                whendiscoveredcodes.wdc%TYPE,
   wdcnarrativein       whendiscoveredcodes.wdcnarrative%TYPE,
   startdatein          whendiscoveredcodes.startdate%TYPE,
   stopdatein           whendiscoveredcodes.stopdate%TYPE,
   whendiscoveredidin   whendiscoveredcodes.whendiscoveredid%TYPE
)
AS
BEGIN
   UPDATE whendiscoveredcodes
      SET wdc = wdcin,
          wdcnarrative = wdcnarrativein,
          startdate = startdatein,
          stopdate = stopdatein,
    lastupdate = SYSDATE
    WHERE whendiscoveredid = whendiscoveredidin;
END upd_wdc;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_WING" (
   wingnamein       wings.wingname%TYPE,
   unitidin         wings.unitid%TYPE,
   commandcodein    wings.commandcode%TYPE,
   elcin            wings.elc%TYPE,
   defaultwingin    INTEGER,
   lastupdatebyin   INTEGER,
   wingidin         wings.wingid%TYPE
)
AS
   counter1     INTEGER;
   defaultval   INTEGER;
BEGIN
   defaultval := defaultwingin;

   IF defaultval = 0
   THEN
      SELECT COUNT (*)
        INTO counter1
        FROM wings
       WHERE defaultwing = 1 AND wingid != wingidin;

      IF counter1 = 0
      THEN
         defaultval := 1;
      END IF;
   END IF;

   UPDATE wings
      SET wingname = wingnamein,
          unitid = unitidin,
          commandcode = commandcodein,
          elc = elcin,
          defaultwing = defaultval,
          lastupdate = SYSDATE
    WHERE wingid = wingidin;
END upd_wing;

 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_WORKCENTER" (
   workcenternamein   workcenters.workcentername%TYPE,
   workcentercodein   workcenters.workcentercode%TYPE,
   lastupdatebyin     INTEGER,
   workcenteridin     workcenters.workcenterid%TYPE,
   porgidin           workcenters.porgid%TYPE
)
AS
BEGIN
   UPDATE workcenters
      SET workcentername = workcenternamein,
          workcentercode = workcentercodein,
          lastupdateby = lastupdatebyin,
          lastupdate = SYSDATE,
          porgid = porgidin
    WHERE workcenterid = workcenteridin;
END upd_workcenter;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPD_WUC" (
   wuccodein          wuc.wuccode%TYPE,
   wucdescriptionin   wuc.wucdescription%TYPE,
   wucstartdatein     wuc.wucstartdate%TYPE,
   wucstopdatein      wuc.wucstopdate%TYPE,
   lastupdatebyin     wuc.lastupdateby%TYPE,
   wucidin            wuc.wucid%TYPE
)
AS
BEGIN
   UPDATE wuc
      SET wuccode = wuccodein,
          wucdescription = wucdescriptionin,
          wucstartdate = wucstartdatein,
          wucstopdate = wucstopdatein,
          lastupdateby = lastupdatebyin,
          lastupdate = SYSDATE
    WHERE wucid = wucidin;
END upd_wuc;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."UPLOADSCHEDULE" (
      p_schedule        schedulescsv.schedule%TYPE,
      p_title            schedulescsv.schedulename%TYPE,
      p_mocid            schedulescsv.mocid%TYPE
   )
IS
  schedulein   INTEGER;

BEGIN
   SELECT seq_schedulecsv.NEXTVAL
     INTO schedulein
     FROM DUAL;
      INSERT INTO schedulescsv
                  (schedulecsvid, schedule, schedulename, mocid, dateuploaded)
           VALUES (schedulein, p_schedule, p_title, p_mocid, SYSDATE);
END UPLOADSCHEDULE;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."WORKCENTERCHANGETRX" (
   elcin                      wings.elc%TYPE,
   unitidin                   wings.unitid%TYPE,
   workcenterin               workcenters.workcentercode%TYPE,
   newworkcenterin            workcenters.workcentercode%TYPE,
   workcenternarrativein      workcenters.workcentername%TYPE,
   organizationidin           workcenters.porgid%TYPE,
   hostunitdateandtimein      VARCHAR,
   transactionordinaldatein   VARCHAR
)
AS
   mocvar            NUMBER;
   wingvar           NUMBER;
   workcenteridvar   NUMBER;
BEGIN
   INSERT INTO workcentertrx
               (workcentertrxid, enterpriselocationcode, unitid, workcenter,
                workcenternarrative, organizationid, newworkcenter,
                hostunitdateandtime, transactionordinaldate,
                transactiontype, dateprocessed
               )
        VALUES (seq_workcentertrx.NEXTVAL, elcin, unitidin, workcenterin,
                workcenternarrativein, organizationidin, newworkcenterin,
                hostunitdateandtimein, transactionordinaldatein,
                'WorkcenterChange', SYSDATE
               );

   COMMIT;

   IF (LENGTH (workcenterin) > 0)
   THEN
      /* GET MOCID for gathering code ids */
      get_mocid_by_elcunitid (elcin, unitidin, mocvar);

      IF (mocvar IS NOT NULL)
      THEN
         /* GET WINGID from wings table using elc and unitid */
         get_wingid_by_elcunitid (elcin, unitidin, wingvar);

         IF (wingvar IS NOT NULL)
         THEN
            SELECT workcenterid
              INTO workcenteridvar
              FROM (SELECT workcenterid
                      FROM workcenters
                     WHERE workcentercode = workcenterin
                       AND mocid = mocvar
                       AND wingid = wingvar
                       AND ROWNUM < 2);

            IF (workcenteridvar IS NOT NULL)
            THEN
               IF (organizationidin IS NOT NULL)
               THEN
                  UPDATE workcenters
                     SET porgid = organizationidin,
                         lastupdate = SYSDATE
                   WHERE workcenterid = workcenteridvar;

                  COMMIT;
               END IF;

               IF (newworkcenterin IS NOT NULL)
               THEN
                  UPDATE workcenters
                     SET workcentercode = newworkcenterin,
                         lastupdate = SYSDATE
                   WHERE workcenterid = workcenteridvar;

                  COMMIT;
               END IF;

               IF (workcenternarrativein IS NOT NULL)
               THEN
                  UPDATE workcenters
                     SET workcentername = workcenternarrativein,
                         lastupdate = SYSDATE
                   WHERE workcenterid = workcenteridvar;

                  COMMIT;
               END IF;
            END IF;
         END IF;
      END IF;
   END IF;
END workcenterchangetrx;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."WORKCENTERDELETETRX" (
   elcin                      wings.elc%TYPE,
   unitidin                   wings.unitid%TYPE,
   workcenterin               workcenters.workcentercode%TYPE,
   hostunitdateandtimein      VARCHAR2,
   transactionordinaldatein   VARCHAR2
)
AS
   mocvar    NUMBER;
   wingvar   NUMBER;
   wcrid     NUMBER;
   tmpvar    NUMBER;
BEGIN
   INSERT INTO workcentertrx
               (workcentertrxid, enterpriselocationcode, unitid, workcenter,
                hostunitdateandtime, transactionordinaldate,
                transactiontype, dateprocessed
               )
        VALUES (seq_workcentertrx.NEXTVAL, elcin, unitidin, workcenterin,
                hostunitdateandtimein, transactionordinaldatein,
                'WorkcenterDelete', SYSDATE
               );

   COMMIT;

   IF (LENGTH (workcenterin) > 0)
   THEN
      /* GET MOCID for gathering code ids */
      get_mocid_by_elcunitid (elcin, unitidin, mocvar);

      IF (mocvar IS NOT NULL)
      THEN
         /* GET WINGID from wings table using elc and unitid */
         get_wingid_by_elcunitid (elcin, unitidin, wingvar);

         SELECT COUNT (*)
           INTO tmpvar
           FROM workcenters
          WHERE workcentercode = workcenterin
            AND wingid = wingvar
            AND mocid = mocvar;

         IF (tmpvar > 0)
         THEN
            SELECT workcenterid
              INTO wcrid
              FROM workcenters
             WHERE workcentercode = workcenterin
               AND wingid = wingvar
               AND mocid = mocvar;

            IF (wcrid IS NOT NULL)
            THEN
               UPDATE flights
                  SET workcenterid = NULL
                WHERE workcenterid = wcrid;

               COMMIT;

               DELETE      workcenters
                     WHERE workcenterid = wcrid;

               COMMIT;
            END IF;
         END IF;
      END IF;
   END IF;
END workcenterdeletetrx;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."WORKCENTERLOAD" (
   elcin                      wings.elc%TYPE,
   unitidin                   wings.unitid%TYPE,
   workcenterin               workcenters.workcentercode%TYPE,
   organizationidin           workcenters.porgid%TYPE,
   workcenternarrativein      workcenters.workcentername%TYPE,
   hostunitdateandtimein      VARCHAR,
   transactionordinaldatein   VARCHAR,
   importtype                 VARCHAR
)
AS
   mocvar    NUMBER;
   wingvar   NUMBER;
   tmpvar    NUMBER;
BEGIN
   tmpvar := 0;

   INSERT INTO workcentertrx
               (workcentertrxid, enterpriselocationcode, unitid, workcenter,
                workcenternarrative, organizationid,
                hostunitdateandtime, transactionordinaldate,
                transactiontype, dateprocessed
               )
        VALUES (seq_workcentertrx.NEXTVAL, elcin, unitidin, workcenterin,
                workcenternarrativein, organizationidin,
                hostunitdateandtimein, transactionordinaldatein,
                importtype, SYSDATE
               );

   COMMIT;

   IF (LENGTH (workcenterin) > 0)
   THEN
      /* GET MOCID for gathering code ids */
      get_mocid_by_elcunitid (elcin, unitidin, mocvar);

      IF (mocvar IS NOT NULL)
      THEN
         /* GET WINGID from wings table using elc and unitid */
         get_wingid_by_elcunitid (elcin, unitidin, wingvar);

         SELECT COUNT (*)
           INTO tmpvar
           FROM workcenters
          WHERE workcentercode = workcenterin
            AND mocid = mocvar
            AND wingid = wingvar;

         IF (tmpvar = 0)
         THEN
            INSERT INTO workcenters
                        (workcenterid, workcentercode,
                         workcentername, porgid, unit_id,
                         wingid, mocid, lastupdate, camsinit
                        )
                 VALUES (seq_workcenters.NEXTVAL, workcenterin,
                         workcenternarrativein, organizationidin, unitidin,
                         wingvar, mocvar, SYSDATE, SYSDATE
                        );
         END IF;
      END IF;
   END IF;
END workcenterload;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE         "EMOC3"."WORKCENTERLOADTRX" (
   elcin                      wings.elc%TYPE,
   unitidin                   wings.unitid%TYPE,
   workcenterin               workcenters.workcentercode%TYPE,
   organizationidin           workcenters.porgid%TYPE,
   workcenternarrativein      workcenters.workcentername%TYPE,
   hostunitdateandtimein      VARCHAR,
   transactionordinaldatein   VARCHAR,
   importtype                 VARCHAR
)
AS
   mocidin    NUMBER;
   wingidin   NUMBER;
   tmpvar     NUMBER;
BEGIN
   tmpvar := 0;

   INSERT INTO workcentertrx
               (workcentertrxid, enterpriselocationcode, unitid, workcenter,
                workcenternarrative, organizationid,
                hostunitdateandtime, transactionordinaldate,
                transactiontype, dateprocessed
               )
        VALUES (seq_workcentertrx.NEXTVAL, elcin, unitidin, workcenterin,
                workcenternarrativein, organizationidin,
                hostunitdateandtimein, transactionordinaldatein,
                importtype, SYSDATE
               );

   COMMIT;

   IF (LENGTH (workcenterin) > 0)
   THEN
      get_mocid_by_elcunitid (elcin, unitidin, mocidin);

      IF (mocidin IS NOT NULL)
      THEN
         get_wingid_by_elcunitid (elcin, unitidin, wingidin);

         SELECT COUNT (*)
           INTO tmpvar
           FROM workcenters
          WHERE workcentercode = workcenterin
            AND mocid = mocidin
            AND wingid = wingidin;

         IF (tmpvar = 0)
         THEN
            INSERT INTO workcenters
                        (workcenterid, workcentercode,
                         workcentername, porgid, unit_id,
                         wingid, mocid, lastupdate, camsinit
                        )
                 VALUES (seq_workcenters.NEXTVAL, workcenterin,
                         workcenternarrativein, organizationidin, unitidin,
                         wingidin, mocidin, SYSDATE, SYSDATE
                        );
         END IF;
      END IF;
   END IF;
END workcenterloadtrx;
 
 
 
 
 
 
 
 ;

CREATE PROCEDURE       "EMOC3"."CURCUSTOMDATAREPORT" (
   p_cursor   OUT   emoc_types.emoc_cursor,
   vmocid            NUMBER
)
AS
BEGIN
-- RETURN THE CURSOR FOR THE RECORDSET
   OPEN p_cursor FOR
      SELECT   customdata.customdatalabel AS cdlabel,
               customdata.customdatadescription AS description,
               customdata.customdatatype cdtype,
               customdata.customdatawidth cdwidth,
               customdata.bgcolorvalue bgcolor,
               (SELECT DISTINCT colorname
                           FROM colors
                          WHERE colorvalue = bgcolorvalue) AS colorname,
               customdata.fontcolor, aircraftmds.aircraftmds AS mds,
               aircraftmds.blocknumber AS mdsblock, aircraft.tailnumber,
               (TRIM (aircraft.aircraftyear) || aircraft.tailnumber
               ) AS yrtail,
               aircraft.misequipid AS equipid,
               squadrons.squadronname AS squadron,
               aircraftcustomdata.datavalue, aircraftcustomdata.lastupdated,
               (SELECT fullname
                  FROM users
                 WHERE userid = aircraftcustomdata.lastupdateby) AS updateby,
               wings.wingname AS wing
          FROM customdata LEFT OUTER JOIN customdatamds ON customdata.customdataid =
                                                             customdatamds.customdataid
               LEFT OUTER JOIN aircraftcustomdata ON customdata.customdataid =
                                                       aircraftcustomdata.customdataid
               LEFT OUTER JOIN aircraftmds ON aircraftmds.aircraftmdsid =
                                                  customdatamds.aircraftmdsid
               LEFT OUTER JOIN aircraft ON aircraft.aircraftid =
                                                aircraftcustomdata.aircraftid
               INNER JOIN squadrons ON squadrons.squadronid =
                                                          aircraft.squadronid
               INNER JOIN wings ON wings.wingid = squadrons.wingid
         WHERE (    aircraftcustomdata.aircraftid = aircraft.aircraftid
                AND aircraft.aircraftmdsid = aircraftmds.aircraftmdsid
               )
           AND customdata.mocid = vmocid
      ORDER BY customdatalabel, mds, mdsblock, yrtail;
END curcustomdatareport;

CREATE PROCEDURE       "EMOC3"."GET_DROPDOWN_LISTS" (
   areas                   OUT   emoc_types.emoc_cursor,
   pilots                  OUT   emoc_types.emoc_cursor,
   ranges                  OUT   emoc_types.emoc_cursor,
   aircraft                OUT   emoc_types.emoc_cursor,
   squadrons               OUT   emoc_types.emoc_cursor,
   deviationcodes          OUT   emoc_types.emoc_cursor,
   locations               OUT   emoc_types.emoc_cursor,
   causecodes              OUT   emoc_types.emoc_cursor,
   missions                OUT   emoc_types.emoc_cursor,
   fuelstatus              OUT   emoc_types.emoc_cursor,
   landingcodes            OUT   emoc_types.emoc_cursor,
   weathercodes            OUT   emoc_types.emoc_cursor,
   statuscodes             OUT   emoc_types.emoc_cursor,
   colors                  OUT   emoc_types.emoc_cursor,
   ranks                   OUT   emoc_types.emoc_cursor,
   wings                   OUT   emoc_types.emoc_cursor,
   aircraftmds             OUT   emoc_types.emoc_cursor,
   statustransitionrules   OUT   emoc_types.emoc_cursor,
   flights                 OUT   emoc_types.emoc_cursor,
   permissions             OUT   emoc_types.emoc_cursor,
   squadron_sort_order     OUT   emoc_types.emoc_cursor
)
/******************************************************************************
   NAME:       GET_DROPDOWN_LISTS
   PURPOSE:    Returns data used in lists for the specified squadron.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        5/28/03      A.Mitchell       1. Created this procedure.

   PARAMETERS:
   INPUT:
   OUTPUT:
   *AREAS
   *PILOTS
   *RANGES
   *AIRCRAFT
   *SQUADRONS
   *LOCATIONS
   *DEVIATIONCODES
   *CAUSECODES
   *MISSIONS
   *FUELSTATUS
   *LANDINGCODES
   *WEATHERCODE
   *STATUSCODES
   *COLORS
   *RANKS
   *WINGS
   *AIRCRAFTMDS
   *STATUSTRANSITIONRULES
   *FLIGHTS
   RETURNED VALUE:
   CALLED BY:
   CALLS:
   EXAMPLE USE:
   ASSUMPTIONS:
   LIMITATIONS:
   ALGORITHM:
   NOTES:

******************************************************************************/
AS
BEGIN
   --Must keep ID fields first
   OPEN areas FOR
      SELECT   areaid, area
          FROM areas
      ORDER BY area;

   OPEN pilots FOR
      SELECT   pilotid, pilotname, pilot.squadronid, wingid
          FROM pilot JOIN squadrons ON pilot.squadronid =
                                                         squadrons.squadronid
      ORDER BY pilotname;

   OPEN ranges FOR
      SELECT   rangeid, RANGE
          FROM ranges
      ORDER BY RANGE;

   OPEN aircraft FOR
      SELECT   aircraftid, shorttailnumber, tailnumber, squadrons.squadronid,
               wingid, conditioncodeid, aircraftmds.aircraftmdsid, aircraftyear,
               aircraftmds, acftmdstypecd, misequipid
          FROM aircraft JOIN squadrons ON aircraft.squadronid =
                                                         squadrons.squadronid
               JOIN aircraftmds ON aircraft.aircraftmdsid =
                                                    aircraftmds.aircraftmdsid
      ORDER BY shorttailnumber;

OPEN squadrons FOR
      SELECT   squadronid, squadronname, colorvalue, wingid, colorname,
               shortname, fontcolor
          FROM squadrons LEFT JOIN colors ON squadrons.colorid =
                                                               colors.colorid
      ORDER BY squadronname;

   OPEN deviationcodes FOR
      SELECT   deviationcodeid, deviationcode, deviationdescription,
               colorvalue, defaultdeviationcode
          FROM deviationcodes LEFT JOIN colors ON deviationcodes.colorid =
                                                               colors.colorid
      ORDER BY deviationcode;

   OPEN locations FOR
      SELECT   locationid, locationcode, locationname, defaultlocation, elc
          FROM locations
      ORDER BY locationcode;

   OPEN causecodes FOR
      SELECT   causecodeid, causecode, description, defaultcausecode,
               causecodetype
          FROM causecodes
      ORDER BY causecode;

   OPEN missions FOR
      SELECT   missionid, mission, missiondescription
          FROM missions
      ORDER BY mission;

   OPEN fuelstatus FOR
      SELECT   fuelstatusid, fuelstatus, fueldescription, defaultfuel,
               colorid, landing, fuelstatuslabel, allowsortieupdate, mocid
          FROM fuel
      ORDER BY defaultfuel DESC, fuelstatusid;

   OPEN landingcodes FOR
      SELECT   landingcodeid, landingcode, landingcodedescription,
               writeupneeded
          FROM landingcodes
      ORDER BY landingcode;

   OPEN weathercodes FOR
      SELECT   wxcodeid, weathercode, weatherdescription, defaultweathercode
          FROM wx
      ORDER BY defaultweathercode DESC, weathercode;

   OPEN statuscodes FOR
      SELECT   statuscodeid, statuscode, defaultstatuscode, iconname,
               ordernumber, takeoff, flying, statuscodelabel,
               allowsortieupdate, lastflown, mocid
          FROM statuscode
      ORDER BY ordernumber;

   OPEN colors FOR
      SELECT   colorid, colorname, colorvalue
          FROM colors
      ORDER BY colorname;

   OPEN ranks FOR
      SELECT   rankid, rankcode, rankdescription, defaultrank
          FROM ranks
      ORDER BY rankcode;

   OPEN wings FOR
      SELECT   wingid, wingname, unitid, commandcode, defaultwing
          FROM wings
      ORDER BY wingname;

   OPEN aircraftmds FOR
      SELECT   aircraftmdsid, aircraftmds, numberofstations, numberofengines,
               timebetweenphase, defaultaircrafttype, acftmdstypecd
          FROM aircraftmds
      ORDER BY aircraftmds;

   OPEN statustransitionrules FOR
      SELECT   str.statuscodeid, str.transition2id
          FROM statustransitionrule str, statuscode sc
         WHERE str.statuscodeid = sc.statuscodeid
               AND sc.allowsortieupdate = 1
      ORDER BY sc.ordernumber;

   OPEN flights FOR
      SELECT   flightid, flightname, squadrons.squadronid, workcenters.workcenterid,
               shortname, workcentercode
          FROM emoc3.flights JOIN emoc3.squadrons ON flights.squadronid =
                                                         squadrons.squadronid
               JOIN emoc3.workcenters ON flights.workcenterid =
                                                     workcenters.workcenterid
      ORDER BY flightname;

  OPEN permissions FOR
      SELECT   permissionid, squadronid, userid, emocrole
          FROM permissions
      ORDER BY squadronid;

   OPEN squadron_sort_order FOR
      SELECT   userid, squadrons.squadronid, sortorder, squadronname,
               shortname, colorvalue, wingid, colorname, fontcolor
          FROM squadron_sort_order JOIN squadrons ON squadron_sort_order.squadronid =
                                                         squadrons.squadronid
               LEFT JOIN colors ON squadrons.colorid = colors.colorid
      ORDER BY wingid, sortorder;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      NULL;
END get_dropdown_lists;

CREATE PROCEDURE       "EMOC3"."GET_MOC_DROPDOWN_LISTS"  (
   areas                   OUT   emoc_types.emoc_cursor,
   pilots                  OUT   emoc_types.emoc_cursor,
   ranges                  OUT   emoc_types.emoc_cursor,
   aircraft                OUT   emoc_types.emoc_cursor,
   squadrons               OUT   emoc_types.emoc_cursor,
   deviationcodes          OUT   emoc_types.emoc_cursor,
   locations               OUT   emoc_types.emoc_cursor,
   causecodes              OUT   emoc_types.emoc_cursor,
   missions                OUT   emoc_types.emoc_cursor,
   fuelstatus              OUT   emoc_types.emoc_cursor,
   landingcodes            OUT   emoc_types.emoc_cursor,
   weathercodes            OUT   emoc_types.emoc_cursor,
   statuscodes             OUT   emoc_types.emoc_cursor,
   colors                  OUT   emoc_types.emoc_cursor,
   ranks                   OUT   emoc_types.emoc_cursor,
   wings                   OUT   emoc_types.emoc_cursor,
   aircraftmds             OUT   emoc_types.emoc_cursor,
   statustransitionrules   OUT   emoc_types.emoc_cursor,
   flights                 OUT   emoc_types.emoc_cursor,
   permissions             OUT   emoc_types.emoc_cursor,
   squadron_sort_order     OUT   emoc_types.emoc_cursor
)
AS
BEGIN
   --Must keep ID fields first
   OPEN areas FOR
      SELECT   areaid, area, mocid
          FROM areas
      ORDER BY area;

   OPEN pilots FOR
      SELECT   pilotid, pilotname, pilot.squadronid, wingid, pilot.mocid
          FROM pilot JOIN squadrons ON pilot.squadronid =
                                                         squadrons.squadronid
      ORDER BY pilotname;

   OPEN ranges FOR
      SELECT   rangeid, RANGE, mocid
          FROM ranges
      ORDER BY RANGE;

   OPEN aircraft FOR

SELECT   aircraftid, shorttailnumber, tailnumber, squadrons.squadronid,
               wingid, conditioncodeid, aircraft.aircraftmdsid, aircraftyear,
               aircraftmds, acftmdstypecd, misequipid, aircraft.mocid
          FROM emoc3.aircraft JOIN emoc3.squadrons ON aircraft.squadronid =
                                                         squadrons.squadronid
               JOIN emoc3.aircraftmds ON aircraft.aircraftmdsid =
                                                    aircraftmds.aircraftmdsid
      ORDER BY shorttailnumber;
OPEN squadrons FOR
      SELECT   squadronid, squadronname, colorvalue, wingid, colorname,
               shortname, fontcolor, squadrons.mocid
          FROM squadrons LEFT JOIN colors ON squadrons.colorid =
                                                               colors.colorid
      ORDER BY squadronname;

   OPEN deviationcodes FOR
      SELECT   deviationcodeid, deviationcode, deviationdescription,
               colorvalue, defaultdeviationcode, deviationcodes.mocid
          FROM deviationcodes LEFT JOIN colors ON deviationcodes.colorid =
                                                               colors.colorid
      ORDER BY deviationcode;

   OPEN locations FOR
      SELECT   locationid, locationcode, locationname, defaultlocation, mocid
          FROM locations
      ORDER BY locationcode;

   OPEN causecodes FOR
      SELECT   causecodeid, causecode, description, defaultcausecode, mocid
          FROM causecodes
      ORDER BY causecode;

   OPEN missions FOR
      SELECT   missionid, mission, missiondescription, mocid
          FROM missions
      ORDER BY mission;

   OPEN fuelstatus FOR
      SELECT   fuelstatusid, fuelstatus, fueldescription, defaultfuel,
               colorid, landing, fuelstatuslabel, allowsortieupdate, mocid
          FROM fuel
      ORDER BY defaultfuel DESC, fuelstatusid;

   OPEN landingcodes FOR
      SELECT   landingcodeid, landingcode, landingcodedescription,
               writeupneeded, mocid
          FROM landingcodes
      ORDER BY landingcode;

   OPEN weathercodes FOR
      SELECT   wxcodeid, weathercode, weatherdescription, defaultweathercode, mocid
          FROM wx
      ORDER BY defaultweathercode DESC, weathercode;

   OPEN statuscodes FOR
      SELECT   statuscodeid, statuscode, defaultstatuscode, iconname,
               ordernumber, takeoff, flying, statuscodelabel,
               allowsortieupdate, lastflown, mocid
          FROM statuscode
      ORDER BY ordernumber;

   OPEN colors FOR
      SELECT   colorid, colorname, colorvalue, mocid
          FROM colors
      ORDER BY colorname;

   OPEN ranks FOR
      SELECT   rankid, rankcode, rankdescription, defaultrank, mocid
          FROM ranks
      ORDER BY rankcode;

   OPEN wings FOR
      SELECT   wingid, wingname, unitid, commandcode, defaultwing, mocid
          FROM wings
      ORDER BY wingname;

   OPEN aircraftmds FOR
      SELECT   aircraftmdsid, aircraftmds, numberofstations, numberofengines,
               timebetweenphase, defaultaircrafttype, acftmdstypecd, mocid
          FROM aircraftmds
      ORDER BY aircraftmds;

   OPEN statustransitionrules FOR
      SELECT   str.statuscodeid, str.transition2id, str.mocid
          FROM statustransitionrule str, statuscode sc
         WHERE str.statuscodeid = sc.statuscodeid
           AND sc.allowsortieupdate = 1
      ORDER BY sc.ordernumber;

   OPEN flights FOR
      SELECT   flightid, flightname, squadrons.squadronid, flights.workcenterid,
               shortname, workcentercode, squadrons.mocid
          FROM flights JOIN squadrons ON flights.squadronid =
                                                          squadrons.squadronid
               JOIN workcenters ON flights.workcenterid =
                                                      workcenters.workcenterid
      ORDER BY flightname;

   OPEN permissions FOR
      SELECT   permissionid, permissions.squadronid, userid, emocrole, squadrons.mocid
          FROM permissions JOIN squadrons ON permissions.squadronid =
                                                          squadrons.squadronid
      ORDER BY squadronid;

   OPEN squadron_sort_order FOR
      SELECT   userid, squadrons.squadronid, sortorder, squadronname,
               shortname, colorvalue, wingid, colorname, fontcolor, squadrons.mocid
          FROM squadron_sort_order JOIN squadrons ON squadron_sort_order.squadronid =
                                                          squadrons.squadronid
               LEFT JOIN colors ON squadrons.colorid = colors.colorid
      ORDER BY wingid, sortorder;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
   WHEN OTHERS
   THEN
      NULL;
END get_moc_dropdown_lists;

CREATE PROCEDURE       "EMOC3"."INSERTAIRCRAFTEXTRACTTRX" (
   p_fromelc                     VARCHAR2,
   p_fromunitid                  VARCHAR2,
   p_equipmentid                 VARCHAR2,
   p_mds                         VARCHAR2,
   p_mdsblock                    VARCHAR2,
   p_serialnumber                VARCHAR2,
   p_maintenancestatuscode       VARCHAR2,
   p_conditionstatuscode         VARCHAR2,
   p_startdate                   VARCHAR2,
   p_starttime                   VARCHAR2,
   p_workunitcode                VARCHAR2,
   p_jobcontrolnumber            VARCHAR2,
   p_estimatedtimeincommission   VARCHAR2,
   p_statusnarrative             VARCHAR2,
   p_locationcode                VARCHAR2,
   p_priority                    VARCHAR2,
   p_armed                       VARCHAR2,
   p_multiconfigid               VARCHAR2,
   p_localoption                 VARCHAR2,
   p_possessionid                VARCHAR2,
   p_geoloccode                  VARCHAR2,
   p_owningmajcom                VARCHAR2,
   p_lastflydate                 VARCHAR2,
   p_dedicatedcrewchief          VARCHAR2,
   p_owningworkcenter            VARCHAR2,
   p_equiporgflightid            VARCHAR2,
   p_assignmentstatuscode        VARCHAR2
)
AS
   tmpvar      NUMBER;
   mocidvar    NUMBER;
   wingidvar   NUMBER;
   wcidvar     NUMBER;
   porgidvar   VARCHAR2 (4);
   sqidvar     NUMBER;
   mdsidvar    NUMBER;
   acidvar     NUMBER;
   wcnamevar   VARCHAR2 (50);
   condidvar   NUMBER;
   condstat    VARCHAR (5);
/******************************************************************************
   NAME:       InsertAircraftExtractTrx
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/26/2006  r mcbride        1. Created this procedure.
   1.1        02/04/2011  FE               1. Fix for QC 393
   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     InsertAircraftExtractTrx
      Sysdate:         12/26/2006
      Date and Time:   12/26/2006, 4:43:51 PM, and 12/26/2006 4:43:51 PM
      Username:         (emoc3)
      Table Name:       (AircraftExtractTrx)

******************************************************************************/
BEGIN
   tmpvar := 0;

   INSERT INTO aircraftextracttrx
               (aircraftextracttrxid, fromenterpriselocationcode,
                fromunitid, equipmentid, missiondesignseries,
                missiondesignseriesblock, aircraftserialnumber,
                maintenancestatuscode, conditionstatuscode, startdate,
                starttime, workunitcode,
                jobcontrolnumber, estimatedtimeincommission,
                statusnarrative, locationcode,
                equipmentorganizationflightid, maintenancerepairpriority,
                armed, multipleconfigurationid, localoption,
                assignmentstatuscode, possessionid, geoloccode,
                owningmajcom, lastflydate, dedicatedcrewchief,
                owningworkcenter
               )
        VALUES (seq_aircraftextracttrx.NEXTVAL, p_fromelc,
                p_fromunitid, p_equipmentid, p_mds,
                p_mdsblock, p_serialnumber,
                p_maintenancestatuscode, p_conditionstatuscode, p_startdate,
                p_starttime, RTRIM (p_workunitcode),
                RTRIM (p_jobcontrolnumber), p_estimatedtimeincommission,
                RTRIM (p_statusnarrative), p_locationcode,
                p_equiporgflightid, p_priority,
                p_armed, p_multiconfigid, p_localoption,
                p_assignmentstatuscode, p_possessionid, p_geoloccode,
                p_owningmajcom, p_lastflydate, p_dedicatedcrewchief,
                p_owningworkcenter
               );

   COMMIT;
   get_wingid_by_elcunitid (p_fromelc, p_fromunitid, wingidvar);

   IF (wingidvar IS NOT NULL)
   THEN
      get_mocid_by_elcunitid (p_fromelc, p_fromunitid, mocidvar);

      SELECT COUNT (*)
        INTO tmpvar
        FROM workcenters
       WHERE RTRIM (workcentercode) = RTRIM (p_owningworkcenter)
         AND wingid = wingidvar;

      porgidvar := NULL;

      IF (tmpvar > 0)
      THEN
         SELECT workcenterid, porgid, workcentername
           INTO wcidvar, porgidvar, wcnamevar
           FROM (SELECT workcenterid, porgid, workcentername
                   FROM workcenters
                  WHERE RTRIM (workcentercode) = p_owningworkcenter
                    AND wingid = wingidvar
                    AND ROWNUM < 2);
      END IF;

      SELECT COUNT (*)
        INTO tmpvar
        FROM squadrons
       WHERE wingid = wingidvar
         AND (   RTRIM (organization_id) = RTRIM (porgidvar)
              OR RTRIM (shortname) = p_owningworkcenter
             );

      IF (tmpvar > 0)
      THEN
         SELECT squadronid
           INTO sqidvar
           FROM (SELECT squadronid
                   FROM squadrons
                  WHERE wingid = wingidvar
                    AND (   RTRIM (organization_id) = RTRIM (porgidvar)
                         OR RTRIM (shortname) = p_owningworkcenter
                        )
                    AND ROWNUM < 2);
      ELSE
         SELECT seq_squadrons.NEXTVAL
           INTO sqidvar
           FROM DUAL;

         INSERT INTO squadrons
                     (squadronid, squadronname,
                      shortname, organization_id, mocid, wingid,
                      colorid
                     )
              VALUES (sqidvar, NVL (wcnamevar, p_owningworkcenter),
                      p_owningworkcenter, porgidvar, mocidvar, wingidvar,
                      NVL ((SELECT MIN (colorid)
                              FROM colors
                             WHERE mocid = mocidvar), 0)
                     );

         COMMIT;
      END IF;

      SELECT COUNT (*)
        INTO tmpvar
        FROM aircraftmds
       WHERE aircraftmds = p_mds
         AND blocknumber = NVL (p_mdsblock, '000')
         AND mocid = mocidvar;

      IF (tmpvar = 0)
      THEN
         SELECT seq_aircraftmds.NEXTVAL
           INTO mdsidvar
           FROM DUAL;

         INSERT INTO aircraftmds
                     (aircraftmdsid, aircraftmds, blocknumber, mocid,
                      numberofstations, numberofengines
                     )
              VALUES (mdsidvar, p_mds, NVL (p_mdsblock, '000'), mocidvar,
                      1, 1
                     );

         COMMIT;
      ELSE
         SELECT aircraftmdsid
           INTO mdsidvar
           FROM aircraftmds
          WHERE aircraftmds = p_mds
            AND blocknumber = NVL (p_mdsblock, '000')
            AND mocid = mocidvar;
      END IF;

      IF (p_possessionid IS NOT NULL)
      THEN
         SELECT COUNT (*)
           INTO tmpvar
           FROM possessions
          WHERE possessioncode = p_possessionid AND mocid = mocidvar;

         IF (tmpvar = 0)
         THEN
            INSERT INTO possessions
                        (possessionid, possessioncode, defaultpossession,
                         mocid
                        )
                 VALUES (seq_possessions.NEXTVAL, p_possessionid, 0,
                         mocidvar
                        );

            COMMIT;
         END IF;
      END IF;

      SELECT COUNT (*)
        INTO tmpvar
        FROM aircraft
       WHERE (   (    misequipid = p_equipmentid
                  AND homeenterpriselocationcode = p_fromelc
                  AND missiondesignseries = p_mds
                  AND missiondesignseriesblock = NVL (p_mdsblock, '000')
                 )
              OR (misequipid = p_equipmentid)
             )
         AND mocid = mocidvar;

      IF tmpvar = 0
      THEN
         SELECT seq_aircraft.NEXTVAL
           INTO acidvar
           FROM DUAL;

         -- aicraft not found in database. Ok to add  --
         INSERT INTO aircraft
                     (aircraftid, misequipid, tailnumber,
                      shorttailnumber, serialnumber, missiondesignseries,
                      missiondesignseriesblock,
                      possessionid,
                      aircraftyear,
                      aircraft.localconfigid, homeenterpriselocationcode,
                      currententerpriselocationcode, unitid,
                      owningworkcenter, mocid, squadronid, aircraftmdsid,
                      assignmentstatus, commandcode,
                      statusnarrative, statuswuclcn,
                      locationcode, geoloccode, multiconfigid,
                      openstatuseventjcn, countrycode,
                      locationid,
                      staloccodeid,
                      aircraftwucid,
                      etic,
                      statuscodeid
                     )
              VALUES (acidvar, p_equipmentid, SUBSTR (p_equipmentid, 2, 4),
                      SUBSTR (p_equipmentid, 2, 4), p_serialnumber, p_mds,
                      NVL (p_mdsblock, '000'),
                      (SELECT possessionid
                         FROM possessions
                        WHERE possessioncode = p_possessionid
                          AND mocid = mocidvar),
                      NVL (SUBSTR (p_serialnumber, 1, 2), '00'),
                      p_equiporgflightid, p_fromelc,
                      p_fromelc, p_fromunitid,
                      p_owningworkcenter, mocidvar, sqidvar, mdsidvar,
                      p_assignmentstatuscode, p_owningmajcom,
                      RTRIM (p_statusnarrative), RTRIM (p_workunitcode),
                      p_locationcode, p_geoloccode, p_multiconfigid,
                      p_jobcontrolnumber, 'US',
                      (SELECT locationid
                         FROM locations
                        WHERE RTRIM (locationcode) = RTRIM (p_locationcode)
                          AND elc = p_fromelc),
                      (SELECT staloccodeid
                         FROM stationloccodes
                        WHERE stationloc = p_geoloccode),
                      (SELECT wucid
                         FROM wuc
                        WHERE RTRIM (wuccode) = RTRIM (p_workunitcode)
                          AND RTRIM (missiondesignseries) = RTRIM (p_mds)
                          AND blocknumber = NVL (p_mdsblock, '000')),
                      p_estimatedtimeincommission,
                      (SELECT statuscodeid
                         FROM statuscode
                        WHERE mocid = mocidvar AND defaultstatuscode = 1)
                     );

         COMMIT;
         addaircraftenginedata (acidvar, mdsidvar);

         IF (p_conditionstatuscode = NULL OR LENGTH (p_conditionstatuscode) =
                                                                             0
            )
         THEN
            condstat := NVL (p_maintenancestatuscode, '');
         ELSE
            condstat :=
                    NVL (p_maintenancestatuscode, '')
                    || p_conditionstatuscode;
         END IF;

         IF (LENGTH (condstat) > 1)
         THEN
            SELECT COUNT (*)
              INTO tmpvar
              FROM conditioncodes
             WHERE TRIM (conditioncode) = condstat AND mocid = mocidvar;

            IF (tmpvar > 0)
            THEN
               SELECT condcodeid
                 INTO condidvar
                 FROM conditioncodes
                WHERE TRIM (conditioncode) = condstat AND mocid = mocidvar;

               UPDATE aircraft
                  SET conditioncodeid = condidvar,
                      conditioncodetime = SYSDATE
                WHERE aircraftid = acidvar;
            END IF;
         END IF;

         COMMIT;

         IF (p_dedicatedcrewchief IS NOT NULL)
         THEN
            add_crewchief_fromimds (acidvar, mocidvar, p_dedicatedcrewchief);
         END IF;

         IF (p_armed IS NOT NULL)
         THEN
            IF (p_armed = 'Y' OR p_armed = '1')
            THEN
               UPDATE aircraft
                  SET arm_dearm = 1
                WHERE aircraftid = acidvar;
            ELSE
               UPDATE aircraft
                  SET arm_dearm = 0
                WHERE aircraftid = acidvar;
            END IF;
         END IF;

         COMMIT;

         IF (p_priority IS NOT NULL)
         THEN
            UPDATE aircraft
               SET priority = isnumeric (p_priority)
             WHERE aircraftid = acidvar;
         END IF;

         COMMIT;

         IF (p_lastflydate IS NOT NULL)
         THEN
            UPDATE aircraft
               SET lastflowntime =
                              TO_DATE (p_lastflydate, 'YYYY-MM-DD HH24:MI:SS')
             WHERE aircraftid = acidvar;
         END IF;

         COMMIT;

         IF (p_startdate IS NOT NULL)
         THEN
            IF (p_startdate != '0000-00-00')
            THEN
               UPDATE aircraft
                  SET conditioncodetime =
                         TO_DATE (RTRIM (   p_startdate
                                         || ' '
                                         || NVL (p_starttime, '')
                                        ),
                                  'YYYY-MM-DD HH24:MI:SS'
                                 )
                         WHERE aircraftid = acidvar;
            END IF;
         END IF;

         COMMIT;

         IF (LENGTH (p_localoption) > 8)
         THEN
            UPDATE aircraft
               SET localoption = SUBSTR (p_localoption, 1, 8)
               WHERE aircraftid = acidvar;
         ELSE
            IF (p_localoption IS NOT NULL)
            THEN
               UPDATE aircraft
                  SET localoption = p_localoption
                  WHERE aircraftid = acidvar;
            END IF;
         END IF;
      END IF;
   END IF;
END insertaircraftextracttrx;

CREATE OR REPLACE PACKAGE         "EMOC_ADMIN" AS
  TYPE countrycodecursor IS REF CURSOR;
  TYPE locationsextractcursor IS REF CURSOR;
  TYPE organizationsextractcursor IS REF CURSOR;
  TYPE workcentersextractcursor IS REF CURSOR;
  TYPE acutilcodesextractcursor IS REF CURSOR;
  TYPE assignmentcodesextractcursor IS REF CURSOR;
  TYPE causecodesextractcursor IS REF CURSOR;
  TYPE commandcodesextractcursor IS REF CURSOR;
  TYPE deviationcodesextractcursor IS REF CURSOR;
  TYPE geoloccodesextractcursor IS REF CURSOR;
  TYPE landingcodesextractcursor IS REF CURSOR;
  TYPE possessioncodesextractcursor IS REF CURSOR;
  TYPE whendisccodesextractcursor IS REF CURSOR;
  TYPE workunitcodesextractcursor IS REF CURSOR;
  TYPE acmdstypesesextractcursor IS REF CURSOR;
  TYPE basemapcursor IS REF CURSOR;
  TYPE checklistcursor IS REF CURSOR;

  /* Get Country Code By ID */
  PROCEDURE getcountrycodebyid(p_countrycode IN VARCHAR2,
                               p_cursor      OUT countrycodecursor);

  /* Get ALL Country Codes */
  PROCEDURE getallcountrycodes(p_cursor OUT countrycodecursor);

  /* Insert Country Code */
  PROCEDURE insertcountrycode(p_countrycode IN VARCHAR2,
                              p_countryname IN VARCHAR2,
                              pStatus       IN OUT NUMBER);

  /* Delete Country Code */
  PROCEDURE deletecountrycode(p_countrycode IN VARCHAR2);

  /* Update Country Code */
  PROCEDURE updatecountrycode(p_countrycode IN VARCHAR2,
                              p_countryname IN VARCHAR2);

  /* Get Number Of rows for  Country Code */
  PROCEDURE getCountryCodeRowCount(p_cursor OUT countrycodecursor);

  /* Generate Locations Extract By MOC Id */
  PROCEDURE getLocationsExtractByMocID(p_mocid  IN NUMBER,
                                       p_cursor OUT locationsextractcursor);

  /* Generate Organizations Extract By MOC Id */
  PROCEDURE getOrganizationsExtractByMocID(p_mocid  IN NUMBER,
                                           p_cursor OUT organizationsextractcursor);

  /* Generate Work Center Extract By MOC Id */
  PROCEDURE getWorkcentersExtractByMocID(p_mocid  IN NUMBER,
                                         p_cursor OUT workcentersextractcursor);

  /* Generate Aircraft Utilization Codes Extract By MOC Id */
  PROCEDURE getAcUtilCodesExtractByMocID(p_mocid  IN NUMBER,
                                         p_cursor OUT acutilcodesextractcursor);

  /* Generate Aircraft Utilization Codes Extract By MOC Id */
  PROCEDURE getAssignCodesExtractByMocID(p_mocid  IN NUMBER,
                                         p_cursor OUT assignmentcodesextractcursor);

  /* Generate Cause Codes Extract By MOC Id */
  PROCEDURE getCauseCodesExtractByMocID(p_mocid  IN NUMBER,
                                        p_cursor OUT causecodesextractcursor);

  /* Generate Command Codes Extract By MOC Id */
  PROCEDURE getCommandCodesExtractByMocID(p_mocid  IN NUMBER,
                                          p_cursor OUT commandcodesextractcursor);

  /* Generate Deviation Codes Extract By MOC Id */
  PROCEDURE getDevCodesExtractByMocID(p_mocid  IN NUMBER,
                                      p_cursor OUT deviationcodesextractcursor);

  /* Generate GeoLoc Codes Extract By MOC Id */
  PROCEDURE getGeoLocCodesExtractByMocID(p_mocid  IN NUMBER,
                                         p_cursor OUT geoloccodesextractcursor);

  /* Generate Landing Codes Extract By MOC Id */
  PROCEDURE getLandingCodesExtractByMocID(p_mocid  IN NUMBER,
                                          p_cursor OUT landingcodesextractcursor);

  /* Generate Possession Codes Extract By MOC Id */
  PROCEDURE getPossCodesExtractByMocID(p_mocid  IN NUMBER,
                                       p_cursor OUT possessioncodesextractcursor);

  /* Generate When Discovered Codes Extract By MOC Id */
  PROCEDURE getWhenDiscCodesExtractByMocID(p_mocid  IN NUMBER,
                                           p_cursor OUT whendisccodesextractcursor);

  /* Generate Work Unit Codes Extract By MOC Id */
  PROCEDURE getWorkUnitCodesExtractByMocID(p_mocid         IN NUMBER,
                                           p_aircraftmdsid IN NUMBER,
                                           p_cursor        OUT workunitcodesextractcursor);

  /* Generate Aircraft MDS Types Extract By MOC Id */
  PROCEDURE getAcMdsTypesExtractByMocID(p_mocid  IN NUMBER,
                                        p_cursor OUT acmdstypesesextractcursor);

  /* Upload Checklist By MOC ID SP */
  PROCEDURE uploadChecklistByMocId(p_cacheTableName IN VARCHAR2,
                                   p_checklist      IN checklist.checklist%TYPE,
                                   p_title          IN checklist.checklisttitle%TYPE,
                                   p_mocid          IN checklist.mocid%TYPE,
                                   p_mimetype       IN checklist.mimetype%TYPE);

  /* Get Checklist By ID SP */
  PROCEDURE getByChecklistId(p_checklistid IN checklist.checklistid%TYPE,
                             p_cursor      OUT checklistcursor);

  /* Get Checklist By MOC ID SP */
  PROCEDURE getChecklistByMocId(p_mocid  IN checklist.mocid%TYPE,
                                p_cursor OUT checklistcursor);

  /* Delete Checklist By Checklist ID */
  PROCEDURE deleteByChecklistId(p_checklistid IN checklist.checklistid%TYPE);

  /* Delete Checklist By MOC ID */
  PROCEDURE deleteChecklistByMocId(p_mocid IN checklist.mocid%TYPE);

  /* Add User As MOC Admin By Full Name */
  PROCEDURE AddUserAsMocAdminByFullName(mocidin       moc.mocid%TYPE,
                                        pFullName     users.fullname%TYPE,
                                        pEmailAddress users.email%TYPE,
                                        pUserId       OUT users.userid%TYPE,
                                        mocadminidout OUT mocadmins.mocadminid%TYPE);

  /* Add User As MOC Admin By Email Address */
  PROCEDURE AddUserAsMocAdminByEmail(mocidin       moc.mocid%TYPE,
                                     pEmailAddress users.email%TYPE,
                                     pFullName     users.fullname%TYPE,
                                     pUserId       OUT users.userid%TYPE,
                                     mocadminidout OUT mocadmins.mocadminid%TYPE);

  ---------------
  -- FUNCTIONS --
  ---------------

  /* Get Country Codes Row Count */
  FUNCTION GetCountryCodesRowCount(pCountryCode VARCHAR2) RETURN NUMBER;

  /* Get User ID By FullName */
  FUNCTION GetUserIdByFullName(pFullName VARCHAR2, pEmailAddress VARCHAR2)
    RETURN NUMBER;

  /* Get User ID By Email Address */
  FUNCTION GetUserIdByEmailAddress(pEmailAddress VARCHAR2,
                                   pFullName     VARCHAR2) RETURN NUMBER;

  /* Upload Base Map By MOC ID SP */
  PROCEDURE UploadBaseMapByMocId(p_basemap  IN basemaps.mapobject%TYPE,
                                 p_mocid    IN basemaps.mocid%TYPE,
                                 p_mimetype IN basemaps.mimetype%TYPE);

  /* Get Base Map Row Count */
  FUNCTION GetBaseMapRowCount(p_modid basemaps.mocid%TYPE) RETURN NUMBER;

  /* Delete Base Map By MOC Id */
  PROCEDURE DeleteBaseMapByMocId(p_mocid basemaps.mocid%TYPE);

  /* Get Base Map By MOC Id */
  PROCEDURE GetBaseMapByMocId(p_mocid  basemaps.mocid%TYPE,
                              p_cursor OUT basemapcursor);

END emoc_admin;
 
 
 
 
 
 
 
 ;

CREATE OR REPLACE PACKAGE         "EMOC_CACHE" IS
  -- REF CURSOR type for returning result sets from procedures
  TYPE ref_cur IS REF CURSOR;

  /* Get the change id by Moc Id */
  PROCEDURE getchangeid(p_tablename IN changenotification.cachedtablename%TYPE,
                        p_mocid     IN changenotification.mocid%TYPE,
                        p_cursor    OUT ref_cur);

  /* Get all change notifications */
  PROCEDURE getallchangenotifications(p_cursor OUT ref_cur);

  -- Update Change Notification By Moc Id
  PROCEDURE updatechangenotification(p_cachetablename IN changenotification.cachedtablename%TYPE,
                                     p_mocid          IN changenotification.mocid%TYPE);

  /* Get the global change id by table name */
  PROCEDURE getgblchangeid(p_tablename IN changenotification.cachedtablename%TYPE,
                           p_cursor    OUT ref_cur);

  /* Get all global change notifications */
  PROCEDURE getallgblchangenotifications(p_cursor OUT ref_cur);

  -- Update Global Change Notification By Table Name
  PROCEDURE updategblchangenotification(p_cachetablename IN changenotification.cachedtablename%TYPE);
END emoc_cache;
 
 
 
 
 
 
 
 ;

CREATE OR REPLACE PACKAGE         "EMOC_SECURITY" AS

  FUNCTION encrypt (p_text  IN  VARCHAR2) RETURN RAW;
  FUNCTION decrypt (p_raw  IN  RAW) RETURN VARCHAR2;

END emoc_security;



 
 
 
 
 
 
 
 ;

CREATE OR REPLACE PACKAGE         "EMOC_STATUSCODES" AS
  /* Delete MOC Status Icons By Status Code and Moc Id */
  PROCEDURE DeleteMocStatusIcons(p_statuscode mocstatusicons.statuscode%TYPE,
                                 p_mocId      mocstatusicons.mocid%TYPE);

  /* Delete Status Code By Id */
  PROCEDURE DeleteStatusCodeById(p_statuscodeid statuscode.statuscodeid%TYPE,
                                 p_mocId        statuscode.mocid%TYPE);

  /* Get Status Code By Status Cide Id */
  FUNCTION GetStatusCode(p_statusCodeId statuscode.statuscodeid%TYPE)
    return VARCHAR2;

END emoc_statuscodes;
 
 
 
 
 
 
 
 ;

CREATE OR REPLACE PACKAGE         "EMOC_SYSTEMLINKS" 
AS
   TYPE systemlinkscursor IS REF CURSOR;

   /* Get UserImages By User ID */
   PROCEDURE getbymocid (
      p_cursor         OUT  systemlinkscursor,
      mocidin          IN   links.mocid%TYPE
   );
END emoc_systemlinks;
 
 
 
 
 
 
 
 ;

CREATE OR REPLACE PACKAGE         "EMOC_TYPES" AS
TYPE EMOC_CURSOR IS REF CURSOR;
END EMOC_TYPES;

 
 
 
 
 
 
 
 ;

CREATE OR REPLACE PACKAGE         "EMOC_USERIMAGES" 
AS
   TYPE imagecursor IS REF CURSOR;

   /* Upload Image SP */
   PROCEDURE upload (
      p_image          IN   userimages.image%TYPE,
      p_userid         IN   userimages.userid%TYPE
   );

   /* Delete UserImages By User ID */
   PROCEDURE deletebyuserid (
      p_userid         IN   userimages.userid%TYPE
   );

   /* Delete UserImages By Image ID */
   PROCEDURE deletebyimageid (
      p_imageid        IN   userimages.imageid%TYPE
   );

   /* Get UserImages By User ID */
   PROCEDURE getbyimageid (
      p_imageid        IN   userimages.imageid%TYPE,
      p_cursor         OUT  imagecursor
   );

   /* Get UserImages By User ID */
   PROCEDURE getbyuserid (
      p_userid         IN   userimages.userid%TYPE,
      p_cursor         OUT  imagecursor
   );
END emoc_userimages;



 
 
 
 
 
 
 
 ;

CREATE OR REPLACE PACKAGE         "EMOC_USERLINKS" AS
  TYPE userlinkscursor IS REF CURSOR;

  /* Get UserImages By User ID */
  PROCEDURE getbyuserid(p_userid IN userlinks.enteredby%TYPE,
                        p_cursor OUT userlinkscursor);

  PROCEDURE add_user_link(linktitlein       userlinks.linktitle%TYPE,
                          linkurlin         userlinks.linkurl%TYPE,
                          linkdescriptionin userlinks.linkdescription%TYPE,
                          enteredbyin       userlinks.enteredby%TYPE,
                          linkorderin       userlinks.linkorder%TYPE,
                          linkid            OUT userlinks.linkid%TYPE);

  PROCEDURE get_user_links(p_cursor OUT emoc_types.emoc_cursor,
                           userid   userlinks.enteredby%TYPE);

  PROCEDURE update_user_link(linktitlein       userlinks.linktitle%TYPE,
                             linkurlin         userlinks.linkurl%TYPE,
                             linkdescriptionin userlinks.linkdescription%TYPE,
                             linkorderin       userlinks.linkorder%TYPE,
                             linkidin          userlinks.linkid%TYPE);

  FUNCTION get_user_links_count_by_userid(p_userid NUMBER) RETURN NUMBER;

  PROCEDURE delete_user_Link_by_linkid(p_linkid userlinks.linkid%TYPE);
END emoc_userlinks;
 
 
 
 
 
 
 
 ;

CREATE OR REPLACE PACKAGE         "EMOC_USERS" AS
  TYPE onlineuserscursor IS REF CURSOR;
  TYPE userlinkscursor IS REF CURSOR;
  TYPE ref_cur IS REF CURSOR;

  /* Get Online Users By MOC ID */
  PROCEDURE getonlineusersbymocid(p_mocid  IN NUMBER,
                                  p_cursor OUT onlineuserscursor);

  /* Get All Users By Full Name */
  PROCEDURE getallusersbyfullname(p_cursor OUT ref_cur);

  /* Get All Users By Email Address */
  PROCEDURE getallusersbyemailaddress(p_cursor OUT ref_cur);
END emoc_users;
 
 
 
 
 
 
 
 ;

CREATE OR REPLACE PACKAGE         "EMOC_UTILIZATIONCODES" AS

  /* Add Aircraft Utilization Code */

  PROCEDURE AddAircraftUtilCode(aucin          utilizationcodes.utilizationcode%TYPE,

                                aucnarrativein utilizationcodes.aucnarrative%TYPE,

                                pecin          utilizationcodes.programelementcode%TYPE,

                                mdsin          utilizationcodes.missiondesignseries%TYPE,

                                camsinitin     INTEGER,

                                utilcodeid     OUT utilizationcodes.utilcodeid%TYPE);

  /* Add Aircraft Utilization Code By Moc Id */

  PROCEDURE AddAircraftUtilCodeByMocId(aucin          utilizationcodes.utilizationcode%TYPE,

                                       aucnarrativein utilizationcodes.aucnarrative%TYPE,

                                       pecin          utilizationcodes.programelementcode%TYPE,

                                       mdsin          utilizationcodes.missiondesignseries%TYPE,

                                       camsinitin     INTEGER,

                                       mocidin        utilizationcodes.mocid%TYPE,

                                       utilcodeid     OUT utilizationcodes.utilcodeid%TYPE);

  /* Check if a record exist */

  FUNCTION CheckIfRecordExist(p_utilizationcode     VARCHAR2,

                              p_utilcodeid          NUMBER,

                              p_missiondesignseries VARCHAR2,

                              p_moocid              NUMBER) RETURN NUMBER;
         
/* Check if a record exist */

  FUNCTION CheckForDuplicate(p_utilizationcode     VARCHAR2,

                             p_missiondesignseries VARCHAR2,

                              p_moocid              NUMBER) RETURN NUMBER;

  /* Delete Utilization Code by Id */

  PROCEDURE DeleteUtilCodeById(p_utilcodeid utilizationcodes.utilcodeid%TYPE);

  /* Get Row Count By Moc Id */

  FUNCTION GetRowCountByMocId(p_mocid NUMBER) RETURN NUMBER;

  /* Get Schedule Row Count By Utilization Code Id */

  FUNCTION GetSchRowCountByUtilCodeId(p_utilcodeid NUMBER) RETURN NUMBER;

  /* Get Row Count */

  FUNCTION GetRowCount RETURN NUMBER;

  /* Update Aircraft Utilization Code By Utilization Code Id */

  PROCEDURE UpdateACUtilCodeById(aucin          utilizationcodes.utilizationcode%TYPE,

                                 aucnarrativein utilizationcodes.aucnarrative%TYPE,

                                 pecin          utilizationcodes.programelementcode%TYPE,

                                 mdsin          utilizationcodes.missiondesignseries%TYPE,

                                 utilcodeidin   utilizationcodes.utilcodeid%TYPE);

END Emoc_UtilizationCodes;
 
 
 
 
 
 
 
 ;

CREATE OR REPLACE PACKAGE         "LOB_PKG" 
as
   procedure lob_ins( p_id in number, p_text in varchar2 );
   procedure add_more( p_text in varchar2 );
end;
 
 
 
 
 
 
 
 ;

CREATE OR REPLACE PACKAGE BODY         "EMOC_ADMIN" AS
  /* Get Country Code By ID */
  PROCEDURE getcountrycodebyid(p_countrycode IN VARCHAR2,
                               p_cursor      OUT countrycodecursor) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT countrycode, countryname, defaultcountry
        FROM countrycodes
       WHERE countrycode = p_countrycode;
  END getcountrycodebyid;

  /* Get All Country Codes */
  PROCEDURE getallcountrycodes(p_cursor OUT countrycodecursor) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT countrycode, countryname, defaultcountry FROM countrycodes;
  END getallcountrycodes;

  /* Insert Country Code */
  PROCEDURE insertcountrycode(p_countrycode IN VARCHAR2,
                              p_countryname IN VARCHAR2,
                              pStatus       IN OUT NUMBER) IS
    vRecordCount NUMBER;
  BEGIN
    vRecordCount := EMOC_ADMIN.GetCountryCodesRowCount(p_countryCode);

    IF (vRecordCount <= 0) THEN
      INSERT INTO countrycodes
      VALUES
        (UPPER(p_countrycode), p_countryname, 0);
    ELSE
      pStatus := -30; /* Error -30 indicates record exist */
    END IF;
  END insertcountrycode;

  /* Delete Country Code */
  PROCEDURE deletecountrycode(p_countrycode IN VARCHAR2) IS
  BEGIN
    DELETE FROM countrycodes WHERE countrycode = p_countrycode;
  END deletecountrycode;

  /* Update Country Code */
  PROCEDURE updatecountrycode(p_countrycode IN VARCHAR2,
                              p_countryname IN VARCHAR2) IS
  BEGIN
    UPDATE countrycodes
       SET countrycode = UPPER(p_countrycode), countryname = p_countryname
     WHERE countrycode = p_countrycode;
  END updatecountrycode;

  /* Get Number Of rows for  Country Code */
  PROCEDURE getCountryCodeRowCount(p_cursor OUT countrycodecursor) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT COUNT(*) FROM countrycodes;
  END getCountryCodeRowCount;

  /* Generate Locations Extract By MOC Id */
  PROCEDURE getLocationsExtractByMocID(p_mocid  IN NUMBER,
                                       p_cursor OUT locationsextractcursor) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT locationcode,
             locationname,
             maximumoccupancy,
             defaultlocation,
             elc
        FROM locations
       WHERE mocid = p_mocid
       ORDER BY locationcode;
  END getLocationsExtractByMocID;

  /* Generate Organizations Extract By MOC Id */
  PROCEDURE getOrganizationsExtractByMocID(p_mocid  IN NUMBER,
                                           p_cursor OUT organizationsextractcursor) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT orgname, orgid, unit_id, station_location_code
        FROM organizations
       WHERE mocid = p_mocid
       ORDER BY orgname;
  END getOrganizationsExtractByMocID;

  /* Generate Workcenters Extract By MOC Id */
  PROCEDURE getWorkcentersExtractByMocID(p_mocid  IN NUMBER,
                                         p_cursor OUT workcentersextractcursor) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT trim(workcentercode) AS work_center_id,
             trim(workcentername) AS work_center_name,
             (SELECT unit_id
                FROM wings
               WHERE wings.wingid = workcenters.wingid) AS unit_id,
             trim(porgid) AS organization_id
        FROM workcenters
       WHERE mocid = p_mocid
       ORDER BY workcentercode;
  END getWorkcentersExtractByMocID;

  /* Generate Aircraft Utilization Codes Extract By MOC Id */
  PROCEDURE getAcUtilCodesExtractByMocID(p_mocid  IN NUMBER,
                                         p_cursor OUT acutilcodesextractcursor) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT utilizationcode, aucnarrative, programelementcode
        FROM utilizationcodes
       WHERE mocid = p_mocid
       ORDER BY utilizationcode;
  END getAcUtilCodesExtractByMocID;

  /* Generate Aircraft Utilization Codes Extract By MOC Id */
  PROCEDURE getAssignCodesExtractByMocID(p_mocid  IN NUMBER,
                                         p_cursor OUT assignmentcodesextractcursor) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT assignmentcode, assignmentdescription, defaultassignment
        FROM assignmentcodes
       WHERE mocid = p_mocid
       ORDER BY assignmentcode;
  END getAssignCodesExtractByMocID;

  /* Generate Cause Codes Extract By MOC Id */
  PROCEDURE getCauseCodesExtractByMocID(p_mocid  IN NUMBER,
                                        p_cursor OUT causecodesextractcursor) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT causecode, description, causecodetype, defaultcausecode
        FROM causecodes
       WHERE mocid = p_mocid
       ORDER BY causecode;
  END getCauseCodesExtractByMocID;

  /* Generate Command Codes Extract By MOC Id */
  PROCEDURE getCommandCodesExtractByMocID(p_mocid  IN NUMBER,
                                          p_cursor OUT commandcodesextractcursor) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT comid, comcode, majcomnarrative AS comnarr, majcom
        FROM majcoms
       WHERE mocid = p_mocid
       ORDER BY comid;
  END getCommandCodesExtractByMocID;

  /* Generate Deviation Codes Extract By MOC Id */
  PROCEDURE getDevCodesExtractByMocID(p_mocid  IN NUMBER,
                                      p_cursor OUT deviationcodesextractcursor) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT deviationcode,
             deviationdescription,
             defaultdeviationcode,
             deviationcodes.colorid,
             colors.colorname,
             colors.colorvalue
        FROM deviationcodes, colors
       WHERE deviationcodes.mocid = p_mocid
         AND deviationcodes.colorid = colors.colorid
       ORDER BY deviationcode;
  END getDevCodesExtractByMocID;

  /* Generate GeoLoc Codes Extract By MOC Id */
  PROCEDURE getGeoLocCodesExtractByMocID(p_mocid  IN NUMBER,
                                         p_cursor OUT geoloccodesextractcursor) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT stationloc AS geoloc,
             stalocnarrative AS narrative,
             TO_CHAR(STARTDATE, 'MM/DD/YYYY') AS STARTDATE,
             TO_CHAR(STOPDATE, 'MM/DD/YYYY') AS STOPDATE
        FROM stationloccodes
       WHERE mocid = p_mocid
       ORDER BY stationloc;
  END getGeoLocCodesExtractByMocID;

  /* Generate Landing Codes Extract By MOC Id */
  PROCEDURE getLandingCodesExtractByMocID(p_mocid  IN NUMBER,
                                          p_cursor OUT landingcodesextractcursor) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT landingcode,
             landingcodedescription AS description,
             writeupneeded
        FROM landingcodes
       WHERE mocid = p_mocid
       ORDER BY landingcode;
  END getLandingCodesExtractByMocID;

  /* Generate Possession Codes Extract By MOC Id */
  PROCEDURE getPossCodesExtractByMocID(p_mocid  IN NUMBER,
                                       p_cursor OUT possessioncodesextractcursor) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT possessioncode, possessiondescription, defaultpossession
        FROM possessions
       WHERE mocid = p_mocid
       ORDER BY possessioncode;
  END getPossCodesExtractByMocID;

  /* Generate When Discovered Codes Extract By MOC Id */
  PROCEDURE getWhenDiscCodesExtractByMocID(p_mocid  IN NUMBER,
                                           p_cursor OUT whendisccodesextractcursor) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT wdc,
             wdcnarrative,
             TO_CHAR(STARTDATE, 'MM/DD/YYYY') AS STARTDATE,
             TO_CHAR(STOPDATE, 'MM/DD/YYYY') AS STOPDATE
        FROM whendiscoveredcodes
       WHERE mocid = p_mocid
       ORDER BY wdc;
  END getWhenDiscCodesExtractByMocID;

  /* Generate Work Unit Codes Extract By MOC Id */
  PROCEDURE getWorkUnitCodesExtractByMocID(p_mocid         IN NUMBER,
                                           p_aircraftmdsid IN NUMBER,
                                           p_cursor        OUT workunitcodesextractcursor) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT wuccode AS WUC_LCN,
             wucdescription AS NARRATIVE,
             TO_CHAR(WUCSTARTDATE, 'MM/DD/YYYY') AS START_DATE,
             TO_CHAR(WUCSTOPDATE, 'MM/DD/YYYY') AS STOP_DATE,
             aircraftmds AS MISSION_DESIGN_SERIES,
             a.blocknumber AS MDS_BLOCK_NUMBER
        FROM WUC a, aircraftmds
       ORDER BY aircraftmds, a.blocknumber, wuccode;
  END getWorkUnitCodesExtractByMocID;

  /* Generate Aircraft MDS Types Extract By MOC Id */
  PROCEDURE getAcMdsTypesExtractByMocID(p_mocid  IN NUMBER,
                                        p_cursor OUT acmdstypesesextractcursor) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT acftmdstypecd, acftmdstypenm
        FROM acftmdstypes
       WHERE mocid = p_mocid
       ORDER BY acftmdstypenm;
  END getAcMdsTypesExtractByMocID;

  /* Upload Checklist By MOC ID SP */
  PROCEDURE uploadChecklistByMocId(p_cacheTableName IN VARCHAR2,
                                   p_checklist      IN checklist.checklist%TYPE,
                                   p_title          IN checklist.checklisttitle%TYPE,
                                   p_mocid          IN checklist.mocid%TYPE,
                                   p_mimetype       IN checklist.mimetype%TYPE) IS
  BEGIN
    INSERT INTO checklist
      (checklist, checklisttitle, mocid, mimetype)
    VALUES
      (p_checklist, p_title, p_mocid, p_mimetype);

    -- update the change id
    emoc_cache.updateChangeNotification(p_cachetablename => p_cacheTableName,
                                        p_mocid          => p_mocid);

  END uploadChecklistByMocId;

  /* Get Checklist By ID SP */
  PROCEDURE getByChecklistId(p_checklistid IN checklist.checklistid%TYPE,
                             p_cursor      OUT checklistcursor) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT t.checklistid,
             t.checklist,
             t.checklisttitle,
             TO_CHAR(t.dateuploaded, 'dd-MON-yyyy') AS dateuploaded,
             t.mocid,
             t.mimetype
        FROM checklist t
       WHERE t.checklistid = p_checklistid;
  END getByChecklistId;

  /* Get Checklist By MOC ID SP */
  PROCEDURE getChecklistByMocId(p_mocid  IN checklist.mocid%TYPE,
                                p_cursor OUT checklistcursor) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT t.checklistid,
             t.checklist,
             t.checklisttitle,
             TO_CHAR(t.dateuploaded, 'dd-MON-yyyy') AS dateuploaded,
             t.mocid,
             t.mimetype
        FROM checklist t
       WHERE t.mocid = p_mocid
       ORDER BY t.checklisttitle;
  END getChecklistByMocId;

  /* Delete Checklist By Checklist ID */
  PROCEDURE deleteByChecklistId(p_checklistid IN checklist.checklistid%TYPE) IS
  BEGIN
    DELETE FROM checklist t WHERE t.checklistid = p_checklistid;
  END deleteByChecklistId;

  /* Delete Checklist By MOC ID */
  PROCEDURE deleteChecklistByMocId(p_mocid IN checklist.mocid%TYPE) IS
  BEGIN
    DELETE FROM checklist t WHERE t.mocid = p_mocid;
  END deleteChecklistByMocId;

  /* Add User As MOC Admin By Full Name */
  PROCEDURE AddUserAsMocAdminByFullName(mocidin       moc.mocid%TYPE,
                                        pFullName     users.fullname%TYPE,
                                        pEmailAddress users.email%TYPE,
                                        pUserId       OUT users.userid%TYPE,
                                        mocadminidout OUT mocadmins.mocadminid%TYPE) IS
    recid   INTEGER := 0;
    vUserId NUMBER;
  BEGIN
    vUserId := EMOC_ADMIN.GetUserIdByFullName(pFullName, pEmailAddress);

    SELECT COUNT(*)
      INTO recid
      FROM mocadmins
     WHERE mocid = mocidin
       AND userid = vUserId;

    IF (recid = 0) THEN
      SELECT seq_mocadmin.NEXTVAL INTO mocadminidout FROM DUAL;

      INSERT INTO mocadmins
        (mocadminid, mocid, userid)
      VALUES
        (mocadminidout, mocidin, vUserId);
    ELSE
      mocadminidout := recid;
    END IF;
    pUserId := vUserId;
  END;

  /* Add User As MOC Admin By Email Address */
  PROCEDURE AddUserAsMocAdminByEmail(mocidin       moc.mocid%TYPE,
                                     pEmailAddress users.email%TYPE,
                                     pFullName     users.fullname%TYPE,
                                     pUserId       OUT users.userid%TYPE,
                                     mocadminidout OUT mocadmins.mocadminid%TYPE) IS
    recid   INTEGER := 0;
    vUserId NUMBER;
  BEGIN
    vUserId := EMOC_ADMIN.GetUserIdByEmailAddress(pEmailAddress, pFullName);

    SELECT COUNT(*)
      INTO recid
      FROM mocadmins
     WHERE mocid = mocidin
       AND userid = vUserId;

      INSERT INTO mocadmins
    IF (recid = 0) THEN
      SELECT seq_mocadmin.NEXTVAL INTO mocadminidout FROM DUAL;

        (mocadminid, mocid, userid)
      VALUES
        (mocadminidout, mocidin, vUserId);
    ELSE
      mocadminidout := recid;
    END IF;
    pUserId := vUserId;
  END;

  ---------------
  -- FUNCTIONS --
  ---------------

  /* Get Country Codes Row Count */
  FUNCTION GetCountryCodesRowCount(pCountryCode VARCHAR2) RETURN NUMBER AS
    vRecordCount NUMBER;
  BEGIN
    SELECT COUNT(*)
      INTO vRecordCount
      FROM countrycodes a
     WHERE a.countrycode = pCountryCode;

    RETURN vRecordCount;
  END;

  /* Get User ID By FullName */
  FUNCTION GetUserIdByFullName(pFullName VARCHAR2, pEmailAddress VARCHAR2)
    RETURN NUMBER AS
    vUserId NUMBER;
  BEGIN
    SELECT t.userid
      INTO vUserId
      FROM users t
     WHERE t.fullname = pFullName
       AND t.email = pEmailAddress;
    RETURN vUserId;
  END;

  /* Get User ID By Email Address */
  FUNCTION GetUserIdByEmailAddress(pEmailAddress VARCHAR2,
                                   pFullName     VARCHAR2) RETURN NUMBER AS
    vUserId NUMBER;
  BEGIN
    SELECT t.userid
      INTO vUserId
      FROM users t
     WHERE t.email = pEmailAddress
       AND t.fullname = pFullName;
    RETURN vUserId;
  END;

  /* Upload BaseMap By MOC ID SP */
  PROCEDURE UploadBaseMapByMocId(p_basemap  IN basemaps.mapobject%TYPE,
                                 p_mocid    IN basemaps.mocid%TYPE,
                                 p_mimetype IN basemaps.mimetype%TYPE) IS
  BEGIN
    INSERT INTO basemaps
      (mapobject, mocid, mimetype)
    VALUES
      (p_basemap, p_mocid, p_mimetype);

  END UploadBaseMapByMocId;

  /* Get Base Map Row Count */
  FUNCTION GetBaseMapRowCount(p_modid basemaps.mocid%TYPE) RETURN NUMBER AS
    vRecordCount NUMBER;
  BEGIN
    SELECT COUNT(*)
      INTO vRecordCount
      FROM basemaps t
     WHERE t.mocid = p_modid;
    RETURN vRecordCount;
  END GetBaseMapRowCount;

  /* Delete Base Map By MOC Id */
  PROCEDURE DeleteBaseMapByMocId(p_mocid basemaps.mocid%TYPE) AS
  BEGIN
    DELETE basemaps t WHERE t.mocid = p_mocid;
  END DeleteBaseMapByMocId;

  /* Get Base Map By MOC Id */
  PROCEDURE GetBaseMapByMocId(p_mocid  basemaps.mocid%TYPE,
                              p_cursor OUT basemapcursor) AS
  BEGIN
    OPEN p_cursor FOR
      SELECT t.mapobject FROM basemaps t WHERE t.mocid = p_mocid;
  END GetBaseMapByMocId;

END emoc_admin;

CREATE OR REPLACE PACKAGE BODY         "EMOC_CACHE" AS
  /* Get the change id */
  PROCEDURE getchangeid(p_tablename IN changenotification.cachedtablename%TYPE,
                        p_mocid     IN changenotification.mocid%TYPE,
                        p_cursor    OUT ref_cur) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT changeid
        FROM changenotification
       WHERE cachedtablename = p_tablename
         AND mocid = p_mocid;
  END getchangeid;

  /* Get all change notofications */
  PROCEDURE getallchangenotifications(p_cursor OUT ref_cur) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT t.changeid, t.cachedtablename, mocid
        FROM changenotification t;
  END getallchangenotifications;

  /* Update the changeid when an insert or update takes place */
  PROCEDURE updatechangenotification(p_cachetablename IN changenotification.cachedtablename%TYPE,
                                     p_mocid          IN changenotification.mocid%TYPE) IS
    mocvalue INTEGER := 0;
  BEGIN
    -- query the db to see if a record exist for a given moc
    SELECT COUNT(*)
      INTO mocvalue
      FROM changenotification
     WHERE mocid = p_mocid
       AND cachedtablename = p_cachetablename;

    IF mocvalue > 0 THEN
      UPDATE changenotification t
         SET t.changeid = SYSDATE
       WHERE t.mocid = p_mocid
         AND t.cachedtablename = p_cachetablename;
    ELSE
      INSERT INTO changenotification
        (changeid, cachedtablename, mocid)
      VALUES
        (SYSDATE, p_cachetablename, p_mocid);
    END IF;
  END updatechangenotification;

  /* Get the global change id by table name */
  PROCEDURE getgblchangeid(p_tablename IN changenotification.cachedtablename%TYPE,
                           p_cursor    OUT ref_cur) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT changeid
        FROM globalchangenotification t
       WHERE t.cachedtablename = p_tablename;
  END getgblchangeid;

  /* Get all global change notofications */
  PROCEDURE getallgblchangenotifications(p_cursor OUT ref_cur) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT t.changeid, t.cachedtablename FROM globalchangenotification t;
  END getallgblchangenotifications;

  /* Update the global changeid when an insert or update takes place */
  PROCEDURE updategblchangenotification(p_cachetablename IN changenotification.cachedtablename%TYPE) IS
    v_TableName VARCHAR2(50);
  BEGIN
    -- query the db to see if a record exist for a given table
    SELECT t.cachedtablename
      INTO v_TableName
      FROM globalchangenotification t
     WHERE t.cachedtablename = p_cachetablename;

    IF v_TableName IS NOT NULL THEN
      UPDATE globalchangenotification t
         SET t.changeid = SYSDATE
       WHERE t.cachedtablename = p_cachetablename;
    ELSE
      INSERT INTO globalchangenotification
        (changeid, cachedtablename)
      VALUES
        (SYSDATE, p_cachetablename);
    END IF;
  END updategblchangenotification;
END emoc_cache;

CREATE OR REPLACE PACKAGE BODY         "EMOC_SECURITY" AS
  g_key     RAW(32767)  := UTL_RAW.cast_to_raw('12345678');
  g_pad_chr VARCHAR2(1) := '~';

  PROCEDURE padstring (p_text  IN OUT  VARCHAR2);

  FUNCTION encrypt (p_text  IN  VARCHAR2) RETURN RAW IS
    l_text       VARCHAR2(32767) := p_text;
    l_encrypted  RAW(32767);
  BEGIN
    padstring(l_text);
    DBMS_OBFUSCATION_TOOLKIT.desencrypt(input          => UTL_RAW.cast_to_raw(l_text),
                                        key            => g_key,
                                        encrypted_data => l_encrypted);
    RETURN l_encrypted;
  END;

  FUNCTION decrypt (p_raw  IN  RAW) RETURN VARCHAR2 IS
    l_decrypted  VARCHAR2(32767);
  BEGIN

    if (p_raw is null) then
      return '';
    end if;

    DBMS_OBFUSCATION_TOOLKIT.desdecrypt(input => p_raw,
                                        key   => g_key,
                                        decrypted_data => l_decrypted);

    RETURN RTrim(UTL_RAW.cast_to_varchar2(l_decrypted), g_pad_chr);
  END;

  PROCEDURE padstring (p_text  IN OUT  VARCHAR2) IS
    l_units  NUMBER;
  BEGIN
    IF LENGTH(p_text) MOD 8 > 0 THEN
      l_units := TRUNC(LENGTH(p_text)/8) + 1;
      p_text  := RPAD(p_text, l_units * 8, g_pad_chr);
    END IF;
  END;

END emoc_security;


;

CREATE OR REPLACE PACKAGE BODY         "EMOC_STATUSCODES" AS
/* Delete MOC Status Icons By Status Code and Moc Id */
PROCEDURE DeleteMocStatusIcons(p_statuscode mocstatusicons.statuscode%TYPE, p_mocId mocstatusicons.mocid%TYPE) AS
BEGIN
DELETE FROM mocstatusicons t WHERE t.statuscode = p_statuscode AND t.mocid = p_mocId;
END DeleteMocStatusIcons;

/* Delete Status Code By Status Code Id */
PROCEDURE DeleteStatusCodeById(p_statuscodeid statuscode.statuscodeid%TYPE, p_mocId statuscode.mocid%TYPE) AS
v_StatusCode varchar2(50);
BEGIN
v_StatusCode := emoc_statuscodes.GetStatusCode(p_statuscodeid); DELETE statuscode t WHERE t.statuscodeid = p_statuscodeid;

emoc_statuscodes.DeleteMocStatusIcons(v_StatusCode, p_mocId);
END DeleteStatusCodeById;

/* Get Status Code By Status Cide Id */
FUNCTION GetStatusCode(p_statusCodeId statuscode.statuscodeid%TYPE) RETURN varchar2 AS
vStatusCode VARCHAR2(50);
begin
select t.statuscode into vStatusCode from statuscode t where t.statuscodeid = p_statusCodeId; return vStatusCode;
end;

END emoc_statuscodes;

CREATE OR REPLACE PACKAGE BODY         "EMOC_SYSTEMLINKS" 
AS
   /* Get UserImages By User ID */
   PROCEDURE getbymocid (
      p_cursor       OUT  systemlinkscursor,
      mocidin        IN   links.mocid%TYPE
   )
   IS
   BEGIN
      OPEN p_cursor FOR
               SELECT   linkid, linktitle, linkurl, linkdescription, enteredon,
               enteredby, lastupdated, linkorder, mocid
          FROM links
         WHERE links.mocid = mocidin
      ORDER BY linkorder, linkurl ASC;
   END getbymocid;
END emoc_systemlinks;

CREATE OR REPLACE PACKAGE BODY         "EMOC_USERIMAGES" 
AS
   /* Upload Image SP */
   PROCEDURE upload (
      p_image          IN   userimages.image%TYPE,
      p_userid         IN   userimages.userid%TYPE
   )
   IS
   BEGIN
      INSERT INTO userimages
                  (image, userid
                  )
           VALUES (p_image, p_userid
                  );
   END upload;

   /* Delete UserImages By User ID */
   PROCEDURE deletebyuserid (
      p_userid        IN   userimages.userid%TYPE
   )
   IS
   BEGIN
      DELETE FROM userimages t WHERE t.userid = p_userid;
   END deletebyuserid;

   /* Delete UserImages By Image ID */
   PROCEDURE deletebyimageid (
     p_imageid       IN   userimages.imageid%TYPE
   )
   IS
   BEGIN
      DELETE FROM userimages t WHERE t.imageid = p_imageid;
   END deletebyimageid;

   /* Get UserImages By User ID */
   PROCEDURE getbyimageid (
      p_imageid      IN   userimages.imageid%TYPE,
      p_cursor       OUT  imagecursor
   )
   IS
   BEGIN
      OPEN p_cursor FOR
         SELECT t.imageid, t.image, t.userid FROM userimages t WHERE t.imageid = p_imageid;
   END getbyimageid;

   /* Get UserImages By User ID */
   PROCEDURE getbyuserid (
      p_userid       IN   userimages.userid%TYPE,
      p_cursor       OUT  imagecursor
   )
   IS
   BEGIN
      OPEN p_cursor FOR
         SELECT t.imageid, t.image, t.userid, to_char(t.dateuploaded, 'dd-MON-yyyy') AS dateuploaded FROM userimages t WHERE t.userid = p_userid;
   END getbyuserid;
END emoc_userimages;


;

CREATE OR REPLACE PACKAGE BODY         "EMOC_USERLINKS" AS
  /* Get UserImages By User ID */
  PROCEDURE getbyuserid(p_userid IN userlinks.enteredby%TYPE,
                        p_cursor OUT userlinkscursor) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT t.linkid, t.linkurl, t.linktitle
        FROM userlinks t
       WHERE t.enteredby = p_userid;
  END getbyuserid;

  PROCEDURE add_user_link(linktitlein       userlinks.linktitle%TYPE,
                          linkurlin         userlinks.linkurl%TYPE,
                          linkdescriptionin userlinks.linkdescription%TYPE,
                          enteredbyin       userlinks.enteredby%TYPE,
                          linkorderin       userlinks.linkorder%TYPE,
                          linkid            OUT userlinks.linkid%TYPE) AS
  BEGIN
    SELECT seq_userlinks.NEXTVAL INTO linkid FROM DUAL;

    INSERT INTO userlinks
      (linkid, linktitle, linkurl, linkdescription, enteredby, linkorder)
    VALUES
      (linkid,
       linktitlein,
       linkurlin,
       linkdescriptionin,
       enteredbyin,
       linkorderin);
  END add_user_link;

  PROCEDURE get_user_links(p_cursor OUT emoc_types.emoc_cursor,
                           userid   userlinks.enteredby%TYPE) AS
  BEGIN
    -- RETURN THE CURSOR FOR THE RECORDSET
    OPEN p_cursor FOR
      SELECT linkid,
             linktitle,
             linkurl,
             linkdescription,
             enteredon,
             enteredby,
             lastupdated,
             linkorder
        FROM userlinks
       WHERE enteredby = userid
       ORDER BY linkorder, linkurl ASC;
  END get_user_links;

  PROCEDURE update_user_link(linktitlein       userlinks.linktitle%TYPE,
                             linkurlin         userlinks.linkurl%TYPE,
                             linkdescriptionin userlinks.linkdescription%TYPE,
                             linkorderin       userlinks.linkorder%TYPE,
                             linkidin          userlinks.linkid%TYPE) AS
  BEGIN
    UPDATE userlinks
       SET linktitle       = linktitlein,
           linkurl         = linkurlin,
           linkdescription = linkdescriptionin,
           linkorder       = linkorderin,
           lastupdated     = SYSDATE
     WHERE linkid = linkidin;
  END update_user_link;

  FUNCTION get_user_links_count_by_userid(p_userid NUMBER) RETURN NUMBER AS
    vRecordCount NUMBER;
  BEGIN
    SELECT COUNT(*)
      INTO vRecordCount
      FROM userlinks
     WHERE enteredby = p_userid;
    RETURN vRecordCount;
  END get_user_links_count_by_userid;

  PROCEDURE delete_user_Link_by_linkid(p_linkid userlinks.linkid%TYPE) AS
  BEGIN
    DELETE userlinks WHERE linkid = p_linkid;
  END delete_user_Link_by_linkid;
END emoc_userlinks;

CREATE OR REPLACE PACKAGE BODY         "EMOC_USERS" AS
  /* Get Online Users By MOC ID */
  PROCEDURE getonlineusersbymocid(p_mocid  IN NUMBER,
                                  p_cursor OUT onlineuserscursor) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT DISTINCT users.rankcode,
                      users.fullname,
                      TO_CHAR(users.lastlogin, 'MM/DD/YYYY HH24:MI:SS') AS login,
                      EMOC3.MOCADMINS.MOCID,
                      EMOC3.MOCUSERS.MOCID,
                      users.ISONLINE
        FROM users, EMOC3.MOCADMINS, EMOC3.MOCUSERS
       WHERE EMOC3.MOCADMINS.MOCID = p_mocid
         AND EMOC3.MOCUSERS.MOCID = p_mocid
         AND users.ISONLINE = 1
         AND users.fullname IS NOT NULL
       ORDER BY users.fullname;
  END getonlineusersbymocid;

  /* Get All Users By Full Name */
  PROCEDURE getallusersbyfullname(p_cursor OUT ref_cur) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT t.fullname FROM users t ORDER BY t.fullname;
  END getallusersbyfullname;

  /* Get All Users By Email Address */
  PROCEDURE getallusersbyemailaddress(p_cursor OUT ref_cur) IS
  BEGIN
    OPEN p_cursor FOR
      SELECT t.email FROM users t ORDER BY t.email;
  END getallusersbyemailaddress;
END emoc_users;

CREATE OR REPLACE PACKAGE BODY         "EMOC_UTILIZATIONCODES" AS

  /* Add Aircraft Utilization Code */

  PROCEDURE AddAircraftUtilCode(aucin          utilizationcodes.utilizationcode%TYPE,

                                aucnarrativein utilizationcodes.aucnarrative%TYPE,

                                pecin          utilizationcodes.programelementcode%TYPE,

                                mdsin          utilizationcodes.missiondesignseries%TYPE,

                                camsinitin     INTEGER,

                                utilcodeid     OUT utilizationcodes.utilcodeid%TYPE) AS

  BEGIN

    SELECT seq_utilcodes.NEXTVAL INTO utilcodeid FROM DUAL;



    INSERT INTO utilizationcodes

      (utilcodeid,

       utilizationcode,

       aucnarrative,

       programelementcode,

       missiondesignseries)

    VALUES

      (utilcodeid, aucin, aucnarrativein, pecin, mdsin);

    COMMIT;

    IF (camsinitin = 1) THEN

      UPDATE utilizationcodes

         SET camsinit = SYSDATE

       WHERE utilcodeid = utilcodeid;

    END IF;

  END AddAircraftUtilCode;

  /* Add Aircraft Utilization Code By Moc Id */

  PROCEDURE AddAircraftUtilCodeByMocId(aucin          utilizationcodes.utilizationcode%TYPE,

                                       aucnarrativein utilizationcodes.aucnarrative%TYPE,

                                       pecin          utilizationcodes.programelementcode%TYPE,

                                       mdsin          utilizationcodes.missiondesignseries%TYPE,

                                       camsinitin     INTEGER,

                                       mocidin        utilizationcodes.mocid%TYPE,

                                       utilcodeid     OUT utilizationcodes.utilcodeid%TYPE) AS

  BEGIN

    SELECT seq_utilcodes.NEXTVAL INTO utilcodeid FROM DUAL;

    INSERT INTO utilizationcodes

      (utilcodeid,

       utilizationcode,

       aucnarrative,

       programelementcode,

       mocid,

       missiondesignseries)

    VALUES

      (utilcodeid, aucin, aucnarrativein, pecin, mocidin, mdsin);

    IF (camsinitin = 1) THEN

      UPDATE utilizationcodes

         SET camsinit = SYSDATE

       WHERE utilcodeid = utilcodeid;

    END IF;

  END AddAircraftUtilCodeByMocId;

  /* Check if a record exist */

  FUNCTION CheckIfRecordExist(p_utilizationcode     VARCHAR2,

                              p_utilcodeid          NUMBER,

                              p_missiondesignseries VARCHAR2,

                              p_moocid              NUMBER) RETURN NUMBER AS

    vRecordCount NUMBER;

  BEGIN

    Select count(*)

      INTO vRecordCount

      FROM utilizationCodes t

     where t.utilizationcode = p_utilizationcode

       and t.utilcodeid <> p_utilcodeid

       and t.missiondesignseries = p_missiondesignseries

       and t.mocid = p_moocid;

    return vRecordCount;

  END CheckIfRecordExist;

  
  /* Check if a record exist */

  FUNCTION CheckForDuplicate(p_utilizationcode     VARCHAR2,

                             p_missiondesignseries VARCHAR2,

                              p_moocid              NUMBER) RETURN NUMBER AS

    vRecordCount NUMBER;

  BEGIN

    Select count(*)

      INTO vRecordCount

      FROM utilizationCodes t

     where t.utilizationcode = p_utilizationcode

       and t.missiondesignseries = p_missiondesignseries

       and t.mocid = p_moocid;

    return vRecordCount;

  END CheckForDuplicate;
  
  /* Delete Utilization Code by Id */

  PROCEDURE DeleteUtilCodeById(p_utilcodeid utilizationcodes.utilcodeid%TYPE) AS

  BEGIN

    delete UtilizationCodes t where t.utilcodeid = p_utilcodeid;

  END DeleteUtilCodeById;

  /* Get Row Count By Moc Id */

  FUNCTION GetRowCountByMocId(p_mocid NUMBER) return NUMBER AS

    vRecordCount NUMBER;

  BEGIN

    Select count(*)

      INTO vRecordCount

      from utilizationcodes t

     where t.mocid = p_mocid;

    return vRecordCount;

  END GetRowCountByMocId;

  /* Get Schedule Row Count By Utilization Code Id */

  FUNCTION GetSchRowCountByUtilCodeId(p_utilcodeid NUMBER) return NUMBER AS

    vRecordCount NUMBER;

  BEGIN

    Select count(*)

      INTO vRecordCount

      from schedule t

     where t.utilcodeid = p_utilcodeid;

    return vRecordCount;

  END GetSchRowCountByUtilCodeId;

  /* Get Row Count */

  FUNCTION GetRowCount return NUMBER AS

    vRecordCount NUMBER;

  BEGIN

    Select count(*) INTO vRecordCount from utilizationcodes t;

    return vRecordCount;

  END GetRowCount;

  /* Update Aircraft Utilization Code By Utilization Code Id */

  PROCEDURE UpdateACUtilCodeById(aucin          utilizationcodes.utilizationcode%TYPE,

                                 aucnarrativein utilizationcodes.aucnarrative%TYPE,

                                 pecin          utilizationcodes.programelementcode%TYPE,

                                 mdsin          utilizationcodes.missiondesignseries%TYPE,

                                 utilcodeidin   utilizationcodes.utilcodeid%TYPE) AS

  BEGIN

    UPDATE utilizationcodes

       SET utilizationcode     = aucin,

           aucnarrative        = aucnarrativein,

           programelementcode  = pecin,

           missiondesignseries = mdsin,

           lastupdate          = SYSDATE

     WHERE utilcodeid = utilcodeidin;

    COMMIT;

  END UpdateACUtilCodeById;

END Emoc_UtilizationCodes;

CREATE OR REPLACE PACKAGE BODY         "LOB_PKG" as

g_clob clob;


procedure lob_ins(p_id IN number, p_text IN varchar2 )
as
begin
     insert into tbmcsinterfacelog (interfacelogid, messagebody) values (p_id, empty_clob() ) returning messagebody into g_clob;
     dbms_lob.write( g_clob,length(p_text), 1,p_text);
end;

procedure add_more( p_text in varchar2 )
as
begin
    dbms_lob.writeappend( g_clob, length(p_text), p_text );
end;

end;
;

CREATE TRIGGER "EMOC3"."AIRCRAFTCACHE_TRG" 
	AFTER DELETE OR INSERT OR UPDATE ON "EMOC3"."AIRCRAFT"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
DECLARE
   v_recs   NUMBER;
BEGIN
   SELECT COUNT (*)
     INTO v_recs
     FROM changenotification
    WHERE cachedtablename = 'aircraft' AND mocid = :NEW.mocid;

   IF INSERTING
   THEN
      IF v_recs = 0
      THEN
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'aircraft', :NEW.mocid
                     );
      ELSE
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'aircraft' AND mocid = :OLD.mocid;
      END IF;
   ELSE
      IF v_recs > 0
      THEN
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'aircraft' AND mocid = :OLD.mocid;
      ELSE
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'aircraft', :OLD.mocid
                     );
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      INSERT INTO changenotification
                  (cachedtablename, changeid, mocid
                  )
           VALUES ('aircraft', SYSDATE, :NEW.mocid
                  );
   WHEN OTHERS
   THEN
      NULL;
END;
;

CREATE TRIGGER "EMOC3"."AIRCRAFTMDSCACHE_TRG" 
	AFTER DELETE OR INSERT OR UPDATE ON "EMOC3"."AIRCRAFTMDS"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
DECLARE
  v_recs NUMBER;
BEGIN
  SELECT COUNT(*)
    INTO v_recs
    FROM changenotification
   WHERE cachedtablename = 'aircraftmds'
     AND mocid = :NEW.mocid;

  IF INSERTING THEN
    IF v_recs = 0 THEN
      INSERT INTO changenotification
        (changeid, cachedtablename, mocid)
      VALUES
        (SYSDATE, 'aircraftmds', :NEW.mocid);
    ELSE
      UPDATE changenotification
         SET changeid = SYSDATE
       WHERE cachedtablename = 'aircraftmds'
         AND mocid = :OLD.mocid;
    END IF;
  ELSE
    IF v_recs > 0 THEN
      UPDATE changenotification
         SET changeid = SYSDATE
       WHERE cachedtablename = 'aircraftmds'
         AND mocid = :OLD.mocid;
    ELSE
      INSERT INTO changenotification
        (changeid, cachedtablename, mocid)
      VALUES
        (SYSDATE, 'aircraftmds', :OLD.mocid);
    END IF;
  END IF;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    INSERT INTO changenotification
      (cachedtablename, changeid, mocid)
    VALUES
      ('aircraftmds', SYSDATE, :NEW.mocid);
  WHEN OTHERS THEN
    NULL;
END;
;

CREATE TRIGGER "EMOC3"."AREASCACHE_TRG" 
	AFTER DELETE OR INSERT OR UPDATE ON "EMOC3"."AREAS"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
DECLARE
  v_recs NUMBER;
BEGIN
  SELECT COUNT(*)
    INTO v_recs
    FROM changenotification
   WHERE cachedtablename = 'areas'
     AND mocid = :NEW.mocid;

  IF INSERTING THEN
    IF v_recs = 0 THEN
      INSERT INTO changenotification
        (changeid, cachedtablename, mocid)
      VALUES
        (SYSDATE, 'areas', :NEW.mocid);
    ELSE
      UPDATE changenotification
         SET changeid = SYSDATE
       WHERE cachedtablename = 'areas'
         AND mocid = :OLD.mocid;
    END IF;
  ELSE
    IF v_recs > 0 THEN
      UPDATE changenotification
         SET changeid = SYSDATE
       WHERE cachedtablename = 'areas'
         AND mocid = :OLD.mocid;
    ELSE
      INSERT INTO changenotification
        (changeid, cachedtablename, mocid)
      VALUES
        (SYSDATE, 'areas', :OLD.mocid);
    END IF;
  END IF;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    INSERT INTO changenotification
      (cachedtablename, changeid, mocid)
    VALUES
      ('areas', SYSDATE, :NEW.mocid);
  WHEN OTHERS THEN
    NULL;
END;
;

CREATE TRIGGER "EMOC3"."BASEMAPS_TRI1" 
	BEFORE INSERT ON "EMOC3"."BASEMAPS"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
BEGIN
 SELECT SEQ_BASEMAPS.NEXTVAL INTO :NEW.MAPID FROM dual;
END;
;

CREATE TRIGGER "EMOC3"."CAUSECODESCACHE_TRG" 
	AFTER DELETE OR INSERT OR UPDATE ON "EMOC3"."CAUSECODES"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
DECLARE
   v_recs   NUMBER;
BEGIN
     SELECT COUNT(*)
    INTO v_recs
    FROM changenotification
   WHERE cachedtablename = 'causecodes'
     AND mocid = :NEW.mocid;

   IF INSERTING
   THEN
      IF v_recs = 0
      THEN
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'causecodes', :NEW.mocid
                     );
      ELSE
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'causecodes' AND mocid = :NEW.mocid;
      END IF;
   ELSE
      SELECT COUNT (*)
         INTO v_recs
        FROM changenotification
       WHERE cachedtablename = 'causecodes' AND mocid = :OLD.mocid;

      IF v_recs > 0
      THEN
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'causecodes' AND mocid = :OLD.mocid;
      ELSE
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'causecodes', :OLD.mocid
                     );
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      INSERT INTO changenotification
                  (cachedtablename, changeid, mocid
                  )
           VALUES ('causecodes', SYSDATE, :NEW.mocid
                  );
   WHEN OTHERS
   THEN
      NULL;
END;
;

CREATE TRIGGER "EMOC3"."CHECKLIST_TRI1" 
	BEFORE INSERT ON "EMOC3"."CHECKLIST"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
BEGIN
	SELECT SEQ_CHECKLIST.NEXTVAL INTO :NEW.CHECKLISTID FROM dual;
END;
;

CREATE TRIGGER "EMOC3"."COLORSCACHE_TRG" 
	AFTER DELETE OR INSERT OR UPDATE ON "EMOC3"."COLORS"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
DECLARE
   v_recs   NUMBER;
BEGIN
     SELECT COUNT(*)
    INTO v_recs
    FROM changenotification
   WHERE cachedtablename = 'colors'
     AND mocid = :NEW.mocid;

   IF INSERTING
   THEN
      IF v_recs = 0
      THEN
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'colors', :NEW.mocid
                     );
      ELSE
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'colors' AND mocid = :NEW.mocid;
      END IF;
   ELSE
      SELECT COUNT (*)
         INTO v_recs
        FROM changenotification
       WHERE cachedtablename = 'colors' AND mocid = :OLD.mocid;

      IF v_recs > 0
      THEN
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'colors' AND mocid = :OLD.mocid;
      ELSE
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'colors', :OLD.mocid
                     );
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      INSERT INTO changenotification
                  (cachedtablename, changeid, mocid
                  )
           VALUES ('colors', SYSDATE, :NEW.mocid
                  );
   WHEN OTHERS
   THEN
      NULL;
END;
;

CREATE TRIGGER "EMOC3"."CONDITIONCODESCACHE_TRG" 
	AFTER DELETE OR INSERT OR UPDATE ON "EMOC3"."CONDITIONCODES"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
DECLARE
   v_recs   NUMBER;
BEGIN
     SELECT COUNT(*)
    INTO v_recs
    FROM changenotification
   WHERE cachedtablename = 'conditioncodes'
     AND mocid = :NEW.mocid;

   IF INSERTING
   THEN
      IF v_recs = 0
      THEN
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'conditioncodes', :NEW.mocid
                     );
      ELSE
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'conditioncodes' AND mocid = :NEW.mocid;
      END IF;
   ELSE
      SELECT COUNT (*)
         INTO v_recs
        FROM changenotification
       WHERE cachedtablename = 'conditioncodes' AND mocid = :OLD.mocid;

      IF v_recs > 0
      THEN
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'conditioncodes' AND mocid = :OLD.mocid;
      ELSE
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'conditioncodes', :OLD.mocid
                     );
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      INSERT INTO changenotification
                  (cachedtablename, changeid, mocid
                  )
           VALUES ('conditioncodes', SYSDATE, :NEW.mocid
                  );
   WHEN OTHERS
   THEN
      NULL;
END;
;

CREATE TRIGGER "EMOC3"."CREWCHIEFSCACHE_TRG" 
	AFTER DELETE OR INSERT OR UPDATE ON "EMOC3"."CREWCHIEFS"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
DECLARE
   v_recs   NUMBER;
BEGIN
     SELECT COUNT(*)
    INTO v_recs
    FROM changenotification
   WHERE cachedtablename = 'crewchiefs'
     AND mocid = :NEW.mocid;

   IF INSERTING
   THEN
      IF v_recs = 0
      THEN
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'crewchiefs', :NEW.mocid
                     );
      ELSE
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'crewchiefs' AND mocid = :NEW.mocid;
      END IF;
   ELSE
      SELECT COUNT (*)
         INTO v_recs
        FROM changenotification
       WHERE cachedtablename = 'crewchiefs' AND mocid = :OLD.mocid;

      IF v_recs > 0
      THEN
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'crewchiefs' AND mocid = :OLD.mocid;
      ELSE
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'crewchiefs', :OLD.mocid
                     );
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      INSERT INTO changenotification
                  (cachedtablename, changeid, mocid
                  )
           VALUES ('crewchiefs', SYSDATE, :NEW.mocid
                  );
   WHEN OTHERS
   THEN
      NULL;
END;
;

CREATE TRIGGER "EMOC3"."CURRENTSTATUS" 
	AFTER INSERT OR UPDATE OF "CURRENTSTATUS" ON "EMOC3"."INTERFACECONTROL"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
begin
/*******************************************************************************************************/
/* Trigger Name: EMOC2.currentstatus
   Purpose: This trigger adds a row to the Interfacehistory table after a change in the currentstatus
   occurs.
   Author: Philip Brantley
   Revision History:  Version 1.0 - created 6-Aug-2003*/
/*******************************************************************************************************/


   insert into emoc3.interfacehistory
   (statuschangetime, statuschangeby, currentstatus, interfacecontrolid, currentenabled)
    values (sysdate, 0, :new.currentstatus, :new.interfacecontrolid, :new.interfaceenabled);

end;
;

CREATE TRIGGER "EMOC3"."DEVIATIONCODESCACHE_TRG" 
	AFTER DELETE OR INSERT OR UPDATE ON "EMOC3"."DEVIATIONCODES"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
DECLARE
   v_recs   NUMBER;
BEGIN
     SELECT COUNT(*)
    INTO v_recs
    FROM changenotification
   WHERE cachedtablename = 'deviationcodes'
     AND mocid = :NEW.mocid;

   IF INSERTING
   THEN
      IF v_recs = 0
      THEN
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'deviationcodes', :NEW.mocid
                     );
      ELSE
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'deviationcodes' AND mocid = :NEW.mocid;
      END IF;
   ELSE
      SELECT COUNT (*)
         INTO v_recs
        FROM changenotification
       WHERE cachedtablename = 'deviationcodes' AND mocid = :OLD.mocid;

      IF v_recs > 0
      THEN
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'deviationcodes' AND mocid = :OLD.mocid;
      ELSE
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'deviationcodes', :OLD.mocid
                     );
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      INSERT INTO changenotification
                  (cachedtablename, changeid, mocid
                  )
           VALUES ('deviationcodes', SYSDATE, :NEW.mocid
                  );
   WHEN OTHERS
   THEN
      NULL;
END;
;

CREATE TRIGGER "EMOC3"."EMOCAPPCONFIGURATION_INSTRG" 
	BEFORE INSERT ON "EMOC3"."EMOCAPPCONFIGURATION"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
BEGIN
    -- Find serverid sequence and Update id field
    SELECT seq_emocappconfiguration.NEXTVAL INTO :NEW.configid FROM dual;

    -- Update lastupdateddate field to current system date
    :NEW.LastUpdatedDate := SYSDATE;
END;
;

CREATE TRIGGER "EMOC3"."EMOCAPPCONFIGURATION_UPDATETRG" 
	BEFORE UPDATE ON "EMOC3"."EMOCAPPCONFIGURATION"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
BEGIN
    -- Update lastupdateddate field to current system date
    :NEW.LastUpdatedDate := SYSDATE;
END;
;

CREATE TRIGGER "EMOC3"."FIRESYMBOLSCACHE_TRG" 
	AFTER DELETE OR INSERT OR UPDATE ON "EMOC3"."FIRESYMBOLS"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
DECLARE
   v_recs   NUMBER;
BEGIN
     SELECT COUNT(*)
    INTO v_recs
    FROM changenotification
   WHERE cachedtablename = 'firesymbols'
     AND mocid = :NEW.mocid;

   IF INSERTING
   THEN
      IF v_recs = 0
      THEN
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'firesymbols', :NEW.mocid
                     );
      ELSE
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'firesymbols' AND mocid = :NEW.mocid;
      END IF;
   ELSE
      SELECT COUNT (*)
         INTO v_recs
        FROM changenotification
       WHERE cachedtablename = 'firesymbols' AND mocid = :OLD.mocid;

      IF v_recs > 0
      THEN
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'firesymbols' AND mocid = :OLD.mocid;
      ELSE
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'firesymbols', :OLD.mocid
                     );
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      INSERT INTO changenotification
                  (cachedtablename, changeid, mocid
                  )
           VALUES ('firesymbols', SYSDATE, :NEW.mocid
                  );
   WHEN OTHERS
   THEN
      NULL;
END;
;

CREATE TRIGGER "EMOC3"."FUELCODESCACHE_TRG" 
	AFTER DELETE OR INSERT OR UPDATE ON "EMOC3"."FUEL"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
DECLARE
   v_recs   NUMBER;
BEGIN
     SELECT COUNT(*)
    INTO v_recs
    FROM changenotification
   WHERE cachedtablename = 'fuel'
     AND mocid = :NEW.mocid;

   IF INSERTING
   THEN
      IF v_recs = 0
      THEN
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'fuel', :NEW.mocid
                     );
      ELSE
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'fuel' AND mocid = :NEW.mocid;
      END IF;
   ELSE
      SELECT COUNT (*)
         INTO v_recs
        FROM changenotification
       WHERE cachedtablename = 'fuel' AND mocid = :OLD.mocid;

      IF v_recs > 0
      THEN
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'fuel' AND mocid = :OLD.mocid;
      ELSE
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'fuel', :OLD.mocid
                     );
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      INSERT INTO changenotification
                  (cachedtablename, changeid, mocid
                  )
           VALUES ('fuel', SYSDATE, :NEW.mocid
                  );
   WHEN OTHERS
   THEN
      NULL;
END;
;

CREATE TRIGGER "EMOC3"."HANGERQUEENCACHE_TRG" 
	AFTER DELETE OR INSERT OR UPDATE ON "EMOC3"."HANGER_QUEEN_CODE"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
DECLARE
   v_recs   NUMBER;
BEGIN
     SELECT COUNT(*)
    INTO v_recs
    FROM changenotification
   WHERE cachedtablename = 'hanger_queen_code'
     AND mocid = :NEW.mocid;

   IF INSERTING
   THEN
      IF v_recs = 0
      THEN
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'hanger_queen_code', :NEW.mocid
                     );
      ELSE
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'hanger_queen_code' AND mocid = :NEW.mocid;
      END IF;
   ELSE
      SELECT COUNT (*)
         INTO v_recs
        FROM changenotification
       WHERE cachedtablename = 'hanger_queen_code' AND mocid = :OLD.mocid;

      IF v_recs > 0
      THEN
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'hanger_queen_code' AND mocid = :OLD.mocid;
      ELSE
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'hanger_queen_code', :OLD.mocid
                     );
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      INSERT INTO changenotification
                  (cachedtablename, changeid, mocid
                  )
           VALUES ('hanger_queen_code', SYSDATE, :NEW.mocid
                  );
   WHEN OTHERS
   THEN
      NULL;
END;
;

CREATE TRIGGER "EMOC3"."JOAPCODESCACHE_TRG" 
	AFTER DELETE OR INSERT OR UPDATE ON "EMOC3"."JOAP"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
DECLARE
   v_recs   NUMBER;
BEGIN
        SELECT COUNT(*)
    INTO v_recs
    FROM changenotification
   WHERE cachedtablename = 'joap'
     AND mocid = :NEW.mocid;

   IF INSERTING
   THEN
      IF v_recs = 0
      THEN
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'joap', :NEW.mocid
                     );
      ELSE
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'joap' AND mocid = :NEW.mocid;
      END IF;
   ELSE
      SELECT COUNT (*)
         INTO v_recs
        FROM changenotification
       WHERE cachedtablename = 'joap' AND mocid = :OLD.mocid;

      IF v_recs > 0
      THEN
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'joap' AND mocid = :OLD.mocid;
      ELSE
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'joap', :OLD.mocid
                     );
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      INSERT INTO changenotification
                  (cachedtablename, changeid, mocid
                  )
           VALUES ('joap', SYSDATE, :NEW.mocid
                  );
   WHEN OTHERS
   THEN
      NULL;
END;
;

CREATE TRIGGER "EMOC3"."LANDINGCODESCACHE_TRG" 
	AFTER DELETE OR INSERT OR UPDATE ON "EMOC3"."LANDINGCODES"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
DECLARE
   v_recs   NUMBER;
BEGIN
        SELECT COUNT(*)
    INTO v_recs
    FROM changenotification
   WHERE cachedtablename = 'landingcodes'
     AND mocid = :NEW.mocid;

   IF INSERTING
   THEN
      IF v_recs = 0
      THEN
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'landingcodes', :NEW.mocid
                     );
      ELSE
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'landingcode' AND mocid = :NEW.mocid;
      END IF;
   ELSE
      SELECT COUNT (*)
         INTO v_recs
        FROM changenotification
       WHERE cachedtablename = 'landingcodes' AND mocid = :OLD.mocid;

      IF v_recs > 0
      THEN
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'landingcodes' AND mocid = :OLD.mocid;
      ELSE
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'landingcodes', :OLD.mocid
                     );
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      INSERT INTO changenotification
                  (cachedtablename, changeid, mocid
                  )
           VALUES ('landingcodes', SYSDATE, :NEW.mocid
                  );
   WHEN OTHERS
   THEN
      NULL;
END;
;

CREATE TRIGGER "EMOC3"."LOCATIONSCACHE_TRG" 
	AFTER DELETE OR INSERT OR UPDATE ON "EMOC3"."LOCATIONS"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
DECLARE
   v_recs   NUMBER;
BEGIN
        SELECT COUNT(*)
    INTO v_recs
    FROM changenotification
   WHERE cachedtablename = 'locations'
     AND mocid = :NEW.mocid;

   IF INSERTING
   THEN
      IF v_recs = 0
      THEN
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'locations', :NEW.mocid
                     );
      ELSE
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'locations' AND mocid = :NEW.mocid;
      END IF;
   ELSE
      SELECT COUNT (*)
         INTO v_recs
        FROM changenotification
       WHERE cachedtablename = 'locations' AND mocid = :OLD.mocid;

      IF v_recs > 0
      THEN
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'locations' AND mocid = :OLD.mocid;
      ELSE
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'locations', :OLD.mocid
                     );
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      INSERT INTO changenotification
                  (cachedtablename, changeid, mocid
                  )
           VALUES ('locations', SYSDATE, :NEW.mocid
                  );
   WHEN OTHERS
   THEN
      NULL;
END;
;

CREATE TRIGGER "EMOC3"."MISSIONSCACHE_TRG" 
	AFTER DELETE OR INSERT OR UPDATE ON "EMOC3"."MISSIONS"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
DECLARE
   v_recs   NUMBER;
BEGIN
        SELECT COUNT(*)
    INTO v_recs
    FROM changenotification
   WHERE cachedtablename = 'missions'
     AND mocid = :NEW.mocid;

   IF INSERTING
   THEN
      IF v_recs = 0
      THEN
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'missions', :NEW.mocid
                     );
      ELSE
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'missions' AND mocid = :NEW.mocid;
      END IF;
   ELSE
      SELECT COUNT (*)
         INTO v_recs
        FROM changenotification
       WHERE cachedtablename = 'missions' AND mocid = :OLD.mocid;

      IF v_recs > 0
      THEN
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'missions' AND mocid = :OLD.mocid;
      ELSE
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'missions', :OLD.mocid
                     );
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      INSERT INTO changenotification
                  (cachedtablename, changeid, mocid
                  )
           VALUES ('missions', SYSDATE, :NEW.mocid
                  );
   WHEN OTHERS
   THEN
      NULL;
END;
;

CREATE TRIGGER "EMOC3"."PILOTSCACHE_TRG" 
	AFTER DELETE OR INSERT OR UPDATE ON "EMOC3"."PILOT"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
DECLARE
   v_recs   NUMBER;
BEGIN
        SELECT COUNT(*)
    INTO v_recs
    FROM changenotification
   WHERE cachedtablename = 'pilot'
     AND mocid = :NEW.mocid;

   IF INSERTING
   THEN
      IF v_recs = 0
      THEN
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'pilot', :NEW.mocid
                     );
      ELSE
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'pilot' AND mocid = :NEW.mocid;
      END IF;
   ELSE
      SELECT COUNT (*)
         INTO v_recs
        FROM changenotification
       WHERE cachedtablename = 'pilot' AND mocid = :OLD.mocid;

      IF v_recs > 0
      THEN
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'pilot' AND mocid = :OLD.mocid;
      ELSE
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'pilot', :OLD.mocid
                     );
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      INSERT INTO changenotification
                  (cachedtablename, changeid, mocid
                  )
           VALUES ('pilot', SYSDATE, :NEW.mocid
                  );
   WHEN OTHERS
   THEN
      NULL;
END;
;

CREATE TRIGGER "EMOC3"."POSSESSIONCODESCACHE_TRG" 
	AFTER DELETE OR INSERT OR UPDATE ON "EMOC3"."POSSESSIONS"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
DECLARE
   v_recs   NUMBER;
BEGIN
        SELECT COUNT(*)
    INTO v_recs
    FROM changenotification
   WHERE cachedtablename = 'possessions'
     AND mocid = :NEW.mocid;

   IF INSERTING
   THEN
      IF v_recs = 0
      THEN
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'possessions', :NEW.mocid
                     );
      ELSE
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'possessions' AND mocid = :NEW.mocid;
      END IF;
   ELSE
      SELECT COUNT (*)
         INTO v_recs
        FROM changenotification
       WHERE cachedtablename = 'possessions' AND mocid = :OLD.mocid;

      IF v_recs > 0
      THEN
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'possessions' AND mocid = :OLD.mocid;
      ELSE
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'possessions', :OLD.mocid
                     );
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      INSERT INTO changenotification
                  (cachedtablename, changeid, mocid
                  )
           VALUES ('possessions', SYSDATE, :NEW.mocid
                  );
   WHEN OTHERS
   THEN
      NULL;
END;
;

CREATE TRIGGER "EMOC3"."RANGESCACHE_TRG" 
	AFTER DELETE OR INSERT OR UPDATE ON "EMOC3"."RANGES"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
DECLARE
   v_recs   NUMBER;
BEGIN
        SELECT COUNT(*)
    INTO v_recs
    FROM changenotification
   WHERE cachedtablename = 'ranges'
     AND mocid = :NEW.mocid;

   IF INSERTING
   THEN
      IF v_recs = 0
      THEN
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'ranges', :NEW.mocid
                     );
      ELSE
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'ranges' AND mocid = :NEW.mocid;
      END IF;
   ELSE
      SELECT COUNT (*)
         INTO v_recs
        FROM changenotification
       WHERE cachedtablename = 'ranges' AND mocid = :OLD.mocid;

      IF v_recs > 0
      THEN
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'ranges' AND mocid = :OLD.mocid;
      ELSE
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'ranges', :OLD.mocid
                     );
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      INSERT INTO changenotification
                  (cachedtablename, changeid, mocid
                  )
           VALUES ('ranges', SYSDATE, :NEW.mocid
                  );
   WHEN OTHERS
   THEN
      NULL;
END;
;

CREATE TRIGGER "EMOC3"."RANKSCACHE_TRG" 
	AFTER DELETE OR INSERT OR UPDATE ON "EMOC3"."RANKS"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
DECLARE
   v_recs   NUMBER;
BEGIN
        SELECT COUNT(*)
    INTO v_recs
    FROM changenotification
   WHERE cachedtablename = 'ranks'
     AND mocid = :NEW.mocid;

   IF INSERTING
   THEN
      IF v_recs = 0
      THEN
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'ranks', :NEW.mocid
                     );
      ELSE
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'ranks' AND mocid = :NEW.mocid;
      END IF;
   ELSE
      SELECT COUNT (*)
         INTO v_recs
        FROM changenotification
       WHERE cachedtablename = 'ranks' AND mocid = :OLD.mocid;

      IF v_recs > 0
      THEN
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'ranks' AND mocid = :OLD.mocid;
      ELSE
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'ranks', :OLD.mocid
                     );
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      INSERT INTO changenotification
                  (cachedtablename, changeid, mocid
                  )
           VALUES ('ranks', SYSDATE, :NEW.mocid
                  );
   WHEN OTHERS
   THEN
      NULL;
END;
;

CREATE TRIGGER "EMOC3"."SEMDEXCACHE_TRG" 
	AFTER DELETE OR INSERT OR UPDATE ON "EMOC3"."SEMEDX"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
DECLARE
   v_recs   NUMBER;
BEGIN
        SELECT COUNT(*)
    INTO v_recs
    FROM changenotification
   WHERE cachedtablename = 'semdx'
     AND mocid = :NEW.mocid;

   IF INSERTING
   THEN
      IF v_recs = 0
      THEN
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'semdx', :NEW.mocid
                     );
      ELSE
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'semdx' AND mocid = :NEW.mocid;
      END IF;
   ELSE
      SELECT COUNT (*)
         INTO v_recs
        FROM changenotification
       WHERE cachedtablename = 'semdx' AND mocid = :OLD.mocid;

      IF v_recs > 0
      THEN
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'semdx' AND mocid = :OLD.mocid;
      ELSE
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'semdx', :OLD.mocid
                     );
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      INSERT INTO changenotification
                  (cachedtablename, changeid, mocid
                  )
           VALUES ('semdx', SYSDATE, :NEW.mocid
                  );
   WHEN OTHERS
   THEN
      NULL;
END;
;

CREATE TRIGGER "EMOC3"."SQUADRONSCACHE_TRG" 
	AFTER DELETE OR INSERT OR UPDATE ON "EMOC3"."SQUADRONS"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
DECLARE
   v_recs   NUMBER;
BEGIN
        SELECT COUNT(*)
    INTO v_recs
    FROM changenotification
   WHERE cachedtablename = 'squadrons'
     AND mocid = :NEW.mocid;

   IF INSERTING
   THEN
      IF v_recs = 0
      THEN
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'squadrons', :NEW.mocid
                     );
      ELSE
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'squadrons' AND mocid = :NEW.mocid;
      END IF;
   ELSE
      SELECT COUNT (*)
         INTO v_recs
        FROM changenotification
       WHERE cachedtablename = 'squadrons' AND mocid = :OLD.mocid;

      IF v_recs > 0
      THEN
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'squadrons' AND mocid = :OLD.mocid;
      ELSE
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'squadrons', :OLD.mocid
                     );
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      INSERT INTO changenotification
                  (cachedtablename, changeid, mocid
                  )
           VALUES ('squadrons', SYSDATE, :NEW.mocid
                  );
   WHEN OTHERS
   THEN
      NULL;
END;
;

CREATE TRIGGER "EMOC3"."STATIONLOCCODESCACHE_TRG" 
	AFTER DELETE OR INSERT OR UPDATE ON "EMOC3"."STATIONLOCCODES"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
DECLARE
   v_recs   NUMBER;
BEGIN
           SELECT COUNT(*)
    INTO v_recs
    FROM changenotification
   WHERE cachedtablename = 'stationloccodes'
     AND mocid = :NEW.mocid;

   IF INSERTING
   THEN
      IF v_recs = 0
      THEN
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'stationloccodes', :NEW.mocid
                     );
      ELSE
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'stationloccodes' AND mocid = :NEW.mocid;
      END IF;
   ELSE
      SELECT COUNT (*)
         INTO v_recs
        FROM changenotification
       WHERE cachedtablename = 'stationloccodes' AND mocid = :OLD.mocid;

      IF v_recs > 0
      THEN
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'stationloccodes' AND mocid = :OLD.mocid;
      ELSE
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'stationloccodes', :OLD.mocid
                     );
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      INSERT INTO changenotification
                  (cachedtablename, changeid, mocid
                  )
           VALUES ('stationloccodes', SYSDATE, :NEW.mocid
                  );
   WHEN OTHERS
   THEN
      NULL;
END;
;

CREATE TRIGGER "EMOC3"."STATUSCODESCACHE_TRG" 
	AFTER DELETE OR INSERT OR UPDATE ON "EMOC3"."STATUSCODE"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
DECLARE
   v_recs   NUMBER;
BEGIN
           SELECT COUNT(*)
    INTO v_recs
    FROM changenotification
   WHERE cachedtablename = 'statuscode'
     AND mocid = :NEW.mocid;

   IF INSERTING
   THEN
      IF v_recs = 0
      THEN
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'statuscode', :NEW.mocid
                     );
      ELSE
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'statuscode' AND mocid = :NEW.mocid;
      END IF;
   ELSE
      SELECT COUNT (*)
         INTO v_recs
        FROM changenotification
       WHERE cachedtablename = 'statuscode' AND mocid = :OLD.mocid;

      IF v_recs > 0
      THEN
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'statuscode' AND mocid = :OLD.mocid;
      ELSE
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'statuscode', :OLD.mocid
                     );
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      INSERT INTO changenotification
                  (cachedtablename, changeid, mocid
                  )
           VALUES ('statuscode', SYSDATE, :NEW.mocid
                  );
   WHEN OTHERS
   THEN
      NULL;
END;
;

CREATE TRIGGER "EMOC3"."STATUSTRANSRULECACHE_TRG" 
	AFTER DELETE OR INSERT OR UPDATE ON "EMOC3"."STATUSTRANSITIONRULE"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
DECLARE
   v_recs   NUMBER;
BEGIN
           SELECT COUNT(*)
    INTO v_recs
    FROM changenotification
   WHERE cachedtablename = 'statustransitionrule'
     AND mocid = :NEW.mocid;

   IF INSERTING
   THEN
      IF v_recs = 0
      THEN
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'statustransitionrule', :NEW.mocid
                     );
      ELSE
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'statustransitionrule' AND mocid = :NEW.mocid;
      END IF;
   ELSE
      SELECT COUNT (*)
         INTO v_recs
        FROM changenotification
       WHERE cachedtablename = 'statustransitionrule' AND mocid = :OLD.mocid;

      IF v_recs > 0
      THEN
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'statustransitionrule' AND mocid = :OLD.mocid;
      ELSE
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'statustransitionrule', :OLD.mocid
                     );
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      INSERT INTO changenotification
                  (cachedtablename, changeid, mocid
                  )
           VALUES ('statustransitionrule', SYSDATE, :NEW.mocid
                  );
   WHEN OTHERS
   THEN
      NULL;
END;
;

CREATE TRIGGER "EMOC3"."SYMBOLSCACHE_TRG" 
	AFTER DELETE OR INSERT OR UPDATE ON "EMOC3"."SYMBOLS"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
DECLARE
   v_recs   NUMBER;
BEGIN

           SELECT COUNT(*)
    INTO v_recs
    FROM changenotification
   WHERE cachedtablename = 'symbols'
     AND mocid = :NEW.mocid;
   IF INSERTING
   THEN
      IF v_recs = 0
      THEN
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'symbols', :NEW.mocid
                     );
      ELSE
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'symbols' AND mocid = :NEW.mocid;
      END IF;
   ELSE
      SELECT COUNT (*)
         INTO v_recs
        FROM changenotification
       WHERE cachedtablename = 'symbols' AND mocid = :OLD.mocid;

      IF v_recs > 0
      THEN
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'symbols' AND mocid = :OLD.mocid;
      ELSE
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'symbols', :OLD.mocid
                     );
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      INSERT INTO changenotification
                  (cachedtablename, changeid, mocid
                  )
           VALUES ('symbols', SYSDATE, :NEW.mocid
                  );
   WHEN OTHERS
   THEN
      NULL;
END;
;

CREATE TRIGGER "EMOC3"."USERIMAGES_INSTRG" 
	BEFORE INSERT ON "EMOC3"."USERIMAGES"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
DECLARE
    v_imageid      userimages.imageid%TYPE;
    v_dateuploaded userimages.dateuploaded%TYPE;

BEGIN

    -- Find imageid sequence
    SELECT seq_userimages.Nextval INTO v_imageid FROM dual;

    -- Update dateuploaded field to current system date
    :new.dateuploaded := sysdate;

    -- Update imageid field
    :new.imageid := v_imageid;

END;
;

CREATE TRIGGER "EMOC3"."WEAPONCLASSCACHE_TRG" 
	AFTER DELETE OR INSERT OR UPDATE ON "EMOC3"."WEAPONSCLASS"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
DECLARE
   v_recs   NUMBER;
BEGIN
              SELECT COUNT(*)
    INTO v_recs
    FROM changenotification
   WHERE cachedtablename = 'weaponclass'
     AND mocid = :NEW.mocid;

   IF INSERTING
   THEN
      IF v_recs = 0
      THEN
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'weaponsclass', :NEW.mocid
                     );
      ELSE
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'weaponsclass' AND mocid = :NEW.mocid;
      END IF;
   ELSE
      SELECT COUNT (*)
         INTO v_recs
        FROM changenotification
       WHERE cachedtablename = 'weaponsclass' AND mocid = :OLD.mocid;

      IF v_recs > 0
      THEN
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'weaponsclass' AND mocid = :OLD.mocid;
      ELSE
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'weaponsclass', :OLD.mocid
                     );
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      INSERT INTO changenotification
                  (cachedtablename, changeid, mocid
                  )
           VALUES ('weaponsclass', SYSDATE, :NEW.mocid
                  );
   WHEN OTHERS
   THEN
      NULL;
END;
;

CREATE TRIGGER "EMOC3"."WEATHERCODESCACHE_TRG" 
	AFTER DELETE OR INSERT OR UPDATE ON "EMOC3"."WX"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
DECLARE
   v_recs   NUMBER;
BEGIN
              SELECT COUNT(*)
    INTO v_recs
    FROM changenotification
   WHERE cachedtablename = 'wx'
     AND mocid = :NEW.mocid;

   IF INSERTING
   THEN
      IF v_recs = 0
      THEN
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'wx', :NEW.mocid
                     );
      ELSE
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'wx' AND mocid = :NEW.mocid;
      END IF;
   ELSE
      SELECT COUNT (*)
         INTO v_recs
        FROM changenotification
       WHERE cachedtablename = 'wx' AND mocid = :OLD.mocid;

      IF v_recs > 0
      THEN
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'wx' AND mocid = :OLD.mocid;
      ELSE
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'wx', :OLD.mocid
                     );
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      INSERT INTO changenotification
                  (cachedtablename, changeid, mocid
                  )
           VALUES ('wx', SYSDATE, :NEW.mocid
                  );
   WHEN OTHERS
   THEN
      NULL;
END;
;

CREATE TRIGGER "EMOC3"."WINGSCACHE_TRG" 
	AFTER DELETE OR INSERT OR UPDATE ON "EMOC3"."WINGS"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
DECLARE
   v_recs   NUMBER;
BEGIN

   IF INSERTING
   THEN
       SELECT COUNT (*)
     INTO v_recs
     FROM changenotification
    WHERE cachedtablename = 'wings' AND mocid = :NEW.mocid;

      IF v_recs = 0
      THEN
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'wings', :NEW.mocid
                     );
      ELSE
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'wings' AND mocid = :NEW.mocid;
      END IF;
   ELSE
       SELECT COUNT (*)
     INTO v_recs
     FROM changenotification
    WHERE cachedtablename = 'wings' AND mocid = :OLD.mocid;

      IF v_recs > 0
      THEN
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'wings' AND mocid = :OLD.mocid;
      ELSE
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'wings', :OLD.mocid
                     );
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      INSERT INTO changenotification
                  (cachedtablename, changeid, mocid
                  )
           VALUES ('wings', SYSDATE, :NEW.mocid
                  );
   WHEN OTHERS
   THEN
      NULL;
END;
;

CREATE TRIGGER "EMOC3"."WORKCENTERSCACHE_TRG" 
	AFTER DELETE OR INSERT OR UPDATE ON "EMOC3"."WORKCENTERS"
	REFERENCING NEW AS NEW OLD AS OLD
	FOR EACH ROW
DECLARE
   v_recs   NUMBER;
BEGIN


   IF INSERTING
   THEN
      SELECT COUNT (*)
                 INTO v_recs
                 FROM changenotification
                 WHERE cachedtablename = 'workcenters' AND mocid = :NEW.mocid;

      IF v_recs = 0
      THEN
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'workcenters', :NEW.mocid
                     );
      ELSE
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'workcenters' AND mocid = :NEW.mocid;
      END IF;
   ELSE
          SELECT COUNT (*)
                 INTO v_recs
                 FROM changenotification
                 WHERE cachedtablename = 'workcenters' AND mocid = :OLD.mocid;

      IF v_recs > 0
      THEN
         UPDATE changenotification
            SET changeid = SYSDATE
          WHERE cachedtablename = 'workcenters' AND mocid = :OLD.mocid;
      ELSE
         INSERT INTO changenotification
                     (changeid, cachedtablename, mocid
                     )
              VALUES (SYSDATE, 'workcenters', :OLD.mocid
                     );
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      INSERT INTO changenotification
                  (cachedtablename, changeid, mocid
                  )
           VALUES ('workcenters', SYSDATE, :NEW.mocid
                  );
   WHEN OTHERS
   THEN
      NULL;
END;
;

GRANT DELETE ON  "EMOC3"."ACFTMDSTYPES" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."ACFTMDSTYPES" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."AIRCRAFT" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."AIRCRAFT" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."AIRCRAFTCUSTOMDATA" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."AIRCRAFTCUSTOMDATA" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."AIRCRAFTENGINEDATA" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."AIRCRAFTENGINEDATA" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."AIRCRAFTEXTRACTTRX" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."AIRCRAFTEXTRACTTRX" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."AIRCRAFTMDS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."AIRCRAFTMDS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."AIRCRAFTSTATUSUPDATE" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."AIRCRAFTSTATUSUPDATE" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."AIRCRAFTVIEW" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."AIRCRAFT_ARCHIVE_VIEW" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."AIRCRAFT_ENGINE_DATA_VIEW" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."AIRCRAFT_HISTORY_ARCHIVE_VIEW" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."AIRCRAFT_HISTORY_VIEW" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."AIRCRAFT_STATUSBOARD_VIEW" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."AIRCRAFT_STATUSUPDATE_VIEW" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."ALL_AIRCRAFT_DATA_VIEW" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."AREAS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."AREAS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."ARMAMENT" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."ARMAMENT" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."ASSIGNMENTCODES" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."ASSIGNMENTCODES" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."BASEMAPS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."BASEMAPS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."BRIEF_AIRCRAFT_STATUS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."BRIEF_AIRCRAFT_STATUS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."BRIEF_DEVIATIONS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."BRIEF_DEVIATIONS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."BRIEF_FLYING_SCHEDULE" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."BRIEF_FLYING_SCHEDULE" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."BRIEF_FLYING_STATUS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."BRIEF_FLYING_STATUS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."BRIEF_HANGAR_QUEEN" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."BRIEF_HANGAR_QUEEN" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."BRIEF_MICAPS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."BRIEF_MICAPS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."BRIEF_NEXT_WEEKS_PLAN" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."BRIEF_NEXT_WEEKS_PLAN" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."BRIEF_POT_HANGAR_QUEEN" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."BRIEF_POT_HANGAR_QUEEN" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."BRIEF_SCHEDULE_OVERVIEW" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."BRIEF_SCHEDULE_OVERVIEW" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."BRIEF_WING_STATUS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."BRIEF_WING_STATUS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."BRIEF_WING_STATUS_VIEW" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."CAUSECODES" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."CAUSECODES" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."CAUSECODETRX" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."CAUSECODETRX" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."CHANGENOTIFICATION" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."CHANGENOTIFICATION" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."CHECKLIST" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."CHECKLIST" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."COLORRULES" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."COLORRULES" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."COLORS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."COLORS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."COMBATSCLRULES" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."COMBATSCLRULES" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."COMBATSCLS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."COMBATSCLS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."CONDITIONCODES" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."CONDITIONCODES" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."CONDITIONSTATUS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."CONDITIONSTATUS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."COUNTRYCODES" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."COUNTRYCODES" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."CREWCHIEFS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."CREWCHIEFS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."CUSTOMDATA" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."CUSTOMDATA" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."CUSTOMDATALISTITEM" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."CUSTOMDATALISTITEM" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."CUSTOMDATAMDS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."CUSTOMDATAMDS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."CUSTOM_DATA_VIEW" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."DEVIATIONABORTTRX" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."DEVIATIONABORTTRX" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."DEVIATIONCODES" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."DEVIATIONCODES" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."DEVIATIONCODETRX" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."DEVIATIONCODETRX" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."DEVIATIONCODEVIEW" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."DEVIATIONCORRECTIONTRX" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."DEVIATIONCORRECTIONTRX" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."DEVIATIONDELETETRX" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."DEVIATIONDELETETRX" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."DEVIATIONSTARTSTOPTRX" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."DEVIATIONSTARTSTOPTRX" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."EMOCAPPCONFIGURATION" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."EMOCAPPCONFIGURATION" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."EMOCCONFIG" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."EMOCCONFIG" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."EMOCHELP" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."EMOCHELP" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."ENGINERUNLOG" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."ENGINERUNLOG" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."EQUIPMENTLOCATIONUPDATETRX" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."EQUIPMENTLOCATIONUPDATETRX" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."EVENTLOG" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."EVENTLOG" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."EXPORT000021" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."EXPORT000021" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."FIELDNAMES" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."FIELDNAMES" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."FILEMON" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."FILEMON" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."FIRESYMBOLS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."FIRESYMBOLS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."FLIGHTS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."FLIGHTS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."FLIGHTSVIEW" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."FLYBOARD_ARCHIVE_VIEW" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."FLYBOARD_VIEW" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."FUEL" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."FUEL" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."GAINLOSSSTATUSUPDATETRX" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."GAINLOSSSTATUSUPDATETRX" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."GENERATIONFLOW" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."GENERATIONFLOW" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."GENERATIONFLOWITEMS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."GENERATIONFLOWITEMS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."GENERATIONFLOWPROGRESS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."GENERATIONFLOWPROGRESS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."GENERATIONFLOWSTEPS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."GENERATIONFLOWSTEPS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."GEOLOCCODETRX" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."GEOLOCCODETRX" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."GLOBALCHANGENOTIFICATION" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."GLOBALCHANGENOTIFICATION" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."GRADECODES" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."GRADECODES" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."HANGER_QUEEN_CODE" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."HANGER_QUEEN_CODE" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."HISTORY" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."HISTORY" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."HOTSPOTS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."HOTSPOTS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."IMDSCDBELCUNITOPTION" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."IMDSCDBELCUNITOPTION" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."IMDSCDBINTERFACEOPTION" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."IMDSCDBINTERFACEOPTION" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."IMDSLOGINS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."IMDSLOGINS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."INTERFACECONTROL" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."INTERFACECONTROL" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."INTERFACEHISTORY" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."INTERFACEHISTORY" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."INTERFACEITEMS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."INTERFACEITEMS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."INTERFACEITEMSHISTORY" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."INTERFACEITEMSHISTORY" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."INTERFACELOG" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."INTERFACELOG" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."INTERFACEREJECTLIST" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."INTERFACEREJECTLIST" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."INVENTORYSTATUSUPDATETRX" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."INVENTORYSTATUSUPDATETRX" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."JOAP" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."JOAP" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."JOAPDATA" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."JOAPDATA" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."JOAP_VIEW" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."LANDINGCODES" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."LANDINGCODES" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."LINKS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."LINKS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."LOCATIONCODETRX" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."LOCATIONCODETRX" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."LOCATIONS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."LOCATIONS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."MAINTENANCEEVENTS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."MAINTENANCEEVENTS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."MAJCOMS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."MAJCOMS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."MAJORCOMMANDCODETRX" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."MAJORCOMMANDCODETRX" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."MDSEQUIPMENTTRX" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."MDSEQUIPMENTTRX" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."MESSAGES" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."MESSAGES" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."MICAP" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."MICAP" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."MICAPTRX" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."MICAPTRX" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."MICROSOFTDTPROPERTIES" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."MICROSOFTDTPROPERTIES" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."MISSIONS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."MISSIONS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."MOC" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."MOC" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."MOCADMINS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."MOCADMINS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."MOCSTATUSICONS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."MOCSTATUSICONS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."MOCUSERS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."MOCUSERS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."OLDPASSWORDS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."OLDPASSWORDS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."OPERATIONALEVENTDELETETRX" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."OPERATIONALEVENTDELETETRX" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."OPERATIONALEVENTLOADTRX" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."OPERATIONALEVENTLOADTRX" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."OPERATIONALEVENTREPLACEMENTTRX" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."OPERATIONALEVENTREPLACEMENTTRX" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."OPERATIONALEVENTUPDATETRX" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."OPERATIONALEVENTUPDATETRX" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."ORDNANCE" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."ORDNANCE" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."ORGANIZATIONS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."ORGANIZATIONS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."ORGANIZATIONTRX" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."ORGANIZATIONTRX" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."PERMISSIONS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."PERMISSIONS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."PILOT" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."PILOT" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."PILOTVIEW" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."POSSESSIONS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."POSSESSIONS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."RANGES" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."RANGES" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."RANKS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."RANKS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."REMARKS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."REMARKS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."REPORTCOLUMNS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."REPORTCOLUMNS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."REPORTCRITERIA" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."REPORTCRITERIA" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."REPORTPARAMETERS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."REPORTPARAMETERS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."REPORTS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."REPORTS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."SCHEDULE" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."SCHEDULE" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."SCHEDULEDEVIATIONS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."SCHEDULEDEVIATIONS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."SCHEDULESCSV" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."SCHEDULESCSV" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."SCHEDULESTATUS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."SCHEDULESTATUS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."SCHEDULE_STATUS_VIEW" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."SEMEDX" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."SEMEDX" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."SEMEDXDATA" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."SEMEDXDATA" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."SEMEDX_VIEW" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."SHOPDISPATCH" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."SHOPDISPATCH" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."SMSTESTBLOB" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."SMSTESTBLOB" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."SQUADRONMICAPCOUNT" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."SQUADRONS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."SQUADRONS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."SQUADRONSORTORDERVIEW" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."SQUADRONVIEW" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."SQUADRON_SORT_ORDER" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."SQUADRON_SORT_ORDER" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."STATIONLOCCODES" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."STATIONLOCCODES" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."STATUSCODE" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."STATUSCODE" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."STATUSCORRECTIONTRX" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."STATUSCORRECTIONTRX" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."STATUSIMAGE" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."STATUSIMAGE" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."STATUSTRANSITIONRULE" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."STATUSTRANSITIONRULE" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."STATUSTRANSITIONRULESVIEW" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."STATUSUPDATETRX" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."STATUSUPDATETRX" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."SUPPLYINQUIRY" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."SUPPLYINQUIRY" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."SYMBOLS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."SYMBOLS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."TBMCSINTERFACELOG" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."TBMCSINTERFACELOG" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."USERALERT" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."USERALERT" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."USERIMAGES" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."USERIMAGES" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."USERLINKS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."USERLINKS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."USERS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."USERS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."UTILIZATIONCODES" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."UTILIZATIONCODES" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."UTILIZATIONCODETRX" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."UTILIZATIONCODETRX" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."UVRCHANGETRX" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."UVRCHANGETRX" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."WEAPONSCLASS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."WEAPONSCLASS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."WEAPONSINFO" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."WEAPONSINFO" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."WEAPONSLOAD" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."WEAPONSLOAD" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."WEAPONS_VIEW" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."WEAPONTYPES" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."WEAPONTYPES" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."WEBSERVERS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."WEBSERVERS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."WHENDISCOVEREDCODES" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."WHENDISCOVEREDCODES" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."WHENDISCOVEREDCODETRX" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."WHENDISCOVEREDCODETRX" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."WINGS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."WINGS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."WORKCENTERS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."WORKCENTERS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."WORKCENTERTRX" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."WORKCENTERTRX" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."WORKUNITCODETRX" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."WORKUNITCODETRX" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."WRITEUPS" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."WRITEUPS" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."WRITEUPS_AND_MICAPS_VIEW" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."WUC" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."WUC" TO "EMOC_ROLE";

GRANT DELETE ON  "EMOC3"."WX" TO "APEX_WRITE";

GRANT DELETE ON  "EMOC3"."WX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADDAIRCRAFT2" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADDAIRCRAFT2_MOC" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADDAIRCRAFTENGINEDATA" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADDAIRCRAFTFROMADMIN" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADDBADATTEMPT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADDIMDSCDBMICAP" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADDSTATUSUPDATEREC" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADDWRITEUP" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_AIRCRAFT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_AIRCRAFTMDS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_AIRCRAFT_FROM_EXCEL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_AREA" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_AREA_FROM_EXCEL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_ARMAMENT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_ASSIGNMENT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_CAUSECODE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_COLOR" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_COLORRULE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_COMBATSCL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_COMBATSCLRULE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_CONDITIONCODE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_CONDITIONSTATUS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_CREWCHIEF" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_CREWCHIEF_FROMIMDS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_CUSTOMDATA" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_CUSTOMDATALISTITEM" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_DEVIATIONCODE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_EMOCCONFIG" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_FIRESYMBOL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_FLIGHT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_FUEL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_HELP" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_HQCODE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_IMDSLOGIN" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_INTERFACECONTROL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_JOAP" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_LANDINGCODE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_LINK" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_LOCATION" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MAJCOM" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MISSION" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MISSION_FROM_USER" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOCUSER" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_AIRCRAFT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_AIRCRAFTMDS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_AREA" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_ARMAMENT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_ASSIGNMENT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_CAUSECODE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_COLOR" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_COLORRULE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_COMBATSCL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_COMBATSCLRULE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_CONDITIONCODE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_CONDITIONSTATUS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_CREWCHIEF" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_CUSTOMDATA" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_DEVIATIONCODE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_EMOCCONFIG" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_FIRESYMBOL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_FUEL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_HQCODE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_INTERFACECONTROL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_JOAP" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_LANDINGCODE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_LINK" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_LOCATION" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_MAJCOM" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_MISSION" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_ORDNANCE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_ORG" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_ORG2" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_PILOT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_POSSESSION" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_RANGE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_RANK" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_SEMEDX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_SQUADRON" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_STATLOC" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_STATUSCODE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_STATUSRULE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_SYMBOL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_WDC" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_WEAPONSCLASS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_WEAPONTYPE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_WING" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_WORKCENTER" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_WUC" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_MOC_WX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_ORDNANCE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_ORG" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_ORG2" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_PERMISSION" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_PILOT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_PILOT_FROM_EXCEL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_PORTALUSER" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_POSSESSION" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_RANGE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_RANGE_FROM_EXCEL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_RANK" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_REMARKS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_SCHED_STATUS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_SEMEDX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_SQUADRON" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_STATLOC" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_STATUSCODE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_STATUSRULE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_SYMBOL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_USER" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_WDC" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_WEAPONSCLASS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_WEAPONTYPE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_WING" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_WORKCENTER" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_WUCFROMXML" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ADD_WX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."AIRCRAFT_CHANGE_SQUADRON" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_AIRCRAFTEXTRACTTRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_CAUSECODETRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_DEVIATIONABORTTRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_DEVIATIONCODETRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_DEVIATIONCORRECTIONTRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_DEVIATIONDELETETRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_DEVIATIONSTARTSTOPTRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_ENGINERUNLOG" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_EQUIPMENTLOCUPDTRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_EVENTLOG" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_GAINLOSSSTATUSUPDATETRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_GEOLOCCODETRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_HISTORY" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_INTERFACEHISTORY" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_INTERFACEITEMSHISTORY" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_INTERFACELOG" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_INVENTORYSTATUSUPDATETRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_JOAPDATA" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_LOCATIONCODETRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_MAIN" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_MAINTENANCEEVENTS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_MAJORCOMMANDCODETRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_MDSEQUIPMENTTRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_MICAP" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_MICAPTRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_OPERATIONALEVENTLOADTRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_OPEREVENTDELETETRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_OPEREVENTREPLACEMENTTRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_OPEREVENTUPDATETRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_ORGANIZATIONTRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_SCHEDULE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_SCHEDULEDEVIATIONS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_SCHEDULESTATUS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_SEMEDXDATA" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_SHOPDISPATCH" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_STATUSCORRECTIONTRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_STATUSUPDATETRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_USERALERT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_UTILIZATIONCODETRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_UVRCHANGETRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_WHENDISCOVEREDCODETRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_WORKCENTERTRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_WORKUNITCODETRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ARCH_WRITEUPS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."CAUSECODECHANGE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."CAUSECODEDELETE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."CAUSECODELOAD" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."CHANGEMDS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."CHANGENUMBEROFENGINES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."CHECK_FOR_DUP_SCHEDULELINE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."CHECK_FOR_FLIGHT_OVERLAP" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."CHECK_FOR_FLIGHT_OVERLAPTS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."CLEARUSERALERT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."CLEAR_AIRCRAFT_JOAPDATA" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."COPY_ACFTMDSTYPES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."COPY_AIRCRAFTMDS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."COPY_COLORRULES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."COPY_COLORS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."COPY_CONDITIONCODES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."COPY_CONDITIONSTATUS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."COPY_DEVIATIONCODES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."COPY_EMOCCONFIG" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."COPY_FIRESYMBOL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."COPY_FUEL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."COPY_HQCODES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."COPY_INTERFACEITEMS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."COPY_JOAP" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."COPY_LANDINGCODES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."COPY_MESSAGES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."COPY_POSSESSIONCODES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."COPY_RANKS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."COPY_SEMEDX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."COPY_STATUSCODE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."COPY_STATUSICONS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."COPY_STATUSRULE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."COPY_SYMBOLS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."COPY_WEAPONSCLASS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."COPY_WEAPONTYPES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."COPY_WX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."CURCUSTOMDATAREPORT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."DELETEBLKDEVIATIONFROMIMDS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."DELETEDEVIATIONFROMIMDS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."DELETEIMDSCDBMICAP" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."DELETEOPEREVENTDELETEFROMIMDS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."DELETE_AIRCRAFT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."DELETE_FLYING_SCHEDULE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."DELETE_MOC" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."DELETE_MOCADMIN" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."DELETE_MOCADMINS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."DELETE_MOCUSER" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."DELETE_MOCUSERS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."DELETE_MOC_AIRCRAFTMDS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."DELETE_MOC_CAUSECODE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."DELETE_MOC_CUSTOMDATA" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."DELETE_MOC_GENFLOW" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."DELETE_MOC_STATUSIMAGE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."DELETE_MOC_WX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."DELETE_SCHED_STATUS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."DELETE_SORTIE_LINE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."DELETE_SQUADRON" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."DELETE_SQUAD_SCHEDULE_RECORDS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."DELETE_WING" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."DEL_AREA" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."DEL_HELPTOPIC" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."DEL_IMDSLOGIN" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."DEL_OLDPASSWORDS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."DEL_ORG" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."DEPGETUSERRECBYPORTALUSERID" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."DEPLOYEDADDUSER" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."DEVIATIONCODELOAD" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."DT_ADDUSEROBJECT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."DT_DROPUSEROBJECTBYID" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."DT_SETPROPERTYBYID" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."EMOC_ADMIN" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."EMOC_CACHE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."EMOC_SECURITY" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."EMOC_STATUSCODES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."EMOC_SYSTEMLINKS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."EMOC_TYPES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."EMOC_USERIMAGES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."EMOC_USERLINKS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."EMOC_USERS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."EMOC_UTILIZATIONCODES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."FUNCCOUNTENGINERELATEDDATA" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GETAIRCRAFTBYEQUIPID" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GETUSERHTML" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GETUSERRECORDBYPORTALUSERID" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GETUSERRECORDBYUSERNAME" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GETUSERSALERTS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GETWORKUNITCODES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_ACFTMDSTYPES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_ACTIVE_MOCS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_AIRBORNE_BY_SQUADRON" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_AIRCRAFT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_AIRCRAFTCUSTOMDATA" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_AIRCRAFTID_BY_MOCEQUIPID" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_AIRCRAFTMDS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_AIRCRAFTSTATUSBRIEF" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_AIRCRAFT_BY_ID" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_AIRCRAFT_BY_LOCATION" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_AIRCRAFT_BY_SQUADRON" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_AIRCRAFT_FOR_TAILSWAP" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_AREAID_BY_AREA" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_AREAS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_ARMAMENTS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_ASSIGNMENTS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_AUCS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_AUCSBYMDS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_CAMSCONTROL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_CAMS_SCHEDULE_BY_DATE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_CAMS_SCHEDULE_FOR_USER" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_CAMS_TO_PROCESS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_CAMS_VALIDATION_TIMEOUT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_CAUSECODES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_CAUSEDEFAULT_BY_MOC" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_CAUSEID_BY_MOCCAUSECODE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_COLORRULES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_COLORS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_COLUMNS_BY_VIEW" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_COMBATSCLRULES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_COMBATSCLS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_CONDITIONCODES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_CONDITIONSTATUS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_CREWCHIEFS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_CUSTOMDATA" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_CUSTOMDATA_BOOLEAN" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_CUSTOMDATA_DATE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_CUSTOMDATA_NUMBER" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_DAILYFLYINGSCHEDULEBRIEF" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_DAILYFLYINGSTATUSBRIEF" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_DEVDEFAULT_BY_MOC" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_DEVIATIONCODES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_DEVIATIONSBRIEF" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_DEVIATIONS_BY_LINE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_DEVID_BY_MOCDEVCODE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_DROPDOWN_LISTS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_ELC_ICONTROL_STATUS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_EMOCCONFIGDATA" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_EMOCHELP" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_FIRESYMBOLS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_FLIGHTS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_FLYBOARD_JOAP_SEMEDX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_FLYING_SCHEDULE_LINE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_FUELS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_GENFLOW_DATA" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_HELP_BY_ID" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_HELP_BY_PARENTID" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_HELP_BY_TOPIC" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_HQBRIEF" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_HQCODES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_ICONTROL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_IMDSLOGINS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_INTERFACECONTROLREC" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_INTERFACECONTROL_STATUS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_INTERFACEHISTORY" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_INTERFACEITEMS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_INTERFACEITEMSHISTORY" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_INTERFACEITEM_STATUS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_INTERFACELOG" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_INTERFACELOGRECBYID" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_INTERFACES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_JOAPCOLORRULES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_JOAPS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_JOAP_DATA_BY_SCHEDULEID" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_LANDINGCODES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_LAST_SCHED_STATUS_CODE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_LINKS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_LOCATIONID" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_LOCATIONS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_LOCATIONSBYELC" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MAJCOMS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MICAPSBRIEF" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MISSION" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MISSIONID_BY_MOCMISSION" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MISSIONS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOCADMINS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOCID_BY_ELCUNITID" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOCS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOCUSERS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_ACFTMDSTYPES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_AIRCRAFT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_AIRCRAFTMDS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_AREAS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_ARMAMENTS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_ASSIGNMENTS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_AUCS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_CACHED_LISTS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_CAMSCONTROL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_CAUSECODES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_COLORRULES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_COLORS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_COMBATSCLRULES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_COMBATSCLS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_CONDITIONCODES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_CONDITIONSTATUS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_CREWCHIEFS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_CUSTOMDATA" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_DEVIATIONCODES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_DROPDOWN_LISTS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_EMOCCONFIGDATA" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_FIRESYMBOLS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_FLIGHTS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_FUELS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_HQCODES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_ICONTROL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_ICONTROL_STATUS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_INTERFACECONTROLREC" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_INTERFACECONTROLSTATUS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_INTERFACEITEMS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_INTERFACEITEM_STATUS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_INTERFACELOG" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_INTERFACES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_JOAPCOLORRULES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_JOAPS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_LANDINGCODES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_LOCATIONID" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_LOCATIONS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_MAJCOMS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_MISSIONS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_ORDNANCE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_ORGANIZATIONS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_PILOTS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_POSSESSIONCODES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_RANGES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_RANKS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_RANKS_DROPDOWN_LISTS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_SECURITYMESSAGE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_SEMEDXCOLORRULES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_SEMEDXS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_SQUADRONS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_STATIONLOCS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_STATUSCODES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_STATUSRULES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_SYMBOLS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_TBMCSCONTROL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_TBMCS_TRANSACTIONS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_TRANSIENTAIRCRAFT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_USERPERMISSIONS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_USERS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_WEAPONSCLASSES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_WEAPONTYPES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_WHENDISCOVEREDCODES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_WINGS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_WORKCENTERS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_MOC_WXCODES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_ORDNANCE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_ORGANIZATIONS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_ORGS_BY_UNITID" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_ORGS_BY_WINGID" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_PASSWORDCHGDATE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_PILOTS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_POSSESSIONCODES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_POTHQBRIEF" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_RANGES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_RANK" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_RANKS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_RANKS_DROPDOWN_LISTS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_REMARKS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_SCHEDDAY_DEV" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_SCHEDDAY_GO" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_SCHEDDAY_UNAVAILABLE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_SCHEDID_BY_SQUADSORTIEACID" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_SCHEDLINE_DEV" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_SCHEDLINE_JOAP" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_SCHEDLINE_STATUSCODE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_SCHEDULEID_BY_BLOCK" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_SCHEDULEOVERVIEWBRIEF" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_SCHEDULE_BY_SQUADRON_TOTAL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_SCHEDULE_DEVIATION_BY_ID" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_SCHED_STATUS_COMPLETE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_SECURITYMESSAGE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_SEMEDXCOLORRULES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_SEMEDXS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_SEMEDX_DATA_BY_SCHEDULEID" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_SORTIENUM_BY_SORTIEDATE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_SORTIE_FOR_DUPLICATE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_SPARES_BY_SORTIEDATE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_SQUADID_BY_AIRCRAFTID" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_SQUADID_BY_OWC" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_SQUADRONNAMES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_SQUADRONS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_STATCOUNT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_STATIONLOCS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_STATUSCODES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_STATUSRULES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_SYMBOLS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_TBMCSCONTROL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_TBMCS_TRANSACTION" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_TBMCS_TRANSACTIONS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_TRANSACTIONS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_TRANSIENTAIRCRAFT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_UNAVAILABLE_AIRCRAFT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_USERPERMISSIONS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_USERS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_WEAPONSCLASSES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_WEAPONTYPES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_WHENDISCOVEREDCODES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_WINGID_BY_ELCUNITID" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_WINGS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_WINGSTATUSBRIEF" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_WING_ICONTROL_STATUS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_WORKCENTERS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_WORKCENTERSBYWINGID" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_WUCID_BY_WUCAIRCRAFTID" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_WUCSBYMDS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_WXCODES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."GET_WXDEFAULT_BY_MOC" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."IMDSINITCREWCHIEF" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."INSERTAIRCRAFTEXTRACTTRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."INSERTAUCTRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."INSERTBLKDEVABORTFROMIMDS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."INSERTBLKDEVSTARTSTOPFROMIMDS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."INSERTBLOCKDATAHANDLERFROMIMDS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."INSERTCAUSECODETRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."INSERTDEVABORTFROMIMDS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."INSERTDEVIATIONABORTTRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."INSERTDEVIATIONCORRECTIONTRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."INSERTDEVIATIONDELETETRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."INSERTDEVIATIONSTARTSTOPTRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."INSERTDEVSTARTSTOPFROMIMDS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."INSERTEQUIPLOCATIONUPDATETRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."INSERTGAINLOSSSTATUSUPDATETRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."INSERTGEOLOCCODETRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."INSERTINVENTORYSTATUSUPDATETRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."INSERTLOCATIONCODETRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."INSERTMDSEQUIPMENTTRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."INSERTMICAPTRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."INSERTOPERATIONALEVENTLOADTRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."INSERTOPEREVENTDELETETRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."INSERTOPEREVENTLOADFROMIMDS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."INSERTOPEREVENTREPLACEMENTTRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."INSERTOPEREVENTUPDATETRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."INSERTOPEREVTRPLACEMNTFROMIMDS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."INSERTSCREEN73" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."INSERTSTATUSCORRECTIONTRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."INSERTSTATUSUPDATETRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."INSERTUSERALERT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."INSERTUVRCHANGETRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."INSERTWDCTRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."INSERTWORKUNITCODETRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ISNUMERIC" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."LOAD_CAMS_TRANSACTION" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."LOAD_FLYING_SCHEDULE_LINE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."LOAD_SCHEDULE_LINE_FROM_CAMS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."LOAD_SCHEDULE_LINE_FROM_EXCEL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."LOAD_SPARE_LINE_FROM_EXCEL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."LOAD_TBMCS_MESSAGEBODY" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."LOAD_TBMCS_TRANSACTION" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."LOB_PKG" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."LOCATIONCODECHANGE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."LOCATIONCODEDELETE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."LOCATIONCODEEXTRACT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."LOCATIONCODELOAD" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."LOGINUSER" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."LOGOUTUSER" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."MAJCOMCODELOAD" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."NEW_BLOB" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ORGCHANGE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ORGDELETE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."ORGLOAD" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."REMOVE_AIRCRAFT_ENGINEDATA" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."REMOVE_AIRCRAFT_EVENTLOG" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."REMOVE_AIRCRAFT_HISTORY" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."REMOVE_AIRCRAFT_INTERFACERECS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."REMOVE_AIRCRAFT_MAINTEVENTS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."REMOVE_AIRCRAFT_MICAPS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."REMOVE_AIRCRAFT_SCHEDULERECS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."REMOVE_AIRCRAFT_SHOPDISPATCH" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."REMOVE_AIRCRAFT_WEAPONSLOAD" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."REMOVE_AIRCRAFT_WRITEUPS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."REMOVE_DEVIATION_REMARKS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."REMOVE_SQUADRON_PILOTS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."REMOVE_SQUADRON_SCHEDULERECS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."REPORT_GETPARAMETERS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."REPORT_GETREPORTDATA" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPADDPACERWRITEUP" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPDELETEENGINERUN" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPDELETEMEVENT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPDELETEMICAP" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPDELETEPRESELECTSPARE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPDELETESHOPDISPATCH" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPDELETESQUADSORTITEM" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETAIRCRAFTFIRESYMBOL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETAIRCRAFTMAINTENANCESTATUS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETAIRCRAFTMICAPS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETAIRCRAFTMISSIONS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETAIRCRAFTMISSIONSTATUS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETAIRCRAFTSTATUSCODES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETAIRCRAFTUNIT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETAIRCRAFTWEAPONSSTATUS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETAIRCRAFTWRITEUPS2" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETALLAIRCRAFT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETALLCOMBATSCLSBYMDS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETALLFLIGHTLINES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETALLFLINESTATUSCODES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETALLFUELCODESBYMISSION" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETALLMOCAIRCRAFT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETALLMOCSQUADRONS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETALLSQUADRONS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETALLSQUADRONSBYUSER" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETALLSTATIONS_ORDNANCES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETALLSTATUSCODESBYMISSION" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETALT_AIRCRAFTBYSQUADRON" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETCHIPENGINEDATABYAIRCRAFT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETCHIPENGINEDATABYSCHEDULE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETCONFIGCODESPERAIRCRAFT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETCURRENTDAYFLIGHTLINES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETGENERALAIRCRAFTDATA" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETJOAPENGINEDATABYAIRCRAFT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETJOAPENGINEDATABYSCHEDULE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETMAINTENANCESTATUS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETMEVENT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETONEAIRCRAFT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETONESQUADRON" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETORDNANCEPERSTATION" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETPACINGWRITEUP" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETPACINGWRITEUPMICAPS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETSTATIONSORDNANCES" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETSYMBOLSCONDITIONS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETTBMCSAIRCRAFT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETTBMCSAIRCRAFTBYID" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETTRANSSQBYUSERMOC" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETTRANSSQUADRONBYUSER" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETUSERDATA" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETUSERINTERFACELOGINDATA" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETWEAPONSSTATUS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETWRITEUP" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPGETWRITEUPBYID" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPINSERTCHIP" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPINSERTENGINERUN" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPINSERTEVENTLOG" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPINSERTEVENTLOG_MOC" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPINSERTJOAP" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPINSERTJOAPDATA" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPINSERTMICAP" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPINSERTREQINQ" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPINSERTSCHEDULESTATUS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPINSERTSHOPDISPATCH" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPINSERTSTATUSUPDATE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPINSERTWORKUNITCODE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPINSERTWRITEUP" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPTESTPROC" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPUPDATEACTUALLANDING" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPUPDATEACTUALTAKEOFF" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPUPDATEAIRCRAFTCD" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPUPDATEAIRCRAFTENGINEDATA" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPUPDATEAIRCRAFTHISTORY" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPUPDATECONDITIONETIC" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPUPDATEENGINERUN" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPUPDATEINTERFACELOG" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPUPDATEINTERFACELOGCAMS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPUPDATEINTERFACELOGTBMCS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPUPDATELASTCHIP" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPUPDATELASTJOAP" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPUPDATEMAINTENANCESTATUS3" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPUPDATEMEVENT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPUPDATEMICAP" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPUPDATEMICAPCOMMENT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPUPDATEMICAPSFROMCAMS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPUPDATEMISSIONSTATUS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPUPDATEPRESELECTSPARE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPUPDATESCHEDULELANDING" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPUPDATESCHEDULESTATUS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPUPDATESCHEDULETAKEOFF" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPUPDATESHOPDISPATCH" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPUPDATESQUADSORTORDER" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPUPDATEUSERSORTPREFS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPUPDATEVIEWABLESQUADS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPUPDATEWEAPONSLOAD" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPUPDATEWEAPONSSTATUS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPUPDATEWRITEUP" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPUPDATEWRITEUPETIC" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPUPDATEWRITEUPWUC" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."SPUPDPACERWRITEUP" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."START_SCHEDULE_DEVIATION" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."TBMCS_INTERFACE_METRICS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."TBMCS_INTERFACE_METRICS_MOC" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."TRANSFERIMDSCDBMICAP" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."TRANSMIT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPDATEBLKDEVCORRECTIONFROMIMDS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPDATEBLKOPEREVTUPDATEFROMIMDS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPDATEDEVCORRECTIONFROMIMDS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPDATEOPEREVENTUPDATEFROMIMDS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPDATE_AC_STATUS_FROM_SORTIE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPDATE_BROADCAST_EMAIL_MESSAGE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPDATE_FLYBOARD" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPDATE_FLYING_SCHEDULE_LINE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPDATE_INTERFACELOG" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPDATE_LINE_FOR_TAILSWAP" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPDATE_SCHEDULEDOW_JOB" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPDATE_SCHEDULE_BLOCK" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPDATE_SCHED_STATUS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPDATE_TBMCS_TRANSACTION" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPDPORTALINFO" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_AIRCRAFT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_AIRCRAFT2" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_AIRCRAFTMDS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_AIRCRAFT_FUELLOAD" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_AREA" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_ARMAMENT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_CAMSCONTROL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_COLORRULE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_COMBATSCLRULE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_CONDITIONSTATUS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_CREWCHIEF" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_CUSTOMDATA" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_EMOCCONFIGDATA" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_EMOCHTML1" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_FIRESYMBOL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_FLIGHT" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_HELPTOPIC" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_HQCODE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_ICONTROL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_IMDSLOGIN" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_INTERFACECONTROL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_INTERFACECONTROLREC" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_INTERFACEITEM" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_JOAP" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_LINK" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_LOCATION" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_MAJCOM" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_MESSAGEOFTHEDAY" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_MISSION" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_MOC" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_MOC_BROADCAST_MSG" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_MOC_CAMSCONTROL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_MOC_EMOCCONFIGDATA" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_MOC_EMOCHTML1" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_MOC_ICONTROL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_MOC_INTERFACECONTROLREC" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_MOC_MESSAGEOFTHEDAY" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_MOC_SECURITYMESSAGE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_MOC_TBMCSCONTROL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_MOC_WING" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_ORDNANCE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_ORG" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_PERMISSION" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_RECORD_INTERFACELOGID" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_SECURITYMESSAGE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_SEMEDX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_SQUADRON" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_STATLOC" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_STATUSCODE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_STATUSRULE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_SYMBOL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_TBMCSCONTROL" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_USER" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_USERPASSWORD" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_USERSTATUS" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_WDC" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_WING" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_WORKCENTER" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPD_WUC" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."UPLOADSCHEDULE" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."WORKCENTERCHANGETRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."WORKCENTERDELETETRX" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."WORKCENTERLOAD" TO "EMOC_ROLE";

GRANT EXECUTE ON  "EMOC3"."WORKCENTERLOADTRX" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."ACFTMDSTYPES" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."ACFTMDSTYPES" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."AIRCRAFT" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."AIRCRAFT" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."AIRCRAFT" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."AIRCRAFTCUSTOMDATA" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."AIRCRAFTCUSTOMDATA" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."AIRCRAFTENGINEDATA" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."AIRCRAFTENGINEDATA" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."AIRCRAFTENGINEDATA" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."AIRCRAFTEXTRACTTRX" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."AIRCRAFTEXTRACTTRX" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."AIRCRAFTEXTRACTTRX" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."AIRCRAFTMDS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."AIRCRAFTMDS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."AIRCRAFTSTATUSUPDATE" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."AIRCRAFTSTATUSUPDATE" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."AIRCRAFTVIEW" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."AIRCRAFT_ARCHIVE_VIEW" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."AIRCRAFT_ENGINE_DATA_VIEW" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."AIRCRAFT_HISTORY_ARCHIVE_VIEW" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."AIRCRAFT_HISTORY_VIEW" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."AIRCRAFT_STATUSBOARD_VIEW" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."AIRCRAFT_STATUSUPDATE_VIEW" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."ALL_AIRCRAFT_DATA_VIEW" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."AREAS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."AREAS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."ARMAMENT" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."ARMAMENT" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."ASSIGNMENTCODES" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."ASSIGNMENTCODES" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."BASEMAPS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."BASEMAPS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."BRIEF_AIRCRAFT_STATUS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."BRIEF_AIRCRAFT_STATUS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."BRIEF_DEVIATIONS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."BRIEF_DEVIATIONS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."BRIEF_FLYING_SCHEDULE" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."BRIEF_FLYING_SCHEDULE" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."BRIEF_FLYING_STATUS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."BRIEF_FLYING_STATUS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."BRIEF_HANGAR_QUEEN" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."BRIEF_HANGAR_QUEEN" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."BRIEF_MICAPS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."BRIEF_MICAPS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."BRIEF_NEXT_WEEKS_PLAN" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."BRIEF_NEXT_WEEKS_PLAN" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."BRIEF_POT_HANGAR_QUEEN" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."BRIEF_POT_HANGAR_QUEEN" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."BRIEF_SCHEDULE_OVERVIEW" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."BRIEF_SCHEDULE_OVERVIEW" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."BRIEF_WING_STATUS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."BRIEF_WING_STATUS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."BRIEF_WING_STATUS_VIEW" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."CAUSECODES" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."CAUSECODES" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."CAUSECODETRX" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."CAUSECODETRX" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."CAUSECODETRX" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."CHANGENOTIFICATION" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."CHANGENOTIFICATION" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."CHECKLIST" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."CHECKLIST" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."COLORRULES" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."COLORRULES" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."COLORS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."COLORS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."COMBATSCLRULES" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."COMBATSCLRULES" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."COMBATSCLS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."COMBATSCLS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."CONDITIONCODES" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."CONDITIONCODES" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."CONDITIONSTATUS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."CONDITIONSTATUS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."COUNTRYCODES" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."COUNTRYCODES" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."CREWCHIEFS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."CREWCHIEFS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."CUSTOMDATA" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."CUSTOMDATA" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."CUSTOMDATALISTITEM" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."CUSTOMDATALISTITEM" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."CUSTOMDATAMDS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."CUSTOMDATAMDS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."CUSTOM_DATA_VIEW" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."DEVIATIONABORTTRX" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."DEVIATIONABORTTRX" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."DEVIATIONABORTTRX" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."DEVIATIONCODES" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."DEVIATIONCODES" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."DEVIATIONCODETRX" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."DEVIATIONCODETRX" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."DEVIATIONCODETRX" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."DEVIATIONCODEVIEW" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."DEVIATIONCORRECTIONTRX" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."DEVIATIONCORRECTIONTRX" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."DEVIATIONCORRECTIONTRX" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."DEVIATIONDELETETRX" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."DEVIATIONDELETETRX" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."DEVIATIONDELETETRX" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."DEVIATIONSTARTSTOPTRX" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."DEVIATIONSTARTSTOPTRX" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."DEVIATIONSTARTSTOPTRX" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."EMOCAPPCONFIGURATION" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."EMOCAPPCONFIGURATION" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."EMOCCONFIG" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."EMOCCONFIG" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."EMOCHELP" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."EMOCHELP" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."ENGINERUNLOG" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."ENGINERUNLOG" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."ENGINERUNLOG" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."EQUIPMENTLOCATIONUPDATETRX" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."EQUIPMENTLOCATIONUPDATETRX" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."EQUIPMENTLOCATIONUPDATETRX" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."EVENTLOG" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."EVENTLOG" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."EVENTLOG" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."EXPORT000021" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."EXPORT000021" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."FIELDNAMES" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."FIELDNAMES" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."FILEMON" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."FILEMON" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."FIRESYMBOLS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."FIRESYMBOLS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."FLIGHTS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."FLIGHTS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."FLIGHTSVIEW" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."FLYBOARD_ARCHIVE_VIEW" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."FLYBOARD_VIEW" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."FUEL" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."FUEL" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."GAINLOSSSTATUSUPDATETRX" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."GAINLOSSSTATUSUPDATETRX" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."GAINLOSSSTATUSUPDATETRX" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."GENERATIONFLOW" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."GENERATIONFLOW" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."GENERATIONFLOWITEMS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."GENERATIONFLOWITEMS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."GENERATIONFLOWPROGRESS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."GENERATIONFLOWPROGRESS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."GENERATIONFLOWSTEPS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."GENERATIONFLOWSTEPS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."GEOLOCCODETRX" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."GEOLOCCODETRX" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."GEOLOCCODETRX" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."GLOBALCHANGENOTIFICATION" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."GLOBALCHANGENOTIFICATION" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."GRADECODES" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."GRADECODES" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."HANGER_QUEEN_CODE" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."HANGER_QUEEN_CODE" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."HISTORY" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."HISTORY" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."HISTORY" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."HOTSPOTS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."HOTSPOTS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."IMDSCDBELCUNITOPTION" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."IMDSCDBELCUNITOPTION" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."IMDSCDBINTERFACEOPTION" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."IMDSCDBINTERFACEOPTION" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."IMDSLOGINS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."IMDSLOGINS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."INTERFACECONTROL" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."INTERFACECONTROL" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."INTERFACEHISTORY" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."INTERFACEHISTORY" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."INTERFACEHISTORY" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."INTERFACEITEMS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."INTERFACEITEMS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."INTERFACEITEMSHISTORY" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."INTERFACEITEMSHISTORY" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."INTERFACEITEMSHISTORY" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."INTERFACELOG" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."INTERFACELOG" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."INTERFACELOG" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."INTERFACEREJECTLIST" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."INTERFACEREJECTLIST" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."INVENTORYSTATUSUPDATETRX" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."INVENTORYSTATUSUPDATETRX" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."INVENTORYSTATUSUPDATETRX" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."JOAP" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."JOAP" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."JOAPDATA" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."JOAPDATA" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."JOAPDATA" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."JOAP_VIEW" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."LANDINGCODES" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."LANDINGCODES" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."LINKS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."LINKS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."LOCATIONCODETRX" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."LOCATIONCODETRX" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."LOCATIONCODETRX" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."LOCATIONS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."LOCATIONS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."MAINTENANCEEVENTS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."MAINTENANCEEVENTS" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."MAINTENANCEEVENTS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."MAJCOMS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."MAJCOMS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."MAJORCOMMANDCODETRX" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."MAJORCOMMANDCODETRX" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."MAJORCOMMANDCODETRX" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."MDSEQUIPMENTTRX" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."MDSEQUIPMENTTRX" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."MDSEQUIPMENTTRX" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."MESSAGES" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."MESSAGES" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."MICAP" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."MICAP" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."MICAP" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."MICAPTRX" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."MICAPTRX" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."MICAPTRX" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."MICROSOFTDTPROPERTIES" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."MICROSOFTDTPROPERTIES" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."MISSIONS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."MISSIONS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."MOC" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."MOC" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."MOCADMINS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."MOCADMINS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."MOCSTATUSICONS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."MOCSTATUSICONS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."MOCUSERS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."MOCUSERS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."OLDPASSWORDS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."OLDPASSWORDS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."OPERATIONALEVENTDELETETRX" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."OPERATIONALEVENTDELETETRX" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."OPERATIONALEVENTDELETETRX" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."OPERATIONALEVENTLOADTRX" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."OPERATIONALEVENTLOADTRX" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."OPERATIONALEVENTLOADTRX" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."OPERATIONALEVENTREPLACEMENTTRX" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."OPERATIONALEVENTREPLACEMENTTRX" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."OPERATIONALEVENTREPLACEMENTTRX" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."OPERATIONALEVENTUPDATETRX" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."OPERATIONALEVENTUPDATETRX" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."OPERATIONALEVENTUPDATETRX" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."ORDNANCE" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."ORDNANCE" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."ORGANIZATIONS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."ORGANIZATIONS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."ORGANIZATIONTRX" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."ORGANIZATIONTRX" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."ORGANIZATIONTRX" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."PERMISSIONS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."PERMISSIONS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."PILOT" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."PILOT" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."PILOTVIEW" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."POSSESSIONS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."POSSESSIONS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."RANGES" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."RANGES" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."RANKS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."RANKS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."REMARKS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."REMARKS" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."REMARKS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."REPORTCOLUMNS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."REPORTCOLUMNS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."REPORTCRITERIA" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."REPORTCRITERIA" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."REPORTPARAMETERS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."REPORTPARAMETERS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."REPORTS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."REPORTS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."SCHEDULE" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."SCHEDULE" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."SCHEDULE" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."SCHEDULEDEVIATIONS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."SCHEDULEDEVIATIONS" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."SCHEDULEDEVIATIONS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."SCHEDULESCSV" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."SCHEDULESCSV" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."SCHEDULESTATUS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."SCHEDULESTATUS" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."SCHEDULESTATUS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."SCHEDULE_STATUS_VIEW" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."SEMEDX" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."SEMEDX" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."SEMEDXDATA" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."SEMEDXDATA" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."SEMEDXDATA" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."SEMEDX_VIEW" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."SHOPDISPATCH" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."SHOPDISPATCH" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."SHOPDISPATCH" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."SMSTESTBLOB" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."SMSTESTBLOB" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."SQUADRONMICAPCOUNT" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."SQUADRONS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."SQUADRONS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."SQUADRONSORTORDERVIEW" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."SQUADRONVIEW" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."SQUADRON_SORT_ORDER" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."SQUADRON_SORT_ORDER" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."STATIONLOCCODES" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."STATIONLOCCODES" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."STATUSCODE" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."STATUSCODE" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."STATUSCORRECTIONTRX" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."STATUSCORRECTIONTRX" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."STATUSCORRECTIONTRX" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."STATUSIMAGE" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."STATUSIMAGE" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."STATUSTRANSITIONRULE" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."STATUSTRANSITIONRULE" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."STATUSTRANSITIONRULESVIEW" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."STATUSUPDATETRX" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."STATUSUPDATETRX" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."STATUSUPDATETRX" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."SUPPLYINQUIRY" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."SUPPLYINQUIRY" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."SYMBOLS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."SYMBOLS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."TBMCSINTERFACELOG" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."TBMCSINTERFACELOG" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."USERALERT" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."USERALERT" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."USERIMAGES" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."USERIMAGES" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."USERLINKS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."USERLINKS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."USERS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."USERS" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."USERS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."UTILIZATIONCODES" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."UTILIZATIONCODES" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."UTILIZATIONCODETRX" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."UTILIZATIONCODETRX" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."UTILIZATIONCODETRX" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."UVRCHANGETRX" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."UVRCHANGETRX" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."UVRCHANGETRX" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."WEAPONSCLASS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."WEAPONSCLASS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."WEAPONSINFO" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."WEAPONSINFO" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."WEAPONSLOAD" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."WEAPONSLOAD" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."WEAPONSLOAD" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."WEAPONS_VIEW" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."WEAPONTYPES" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."WEAPONTYPES" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."WEBSERVERS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."WEBSERVERS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."WHENDISCOVEREDCODES" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."WHENDISCOVEREDCODES" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."WHENDISCOVEREDCODETRX" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."WHENDISCOVEREDCODETRX" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."WHENDISCOVEREDCODETRX" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."WINGS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."WINGS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."WORKCENTERS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."WORKCENTERS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."WORKCENTERTRX" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."WORKCENTERTRX" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."WORKCENTERTRX" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."WORKUNITCODETRX" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."WORKUNITCODETRX" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."WORKUNITCODETRX" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."WRITEUPS" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."WRITEUPS" TO "EMOC3" WITH GRANT OPTION;

GRANT INSERT ON  "EMOC3"."WRITEUPS" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."WRITEUPS_AND_MICAPS_VIEW" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."WUC" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."WUC" TO "EMOC_ROLE";

GRANT INSERT ON  "EMOC3"."WX" TO "APEX_WRITE";

GRANT INSERT ON  "EMOC3"."WX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."ACFTMDSTYPES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."ACFTMDSTYPES" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."ACFTMDSTYPES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."AIRCRAFT" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."AIRCRAFT" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."AIRCRAFT" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."AIRCRAFT" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."AIRCRAFTCUSTOMDATA" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."AIRCRAFTCUSTOMDATA" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."AIRCRAFTCUSTOMDATA" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."AIRCRAFTENGINEDATA" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."AIRCRAFTENGINEDATA" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."AIRCRAFTENGINEDATA" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."AIRCRAFTENGINEDATA" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."AIRCRAFTEXTRACTTRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."AIRCRAFTEXTRACTTRX" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."AIRCRAFTEXTRACTTRX" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."AIRCRAFTEXTRACTTRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."AIRCRAFTMDS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."AIRCRAFTMDS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."AIRCRAFTMDS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."AIRCRAFTSTATUSUPDATE" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."AIRCRAFTSTATUSUPDATE" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."AIRCRAFTSTATUSUPDATE" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."AIRCRAFTVIEW" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."AIRCRAFTVIEW" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."AIRCRAFTVIEW" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."AIRCRAFT_ARCHIVE_VIEW" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."AIRCRAFT_ARCHIVE_VIEW" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."AIRCRAFT_ARCHIVE_VIEW" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."AIRCRAFT_ENGINE_DATA_VIEW" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."AIRCRAFT_ENGINE_DATA_VIEW" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."AIRCRAFT_ENGINE_DATA_VIEW" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."AIRCRAFT_HISTORY_ARCHIVE_VIEW" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."AIRCRAFT_HISTORY_ARCHIVE_VIEW" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."AIRCRAFT_HISTORY_ARCHIVE_VIEW" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."AIRCRAFT_HISTORY_VIEW" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."AIRCRAFT_HISTORY_VIEW" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."AIRCRAFT_HISTORY_VIEW" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."AIRCRAFT_STATUSBOARD_VIEW" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."AIRCRAFT_STATUSBOARD_VIEW" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."AIRCRAFT_STATUSBOARD_VIEW" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."AIRCRAFT_STATUSUPDATE_VIEW" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."AIRCRAFT_STATUSUPDATE_VIEW" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."AIRCRAFT_STATUSUPDATE_VIEW" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."ALL_AIRCRAFT_DATA_VIEW" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."ALL_AIRCRAFT_DATA_VIEW" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."ALL_AIRCRAFT_DATA_VIEW" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."AREAS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."AREAS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."AREAS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."ARMAMENT" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."ARMAMENT" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."ARMAMENT" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."ASSIGNMENTCODES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."ASSIGNMENTCODES" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."ASSIGNMENTCODES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."BASEMAPS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."BASEMAPS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."BASEMAPS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."BRIEF_AIRCRAFT_STATUS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."BRIEF_AIRCRAFT_STATUS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."BRIEF_AIRCRAFT_STATUS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."BRIEF_DEVIATIONS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."BRIEF_DEVIATIONS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."BRIEF_DEVIATIONS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."BRIEF_FLYING_SCHEDULE" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."BRIEF_FLYING_SCHEDULE" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."BRIEF_FLYING_SCHEDULE" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."BRIEF_FLYING_STATUS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."BRIEF_FLYING_STATUS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."BRIEF_FLYING_STATUS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."BRIEF_HANGAR_QUEEN" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."BRIEF_HANGAR_QUEEN" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."BRIEF_HANGAR_QUEEN" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."BRIEF_MICAPS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."BRIEF_MICAPS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."BRIEF_MICAPS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."BRIEF_NEXT_WEEKS_PLAN" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."BRIEF_NEXT_WEEKS_PLAN" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."BRIEF_NEXT_WEEKS_PLAN" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."BRIEF_POT_HANGAR_QUEEN" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."BRIEF_POT_HANGAR_QUEEN" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."BRIEF_POT_HANGAR_QUEEN" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."BRIEF_SCHEDULE_OVERVIEW" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."BRIEF_SCHEDULE_OVERVIEW" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."BRIEF_SCHEDULE_OVERVIEW" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."BRIEF_WING_STATUS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."BRIEF_WING_STATUS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."BRIEF_WING_STATUS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."BRIEF_WING_STATUS_VIEW" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."BRIEF_WING_STATUS_VIEW" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."BRIEF_WING_STATUS_VIEW" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."CAUSECODES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."CAUSECODES" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."CAUSECODES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."CAUSECODETRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."CAUSECODETRX" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."CAUSECODETRX" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."CAUSECODETRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."CHANGENOTIFICATION" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."CHANGENOTIFICATION" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."CHANGENOTIFICATION" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."CHECKLIST" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."CHECKLIST" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."CHECKLIST" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."COLORRULES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."COLORRULES" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."COLORRULES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."COLORS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."COLORS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."COLORS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."COMBATSCLRULES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."COMBATSCLRULES" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."COMBATSCLRULES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."COMBATSCLS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."COMBATSCLS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."COMBATSCLS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."CONDITIONCODES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."CONDITIONCODES" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."CONDITIONCODES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."CONDITIONSTATUS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."CONDITIONSTATUS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."CONDITIONSTATUS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."COUNTRYCODES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."COUNTRYCODES" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."COUNTRYCODES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."CREWCHIEFS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."CREWCHIEFS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."CREWCHIEFS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."CUSTOMDATA" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."CUSTOMDATA" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."CUSTOMDATA" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."CUSTOMDATALISTITEM" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."CUSTOMDATALISTITEM" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."CUSTOMDATALISTITEM" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."CUSTOMDATAMDS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."CUSTOMDATAMDS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."CUSTOMDATAMDS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."CUSTOM_DATA_VIEW" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."CUSTOM_DATA_VIEW" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."CUSTOM_DATA_VIEW" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."DEVIATIONABORTTRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."DEVIATIONABORTTRX" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."DEVIATIONABORTTRX" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."DEVIATIONABORTTRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."DEVIATIONCODES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."DEVIATIONCODES" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."DEVIATIONCODES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."DEVIATIONCODETRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."DEVIATIONCODETRX" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."DEVIATIONCODETRX" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."DEVIATIONCODETRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."DEVIATIONCODEVIEW" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."DEVIATIONCODEVIEW" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."DEVIATIONCODEVIEW" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."DEVIATIONCORRECTIONTRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."DEVIATIONCORRECTIONTRX" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."DEVIATIONCORRECTIONTRX" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."DEVIATIONCORRECTIONTRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."DEVIATIONDELETETRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."DEVIATIONDELETETRX" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."DEVIATIONDELETETRX" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."DEVIATIONDELETETRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."DEVIATIONSTARTSTOPTRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."DEVIATIONSTARTSTOPTRX" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."DEVIATIONSTARTSTOPTRX" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."DEVIATIONSTARTSTOPTRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."EMOCAPPCONFIGURATION" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."EMOCAPPCONFIGURATION" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."EMOCAPPCONFIGURATION" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."EMOCCONFIG" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."EMOCCONFIG" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."EMOCCONFIG" TO "EMOCAUX";

GRANT SELECT ON  "EMOC3"."EMOCCONFIG" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."EMOCHELP" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."EMOCHELP" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."EMOCHELP" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."ENGINERUNLOG" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."ENGINERUNLOG" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."ENGINERUNLOG" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."ENGINERUNLOG" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."EQUIPMENTLOCATIONUPDATETRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."EQUIPMENTLOCATIONUPDATETRX" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."EQUIPMENTLOCATIONUPDATETRX" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."EQUIPMENTLOCATIONUPDATETRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."EVENTLOG" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."EVENTLOG" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."EVENTLOG" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."EVENTLOG" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."EXPORT000021" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."EXPORT000021" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."EXPORT000021" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."FIELDNAMES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."FIELDNAMES" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."FIELDNAMES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."FILEMON" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."FILEMON" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."FILEMON" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."FIRESYMBOLS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."FIRESYMBOLS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."FIRESYMBOLS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."FLIGHTS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."FLIGHTS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."FLIGHTS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."FLIGHTSVIEW" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."FLIGHTSVIEW" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."FLIGHTSVIEW" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."FLYBOARD_ARCHIVE_VIEW" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."FLYBOARD_ARCHIVE_VIEW" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."FLYBOARD_ARCHIVE_VIEW" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."FLYBOARD_VIEW" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."FLYBOARD_VIEW" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."FLYBOARD_VIEW" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."FUEL" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."FUEL" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."FUEL" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."GAINLOSSSTATUSUPDATETRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."GAINLOSSSTATUSUPDATETRX" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."GAINLOSSSTATUSUPDATETRX" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."GAINLOSSSTATUSUPDATETRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."GENERATIONFLOW" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."GENERATIONFLOW" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."GENERATIONFLOW" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."GENERATIONFLOWITEMS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."GENERATIONFLOWITEMS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."GENERATIONFLOWITEMS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."GENERATIONFLOWPROGRESS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."GENERATIONFLOWPROGRESS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."GENERATIONFLOWPROGRESS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."GENERATIONFLOWSTEPS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."GENERATIONFLOWSTEPS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."GENERATIONFLOWSTEPS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."GEOLOCCODETRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."GEOLOCCODETRX" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."GEOLOCCODETRX" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."GEOLOCCODETRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."GLOBALCHANGENOTIFICATION" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."GLOBALCHANGENOTIFICATION" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."GLOBALCHANGENOTIFICATION" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."GRADECODES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."GRADECODES" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."GRADECODES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."HANGER_QUEEN_CODE" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."HANGER_QUEEN_CODE" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."HANGER_QUEEN_CODE" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."HISTORY" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."HISTORY" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."HISTORY" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."HISTORY" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."HOTSPOTS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."HOTSPOTS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."HOTSPOTS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."IMDSCDBELCUNITOPTION" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."IMDSCDBELCUNITOPTION" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."IMDSCDBELCUNITOPTION" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."IMDSCDBINTERFACEOPTION" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."IMDSCDBINTERFACEOPTION" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."IMDSCDBINTERFACEOPTION" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."IMDSLOGINS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."IMDSLOGINS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."IMDSLOGINS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."INTERFACECONTROL" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."INTERFACECONTROL" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."INTERFACECONTROL" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."INTERFACEHISTORY" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."INTERFACEHISTORY" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."INTERFACEHISTORY" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."INTERFACEHISTORY" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."INTERFACEITEMS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."INTERFACEITEMS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."INTERFACEITEMS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."INTERFACEITEMSHISTORY" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."INTERFACEITEMSHISTORY" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."INTERFACEITEMSHISTORY" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."INTERFACEITEMSHISTORY" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."INTERFACELOG" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."INTERFACELOG" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."INTERFACELOG" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."INTERFACELOG" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."INTERFACEREJECTLIST" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."INTERFACEREJECTLIST" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."INTERFACEREJECTLIST" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."INVENTORYSTATUSUPDATETRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."INVENTORYSTATUSUPDATETRX" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."INVENTORYSTATUSUPDATETRX" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."INVENTORYSTATUSUPDATETRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."JOAP" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."JOAP" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."JOAP" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."JOAPDATA" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."JOAPDATA" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."JOAPDATA" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."JOAPDATA" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."JOAP_VIEW" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."JOAP_VIEW" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."JOAP_VIEW" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."LANDINGCODES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."LANDINGCODES" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."LANDINGCODES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."LINKS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."LINKS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."LINKS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."LOCATIONCODETRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."LOCATIONCODETRX" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."LOCATIONCODETRX" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."LOCATIONCODETRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."LOCATIONS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."LOCATIONS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."LOCATIONS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."MAINTENANCEEVENTS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."MAINTENANCEEVENTS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."MAINTENANCEEVENTS" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."MAINTENANCEEVENTS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."MAJCOMS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."MAJCOMS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."MAJCOMS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."MAJORCOMMANDCODETRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."MAJORCOMMANDCODETRX" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."MAJORCOMMANDCODETRX" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."MAJORCOMMANDCODETRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."MDSEQUIPMENTTRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."MDSEQUIPMENTTRX" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."MDSEQUIPMENTTRX" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."MDSEQUIPMENTTRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."MESSAGES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."MESSAGES" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."MESSAGES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."MICAP" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."MICAP" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."MICAP" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."MICAP" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."MICAPTRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."MICAPTRX" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."MICAPTRX" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."MICAPTRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."MICROSOFTDTPROPERTIES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."MICROSOFTDTPROPERTIES" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."MICROSOFTDTPROPERTIES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."MICROSOFTSEQDTPROPERTIES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."MICROSOFTSEQDTPROPERTIES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."MISSIONS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."MISSIONS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."MISSIONS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."MOC" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."MOC" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."MOC" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."MOCADMINS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."MOCADMINS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."MOCADMINS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."MOCSTATUSICONS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."MOCSTATUSICONS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."MOCSTATUSICONS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."MOCUSERS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."MOCUSERS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."MOCUSERS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."OLDPASSWORDS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."OLDPASSWORDS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."OLDPASSWORDS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."OPERATIONALEVENTDELETETRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."OPERATIONALEVENTDELETETRX" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."OPERATIONALEVENTDELETETRX" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."OPERATIONALEVENTDELETETRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."OPERATIONALEVENTLOADTRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."OPERATIONALEVENTLOADTRX" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."OPERATIONALEVENTLOADTRX" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."OPERATIONALEVENTLOADTRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."OPERATIONALEVENTREPLACEMENTTRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."OPERATIONALEVENTREPLACEMENTTRX" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."OPERATIONALEVENTREPLACEMENTTRX" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."OPERATIONALEVENTREPLACEMENTTRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."OPERATIONALEVENTUPDATETRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."OPERATIONALEVENTUPDATETRX" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."OPERATIONALEVENTUPDATETRX" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."OPERATIONALEVENTUPDATETRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."ORDNANCE" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."ORDNANCE" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."ORDNANCE" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."ORGANIZATIONS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."ORGANIZATIONS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."ORGANIZATIONS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."ORGANIZATIONTRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."ORGANIZATIONTRX" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."ORGANIZATIONTRX" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."ORGANIZATIONTRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."PERMISSIONS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."PERMISSIONS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."PERMISSIONS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."PILOT" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."PILOT" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."PILOT" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."PILOTVIEW" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."PILOTVIEW" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."PILOTVIEW" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."POSSESSIONS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."POSSESSIONS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."POSSESSIONS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."RANGES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."RANGES" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."RANGES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."RANKS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."RANKS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."RANKS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."REMARKS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."REMARKS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."REMARKS" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."REMARKS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."REMARKS_SEQ" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."REMARKS_SEQ" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."REPORTCOLUMNS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."REPORTCOLUMNS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."REPORTCOLUMNS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."REPORTCRITERIA" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."REPORTCRITERIA" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."REPORTCRITERIA" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."REPORTPARAMETERS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."REPORTPARAMETERS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."REPORTPARAMETERS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."REPORTS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."REPORTS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."REPORTS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."REPORTSCRITERIA_SEQ" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."REPORTSCRITERIA_SEQ" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."REPORTS_SEQ" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."REPORTS_SEQ" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SCHEDULE" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SCHEDULE" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."SCHEDULE" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."SCHEDULE" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SCHEDULEDEVIATIONS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SCHEDULEDEVIATIONS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."SCHEDULEDEVIATIONS" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."SCHEDULEDEVIATIONS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SCHEDULEDEVIATIONS_SEQ" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SCHEDULEDEVIATIONS_SEQ" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SCHEDULESCSV" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SCHEDULESCSV" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."SCHEDULESCSV" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SCHEDULESTATUS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SCHEDULESTATUS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."SCHEDULESTATUS" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."SCHEDULESTATUS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SCHEDULE_STATUS_VIEW" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SCHEDULE_STATUS_VIEW" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."SCHEDULE_STATUS_VIEW" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEMEDX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEMEDX" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."SEMEDX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEMEDXDATA" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEMEDXDATA" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."SEMEDXDATA" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."SEMEDXDATA" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEMEDX_VIEW" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEMEDX_VIEW" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."SEMEDX_VIEW" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_AIRCRAFT" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_AIRCRAFT" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_AIRCRAFTEXTRACTTRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_AIRCRAFTEXTRACTTRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_AIRCRAFTMDS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_AIRCRAFTMDS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_AREAS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_AREAS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_ARMAMENT" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_ARMAMENT" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_ASSIGNMENTS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_ASSIGNMENTS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_BASEMAPS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_BASEMAPS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_BRIEFAIRCRAFTSTATUS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_BRIEFAIRCRAFTSTATUS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_BRIEFDEVIATIONS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_BRIEFDEVIATIONS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_BRIEFFLYINGSCHEDULE" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_BRIEFFLYINGSCHEDULE" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_BRIEFFLYINGSTATUS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_BRIEFFLYINGSTATUS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_BRIEFHANGARQUEEN" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_BRIEFHANGARQUEEN" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_BRIEFMICAPS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_BRIEFMICAPS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_BRIEFNEXTWEEKSPLAN" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_BRIEFNEXTWEEKSPLAN" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_BRIEFPOTHANGARQUEEN" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_BRIEFPOTHANGARQUEEN" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_BRIEFSCHEDULEOVERVIEW" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_BRIEFSCHEDULEOVERVIEW" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_BRIEFWINGSTATUS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_BRIEFWINGSTATUS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_CAUSECODES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_CAUSECODES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_CAUSECODETRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_CAUSECODETRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_CHECKLIST" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_CHECKLIST" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_COLORRULES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_COLORRULES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_COLORS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_COLORS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_COMBATSCLRULES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_COMBATSCLRULES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_COMBATSCLS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_COMBATSCLS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_CONDITIONCODES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_CONDITIONCODES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_CONDITIONSTATUS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_CONDITIONSTATUS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_CREWCHIEFS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_CREWCHIEFS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_CUSTOMDATA" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_CUSTOMDATA" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_CUSTOMDATALISTITEM" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_CUSTOMDATALISTITEM" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_DEVIATIONABORT" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_DEVIATIONABORT" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_DEVIATIONCODES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_DEVIATIONCODES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_DEVIATIONCODETRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_DEVIATIONCODETRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_DEVIATIONCORRECTION" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_DEVIATIONCORRECTION" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_DEVIATIONDELETE" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_DEVIATIONDELETE" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_DEVIATIONSTARTSTOP" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_DEVIATIONSTARTSTOP" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_EMOCAPPCONFIGURATION" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_EMOCAPPCONFIGURATION" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_EMOCCONFIG" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_EMOCCONFIG" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_EMOCHELP" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_EMOCHELP" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_EQUIPLOCATIONUPDATE" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_EQUIPLOCATIONUPDATE" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_FIELDNAMES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_FIELDNAMES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_FIRESYMBOLS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_FIRESYMBOLS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_FLIGHTS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_FLIGHTS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_FUELS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_FUELS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_GAINLOSSSTATUSUPDATE" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_GAINLOSSSTATUSUPDATE" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_GEOLOCCODETRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_GEOLOCCODETRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_HANGARQUEEN" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_HANGARQUEEN" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_ICONTROL" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_ICONTROL" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_IMDSCDBELCUNITOPTION" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_IMDSCDBELCUNITOPTION" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_IMDSCDBINTERFACEOPTION" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_IMDSCDBINTERFACEOPTION" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_IMDSLOGINS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_IMDSLOGINS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_INTERFACECONTROL" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_INTERFACECONTROL" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_INTERFACEITEMS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_INTERFACEITEMS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_INTERFACELOG" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_INTERFACELOG" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_INVENTORYSTATUSUPDATE" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_INVENTORYSTATUSUPDATE" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_JOAPS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_JOAPS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_LANDINGCODES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_LANDINGCODES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_LINKS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_LINKS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_LOCATIONCODETRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_LOCATIONCODETRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_LOCATIONS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_LOCATIONS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_MAINTENANCEEVENT" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_MAINTENANCEEVENT" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_MAJCOMS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_MAJCOMS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_MAJORCOMMANDCODETRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_MAJORCOMMANDCODETRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_MDSEQUIPMENTTRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_MDSEQUIPMENTTRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_MESSAGES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_MESSAGES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_MICAPTRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_MICAPTRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_MISSIONS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_MISSIONS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_MOCADMIN" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_MOCADMIN" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_MOCS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_MOCS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_MOCUSERS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_MOCUSERS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_OELTRANSACTIONID" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_OELTRANSACTIONID" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_OEUTRANSACTIONID" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_OEUTRANSACTIONID" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_OPEREVENTDELETE" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_OPEREVENTDELETE" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_OPEREVENTLOAD" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_OPEREVENTLOAD" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_OPEREVENTREPLACEMENT" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_OPEREVENTREPLACEMENT" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_OPEREVENTUPDATE" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_OPEREVENTUPDATE" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_ORDNANCE" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_ORDNANCE" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_ORGANIZATIONS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_ORGANIZATIONS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_ORGANIZATIONTRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_ORGANIZATIONTRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_PERMISSIONS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_PERMISSIONS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_PILOTS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_PILOTS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_POSSESSIONS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_POSSESSIONS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_RANGES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_RANGES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_RANKS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_RANKS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_REMARKS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_REMARKS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_SCHEDULE" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_SCHEDULE" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_SCHEDULECSV" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_SCHEDULECSV" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_SCHEDULEDEVIATIONS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_SCHEDULEDEVIATIONS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_SCHEDULESTATUS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_SCHEDULESTATUS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_SEMEDX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_SEMEDX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_SQUADRONS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_SQUADRONS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_STATIONLOCS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_STATIONLOCS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_STATUSCODE" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_STATUSCODE" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_STATUSCORRECTION" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_STATUSCORRECTION" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_STATUSIMAGES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_STATUSIMAGES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_STATUSRULE" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_STATUSRULE" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_STATUSUPDATE" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_STATUSUPDATE" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_STATUSUPDATETRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_STATUSUPDATETRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_SYMBOLS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_SYMBOLS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_TBMCSINTERFACELOG" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_TBMCSINTERFACELOG" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_TRANSACTIONLOG" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_TRANSACTIONLOG" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_USERALERT" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_USERALERT" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_USERIMAGES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_USERIMAGES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_USERLINKS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_USERLINKS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_USERS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_USERS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_UTILCODES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_UTILCODES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_UTILIZATIONCODETRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_UTILIZATIONCODETRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_UVRCHANGETRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_UVRCHANGETRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_WEAPONSCLASS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_WEAPONSCLASS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_WEAPONTYPES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_WEAPONTYPES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_WHENDISCCODES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_WHENDISCCODES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_WHENDISCCODETRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_WHENDISCCODETRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_WINGS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_WINGS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_WORKCENTERS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_WORKCENTERS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_WORKCENTERTRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_WORKCENTERTRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_WORKUNITCODETRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_WORKUNITCODETRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_WUCS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_WUCS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SEQ_WX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SEQ_WX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SHOPDISPATCH" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SHOPDISPATCH" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."SHOPDISPATCH" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."SHOPDISPATCH" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SMSTESTBLOB" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SMSTESTBLOB" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."SMSTESTBLOB" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SMSTESTBLOBID_SEQ" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SMSTESTBLOBID_SEQ" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SQUADRONMICAPCOUNT" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SQUADRONMICAPCOUNT" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."SQUADRONMICAPCOUNT" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SQUADRONS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SQUADRONS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."SQUADRONS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SQUADRONSORTORDERVIEW" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SQUADRONSORTORDERVIEW" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."SQUADRONSORTORDERVIEW" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SQUADRONVIEW" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SQUADRONVIEW" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."SQUADRONVIEW" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SQUADRON_SORT_ORDER" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SQUADRON_SORT_ORDER" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."SQUADRON_SORT_ORDER" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."STATIONLOCCODES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."STATIONLOCCODES" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."STATIONLOCCODES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."STATUSCODE" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."STATUSCODE" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."STATUSCODE" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."STATUSCORRECTIONTRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."STATUSCORRECTIONTRX" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."STATUSCORRECTIONTRX" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."STATUSCORRECTIONTRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."STATUSIMAGE" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."STATUSIMAGE" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."STATUSIMAGE" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."STATUSTRANSITIONRULE" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."STATUSTRANSITIONRULE" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."STATUSTRANSITIONRULE" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."STATUSTRANSITIONRULESVIEW" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."STATUSTRANSITIONRULESVIEW" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."STATUSTRANSITIONRULESVIEW" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."STATUSUPDATETRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."STATUSUPDATETRX" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."STATUSUPDATETRX" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."STATUSUPDATETRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SUPPLYINQUIRY" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SUPPLYINQUIRY" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."SUPPLYINQUIRY" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."SYMBOLS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."SYMBOLS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."SYMBOLS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."TBMCSINTERFACELOG" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."TBMCSINTERFACELOG" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."TBMCSINTERFACELOG" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."USERALERT" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."USERALERT" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."USERALERT" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."USERIMAGES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."USERIMAGES" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."USERIMAGES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."USERLINKS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."USERLINKS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."USERLINKS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."USERS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."USERS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."USERS" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."USERS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."UTILIZATIONCODES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."UTILIZATIONCODES" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."UTILIZATIONCODES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."UTILIZATIONCODETRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."UTILIZATIONCODETRX" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."UTILIZATIONCODETRX" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."UTILIZATIONCODETRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."UVRCHANGETRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."UVRCHANGETRX" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."UVRCHANGETRX" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."UVRCHANGETRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."WEAPONSCLASS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."WEAPONSCLASS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."WEAPONSCLASS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."WEAPONSINFO" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."WEAPONSINFO" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."WEAPONSINFO" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."WEAPONSLOAD" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."WEAPONSLOAD" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."WEAPONSLOAD" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."WEAPONSLOAD" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."WEAPONS_VIEW" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."WEAPONS_VIEW" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."WEAPONS_VIEW" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."WEAPONTYPES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."WEAPONTYPES" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."WEAPONTYPES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."WEBSERVERS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."WEBSERVERS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."WEBSERVERS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."WHENDISCOVEREDCODES" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."WHENDISCOVEREDCODES" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."WHENDISCOVEREDCODES" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."WHENDISCOVEREDCODETRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."WHENDISCOVEREDCODETRX" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."WHENDISCOVEREDCODETRX" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."WHENDISCOVEREDCODETRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."WINGS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."WINGS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."WINGS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."WORKCENTERS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."WORKCENTERS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."WORKCENTERS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."WORKCENTERTRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."WORKCENTERTRX" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."WORKCENTERTRX" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."WORKCENTERTRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."WORKUNITCODETRX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."WORKUNITCODETRX" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."WORKUNITCODETRX" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."WORKUNITCODETRX" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."WRITEUPS" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."WRITEUPS" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."WRITEUPS" TO "EMOC3" WITH GRANT OPTION;

GRANT SELECT ON  "EMOC3"."WRITEUPS" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."WRITEUPS_AND_MICAPS_VIEW" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."WRITEUPS_AND_MICAPS_VIEW" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."WRITEUPS_AND_MICAPS_VIEW" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."WUC" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."WUC" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."WUC" TO "EMOC_ROLE";

GRANT SELECT ON  "EMOC3"."WX" TO "APEX_READ";

GRANT SELECT ON  "EMOC3"."WX" TO "APEX_WRITE";

GRANT SELECT ON  "EMOC3"."WX" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."ACFTMDSTYPES" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."ACFTMDSTYPES" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."AIRCRAFT" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."AIRCRAFT" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."AIRCRAFTCUSTOMDATA" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."AIRCRAFTCUSTOMDATA" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."AIRCRAFTENGINEDATA" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."AIRCRAFTENGINEDATA" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."AIRCRAFTEXTRACTTRX" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."AIRCRAFTEXTRACTTRX" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."AIRCRAFTMDS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."AIRCRAFTMDS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."AIRCRAFTSTATUSUPDATE" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."AIRCRAFTSTATUSUPDATE" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."AIRCRAFTVIEW" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."AIRCRAFT_ARCHIVE_VIEW" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."AIRCRAFT_ENGINE_DATA_VIEW" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."AIRCRAFT_HISTORY_ARCHIVE_VIEW" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."AIRCRAFT_HISTORY_VIEW" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."AIRCRAFT_STATUSBOARD_VIEW" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."AIRCRAFT_STATUSUPDATE_VIEW" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."ALL_AIRCRAFT_DATA_VIEW" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."AREAS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."AREAS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."ARMAMENT" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."ARMAMENT" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."ASSIGNMENTCODES" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."ASSIGNMENTCODES" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."BASEMAPS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."BASEMAPS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."BRIEF_AIRCRAFT_STATUS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."BRIEF_AIRCRAFT_STATUS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."BRIEF_DEVIATIONS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."BRIEF_DEVIATIONS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."BRIEF_FLYING_SCHEDULE" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."BRIEF_FLYING_SCHEDULE" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."BRIEF_FLYING_STATUS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."BRIEF_FLYING_STATUS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."BRIEF_HANGAR_QUEEN" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."BRIEF_HANGAR_QUEEN" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."BRIEF_MICAPS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."BRIEF_MICAPS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."BRIEF_NEXT_WEEKS_PLAN" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."BRIEF_NEXT_WEEKS_PLAN" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."BRIEF_POT_HANGAR_QUEEN" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."BRIEF_POT_HANGAR_QUEEN" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."BRIEF_SCHEDULE_OVERVIEW" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."BRIEF_SCHEDULE_OVERVIEW" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."BRIEF_WING_STATUS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."BRIEF_WING_STATUS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."BRIEF_WING_STATUS_VIEW" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."CAUSECODES" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."CAUSECODES" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."CAUSECODETRX" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."CAUSECODETRX" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."CHANGENOTIFICATION" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."CHANGENOTIFICATION" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."CHECKLIST" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."CHECKLIST" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."COLORRULES" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."COLORRULES" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."COLORS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."COLORS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."COMBATSCLRULES" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."COMBATSCLRULES" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."COMBATSCLS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."COMBATSCLS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."CONDITIONCODES" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."CONDITIONCODES" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."CONDITIONSTATUS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."CONDITIONSTATUS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."COUNTRYCODES" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."COUNTRYCODES" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."CREWCHIEFS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."CREWCHIEFS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."CUSTOMDATA" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."CUSTOMDATA" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."CUSTOMDATALISTITEM" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."CUSTOMDATALISTITEM" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."CUSTOMDATAMDS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."CUSTOMDATAMDS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."CUSTOM_DATA_VIEW" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."DEVIATIONABORTTRX" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."DEVIATIONABORTTRX" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."DEVIATIONCODES" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."DEVIATIONCODES" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."DEVIATIONCODETRX" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."DEVIATIONCODETRX" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."DEVIATIONCODEVIEW" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."DEVIATIONCORRECTIONTRX" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."DEVIATIONCORRECTIONTRX" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."DEVIATIONDELETETRX" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."DEVIATIONDELETETRX" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."DEVIATIONSTARTSTOPTRX" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."DEVIATIONSTARTSTOPTRX" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."EMOCAPPCONFIGURATION" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."EMOCAPPCONFIGURATION" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."EMOCCONFIG" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."EMOCCONFIG" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."EMOCHELP" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."EMOCHELP" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."ENGINERUNLOG" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."ENGINERUNLOG" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."EQUIPMENTLOCATIONUPDATETRX" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."EQUIPMENTLOCATIONUPDATETRX" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."EVENTLOG" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."EVENTLOG" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."EXPORT000021" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."EXPORT000021" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."FIELDNAMES" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."FIELDNAMES" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."FILEMON" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."FILEMON" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."FIRESYMBOLS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."FIRESYMBOLS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."FLIGHTS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."FLIGHTS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."FLIGHTSVIEW" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."FLYBOARD_ARCHIVE_VIEW" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."FLYBOARD_VIEW" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."FUEL" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."FUEL" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."GAINLOSSSTATUSUPDATETRX" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."GAINLOSSSTATUSUPDATETRX" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."GENERATIONFLOW" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."GENERATIONFLOW" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."GENERATIONFLOWITEMS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."GENERATIONFLOWITEMS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."GENERATIONFLOWPROGRESS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."GENERATIONFLOWPROGRESS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."GENERATIONFLOWSTEPS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."GENERATIONFLOWSTEPS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."GEOLOCCODETRX" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."GEOLOCCODETRX" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."GLOBALCHANGENOTIFICATION" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."GLOBALCHANGENOTIFICATION" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."GRADECODES" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."GRADECODES" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."HANGER_QUEEN_CODE" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."HANGER_QUEEN_CODE" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."HISTORY" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."HISTORY" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."HOTSPOTS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."HOTSPOTS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."IMDSCDBELCUNITOPTION" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."IMDSCDBELCUNITOPTION" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."IMDSCDBINTERFACEOPTION" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."IMDSCDBINTERFACEOPTION" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."IMDSLOGINS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."IMDSLOGINS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."INTERFACECONTROL" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."INTERFACECONTROL" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."INTERFACEHISTORY" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."INTERFACEHISTORY" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."INTERFACEITEMS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."INTERFACEITEMS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."INTERFACEITEMSHISTORY" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."INTERFACEITEMSHISTORY" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."INTERFACELOG" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."INTERFACELOG" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."INTERFACEREJECTLIST" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."INTERFACEREJECTLIST" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."INVENTORYSTATUSUPDATETRX" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."INVENTORYSTATUSUPDATETRX" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."JOAP" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."JOAP" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."JOAPDATA" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."JOAPDATA" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."JOAP_VIEW" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."LANDINGCODES" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."LANDINGCODES" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."LINKS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."LINKS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."LOCATIONCODETRX" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."LOCATIONCODETRX" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."LOCATIONS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."LOCATIONS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."MAINTENANCEEVENTS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."MAINTENANCEEVENTS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."MAJCOMS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."MAJCOMS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."MAJORCOMMANDCODETRX" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."MAJORCOMMANDCODETRX" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."MDSEQUIPMENTTRX" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."MDSEQUIPMENTTRX" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."MESSAGES" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."MESSAGES" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."MICAP" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."MICAP" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."MICAPTRX" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."MICAPTRX" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."MICROSOFTDTPROPERTIES" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."MICROSOFTDTPROPERTIES" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."MISSIONS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."MISSIONS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."MOC" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."MOC" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."MOCADMINS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."MOCADMINS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."MOCSTATUSICONS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."MOCSTATUSICONS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."MOCUSERS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."MOCUSERS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."OLDPASSWORDS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."OLDPASSWORDS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."OPERATIONALEVENTDELETETRX" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."OPERATIONALEVENTDELETETRX" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."OPERATIONALEVENTLOADTRX" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."OPERATIONALEVENTLOADTRX" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."OPERATIONALEVENTREPLACEMENTTRX" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."OPERATIONALEVENTREPLACEMENTTRX" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."OPERATIONALEVENTUPDATETRX" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."OPERATIONALEVENTUPDATETRX" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."ORDNANCE" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."ORDNANCE" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."ORGANIZATIONS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."ORGANIZATIONS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."ORGANIZATIONTRX" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."ORGANIZATIONTRX" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."PERMISSIONS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."PERMISSIONS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."PILOT" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."PILOT" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."PILOTVIEW" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."POSSESSIONS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."POSSESSIONS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."RANGES" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."RANGES" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."RANKS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."RANKS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."REMARKS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."REMARKS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."REPORTCOLUMNS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."REPORTCOLUMNS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."REPORTCRITERIA" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."REPORTCRITERIA" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."REPORTPARAMETERS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."REPORTPARAMETERS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."REPORTS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."REPORTS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."SCHEDULE" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."SCHEDULE" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."SCHEDULEDEVIATIONS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."SCHEDULEDEVIATIONS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."SCHEDULESCSV" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."SCHEDULESCSV" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."SCHEDULESTATUS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."SCHEDULESTATUS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."SCHEDULE_STATUS_VIEW" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."SEMEDX" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."SEMEDX" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."SEMEDXDATA" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."SEMEDXDATA" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."SEMEDX_VIEW" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."SHOPDISPATCH" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."SHOPDISPATCH" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."SMSTESTBLOB" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."SMSTESTBLOB" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."SQUADRONMICAPCOUNT" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."SQUADRONS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."SQUADRONS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."SQUADRONSORTORDERVIEW" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."SQUADRONVIEW" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."SQUADRON_SORT_ORDER" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."SQUADRON_SORT_ORDER" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."STATIONLOCCODES" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."STATIONLOCCODES" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."STATUSCODE" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."STATUSCODE" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."STATUSCORRECTIONTRX" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."STATUSCORRECTIONTRX" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."STATUSIMAGE" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."STATUSIMAGE" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."STATUSTRANSITIONRULE" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."STATUSTRANSITIONRULE" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."STATUSTRANSITIONRULESVIEW" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."STATUSUPDATETRX" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."STATUSUPDATETRX" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."SUPPLYINQUIRY" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."SUPPLYINQUIRY" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."SYMBOLS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."SYMBOLS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."TBMCSINTERFACELOG" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."TBMCSINTERFACELOG" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."USERALERT" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."USERALERT" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."USERIMAGES" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."USERIMAGES" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."USERLINKS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."USERLINKS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."USERS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."USERS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."UTILIZATIONCODES" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."UTILIZATIONCODES" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."UTILIZATIONCODETRX" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."UTILIZATIONCODETRX" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."UVRCHANGETRX" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."UVRCHANGETRX" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."WEAPONSCLASS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."WEAPONSCLASS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."WEAPONSINFO" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."WEAPONSINFO" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."WEAPONSLOAD" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."WEAPONSLOAD" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."WEAPONS_VIEW" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."WEAPONTYPES" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."WEAPONTYPES" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."WEBSERVERS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."WEBSERVERS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."WHENDISCOVEREDCODES" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."WHENDISCOVEREDCODES" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."WHENDISCOVEREDCODETRX" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."WHENDISCOVEREDCODETRX" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."WINGS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."WINGS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."WORKCENTERS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."WORKCENTERS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."WORKCENTERTRX" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."WORKCENTERTRX" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."WORKUNITCODETRX" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."WORKUNITCODETRX" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."WRITEUPS" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."WRITEUPS" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."WRITEUPS_AND_MICAPS_VIEW" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."WUC" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."WUC" TO "EMOC_ROLE";

GRANT UPDATE ON  "EMOC3"."WX" TO "APEX_WRITE";

GRANT UPDATE ON  "EMOC3"."WX" TO "EMOC_ROLE";

COMMENT ON COLUMN "EMOC3"."AIRCRAFT"."ACFT_CONFIG_ID" IS
'AIRCRAFT CONFIGURATION ID FROM CAMS';

COMMENT ON COLUMN "EMOC3"."AIRCRAFT"."AIRCONFIGDATETIME" IS
'Date of Aircraft Configuration Needed for CAMS Screen 335';

COMMENT ON COLUMN "EMOC3"."AIRCRAFT"."ASSIGNCOMDATETIME" IS
'Date of Assignment Command Needed for CAMS Screen 335';

COMMENT ON COLUMN "EMOC3"."AIRCRAFT"."ASSIGNCOMMANDLASTUPDATED" IS
'Date Assigncommnad was last updated';

COMMENT ON COLUMN "EMOC3"."AIRCRAFT"."ASSIGNSTATDATETIME" IS
'Date of Assign Status Needed for CAMS Screen 335';

COMMENT ON COLUMN "EMOC3"."AIRCRAFT"."ASSIGNSTATUSLASTUPDATED" IS
'Date Assignmentstatus was last updated';

COMMENT ON COLUMN "EMOC3"."AIRCRAFT"."ETICDATETIME" IS
'Needed for CAMS Screen 335';

COMMENT ON COLUMN "EMOC3"."AIRCRAFT"."FUELLOAD" IS
'Quantity of fuel the plane possesses in gallons or pounds';

COMMENT ON COLUMN "EMOC3"."AIRCRAFT"."LOCALCONFIGID" IS
'This item contains the Local Configuration Id for the CAMS screen 333';

COMMENT ON COLUMN "EMOC3"."AIRCRAFT"."MDSLASTUPDATED" IS
'Date DMS was last updated';

COMMENT ON COLUMN "EMOC3"."AIRCRAFT"."PHASEUNITS" IS
'Number of phase units since last phase date. Phase units are in Hours or Days';

COMMENT ON COLUMN "EMOC3"."AIRCRAFT"."POSSDATETIME" IS
'Date of Possession Needed for CAMS Screen 335';

COMMENT ON COLUMN "EMOC3"."AIRCRAFT"."REPDESIGNDATETIME" IS
'Date of Repdesign Needed for CAMS Screen 335';

COMMENT ON COLUMN "EMOC3"."AIRCRAFT"."REPDESIGNLASTUPDATED" IS
'Date Repdesign was last updated';

COMMENT ON COLUMN "EMOC3"."AIRCRAFT"."SQUADRONLASTUPDATED" IS
'Date Squadron was last updated';

COMMENT ON COLUMN "EMOC3"."AIRCRAFTMDS"."PHASEUNIT" IS
'0=Hours, 1=Days. Unit for Timebetweenphases field';

COMMENT ON COLUMN "EMOC3"."ASSIGNMENTCODES"."ASSIGNMENTCODE" IS
'ASSIGNMENT CODE FROM CAMS';

COMMENT ON COLUMN "EMOC3"."ASSIGNMENTCODES"."ASSIGNMENTCODEID" IS
'SYSTEM ASSIGNED ID CODE';

COMMENT ON COLUMN "EMOC3"."ASSIGNMENTCODES"."ASSIGNMENTDESCRIPTION" IS
'ASSIGNMENT CODE DESCRIPTION FROM CAMS';

COMMENT ON COLUMN "EMOC3"."CHECKLIST"."CHECKLIST" IS
'Checklist Item';

COMMENT ON COLUMN "EMOC3"."CHECKLIST"."CHECKLISTID" IS
'Checklist ID';

COMMENT ON COLUMN "EMOC3"."CHECKLIST"."CHECKLISTTITLE" IS
'Checklist Title';

COMMENT ON COLUMN "EMOC3"."CHECKLIST"."DATEUPLOADED" IS
'Date the checklist was orginally uploaded';

COMMENT ON COLUMN "EMOC3"."CHECKLIST"."MIMETYPE" IS
'Mime type of the blob object';

COMMENT ON COLUMN "EMOC3"."CHECKLIST"."MOCID" IS
'FK reference to a particular MOC';

COMMENT ON COLUMN "EMOC3"."EMOCCONFIG"."ARCHIVEDOM" IS
'Day of the month for archiving data';

COMMENT ON COLUMN "EMOC3"."EMOCCONFIG"."ETICTIMER" IS
'ETIC pre-timeout notification option. default = 15 minutes prior to expiration';

COMMENT ON COLUMN "EMOC3"."EMOCCONFIG"."SMTPSERVER" IS
'The SMTP server that EMOC uses to send email messages';

COMMENT ON COLUMN "EMOC3"."EMOCCONFIG"."TBMCSEMAIL" IS
'E-Mail address fot the TBMCS_UL Interface';

COMMENT ON COLUMN "EMOC3"."EMOCCONFIG"."TBMCSTIMER" IS
'Number of minutes to wait for CAMS validation';

COMMENT ON COLUMN "EMOC3"."EVENTLOG"."EVENTNARRATIVE" IS
'Additional information about the event';

COMMENT ON COLUMN "EMOC3"."EVENTLOG"."EVENTTYPE" IS
'The checklist name or the name of the significant event being recorded';

COMMENT ON COLUMN "EMOC3"."EVENTLOG"."USERID" IS
'Foreign key to the USERS table';

COMMENT ON COLUMN "EMOC3"."FLIGHTS"."LASTUPDATEBY" IS
'FK to Users Table';

COMMENT ON COLUMN "EMOC3"."FLIGHTS"."WORKCENTERID" IS
'FK to Workcenter table';

COMMENT ON COLUMN "EMOC3"."FUEL"."ALLOWSORTIEUPDATE" IS
'Denotes whether this type of status will be updateable on the Flyboard';

COMMENT ON COLUMN "EMOC3"."FUEL"."FUELSTATUSLABEL" IS
'Label used for this status on the Flyboard display';

COMMENT ON COLUMN "EMOC3"."HANGER_QUEEN_CODE"."HQCODE" IS
'Hanger Queen Code ( PQ, C1, C2, C3, C4)';

COMMENT ON COLUMN "EMOC3"."HANGER_QUEEN_CODE"."HQDEFAULT" IS
'Default Hanger Queen Code (1 = YES, 0 = NO)';

COMMENT ON COLUMN "EMOC3"."HANGER_QUEEN_CODE"."HQLEVEL" IS
'Hanger Queen Code Level (Rank 1, 2, 3, 4 etc)';

COMMENT ON COLUMN "EMOC3"."HISTORY"."ELEMENT" IS
'This field contains the element (database field name) that was modified by the updater';

COMMENT ON COLUMN "EMOC3"."HISTORY"."TRANSACTIONID" IS
'This field contains the CAMS transaction id if the data item was sent to CAMS.';

COMMENT ON COLUMN "EMOC3"."INTERFACELOG"."AIRCRAFTID" IS
'Foreign key to Aircraft table';

COMMENT ON COLUMN "EMOC3"."INTERFACELOG"."PARSED" IS
'Used as a flag to denote whether or not this transaction was parsed for possible insertion into the EMOC database';

COMMENT ON COLUMN "EMOC3"."INTERFACELOG"."SQUADRONID" IS
'Used to relate schedule info returned to a squadron';

COMMENT ON COLUMN "EMOC3"."LOCATIONS"."LASTUPDATE" IS
'Date record last updated';

COMMENT ON COLUMN "EMOC3"."MAJCOMS"."COMCODE" IS
'Command Code';

COMMENT ON COLUMN "EMOC3"."MAJCOMS"."MAJCOM" IS
'MAJOR COMMAND CODE FROM CAMS';

COMMENT ON COLUMN "EMOC3"."MAJCOMS"."MAJCOMID" IS
'SYSTEM ASSIGNED ID CODE';

COMMENT ON COLUMN "EMOC3"."MAJCOMS"."MAJCOMNARRATIVE" IS
'MAJOR COMMAND NARRATIVE FROM CAMS';

COMMENT ON COLUMN "EMOC3"."PILOT"."PILOTFIRSTNAME" IS
'Pilots first name';

COMMENT ON COLUMN "EMOC3"."PILOT"."PILOTMIDINIT" IS
'Pilots middle initial';

COMMENT ON COLUMN "EMOC3"."PILOT"."PILOTNAME" IS
'Pilots last name';

COMMENT ON COLUMN "EMOC3"."REMARKS"."REMARKS" IS
'USED TO CONTAIN REMARKS FOR AIRCRAFT, SCHEDULE AND SCHEDULEDEVIATIONS';

COMMENT ON COLUMN "EMOC3"."REMARKS"."REMARKSID" IS
'Sequential system generated ID number. (Primary key)';

COMMENT ON COLUMN "EMOC3"."REPORTS"."REPORTID" IS
'New Table PK';

COMMENT ON COLUMN "EMOC3"."SCHEDULE"."SCHEDULESOURCE" IS
'source of the schedule input, from CAMS 341, 174, or Excel';

COMMENT ON COLUMN "EMOC3"."SCHEDULE"."SQUADRONID" IS
'Foreign key to Squadron table';

COMMENT ON COLUMN "EMOC3"."SCHEDULE"."TYPE_EVENT" IS
'Used to save the event when a line is loaded';

COMMENT ON COLUMN "EMOC3"."SCHEDULE"."UTILCODEID" IS
'FOREIGN KEY TO UTILIZATIONCODES TABLE';

COMMENT ON COLUMN "EMOC3"."SCHEDULESTATUS"."SCHEDULEID" IS
'Foreign key to SCHEDULE table';

COMMENT ON COLUMN "EMOC3"."SCHEDULESTATUS"."SCHEDULESTATUSID" IS
'Used to store the status of a Schedule Line';

COMMENT ON COLUMN "EMOC3"."SCHEDULESTATUS"."STATUSCODEID" IS
'Foreign key to STATUSCODE table';

COMMENT ON COLUMN "EMOC3"."SCHEDULESTATUS"."STATUSTIME" IS
'Time that the status was update';

COMMENT ON COLUMN "EMOC3"."SCHEDULESTATUS"."STATUSTYPE" IS
'Denotes whether the status is a Mission Status (0) or Fuel Status (1)';

COMMENT ON COLUMN "EMOC3"."SCHEDULESTATUS"."USERID" IS
'Foreign key to USERS table';

COMMENT ON COLUMN "EMOC3"."SEMEDX"."SEMEDX" IS
'Valid values [A - Z]';

COMMENT ON COLUMN "EMOC3"."SEMEDX"."SEMEDXDESCRIPTION" IS
' SEM/EXD code description';

COMMENT ON COLUMN "EMOC3"."SQUADRONS"."CAMSINIT" IS
'Date record was created during CAMS XML Import (CAMS Initialization)';

COMMENT ON COLUMN "EMOC3"."SQUADRONS"."ORGANIZATION_ID" IS
'Organization_Id code from CAMS Initialization Import';

COMMENT ON COLUMN "EMOC3"."SQUADRONS"."SLC" IS
'Station_Location_Code';

COMMENT ON COLUMN "EMOC3"."STATIONLOCCODES"."STALOCCODEID" IS
'SYSTEM ASSIGNED ID CODE';

COMMENT ON COLUMN "EMOC3"."STATIONLOCCODES"."STALOCNARRATIVE" IS
'AIRCRAFT STATION LOCATION CODE DESCRIPTION FROM CAMS';

COMMENT ON COLUMN "EMOC3"."STATIONLOCCODES"."STATIONLOC" IS
'AIRCRAFT STATION LOCATION CODE FROM CAMS';

COMMENT ON COLUMN "EMOC3"."STATUSCODE"."ALLOWSORTIEUPDATE" IS
'Denotes whether this type of status will be updateable on the Flyboard';

COMMENT ON COLUMN "EMOC3"."STATUSCODE"."STATUSCODELABEL" IS
'Label used for this status on the Flyboard display';

COMMENT ON COLUMN "EMOC3"."STATUSCORRECTIONTRX"."APPLICATIONNOTE" IS
'result of transaction processing by EMOC application';

COMMENT ON COLUMN "EMOC3"."STATUSCORRECTIONTRX"."DATEPROCESSED" IS
'system date and time transaction processed by EMOC';

COMMENT ON COLUMN "EMOC3"."STATUSCORRECTIONTRX"."RECORDDATETIME" IS
'system date and time when record was inserted';

COMMENT ON COLUMN "EMOC3"."USERIMAGES"."DATEUPLOADED" IS
'Date the image was uploaded';

COMMENT ON COLUMN "EMOC3"."USERIMAGES"."IMAGE" IS
'Image';

COMMENT ON COLUMN "EMOC3"."USERIMAGES"."IMAGEID" IS
'Image ID';

COMMENT ON COLUMN "EMOC3"."USERIMAGES"."USERID" IS
'The User ID the image belongs to';

COMMENT ON COLUMN "EMOC3"."USERS"."AIRCRAFTSORTORDER2" IS
'This fields control the way aircraft are displayed on the Aircraft Status Board';

COMMENT ON COLUMN "EMOC3"."USERS"."AIRCRAFTSORTORDER3" IS
'This fields control the way aircraft are displayed on the Aircraft Status Board';

COMMENT ON COLUMN "EMOC3"."USERS"."USERSTATUS" IS
'Valid values is New, Approved, Cancelled';

COMMENT ON COLUMN "EMOC3"."UTILIZATIONCODES"."AUCNARRATIVE" IS
'AIRCRAFT UTILIZATION CODE DESCRIPTION FROM CAMS';

COMMENT ON COLUMN "EMOC3"."UTILIZATIONCODES"."CAMSINIT" IS
'DATE WHEN DATA WAS INITIALIZED BY CAMS';

COMMENT ON COLUMN "EMOC3"."UTILIZATIONCODES"."LASTUPDATE" IS
'Date record last updated';

COMMENT ON COLUMN "EMOC3"."UTILIZATIONCODES"."PROGRAMELEMENTCODE" IS
'PROGRAM ELEMENT CODE FROM CAMS';

COMMENT ON COLUMN "EMOC3"."UTILIZATIONCODES"."UTILCODEID" IS
'SYSTEM ASSIGNED ID CODE';

COMMENT ON COLUMN "EMOC3"."UTILIZATIONCODES"."UTILIZATIONCODE" IS
'AIRCRAFT UTILIZATION CODE FROM CAMS';

COMMENT ON COLUMN "EMOC3"."WEBSERVERS"."SERVERID" IS
'ID';

COMMENT ON COLUMN "EMOC3"."WEBSERVERS"."SERVERNAME" IS
'Name of the server';

COMMENT ON COLUMN "EMOC3"."WEBSERVERS"."SERVERURL" IS
'URL address of the server';

COMMENT ON COLUMN "EMOC3"."WHENDISCOVEREDCODES"."LASTUPDATE" IS
'Date record last updated';

COMMENT ON COLUMN "EMOC3"."WINGS"."ELC" IS
'Enterprise_Location_Code';

COMMENT ON COLUMN "EMOC3"."WORKCENTERS"."PORGID" IS
'PARENT ORGANIZATION ORG-ID FrOM CAMS';

COMMENT ON COLUMN "EMOC3"."WORKCENTERS"."WORKCENTERID" IS
'WORKCENTER ID NUMBER FROM CAMS';

COMMENT ON COLUMN "EMOC3"."WORKCENTERS"."WORKCENTERNAME" IS
'WORKCENTER NAME FROM CAMS';

COMMENT ON TABLE "EMOC3"."CHECKLIST" IS
'Hold the checklist specific to a given MOC';

COMMENT ON TABLE "EMOC3"."REMARKS" IS
'This object contains information on Aircraft, Schedule and Scheduledeviations  remarks';

COMMENT ON TABLE "EMOC3"."SCHEDULESTATUS" IS
'Unique identifier of table';

COMMENT ON TABLE "EMOC3"."USERIMAGES" IS
'Contains images specific to users';

